/******/ (function (modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if (installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
      /******/
    }
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
      /******/
    };
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
    /******/
  }
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function (exports, name, getter) {
/******/ 		if (!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
      /******/
    }
    /******/
  };
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function (exports) {
/******/ 		if (typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
      /******/
    }
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
    /******/
  };
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function (value, mode) {
/******/ 		if (mode & 1) value = __webpack_require__(value);
/******/ 		if (mode & 8) return value;
/******/ 		if ((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if (mode & 2 && typeof value != 'string') for (var key in value) __webpack_require__.d(ns, key, function (key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
    /******/
  };
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function (module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
    /******/
  };
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function (object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/index.js");
  /******/
})
/************************************************************************/
/******/({

/***/ "../../../../../AppData/Roaming/npm/node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function (module, exports) {

      var g;

      // This works in non-strict mode
      g = (function () {
        return this;
      })();

      try {
        // This works if eval is allowed (see CSP)
        g = g || Function("return this")() || (1, eval)("this");
      } catch (e) {
        // This works if the window reference is available
        if (typeof window === "object") g = window;
      }

      // g can still be undefined, but nothing to do about it...
      // We return undefined, instead of nothing here, so it's
      // easier to handle this case. if(!global) { ...}

      module.exports = g;


      /***/
    }),

/***/ "../../../../../AppData/Roaming/npm/node_modules/webpack/buildin/module.js":
/*!***********************************!*\
  !*** (webpack)/buildin/module.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function (module, exports) {

      module.exports = function (module) {
        if (!module.webpackPolyfill) {
          module.deprecate = function () { };
          module.paths = [];
          // module.parent = undefined by default
          if (!module.children) module.children = [];
          Object.defineProperty(module, "loaded", {
            enumerable: true,
            get: function () {
              return module.l;
            }
          });
          Object.defineProperty(module, "id", {
            enumerable: true,
            get: function () {
              return module.i;
            }
          });
          module.webpackPolyfill = 1;
        }
        return module;
      };


      /***/
    }),

/***/ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/asn1.js/lib/asn1.js":
/*!**************************************************!*\
  !*** (webpack)/node_modules/asn1.js/lib/asn1.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

      var asn1 = exports;

      asn1.bignum = __webpack_require__(/*! bn.js */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/bn.js/lib/bn.js");

      asn1.define = __webpack_require__(/*! ./asn1/api */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/asn1.js/lib/asn1/api.js").define;
      asn1.base = __webpack_require__(/*! ./asn1/base */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/asn1.js/lib/asn1/base/index.js");
      asn1.constants = __webpack_require__(/*! ./asn1/constants */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/asn1.js/lib/asn1/constants/index.js");
      asn1.decoders = __webpack_require__(/*! ./asn1/decoders */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/asn1.js/lib/asn1/decoders/index.js");
      asn1.encoders = __webpack_require__(/*! ./asn1/encoders */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/asn1.js/lib/asn1/encoders/index.js");


      /***/
    }),

/***/ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/asn1.js/lib/asn1/api.js":
/*!******************************************************!*\
  !*** (webpack)/node_modules/asn1.js/lib/asn1/api.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

      var asn1 = __webpack_require__(/*! ../asn1 */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/asn1.js/lib/asn1.js");
      var inherits = __webpack_require__(/*! inherits */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/inherits/inherits_browser.js");

      var api = exports;

      api.define = function define(name, body) {
        return new Entity(name, body);
      };

      function Entity(name, body) {
        this.name = name;
        this.body = body;

        this.decoders = {};
        this.encoders = {};
      };

      Entity.prototype._createNamed = function createNamed(base) {
        var named;
        try {
          named = __webpack_require__(/*! vm */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/vm-browserify/index.js").runInThisContext(
            '(function ' + this.name + '(entity) {\n' +
            '  this._initNamed(entity);\n' +
            '})'
          );
        } catch (e) {
          named = function (entity) {
            this._initNamed(entity);
          };
        }
        inherits(named, base);
        named.prototype._initNamed = function initnamed(entity) {
          base.call(this, entity);
        };

        return new named(this);
      };

      Entity.prototype._getDecoder = function _getDecoder(enc) {
        enc = enc || 'der';
        // Lazily create decoder
        if (!this.decoders.hasOwnProperty(enc))
          this.decoders[enc] = this._createNamed(asn1.decoders[enc]);
        return this.decoders[enc];
      };

      Entity.prototype.decode = function decode(data, enc, options) {
        return this._getDecoder(enc).decode(data, options);
      };

      Entity.prototype._getEncoder = function _getEncoder(enc) {
        enc = enc || 'der';
        // Lazily create encoder
        if (!this.encoders.hasOwnProperty(enc))
          this.encoders[enc] = this._createNamed(asn1.encoders[enc]);
        return this.encoders[enc];
      };

      Entity.prototype.encode = function encode(data, enc, /* internal */ reporter) {
        return this._getEncoder(enc).encode(data, reporter);
      };


      /***/
    }),

/***/ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/asn1.js/lib/asn1/base/buffer.js":
/*!**************************************************************!*\
  !*** (webpack)/node_modules/asn1.js/lib/asn1/base/buffer.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

      var inherits = __webpack_require__(/*! inherits */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/inherits/inherits_browser.js");
      var Reporter = __webpack_require__(/*! ../base */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/asn1.js/lib/asn1/base/index.js").Reporter;
      var Buffer = __webpack_require__(/*! buffer */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/buffer/index.js").Buffer;

      function DecoderBuffer(base, options) {
        Reporter.call(this, options);
        if (!Buffer.isBuffer(base)) {
          this.error('Input not Buffer');
          return;
        }

        this.base = base;
        this.offset = 0;
        this.length = base.length;
      }
      inherits(DecoderBuffer, Reporter);
      exports.DecoderBuffer = DecoderBuffer;

      DecoderBuffer.prototype.save = function save() {
        return { offset: this.offset, reporter: Reporter.prototype.save.call(this) };
      };

      DecoderBuffer.prototype.restore = function restore(save) {
        // Return skipped data
        var res = new DecoderBuffer(this.base);
        res.offset = save.offset;
        res.length = this.offset;

        this.offset = save.offset;
        Reporter.prototype.restore.call(this, save.reporter);

        return res;
      };

      DecoderBuffer.prototype.isEmpty = function isEmpty() {
        return this.offset === this.length;
      };

      DecoderBuffer.prototype.readUInt8 = function readUInt8(fail) {
        if (this.offset + 1 <= this.length)
          return this.base.readUInt8(this.offset++, true);
        else
          return this.error(fail || 'DecoderBuffer overrun');
      }

      DecoderBuffer.prototype.skip = function skip(bytes, fail) {
        if (!(this.offset + bytes <= this.length))
          return this.error(fail || 'DecoderBuffer overrun');

        var res = new DecoderBuffer(this.base);

        // Share reporter state
        res._reporterState = this._reporterState;

        res.offset = this.offset;
        res.length = this.offset + bytes;
        this.offset += bytes;
        return res;
      }

      DecoderBuffer.prototype.raw = function raw(save) {
        return this.base.slice(save ? save.offset : this.offset, this.length);
      }

      function EncoderBuffer(value, reporter) {
        if (Array.isArray(value)) {
          this.length = 0;
          this.value = value.map(function (item) {
            if (!(item instanceof EncoderBuffer))
              item = new EncoderBuffer(item, reporter);
            this.length += item.length;
            return item;
          }, this);
        } else if (typeof value === 'number') {
          if (!(0 <= value && value <= 0xff))
            return reporter.error('non-byte EncoderBuffer value');
          this.value = value;
          this.length = 1;
        } else if (typeof value === 'string') {
          this.value = value;
          this.length = Buffer.byteLength(value);
        } else if (Buffer.isBuffer(value)) {
          this.value = value;
          this.length = value.length;
        } else {
          return reporter.error('Unsupported type: ' + typeof value);
        }
      }
      exports.EncoderBuffer = EncoderBuffer;

      EncoderBuffer.prototype.join = function join(out, offset) {
        if (!out)
          out = new Buffer(this.length);
        if (!offset)
          offset = 0;

        if (this.length === 0)
          return out;

        if (Array.isArray(this.value)) {
          this.value.forEach(function (item) {
            item.join(out, offset);
            offset += item.length;
          });
        } else {
          if (typeof this.value === 'number')
            out[offset] = this.value;
          else if (typeof this.value === 'string')
            out.write(this.value, offset);
          else if (Buffer.isBuffer(this.value))
            this.value.copy(out, offset);
          offset += this.length;
        }

        return out;
      };


      /***/
    }),

/***/ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/asn1.js/lib/asn1/base/index.js":
/*!*************************************************************!*\
  !*** (webpack)/node_modules/asn1.js/lib/asn1/base/index.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

      var base = exports;

      base.Reporter = __webpack_require__(/*! ./reporter */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/asn1.js/lib/asn1/base/reporter.js").Reporter;
      base.DecoderBuffer = __webpack_require__(/*! ./buffer */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/asn1.js/lib/asn1/base/buffer.js").DecoderBuffer;
      base.EncoderBuffer = __webpack_require__(/*! ./buffer */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/asn1.js/lib/asn1/base/buffer.js").EncoderBuffer;
      base.Node = __webpack_require__(/*! ./node */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/asn1.js/lib/asn1/base/node.js");


      /***/
    }),

/***/ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/asn1.js/lib/asn1/base/node.js":
/*!************************************************************!*\
  !*** (webpack)/node_modules/asn1.js/lib/asn1/base/node.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

      var Reporter = __webpack_require__(/*! ../base */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/asn1.js/lib/asn1/base/index.js").Reporter;
      var EncoderBuffer = __webpack_require__(/*! ../base */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/asn1.js/lib/asn1/base/index.js").EncoderBuffer;
      var DecoderBuffer = __webpack_require__(/*! ../base */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/asn1.js/lib/asn1/base/index.js").DecoderBuffer;
      var assert = __webpack_require__(/*! minimalistic-assert */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/minimalistic-assert/index.js");

      // Supported tags
      var tags = [
        'seq', 'seqof', 'set', 'setof', 'objid', 'bool',
        'gentime', 'utctime', 'null_', 'enum', 'int', 'objDesc',
        'bitstr', 'bmpstr', 'charstr', 'genstr', 'graphstr', 'ia5str', 'iso646str',
        'numstr', 'octstr', 'printstr', 't61str', 'unistr', 'utf8str', 'videostr'
      ];

      // Public methods list
      var methods = [
        'key', 'obj', 'use', 'optional', 'explicit', 'implicit', 'def', 'choice',
        'any', 'contains'
      ].concat(tags);

      // Overrided methods list
      var overrided = [
        '_peekTag', '_decodeTag', '_use',
        '_decodeStr', '_decodeObjid', '_decodeTime',
        '_decodeNull', '_decodeInt', '_decodeBool', '_decodeList',

        '_encodeComposite', '_encodeStr', '_encodeObjid', '_encodeTime',
        '_encodeNull', '_encodeInt', '_encodeBool'
      ];

      function Node(enc, parent) {
        var state = {};
        this._baseState = state;

        state.enc = enc;

        state.parent = parent || null;
        state.children = null;

        // State
        state.tag = null;
        state.args = null;
        state.reverseArgs = null;
        state.choice = null;
        state.optional = false;
        state.any = false;
        state.obj = false;
        state.use = null;
        state.useDecoder = null;
        state.key = null;
        state['default'] = null;
        state.explicit = null;
        state.implicit = null;
        state.contains = null;

        // Should create new instance on each method
        if (!state.parent) {
          state.children = [];
          this._wrap();
        }
      }
      module.exports = Node;

      var stateProps = [
        'enc', 'parent', 'children', 'tag', 'args', 'reverseArgs', 'choice',
        'optional', 'any', 'obj', 'use', 'alteredUse', 'key', 'default', 'explicit',
        'implicit', 'contains'
      ];

      Node.prototype.clone = function clone() {
        var state = this._baseState;
        var cstate = {};
        stateProps.forEach(function (prop) {
          cstate[prop] = state[prop];
        });
        var res = new this.constructor(cstate.parent);
        res._baseState = cstate;
        return res;
      };

      Node.prototype._wrap = function wrap() {
        var state = this._baseState;
        methods.forEach(function (method) {
          this[method] = function _wrappedMethod() {
            var clone = new this.constructor(this);
            state.children.push(clone);
            return clone[method].apply(clone, arguments);
          };
        }, this);
      };

      Node.prototype._init = function init(body) {
        var state = this._baseState;

        assert(state.parent === null);
        body.call(this);

        // Filter children
        state.children = state.children.filter(function (child) {
          return child._baseState.parent === this;
        }, this);
        assert.equal(state.children.length, 1, 'Root node can have only one child');
      };

      Node.prototype._useArgs = function useArgs(args) {
        var state = this._baseState;

        // Filter children and args
        var children = args.filter(function (arg) {
          return arg instanceof this.constructor;
        }, this);
        args = args.filter(function (arg) {
          return !(arg instanceof this.constructor);
        }, this);

        if (children.length !== 0) {
          assert(state.children === null);
          state.children = children;

          // Replace parent to maintain backward link
          children.forEach(function (child) {
            child._baseState.parent = this;
          }, this);
        }
        if (args.length !== 0) {
          assert(state.args === null);
          state.args = args;
          state.reverseArgs = args.map(function (arg) {
            if (typeof arg !== 'object' || arg.constructor !== Object)
              return arg;

            var res = {};
            Object.keys(arg).forEach(function (key) {
              if (key == (key | 0))
                key |= 0;
              var value = arg[key];
              res[value] = key;
            });
            return res;
          });
        }
      };

      //
      // Overrided methods
      //

      overrided.forEach(function (method) {
        Node.prototype[method] = function _overrided() {
          var state = this._baseState;
          throw new Error(method + ' not implemented for encoding: ' + state.enc);
        };
      });

      //
      // Public methods
      //

      tags.forEach(function (tag) {
        Node.prototype[tag] = function _tagMethod() {
          var state = this._baseState;
          var args = Array.prototype.slice.call(arguments);

          assert(state.tag === null);
          state.tag = tag;

          this._useArgs(args);

          return this;
        };
      });

      Node.prototype.use = function use(item) {
        assert(item);
        var state = this._baseState;

        assert(state.use === null);
        state.use = item;

        return this;
      };

      Node.prototype.optional = function optional() {
        var state = this._baseState;

        state.optional = true;

        return this;
      };

      Node.prototype.def = function def(val) {
        var state = this._baseState;

        assert(state['default'] === null);
        state['default'] = val;
        state.optional = true;

        return this;
      };

      Node.prototype.explicit = function explicit(num) {
        var state = this._baseState;

        assert(state.explicit === null && state.implicit === null);
        state.explicit = num;

        return this;
      };

      Node.prototype.implicit = function implicit(num) {
        var state = this._baseState;

        assert(state.explicit === null && state.implicit === null);
        state.implicit = num;

        return this;
      };

      Node.prototype.obj = function obj() {
        var state = this._baseState;
        var args = Array.prototype.slice.call(arguments);

        state.obj = true;

        if (args.length !== 0)
          this._useArgs(args);

        return this;
      };

      Node.prototype.key = function key(newKey) {
        var state = this._baseState;

        assert(state.key === null);
        state.key = newKey;

        return this;
      };

      Node.prototype.any = function any() {
        var state = this._baseState;

        state.any = true;

        return this;
      };

      Node.prototype.choice = function choice(obj) {
        var state = this._baseState;

        assert(state.choice === null);
        state.choice = obj;
        this._useArgs(Object.keys(obj).map(function (key) {
          return obj[key];
        }));

        return this;
      };

      Node.prototype.contains = function contains(item) {
        var state = this._baseState;

        assert(state.use === null);
        state.contains = item;

        return this;
      };

      //
      // Decoding
      //

      Node.prototype._decode = function decode(input, options) {
        var state = this._baseState;

        // Decode root node
        if (state.parent === null)
          return input.wrapResult(state.children[0]._decode(input, options));

        var result = state['default'];
        var present = true;

        var prevKey = null;
        if (state.key !== null)
          prevKey = input.enterKey(state.key);

        // Check if tag is there
        if (state.optional) {
          var tag = null;
          if (state.explicit !== null)
            tag = state.explicit;
          else if (state.implicit !== null)
            tag = state.implicit;
          else if (state.tag !== null)
            tag = state.tag;

          if (tag === null && !state.any) {
            // Trial and Error
            var save = input.save();
            try {
              if (state.choice === null)
                this._decodeGeneric(state.tag, input, options);
              else
                this._decodeChoice(input, options);
              present = true;
            } catch (e) {
              present = false;
            }
            input.restore(save);
          } else {
            present = this._peekTag(input, tag, state.any);

            if (input.isError(present))
              return present;
          }
        }

        // Push object on stack
        var prevObj;
        if (state.obj && present)
          prevObj = input.enterObject();

        if (present) {
          // Unwrap explicit values
          if (state.explicit !== null) {
            var explicit = this._decodeTag(input, state.explicit);
            if (input.isError(explicit))
              return explicit;
            input = explicit;
          }

          var start = input.offset;

          // Unwrap implicit and normal values
          if (state.use === null && state.choice === null) {
            if (state.any)
              var save = input.save();
            var body = this._decodeTag(
              input,
              state.implicit !== null ? state.implicit : state.tag,
              state.any
            );
            if (input.isError(body))
              return body;

            if (state.any)
              result = input.raw(save);
            else
              input = body;
          }

          if (options && options.track && state.tag !== null)
            options.track(input.path(), start, input.length, 'tagged');

          if (options && options.track && state.tag !== null)
            options.track(input.path(), input.offset, input.length, 'content');

          // Select proper method for tag
          if (state.any)
            result = result;
          else if (state.choice === null)
            result = this._decodeGeneric(state.tag, input, options);
          else
            result = this._decodeChoice(input, options);

          if (input.isError(result))
            return result;

          // Decode children
          if (!state.any && state.choice === null && state.children !== null) {
            state.children.forEach(function decodeChildren(child) {
              // NOTE: We are ignoring errors here, to let parser continue with other
              // parts of encoded data
              child._decode(input, options);
            });
          }

          // Decode contained/encoded by schema, only in bit or octet strings
          if (state.contains && (state.tag === 'octstr' || state.tag === 'bitstr')) {
            var data = new DecoderBuffer(result);
            result = this._getUse(state.contains, input._reporterState.obj)
              ._decode(data, options);
          }
        }

        // Pop object
        if (state.obj && present)
          result = input.leaveObject(prevObj);

        // Set key
        if (state.key !== null && (result !== null || present === true))
          input.leaveKey(prevKey, state.key, result);
        else if (prevKey !== null)
          input.exitKey(prevKey);

        return result;
      };

      Node.prototype._decodeGeneric = function decodeGeneric(tag, input, options) {
        var state = this._baseState;

        if (tag === 'seq' || tag === 'set')
          return null;
        if (tag === 'seqof' || tag === 'setof')
          return this._decodeList(input, tag, state.args[0], options);
        else if (/str$/.test(tag))
          return this._decodeStr(input, tag, options);
        else if (tag === 'objid' && state.args)
          return this._decodeObjid(input, state.args[0], state.args[1], options);
        else if (tag === 'objid')
          return this._decodeObjid(input, null, null, options);
        else if (tag === 'gentime' || tag === 'utctime')
          return this._decodeTime(input, tag, options);
        else if (tag === 'null_')
          return this._decodeNull(input, options);
        else if (tag === 'bool')
          return this._decodeBool(input, options);
        else if (tag === 'objDesc')
          return this._decodeStr(input, tag, options);
        else if (tag === 'int' || tag === 'enum')
          return this._decodeInt(input, state.args && state.args[0], options);

        if (state.use !== null) {
          return this._getUse(state.use, input._reporterState.obj)
            ._decode(input, options);
        } else {
          return input.error('unknown tag: ' + tag);
        }
      };

      Node.prototype._getUse = function _getUse(entity, obj) {

        var state = this._baseState;
        // Create altered use decoder if implicit is set
        state.useDecoder = this._use(entity, obj);
        assert(state.useDecoder._baseState.parent === null);
        state.useDecoder = state.useDecoder._baseState.children[0];
        if (state.implicit !== state.useDecoder._baseState.implicit) {
          state.useDecoder = state.useDecoder.clone();
          state.useDecoder._baseState.implicit = state.implicit;
        }
        return state.useDecoder;
      };

      Node.prototype._decodeChoice = function decodeChoice(input, options) {
        var state = this._baseState;
        var result = null;
        var match = false;

        Object.keys(state.choice).some(function (key) {
          var save = input.save();
          var node = state.choice[key];
          try {
            var value = node._decode(input, options);
            if (input.isError(value))
              return false;

            result = { type: key, value: value };
            match = true;
          } catch (e) {
            input.restore(save);
            return false;
          }
          return true;
        }, this);

        if (!match)
          return input.error('Choice not matched');

        return result;
      };

      //
      // Encoding
      //

      Node.prototype._createEncoderBuffer = function createEncoderBuffer(data) {
        return new EncoderBuffer(data, this.reporter);
      };

      Node.prototype._encode = function encode(data, reporter, parent) {
        var state = this._baseState;
        if (state['default'] !== null && state['default'] === data)
          return;

        var result = this._encodeValue(data, reporter, parent);
        if (result === undefined)
          return;

        if (this._skipDefault(result, reporter, parent))
          return;

        return result;
      };

      Node.prototype._encodeValue = function encode(data, reporter, parent) {
        var state = this._baseState;

        // Decode root node
        if (state.parent === null)
          return state.children[0]._encode(data, reporter || new Reporter());

        var result = null;

        // Set reporter to share it with a child class
        this.reporter = reporter;

        // Check if data is there
        if (state.optional && data === undefined) {
          if (state['default'] !== null)
            data = state['default']
          else
            return;
        }

        // Encode children first
        var content = null;
        var primitive = false;
        if (state.any) {
          // Anything that was given is translated to buffer
          result = this._createEncoderBuffer(data);
        } else if (state.choice) {
          result = this._encodeChoice(data, reporter);
        } else if (state.contains) {
          content = this._getUse(state.contains, parent)._encode(data, reporter);
          primitive = true;
        } else if (state.children) {
          content = state.children.map(function (child) {
            if (child._baseState.tag === 'null_')
              return child._encode(null, reporter, data);

            if (child._baseState.key === null)
              return reporter.error('Child should have a key');
            var prevKey = reporter.enterKey(child._baseState.key);

            if (typeof data !== 'object')
              return reporter.error('Child expected, but input is not object');

            var res = child._encode(data[child._baseState.key], reporter, data);
            reporter.leaveKey(prevKey);

            return res;
          }, this).filter(function (child) {
            return child;
          });
          content = this._createEncoderBuffer(content);
        } else {
          if (state.tag === 'seqof' || state.tag === 'setof') {
            // TODO(indutny): this should be thrown on DSL level
            if (!(state.args && state.args.length === 1))
              return reporter.error('Too many args for : ' + state.tag);

            if (!Array.isArray(data))
              return reporter.error('seqof/setof, but data is not Array');

            var child = this.clone();
            child._baseState.implicit = null;
            content = this._createEncoderBuffer(data.map(function (item) {
              var state = this._baseState;

              return this._getUse(state.args[0], data)._encode(item, reporter);
            }, child));
          } else if (state.use !== null) {
            result = this._getUse(state.use, parent)._encode(data, reporter);
          } else {
            content = this._encodePrimitive(state.tag, data);
            primitive = true;
          }
        }

        // Encode data itself
        var result;
        if (!state.any && state.choice === null) {
          var tag = state.implicit !== null ? state.implicit : state.tag;
          var cls = state.implicit === null ? 'universal' : 'context';

          if (tag === null) {
            if (state.use === null)
              reporter.error('Tag could be omitted only for .use()');
          } else {
            if (state.use === null)
              result = this._encodeComposite(tag, primitive, cls, content);
          }
        }

        // Wrap in explicit
        if (state.explicit !== null)
          result = this._encodeComposite(state.explicit, false, 'context', result);

        return result;
      };

      Node.prototype._encodeChoice = function encodeChoice(data, reporter) {
        var state = this._baseState;

        var node = state.choice[data.type];
        if (!node) {
          assert(
            false,
            data.type + ' not found in ' +
            JSON.stringify(Object.keys(state.choice)));
        }
        return node._encode(data.value, reporter);
      };

      Node.prototype._encodePrimitive = function encodePrimitive(tag, data) {
        var state = this._baseState;

        if (/str$/.test(tag))
          return this._encodeStr(data, tag);
        else if (tag === 'objid' && state.args)
          return this._encodeObjid(data, state.reverseArgs[0], state.args[1]);
        else if (tag === 'objid')
          return this._encodeObjid(data, null, null);
        else if (tag === 'gentime' || tag === 'utctime')
          return this._encodeTime(data, tag);
        else if (tag === 'null_')
          return this._encodeNull();
        else if (tag === 'int' || tag === 'enum')
          return this._encodeInt(data, state.args && state.reverseArgs[0]);
        else if (tag === 'bool')
          return this._encodeBool(data);
        else if (tag === 'objDesc')
          return this._encodeStr(data, tag);
        else
          throw new Error('Unsupported tag: ' + tag);
      };

      Node.prototype._isNumstr = function isNumstr(str) {
        return /^[0-9 ]*$/.test(str);
      };

      Node.prototype._isPrintstr = function isPrintstr(str) {
        return /^[A-Za-z0-9 '\(\)\+,\-\.\/:=\?]*$/.test(str);
      };


      /***/
    }),

/***/ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/asn1.js/lib/asn1/base/reporter.js":
/*!****************************************************************!*\
  !*** (webpack)/node_modules/asn1.js/lib/asn1/base/reporter.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

      var inherits = __webpack_require__(/*! inherits */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/inherits/inherits_browser.js");

      function Reporter(options) {
        this._reporterState = {
          obj: null,
          path: [],
          options: options || {},
          errors: []
        };
      }
      exports.Reporter = Reporter;

      Reporter.prototype.isError = function isError(obj) {
        return obj instanceof ReporterError;
      };

      Reporter.prototype.save = function save() {
        var state = this._reporterState;

        return { obj: state.obj, pathLen: state.path.length };
      };

      Reporter.prototype.restore = function restore(data) {
        var state = this._reporterState;

        state.obj = data.obj;
        state.path = state.path.slice(0, data.pathLen);
      };

      Reporter.prototype.enterKey = function enterKey(key) {
        return this._reporterState.path.push(key);
      };

      Reporter.prototype.exitKey = function exitKey(index) {
        var state = this._reporterState;

        state.path = state.path.slice(0, index - 1);
      };

      Reporter.prototype.leaveKey = function leaveKey(index, key, value) {
        var state = this._reporterState;

        this.exitKey(index);
        if (state.obj !== null)
          state.obj[key] = value;
      };

      Reporter.prototype.path = function path() {
        return this._reporterState.path.join('/');
      };

      Reporter.prototype.enterObject = function enterObject() {
        var state = this._reporterState;

        var prev = state.obj;
        state.obj = {};
        return prev;
      };

      Reporter.prototype.leaveObject = function leaveObject(prev) {
        var state = this._reporterState;

        var now = state.obj;
        state.obj = prev;
        return now;
      };

      Reporter.prototype.error = function error(msg) {
        var err;
        var state = this._reporterState;

        var inherited = msg instanceof ReporterError;
        if (inherited) {
          err = msg;
        } else {
          err = new ReporterError(state.path.map(function (elem) {
            return '[' + JSON.stringify(elem) + ']';
          }).join(''), msg.message || msg, msg.stack);
        }

        if (!state.options.partial)
          throw err;

        if (!inherited)
          state.errors.push(err);

        return err;
      };

      Reporter.prototype.wrapResult = function wrapResult(result) {
        var state = this._reporterState;
        if (!state.options.partial)
          return result;

        return {
          result: this.isError(result) ? null : result,
          errors: state.errors
        };
      };

      function ReporterError(path, msg) {
        this.path = path;
        this.rethrow(msg);
      };
      inherits(ReporterError, Error);

      ReporterError.prototype.rethrow = function rethrow(msg) {
        this.message = msg + ' at: ' + (this.path || '(shallow)');
        if (Error.captureStackTrace)
          Error.captureStackTrace(this, ReporterError);

        if (!this.stack) {
          try {
            // IE only adds stack when thrown
            throw new Error(this.message);
          } catch (e) {
            this.stack = e.stack;
          }
        }
        return this;
      };


      /***/
    }),

/***/ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/asn1.js/lib/asn1/constants/der.js":
/*!****************************************************************!*\
  !*** (webpack)/node_modules/asn1.js/lib/asn1/constants/der.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

      var constants = __webpack_require__(/*! ../constants */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/asn1.js/lib/asn1/constants/index.js");

      exports.tagClass = {
        0: 'universal',
        1: 'application',
        2: 'context',
        3: 'private'
      };
      exports.tagClassByName = constants._reverse(exports.tagClass);

      exports.tag = {
        0x00: 'end',
        0x01: 'bool',
        0x02: 'int',
        0x03: 'bitstr',
        0x04: 'octstr',
        0x05: 'null_',
        0x06: 'objid',
        0x07: 'objDesc',
        0x08: 'external',
        0x09: 'real',
        0x0a: 'enum',
        0x0b: 'embed',
        0x0c: 'utf8str',
        0x0d: 'relativeOid',
        0x10: 'seq',
        0x11: 'set',
        0x12: 'numstr',
        0x13: 'printstr',
        0x14: 't61str',
        0x15: 'videostr',
        0x16: 'ia5str',
        0x17: 'utctime',
        0x18: 'gentime',
        0x19: 'graphstr',
        0x1a: 'iso646str',
        0x1b: 'genstr',
        0x1c: 'unistr',
        0x1d: 'charstr',
        0x1e: 'bmpstr'
      };
      exports.tagByName = constants._reverse(exports.tag);


      /***/
    }),

/***/ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/asn1.js/lib/asn1/constants/index.js":
/*!******************************************************************!*\
  !*** (webpack)/node_modules/asn1.js/lib/asn1/constants/index.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

      var constants = exports;

      // Helper
      constants._reverse = function reverse(map) {
        var res = {};

        Object.keys(map).forEach(function (key) {
          // Convert key to integer if it is stringified
          if ((key | 0) == key)
            key = key | 0;

          var value = map[key];
          res[value] = key;
        });

        return res;
      };

      constants.der = __webpack_require__(/*! ./der */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/asn1.js/lib/asn1/constants/der.js");


      /***/
    }),

/***/ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/asn1.js/lib/asn1/decoders/der.js":
/*!***************************************************************!*\
  !*** (webpack)/node_modules/asn1.js/lib/asn1/decoders/der.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

      var inherits = __webpack_require__(/*! inherits */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/inherits/inherits_browser.js");

      var asn1 = __webpack_require__(/*! ../../asn1 */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/asn1.js/lib/asn1.js");
      var base = asn1.base;
      var bignum = asn1.bignum;

      // Import DER constants
      var der = asn1.constants.der;

      function DERDecoder(entity) {
        this.enc = 'der';
        this.name = entity.name;
        this.entity = entity;

        // Construct base tree
        this.tree = new DERNode();
        this.tree._init(entity.body);
      };
      module.exports = DERDecoder;

      DERDecoder.prototype.decode = function decode(data, options) {
        if (!(data instanceof base.DecoderBuffer))
          data = new base.DecoderBuffer(data, options);

        return this.tree._decode(data, options);
      };

      // Tree methods

      function DERNode(parent) {
        base.Node.call(this, 'der', parent);
      }
      inherits(DERNode, base.Node);

      DERNode.prototype._peekTag = function peekTag(buffer, tag, any) {
        if (buffer.isEmpty())
          return false;

        var state = buffer.save();
        var decodedTag = derDecodeTag(buffer, 'Failed to peek tag: "' + tag + '"');
        if (buffer.isError(decodedTag))
          return decodedTag;

        buffer.restore(state);

        return decodedTag.tag === tag || decodedTag.tagStr === tag ||
          (decodedTag.tagStr + 'of') === tag || any;
      };

      DERNode.prototype._decodeTag = function decodeTag(buffer, tag, any) {
        var decodedTag = derDecodeTag(buffer,
          'Failed to decode tag of "' + tag + '"');
        if (buffer.isError(decodedTag))
          return decodedTag;

        var len = derDecodeLen(buffer,
          decodedTag.primitive,
          'Failed to get length of "' + tag + '"');

        // Failure
        if (buffer.isError(len))
          return len;

        if (!any &&
          decodedTag.tag !== tag &&
          decodedTag.tagStr !== tag &&
          decodedTag.tagStr + 'of' !== tag) {
          return buffer.error('Failed to match tag: "' + tag + '"');
        }

        if (decodedTag.primitive || len !== null)
          return buffer.skip(len, 'Failed to match body of: "' + tag + '"');

        // Indefinite length... find END tag
        var state = buffer.save();
        var res = this._skipUntilEnd(
          buffer,
          'Failed to skip indefinite length body: "' + this.tag + '"');
        if (buffer.isError(res))
          return res;

        len = buffer.offset - state.offset;
        buffer.restore(state);
        return buffer.skip(len, 'Failed to match body of: "' + tag + '"');
      };

      DERNode.prototype._skipUntilEnd = function skipUntilEnd(buffer, fail) {
        while (true) {
          var tag = derDecodeTag(buffer, fail);
          if (buffer.isError(tag))
            return tag;
          var len = derDecodeLen(buffer, tag.primitive, fail);
          if (buffer.isError(len))
            return len;

          var res;
          if (tag.primitive || len !== null)
            res = buffer.skip(len)
          else
            res = this._skipUntilEnd(buffer, fail);

          // Failure
          if (buffer.isError(res))
            return res;

          if (tag.tagStr === 'end')
            break;
        }
      };

      DERNode.prototype._decodeList = function decodeList(buffer, tag, decoder,
        options) {
        var result = [];
        while (!buffer.isEmpty()) {
          var possibleEnd = this._peekTag(buffer, 'end');
          if (buffer.isError(possibleEnd))
            return possibleEnd;

          var res = decoder.decode(buffer, 'der', options);
          if (buffer.isError(res) && possibleEnd)
            break;
          result.push(res);
        }
        return result;
      };

      DERNode.prototype._decodeStr = function decodeStr(buffer, tag) {
        if (tag === 'bitstr') {
          var unused = buffer.readUInt8();
          if (buffer.isError(unused))
            return unused;
          return { unused: unused, data: buffer.raw() };
        } else if (tag === 'bmpstr') {
          var raw = buffer.raw();
          if (raw.length % 2 === 1)
            return buffer.error('Decoding of string type: bmpstr length mismatch');

          var str = '';
          for (var i = 0; i < raw.length / 2; i++) {
            str += String.fromCharCode(raw.readUInt16BE(i * 2));
          }
          return str;
        } else if (tag === 'numstr') {
          var numstr = buffer.raw().toString('ascii');
          if (!this._isNumstr(numstr)) {
            return buffer.error('Decoding of string type: ' +
              'numstr unsupported characters');
          }
          return numstr;
        } else if (tag === 'octstr') {
          return buffer.raw();
        } else if (tag === 'objDesc') {
          return buffer.raw();
        } else if (tag === 'printstr') {
          var printstr = buffer.raw().toString('ascii');
          if (!this._isPrintstr(printstr)) {
            return buffer.error('Decoding of string type: ' +
              'printstr unsupported characters');
          }
          return printstr;
        } else if (/str$/.test(tag)) {
          return buffer.raw().toString();
        } else {
          return buffer.error('Decoding of string type: ' + tag + ' unsupported');
        }
      };

      DERNode.prototype._decodeObjid = function decodeObjid(buffer, values, relative) {
        var result;
        var identifiers = [];
        var ident = 0;
        while (!buffer.isEmpty()) {
          var subident = buffer.readUInt8();
          ident <<= 7;
          ident |= subident & 0x7f;
          if ((subident & 0x80) === 0) {
            identifiers.push(ident);
            ident = 0;
          }
        }
        if (subident & 0x80)
          identifiers.push(ident);

        var first = (identifiers[0] / 40) | 0;
        var second = identifiers[0] % 40;

        if (relative)
          result = identifiers;
        else
          result = [first, second].concat(identifiers.slice(1));

        if (values) {
          var tmp = values[result.join(' ')];
          if (tmp === undefined)
            tmp = values[result.join('.')];
          if (tmp !== undefined)
            result = tmp;
        }

        return result;
      };

      DERNode.prototype._decodeTime = function decodeTime(buffer, tag) {
        var str = buffer.raw().toString();
        if (tag === 'gentime') {
          var year = str.slice(0, 4) | 0;
          var mon = str.slice(4, 6) | 0;
          var day = str.slice(6, 8) | 0;
          var hour = str.slice(8, 10) | 0;
          var min = str.slice(10, 12) | 0;
          var sec = str.slice(12, 14) | 0;
        } else if (tag === 'utctime') {
          var year = str.slice(0, 2) | 0;
          var mon = str.slice(2, 4) | 0;
          var day = str.slice(4, 6) | 0;
          var hour = str.slice(6, 8) | 0;
          var min = str.slice(8, 10) | 0;
          var sec = str.slice(10, 12) | 0;
          if (year < 70)
            year = 2000 + year;
          else
            year = 1900 + year;
        } else {
          return buffer.error('Decoding ' + tag + ' time is not supported yet');
        }

        return Date.UTC(year, mon - 1, day, hour, min, sec, 0);
      };

      DERNode.prototype._decodeNull = function decodeNull(buffer) {
        return null;
      };

      DERNode.prototype._decodeBool = function decodeBool(buffer) {
        var res = buffer.readUInt8();
        if (buffer.isError(res))
          return res;
        else
          return res !== 0;
      };

      DERNode.prototype._decodeInt = function decodeInt(buffer, values) {
        // Bigint, return as it is (assume big endian)
        var raw = buffer.raw();
        var res = new bignum(raw);

        if (values)
          res = values[res.toString(10)] || res;

        return res;
      };

      DERNode.prototype._use = function use(entity, obj) {
        if (typeof entity === 'function')
          entity = entity(obj);
        return entity._getDecoder('der').tree;
      };

      // Utility methods

      function derDecodeTag(buf, fail) {
        var tag = buf.readUInt8(fail);
        if (buf.isError(tag))
          return tag;

        var cls = der.tagClass[tag >> 6];
        var primitive = (tag & 0x20) === 0;

        // Multi-octet tag - load
        if ((tag & 0x1f) === 0x1f) {
          var oct = tag;
          tag = 0;
          while ((oct & 0x80) === 0x80) {
            oct = buf.readUInt8(fail);
            if (buf.isError(oct))
              return oct;

            tag <<= 7;
            tag |= oct & 0x7f;
          }
        } else {
          tag &= 0x1f;
        }
        var tagStr = der.tag[tag];

        return {
          cls: cls,
          primitive: primitive,
          tag: tag,
          tagStr: tagStr
        };
      }

      function derDecodeLen(buf, primitive, fail) {
        var len = buf.readUInt8(fail);
        if (buf.isError(len))
          return len;

        // Indefinite form
        if (!primitive && len === 0x80)
          return null;

        // Definite form
        if ((len & 0x80) === 0) {
          // Short form
          return len;
        }

        // Long form
        var num = len & 0x7f;
        if (num > 4)
          return buf.error('length octect is too long');

        len = 0;
        for (var i = 0; i < num; i++) {
          len <<= 8;
          var j = buf.readUInt8(fail);
          if (buf.isError(j))
            return j;
          len |= j;
        }

        return len;
      }


      /***/
    }),

/***/ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/asn1.js/lib/asn1/decoders/index.js":
/*!*****************************************************************!*\
  !*** (webpack)/node_modules/asn1.js/lib/asn1/decoders/index.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

      var decoders = exports;

      decoders.der = __webpack_require__(/*! ./der */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/asn1.js/lib/asn1/decoders/der.js");
      decoders.pem = __webpack_require__(/*! ./pem */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/asn1.js/lib/asn1/decoders/pem.js");


      /***/
    }),

/***/ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/asn1.js/lib/asn1/decoders/pem.js":
/*!***************************************************************!*\
  !*** (webpack)/node_modules/asn1.js/lib/asn1/decoders/pem.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

      var inherits = __webpack_require__(/*! inherits */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/inherits/inherits_browser.js");
      var Buffer = __webpack_require__(/*! buffer */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/buffer/index.js").Buffer;

      var DERDecoder = __webpack_require__(/*! ./der */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/asn1.js/lib/asn1/decoders/der.js");

      function PEMDecoder(entity) {
        DERDecoder.call(this, entity);
        this.enc = 'pem';
      };
      inherits(PEMDecoder, DERDecoder);
      module.exports = PEMDecoder;

      PEMDecoder.prototype.decode = function decode(data, options) {
        var lines = data.toString().split(/[\r\n]+/g);

        var label = options.label.toUpperCase();

        var re = /^-----(BEGIN|END) ([^-]+)-----$/;
        var start = -1;
        var end = -1;
        for (var i = 0; i < lines.length; i++) {
          var match = lines[i].match(re);
          if (match === null)
            continue;

          if (match[2] !== label)
            continue;

          if (start === -1) {
            if (match[1] !== 'BEGIN')
              break;
            start = i;
          } else {
            if (match[1] !== 'END')
              break;
            end = i;
            break;
          }
        }
        if (start === -1 || end === -1)
          throw new Error('PEM section not found for: ' + label);

        var base64 = lines.slice(start + 1, end).join('');
        // Remove excessive symbols
        base64.replace(/[^a-z0-9\+\/=]+/gi, '');

        var input = new Buffer(base64, 'base64');
        return DERDecoder.prototype.decode.call(this, input, options);
      };


      /***/
    }),

/***/ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/asn1.js/lib/asn1/encoders/der.js":
/*!***************************************************************!*\
  !*** (webpack)/node_modules/asn1.js/lib/asn1/encoders/der.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

      var inherits = __webpack_require__(/*! inherits */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/inherits/inherits_browser.js");
      var Buffer = __webpack_require__(/*! buffer */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/buffer/index.js").Buffer;

      var asn1 = __webpack_require__(/*! ../../asn1 */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/asn1.js/lib/asn1.js");
      var base = asn1.base;

      // Import DER constants
      var der = asn1.constants.der;

      function DEREncoder(entity) {
        this.enc = 'der';
        this.name = entity.name;
        this.entity = entity;

        // Construct base tree
        this.tree = new DERNode();
        this.tree._init(entity.body);
      };
      module.exports = DEREncoder;

      DEREncoder.prototype.encode = function encode(data, reporter) {
        return this.tree._encode(data, reporter).join();
      };

      // Tree methods

      function DERNode(parent) {
        base.Node.call(this, 'der', parent);
      }
      inherits(DERNode, base.Node);

      DERNode.prototype._encodeComposite = function encodeComposite(tag,
        primitive,
        cls,
        content) {
        var encodedTag = encodeTag(tag, primitive, cls, this.reporter);

        // Short form
        if (content.length < 0x80) {
          var header = new Buffer(2);
          header[0] = encodedTag;
          header[1] = content.length;
          return this._createEncoderBuffer([header, content]);
        }

        // Long form
        // Count octets required to store length
        var lenOctets = 1;
        for (var i = content.length; i >= 0x100; i >>= 8)
          lenOctets++;

        var header = new Buffer(1 + 1 + lenOctets);
        header[0] = encodedTag;
        header[1] = 0x80 | lenOctets;

        for (var i = 1 + lenOctets, j = content.length; j > 0; i-- , j >>= 8)
          header[i] = j & 0xff;

        return this._createEncoderBuffer([header, content]);
      };

      DERNode.prototype._encodeStr = function encodeStr(str, tag) {
        if (tag === 'bitstr') {
          return this._createEncoderBuffer([str.unused | 0, str.data]);
        } else if (tag === 'bmpstr') {
          var buf = new Buffer(str.length * 2);
          for (var i = 0; i < str.length; i++) {
            buf.writeUInt16BE(str.charCodeAt(i), i * 2);
          }
          return this._createEncoderBuffer(buf);
        } else if (tag === 'numstr') {
          if (!this._isNumstr(str)) {
            return this.reporter.error('Encoding of string type: numstr supports ' +
              'only digits and space');
          }
          return this._createEncoderBuffer(str);
        } else if (tag === 'printstr') {
          if (!this._isPrintstr(str)) {
            return this.reporter.error('Encoding of string type: printstr supports ' +
              'only latin upper and lower case letters, ' +
              'digits, space, apostrophe, left and rigth ' +
              'parenthesis, plus sign, comma, hyphen, ' +
              'dot, slash, colon, equal sign, ' +
              'question mark');
          }
          return this._createEncoderBuffer(str);
        } else if (/str$/.test(tag)) {
          return this._createEncoderBuffer(str);
        } else if (tag === 'objDesc') {
          return this._createEncoderBuffer(str);
        } else {
          return this.reporter.error('Encoding of string type: ' + tag +
            ' unsupported');
        }
      };

      DERNode.prototype._encodeObjid = function encodeObjid(id, values, relative) {
        if (typeof id === 'string') {
          if (!values)
            return this.reporter.error('string objid given, but no values map found');
          if (!values.hasOwnProperty(id))
            return this.reporter.error('objid not found in values map');
          id = values[id].split(/[\s\.]+/g);
          for (var i = 0; i < id.length; i++)
            id[i] |= 0;
        } else if (Array.isArray(id)) {
          id = id.slice();
          for (var i = 0; i < id.length; i++)
            id[i] |= 0;
        }

        if (!Array.isArray(id)) {
          return this.reporter.error('objid() should be either array or string, ' +
            'got: ' + JSON.stringify(id));
        }

        if (!relative) {
          if (id[1] >= 40)
            return this.reporter.error('Second objid identifier OOB');
          id.splice(0, 2, id[0] * 40 + id[1]);
        }

        // Count number of octets
        var size = 0;
        for (var i = 0; i < id.length; i++) {
          var ident = id[i];
          for (size++; ident >= 0x80; ident >>= 7)
            size++;
        }

        var objid = new Buffer(size);
        var offset = objid.length - 1;
        for (var i = id.length - 1; i >= 0; i--) {
          var ident = id[i];
          objid[offset--] = ident & 0x7f;
          while ((ident >>= 7) > 0)
            objid[offset--] = 0x80 | (ident & 0x7f);
        }

        return this._createEncoderBuffer(objid);
      };

      function two(num) {
        if (num < 10)
          return '0' + num;
        else
          return num;
      }

      DERNode.prototype._encodeTime = function encodeTime(time, tag) {
        var str;
        var date = new Date(time);

        if (tag === 'gentime') {
          str = [
            two(date.getFullYear()),
            two(date.getUTCMonth() + 1),
            two(date.getUTCDate()),
            two(date.getUTCHours()),
            two(date.getUTCMinutes()),
            two(date.getUTCSeconds()),
            'Z'
          ].join('');
        } else if (tag === 'utctime') {
          str = [
            two(date.getFullYear() % 100),
            two(date.getUTCMonth() + 1),
            two(date.getUTCDate()),
            two(date.getUTCHours()),
            two(date.getUTCMinutes()),
            two(date.getUTCSeconds()),
            'Z'
          ].join('');
        } else {
          this.reporter.error('Encoding ' + tag + ' time is not supported yet');
        }

        return this._encodeStr(str, 'octstr');
      };

      DERNode.prototype._encodeNull = function encodeNull() {
        return this._createEncoderBuffer('');
      };

      DERNode.prototype._encodeInt = function encodeInt(num, values) {
        if (typeof num === 'string') {
          if (!values)
            return this.reporter.error('String int or enum given, but no values map');
          if (!values.hasOwnProperty(num)) {
            return this.reporter.error('Values map doesn\'t contain: ' +
              JSON.stringify(num));
          }
          num = values[num];
        }

        // Bignum, assume big endian
        if (typeof num !== 'number' && !Buffer.isBuffer(num)) {
          var numArray = num.toArray();
          if (!num.sign && numArray[0] & 0x80) {
            numArray.unshift(0);
          }
          num = new Buffer(numArray);
        }

        if (Buffer.isBuffer(num)) {
          var size = num.length;
          if (num.length === 0)
            size++;

          var out = new Buffer(size);
          num.copy(out);
          if (num.length === 0)
            out[0] = 0
          return this._createEncoderBuffer(out);
        }

        if (num < 0x80)
          return this._createEncoderBuffer(num);

        if (num < 0x100)
          return this._createEncoderBuffer([0, num]);

        var size = 1;
        for (var i = num; i >= 0x100; i >>= 8)
          size++;

        var out = new Array(size);
        for (var i = out.length - 1; i >= 0; i--) {
          out[i] = num & 0xff;
          num >>= 8;
        }
        if (out[0] & 0x80) {
          out.unshift(0);
        }

        return this._createEncoderBuffer(new Buffer(out));
      };

      DERNode.prototype._encodeBool = function encodeBool(value) {
        return this._createEncoderBuffer(value ? 0xff : 0);
      };

      DERNode.prototype._use = function use(entity, obj) {
        if (typeof entity === 'function')
          entity = entity(obj);
        return entity._getEncoder('der').tree;
      };

      DERNode.prototype._skipDefault = function skipDefault(dataBuffer, reporter, parent) {
        var state = this._baseState;
        var i;
        if (state['default'] === null)
          return false;

        var data = dataBuffer.join();
        if (state.defaultBuffer === undefined)
          state.defaultBuffer = this._encodeValue(state['default'], reporter, parent).join();

        if (data.length !== state.defaultBuffer.length)
          return false;

        for (i = 0; i < data.length; i++)
          if (data[i] !== state.defaultBuffer[i])
            return false;

        return true;
      };

      // Utility methods

      function encodeTag(tag, primitive, cls, reporter) {
        var res;

        if (tag === 'seqof')
          tag = 'seq';
        else if (tag === 'setof')
          tag = 'set';

        if (der.tagByName.hasOwnProperty(tag))
          res = der.tagByName[tag];
        else if (typeof tag === 'number' && (tag | 0) === tag)
          res = tag;
        else
          return reporter.error('Unknown tag: ' + tag);

        if (res >= 0x1f)
          return reporter.error('Multi-octet tag encoding unsupported');

        if (!primitive)
          res |= 0x20;

        res |= (der.tagClassByName[cls || 'universal'] << 6);

        return res;
      }


      /***/
    }),

/***/ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/asn1.js/lib/asn1/encoders/index.js":
/*!*****************************************************************!*\
  !*** (webpack)/node_modules/asn1.js/lib/asn1/encoders/index.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

      var encoders = exports;

      encoders.der = __webpack_require__(/*! ./der */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/asn1.js/lib/asn1/encoders/der.js");
      encoders.pem = __webpack_require__(/*! ./pem */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/asn1.js/lib/asn1/encoders/pem.js");


      /***/
    }),

/***/ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/asn1.js/lib/asn1/encoders/pem.js":
/*!***************************************************************!*\
  !*** (webpack)/node_modules/asn1.js/lib/asn1/encoders/pem.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

      var inherits = __webpack_require__(/*! inherits */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/inherits/inherits_browser.js");

      var DEREncoder = __webpack_require__(/*! ./der */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/asn1.js/lib/asn1/encoders/der.js");

      function PEMEncoder(entity) {
        DEREncoder.call(this, entity);
        this.enc = 'pem';
      };
      inherits(PEMEncoder, DEREncoder);
      module.exports = PEMEncoder;

      PEMEncoder.prototype.encode = function encode(data, options) {
        var buf = DEREncoder.prototype.encode.call(this, data);

        var p = buf.toString('base64');
        var out = ['-----BEGIN ' + options.label + '-----'];
        for (var i = 0; i < p.length; i += 64)
          out.push(p.slice(i, i + 64));
        out.push('-----END ' + options.label + '-----');
        return out.join('\n');
      };


      /***/
    }),

/***/ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/base64-js/index.js":
/*!*************************************************!*\
  !*** (webpack)/node_modules/base64-js/index.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

      "use strict";


      exports.byteLength = byteLength
      exports.toByteArray = toByteArray
      exports.fromByteArray = fromByteArray

      var lookup = []
      var revLookup = []
      var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

      var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
      for (var i = 0, len = code.length; i < len; ++i) {
        lookup[i] = code[i]
        revLookup[code.charCodeAt(i)] = i
      }

      // Support decoding URL-safe base64 strings, as Node.js does.
      // See: https://en.wikipedia.org/wiki/Base64#URL_applications
      revLookup['-'.charCodeAt(0)] = 62
      revLookup['_'.charCodeAt(0)] = 63

      function getLens(b64) {
        var len = b64.length

        if (len % 4 > 0) {
          throw new Error('Invalid string. Length must be a multiple of 4')
        }

        // Trim off extra bytes after placeholder bytes are found
        // See: https://github.com/beatgammit/base64-js/issues/42
        var validLen = b64.indexOf('=')
        if (validLen === -1) validLen = len

        var placeHoldersLen = validLen === len
          ? 0
          : 4 - (validLen % 4)

        return [validLen, placeHoldersLen]
      }

      // base64 is 4/3 + up to two characters of the original data
      function byteLength(b64) {
        var lens = getLens(b64)
        var validLen = lens[0]
        var placeHoldersLen = lens[1]
        return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
      }

      function _byteLength(b64, validLen, placeHoldersLen) {
        return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
      }

      function toByteArray(b64) {
        var tmp
        var lens = getLens(b64)
        var validLen = lens[0]
        var placeHoldersLen = lens[1]

        var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))

        var curByte = 0

        // if there are placeholders, only get up to the last complete 4 chars
        var len = placeHoldersLen > 0
          ? validLen - 4
          : validLen

        for (var i = 0; i < len; i += 4) {
          tmp =
            (revLookup[b64.charCodeAt(i)] << 18) |
            (revLookup[b64.charCodeAt(i + 1)] << 12) |
            (revLookup[b64.charCodeAt(i + 2)] << 6) |
            revLookup[b64.charCodeAt(i + 3)]
          arr[curByte++] = (tmp >> 16) & 0xFF
          arr[curByte++] = (tmp >> 8) & 0xFF
          arr[curByte++] = tmp & 0xFF
        }

        if (placeHoldersLen === 2) {
          tmp =
            (revLookup[b64.charCodeAt(i)] << 2) |
            (revLookup[b64.charCodeAt(i + 1)] >> 4)
          arr[curByte++] = tmp & 0xFF
        }

        if (placeHoldersLen === 1) {
          tmp =
            (revLookup[b64.charCodeAt(i)] << 10) |
            (revLookup[b64.charCodeAt(i + 1)] << 4) |
            (revLookup[b64.charCodeAt(i + 2)] >> 2)
          arr[curByte++] = (tmp >> 8) & 0xFF
          arr[curByte++] = tmp & 0xFF
        }

        return arr
      }

      function tripletToBase64(num) {
        return lookup[num >> 18 & 0x3F] +
          lookup[num >> 12 & 0x3F] +
          lookup[num >> 6 & 0x3F] +
          lookup[num & 0x3F]
      }

      function encodeChunk(uint8, start, end) {
        var tmp
        var output = []
        for (var i = start; i < end; i += 3) {
          tmp =
            ((uint8[i] << 16) & 0xFF0000) +
            ((uint8[i + 1] << 8) & 0xFF00) +
            (uint8[i + 2] & 0xFF)
          output.push(tripletToBase64(tmp))
        }
        return output.join('')
      }

      function fromByteArray(uint8) {
        var tmp
        var len = uint8.length
        var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
        var parts = []
        var maxChunkLength = 16383 // must be multiple of 3

        // go through the array every three bytes, we'll deal with trailing stuff later
        for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
          parts.push(encodeChunk(
            uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)
          ))
        }

        // pad the end with zeros, but make sure to not forget the extra bytes
        if (extraBytes === 1) {
          tmp = uint8[len - 1]
          parts.push(
            lookup[tmp >> 2] +
            lookup[(tmp << 4) & 0x3F] +
            '=='
          )
        } else if (extraBytes === 2) {
          tmp = (uint8[len - 2] << 8) + uint8[len - 1]
          parts.push(
            lookup[tmp >> 10] +
            lookup[(tmp >> 4) & 0x3F] +
            lookup[(tmp << 2) & 0x3F] +
            '='
          )
        }

        return parts.join('')
      }


      /***/
    }),

/***/ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/bn.js/lib/bn.js":
/*!**********************************************!*\
  !*** (webpack)/node_modules/bn.js/lib/bn.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function (module) {
        (function (module, exports) {
          'use strict';

          // Utils
          function assert(val, msg) {
            if (!val) throw new Error(msg || 'Assertion failed');
          }

          // Could use `inherits` module, but don't want to move from single file
          // architecture yet.
          function inherits(ctor, superCtor) {
            ctor.super_ = superCtor;
            var TempCtor = function () { };
            TempCtor.prototype = superCtor.prototype;
            ctor.prototype = new TempCtor();
            ctor.prototype.constructor = ctor;
          }

          // BN

          function BN(number, base, endian) {
            if (BN.isBN(number)) {
              return number;
            }

            this.negative = 0;
            this.words = null;
            this.length = 0;

            // Reduction context
            this.red = null;

            if (number !== null) {
              if (base === 'le' || base === 'be') {
                endian = base;
                base = 10;
              }

              this._init(number || 0, base || 10, endian || 'be');
            }
          }
          if (typeof module === 'object') {
            module.exports = BN;
          } else {
            exports.BN = BN;
          }

          BN.BN = BN;
          BN.wordSize = 26;

          var Buffer;
          try {
            Buffer = __webpack_require__(/*! buffer */ 2).Buffer;
          } catch (e) {
          }

          BN.isBN = function isBN(num) {
            if (num instanceof BN) {
              return true;
            }

            return num !== null && typeof num === 'object' &&
              num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
          };

          BN.max = function max(left, right) {
            if (left.cmp(right) > 0) return left;
            return right;
          };

          BN.min = function min(left, right) {
            if (left.cmp(right) < 0) return left;
            return right;
          };

          BN.prototype._init = function init(number, base, endian) {
            if (typeof number === 'number') {
              return this._initNumber(number, base, endian);
            }

            if (typeof number === 'object') {
              return this._initArray(number, base, endian);
            }

            if (base === 'hex') {
              base = 16;
            }
            assert(base === (base | 0) && base >= 2 && base <= 36);

            number = number.toString().replace(/\s+/g, '');
            var start = 0;
            if (number[0] === '-') {
              start++;
            }

            if (base === 16) {
              this._parseHex(number, start);
            } else {
              this._parseBase(number, base, start);
            }

            if (number[0] === '-') {
              this.negative = 1;
            }

            this.strip();

            if (endian !== 'le') return;

            this._initArray(this.toArray(), base, endian);
          };

          BN.prototype._initNumber = function _initNumber(number, base, endian) {
            if (number < 0) {
              this.negative = 1;
              number = -number;
            }
            if (number < 0x4000000) {
              this.words = [number & 0x3ffffff];
              this.length = 1;
            } else if (number < 0x10000000000000) {
              this.words = [
                number & 0x3ffffff,
                (number / 0x4000000) & 0x3ffffff
              ];
              this.length = 2;
            } else {
              assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
              this.words = [
                number & 0x3ffffff,
                (number / 0x4000000) & 0x3ffffff,
                1
              ];
              this.length = 3;
            }

            if (endian !== 'le') return;

            // Reverse the bytes
            this._initArray(this.toArray(), base, endian);
          };

          BN.prototype._initArray = function _initArray(number, base, endian) {
            // Perhaps a Uint8Array
            assert(typeof number.length === 'number');
            if (number.length <= 0) {
              this.words = [0];
              this.length = 1;
              return this;
            }

            this.length = Math.ceil(number.length / 3);
            this.words = new Array(this.length);
            for (var i = 0; i < this.length; i++) {
              this.words[i] = 0;
            }

            var j, w;
            var off = 0;
            if (endian === 'be') {
              for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
                w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
                this.words[j] |= (w << off) & 0x3ffffff;
                this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
                off += 24;
                if (off >= 26) {
                  off -= 26;
                  j++;
                }
              }
            } else if (endian === 'le') {
              for (i = 0, j = 0; i < number.length; i += 3) {
                w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
                this.words[j] |= (w << off) & 0x3ffffff;
                this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
                off += 24;
                if (off >= 26) {
                  off -= 26;
                  j++;
                }
              }
            }
            return this.strip();
          };

          function parseHex(str, start, end) {
            var r = 0;
            var len = Math.min(str.length, end);
            for (var i = start; i < len; i++) {
              var c = str.charCodeAt(i) - 48;

              r <<= 4;

              // 'a' - 'f'
              if (c >= 49 && c <= 54) {
                r |= c - 49 + 0xa;

                // 'A' - 'F'
              } else if (c >= 17 && c <= 22) {
                r |= c - 17 + 0xa;

                // '0' - '9'
              } else {
                r |= c & 0xf;
              }
            }
            return r;
          }

          BN.prototype._parseHex = function _parseHex(number, start) {
            // Create possibly bigger array to ensure that it fits the number
            this.length = Math.ceil((number.length - start) / 6);
            this.words = new Array(this.length);
            for (var i = 0; i < this.length; i++) {
              this.words[i] = 0;
            }

            var j, w;
            // Scan 24-bit chunks and add them to the number
            var off = 0;
            for (i = number.length - 6, j = 0; i >= start; i -= 6) {
              w = parseHex(number, i, i + 6);
              this.words[j] |= (w << off) & 0x3ffffff;
              // NOTE: `0x3fffff` is intentional here, 26bits max shift + 24bit hex limb
              this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;
              off += 24;
              if (off >= 26) {
                off -= 26;
                j++;
              }
            }
            if (i + 6 !== start) {
              w = parseHex(number, start, i + 6);
              this.words[j] |= (w << off) & 0x3ffffff;
              this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;
            }
            this.strip();
          };

          function parseBase(str, start, end, mul) {
            var r = 0;
            var len = Math.min(str.length, end);
            for (var i = start; i < len; i++) {
              var c = str.charCodeAt(i) - 48;

              r *= mul;

              // 'a'
              if (c >= 49) {
                r += c - 49 + 0xa;

                // 'A'
              } else if (c >= 17) {
                r += c - 17 + 0xa;

                // '0' - '9'
              } else {
                r += c;
              }
            }
            return r;
          }

          BN.prototype._parseBase = function _parseBase(number, base, start) {
            // Initialize as zero
            this.words = [0];
            this.length = 1;

            // Find length of limb in base
            for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
              limbLen++;
            }
            limbLen--;
            limbPow = (limbPow / base) | 0;

            var total = number.length - start;
            var mod = total % limbLen;
            var end = Math.min(total, total - mod) + start;

            var word = 0;
            for (var i = start; i < end; i += limbLen) {
              word = parseBase(number, i, i + limbLen, base);

              this.imuln(limbPow);
              if (this.words[0] + word < 0x4000000) {
                this.words[0] += word;
              } else {
                this._iaddn(word);
              }
            }

            if (mod !== 0) {
              var pow = 1;
              word = parseBase(number, i, number.length, base);

              for (i = 0; i < mod; i++) {
                pow *= base;
              }

              this.imuln(pow);
              if (this.words[0] + word < 0x4000000) {
                this.words[0] += word;
              } else {
                this._iaddn(word);
              }
            }
          };

          BN.prototype.copy = function copy(dest) {
            dest.words = new Array(this.length);
            for (var i = 0; i < this.length; i++) {
              dest.words[i] = this.words[i];
            }
            dest.length = this.length;
            dest.negative = this.negative;
            dest.red = this.red;
          };

          BN.prototype.clone = function clone() {
            var r = new BN(null);
            this.copy(r);
            return r;
          };

          BN.prototype._expand = function _expand(size) {
            while (this.length < size) {
              this.words[this.length++] = 0;
            }
            return this;
          };

          // Remove leading `0` from `this`
          BN.prototype.strip = function strip() {
            while (this.length > 1 && this.words[this.length - 1] === 0) {
              this.length--;
            }
            return this._normSign();
          };

          BN.prototype._normSign = function _normSign() {
            // -0 = 0
            if (this.length === 1 && this.words[0] === 0) {
              this.negative = 0;
            }
            return this;
          };

          BN.prototype.inspect = function inspect() {
            return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
          };

          /*
        
          var zeros = [];
          var groupSizes = [];
          var groupBases = [];
        
          var s = '';
          var i = -1;
          while (++i < BN.wordSize) {
            zeros[i] = s;
            s += '0';
          }
          groupSizes[0] = 0;
          groupSizes[1] = 0;
          groupBases[0] = 0;
          groupBases[1] = 0;
          var base = 2 - 1;
          while (++base < 36 + 1) {
            var groupSize = 0;
            var groupBase = 1;
            while (groupBase < (1 << BN.wordSize) / base) {
              groupBase *= base;
              groupSize += 1;
            }
            groupSizes[base] = groupSize;
            groupBases[base] = groupBase;
          }
        
          */

          var zeros = [
            '',
            '0',
            '00',
            '000',
            '0000',
            '00000',
            '000000',
            '0000000',
            '00000000',
            '000000000',
            '0000000000',
            '00000000000',
            '000000000000',
            '0000000000000',
            '00000000000000',
            '000000000000000',
            '0000000000000000',
            '00000000000000000',
            '000000000000000000',
            '0000000000000000000',
            '00000000000000000000',
            '000000000000000000000',
            '0000000000000000000000',
            '00000000000000000000000',
            '000000000000000000000000',
            '0000000000000000000000000'
          ];

          var groupSizes = [
            0, 0,
            25, 16, 12, 11, 10, 9, 8,
            8, 7, 7, 7, 7, 6, 6,
            6, 6, 6, 6, 6, 5, 5,
            5, 5, 5, 5, 5, 5, 5,
            5, 5, 5, 5, 5, 5, 5
          ];

          var groupBases = [
            0, 0,
            33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,
            43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,
            16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,
            6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,
            24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176
          ];

          BN.prototype.toString = function toString(base, padding) {
            base = base || 10;
            padding = padding | 0 || 1;

            var out;
            if (base === 16 || base === 'hex') {
              out = '';
              var off = 0;
              var carry = 0;
              for (var i = 0; i < this.length; i++) {
                var w = this.words[i];
                var word = (((w << off) | carry) & 0xffffff).toString(16);
                carry = (w >>> (24 - off)) & 0xffffff;
                if (carry !== 0 || i !== this.length - 1) {
                  out = zeros[6 - word.length] + word + out;
                } else {
                  out = word + out;
                }
                off += 2;
                if (off >= 26) {
                  off -= 26;
                  i--;
                }
              }
              if (carry !== 0) {
                out = carry.toString(16) + out;
              }
              while (out.length % padding !== 0) {
                out = '0' + out;
              }
              if (this.negative !== 0) {
                out = '-' + out;
              }
              return out;
            }

            if (base === (base | 0) && base >= 2 && base <= 36) {
              // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
              var groupSize = groupSizes[base];
              // var groupBase = Math.pow(base, groupSize);
              var groupBase = groupBases[base];
              out = '';
              var c = this.clone();
              c.negative = 0;
              while (!c.isZero()) {
                var r = c.modn(groupBase).toString(base);
                c = c.idivn(groupBase);

                if (!c.isZero()) {
                  out = zeros[groupSize - r.length] + r + out;
                } else {
                  out = r + out;
                }
              }
              if (this.isZero()) {
                out = '0' + out;
              }
              while (out.length % padding !== 0) {
                out = '0' + out;
              }
              if (this.negative !== 0) {
                out = '-' + out;
              }
              return out;
            }

            assert(false, 'Base should be between 2 and 36');
          };

          BN.prototype.toNumber = function toNumber() {
            var ret = this.words[0];
            if (this.length === 2) {
              ret += this.words[1] * 0x4000000;
            } else if (this.length === 3 && this.words[2] === 0x01) {
              // NOTE: at this stage it is known that the top bit is set
              ret += 0x10000000000000 + (this.words[1] * 0x4000000);
            } else if (this.length > 2) {
              assert(false, 'Number can only safely store up to 53 bits');
            }
            return (this.negative !== 0) ? -ret : ret;
          };

          BN.prototype.toJSON = function toJSON() {
            return this.toString(16);
          };

          BN.prototype.toBuffer = function toBuffer(endian, length) {
            assert(typeof Buffer !== 'undefined');
            return this.toArrayLike(Buffer, endian, length);
          };

          BN.prototype.toArray = function toArray(endian, length) {
            return this.toArrayLike(Array, endian, length);
          };

          BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
            var byteLength = this.byteLength();
            var reqLength = length || Math.max(1, byteLength);
            assert(byteLength <= reqLength, 'byte array longer than desired length');
            assert(reqLength > 0, 'Requested array length <= 0');

            this.strip();
            var littleEndian = endian === 'le';
            var res = new ArrayType(reqLength);

            var b, i;
            var q = this.clone();
            if (!littleEndian) {
              // Assume big-endian
              for (i = 0; i < reqLength - byteLength; i++) {
                res[i] = 0;
              }

              for (i = 0; !q.isZero(); i++) {
                b = q.andln(0xff);
                q.iushrn(8);

                res[reqLength - i - 1] = b;
              }
            } else {
              for (i = 0; !q.isZero(); i++) {
                b = q.andln(0xff);
                q.iushrn(8);

                res[i] = b;
              }

              for (; i < reqLength; i++) {
                res[i] = 0;
              }
            }

            return res;
          };

          if (Math.clz32) {
            BN.prototype._countBits = function _countBits(w) {
              return 32 - Math.clz32(w);
            };
          } else {
            BN.prototype._countBits = function _countBits(w) {
              var t = w;
              var r = 0;
              if (t >= 0x1000) {
                r += 13;
                t >>>= 13;
              }
              if (t >= 0x40) {
                r += 7;
                t >>>= 7;
              }
              if (t >= 0x8) {
                r += 4;
                t >>>= 4;
              }
              if (t >= 0x02) {
                r += 2;
                t >>>= 2;
              }
              return r + t;
            };
          }

          BN.prototype._zeroBits = function _zeroBits(w) {
            // Short-cut
            if (w === 0) return 26;

            var t = w;
            var r = 0;
            if ((t & 0x1fff) === 0) {
              r += 13;
              t >>>= 13;
            }
            if ((t & 0x7f) === 0) {
              r += 7;
              t >>>= 7;
            }
            if ((t & 0xf) === 0) {
              r += 4;
              t >>>= 4;
            }
            if ((t & 0x3) === 0) {
              r += 2;
              t >>>= 2;
            }
            if ((t & 0x1) === 0) {
              r++;
            }
            return r;
          };

          // Return number of used bits in a BN
          BN.prototype.bitLength = function bitLength() {
            var w = this.words[this.length - 1];
            var hi = this._countBits(w);
            return (this.length - 1) * 26 + hi;
          };

          function toBitArray(num) {
            var w = new Array(num.bitLength());

            for (var bit = 0; bit < w.length; bit++) {
              var off = (bit / 26) | 0;
              var wbit = bit % 26;

              w[bit] = (num.words[off] & (1 << wbit)) >>> wbit;
            }

            return w;
          }

          // Number of trailing zero bits
          BN.prototype.zeroBits = function zeroBits() {
            if (this.isZero()) return 0;

            var r = 0;
            for (var i = 0; i < this.length; i++) {
              var b = this._zeroBits(this.words[i]);
              r += b;
              if (b !== 26) break;
            }
            return r;
          };

          BN.prototype.byteLength = function byteLength() {
            return Math.ceil(this.bitLength() / 8);
          };

          BN.prototype.toTwos = function toTwos(width) {
            if (this.negative !== 0) {
              return this.abs().inotn(width).iaddn(1);
            }
            return this.clone();
          };

          BN.prototype.fromTwos = function fromTwos(width) {
            if (this.testn(width - 1)) {
              return this.notn(width).iaddn(1).ineg();
            }
            return this.clone();
          };

          BN.prototype.isNeg = function isNeg() {
            return this.negative !== 0;
          };

          // Return negative clone of `this`
          BN.prototype.neg = function neg() {
            return this.clone().ineg();
          };

          BN.prototype.ineg = function ineg() {
            if (!this.isZero()) {
              this.negative ^= 1;
            }

            return this;
          };

          // Or `num` with `this` in-place
          BN.prototype.iuor = function iuor(num) {
            while (this.length < num.length) {
              this.words[this.length++] = 0;
            }

            for (var i = 0; i < num.length; i++) {
              this.words[i] = this.words[i] | num.words[i];
            }

            return this.strip();
          };

          BN.prototype.ior = function ior(num) {
            assert((this.negative | num.negative) === 0);
            return this.iuor(num);
          };

          // Or `num` with `this`
          BN.prototype.or = function or(num) {
            if (this.length > num.length) return this.clone().ior(num);
            return num.clone().ior(this);
          };

          BN.prototype.uor = function uor(num) {
            if (this.length > num.length) return this.clone().iuor(num);
            return num.clone().iuor(this);
          };

          // And `num` with `this` in-place
          BN.prototype.iuand = function iuand(num) {
            // b = min-length(num, this)
            var b;
            if (this.length > num.length) {
              b = num;
            } else {
              b = this;
            }

            for (var i = 0; i < b.length; i++) {
              this.words[i] = this.words[i] & num.words[i];
            }

            this.length = b.length;

            return this.strip();
          };

          BN.prototype.iand = function iand(num) {
            assert((this.negative | num.negative) === 0);
            return this.iuand(num);
          };

          // And `num` with `this`
          BN.prototype.and = function and(num) {
            if (this.length > num.length) return this.clone().iand(num);
            return num.clone().iand(this);
          };

          BN.prototype.uand = function uand(num) {
            if (this.length > num.length) return this.clone().iuand(num);
            return num.clone().iuand(this);
          };

          // Xor `num` with `this` in-place
          BN.prototype.iuxor = function iuxor(num) {
            // a.length > b.length
            var a;
            var b;
            if (this.length > num.length) {
              a = this;
              b = num;
            } else {
              a = num;
              b = this;
            }

            for (var i = 0; i < b.length; i++) {
              this.words[i] = a.words[i] ^ b.words[i];
            }

            if (this !== a) {
              for (; i < a.length; i++) {
                this.words[i] = a.words[i];
              }
            }

            this.length = a.length;

            return this.strip();
          };

          BN.prototype.ixor = function ixor(num) {
            assert((this.negative | num.negative) === 0);
            return this.iuxor(num);
          };

          // Xor `num` with `this`
          BN.prototype.xor = function xor(num) {
            if (this.length > num.length) return this.clone().ixor(num);
            return num.clone().ixor(this);
          };

          BN.prototype.uxor = function uxor(num) {
            if (this.length > num.length) return this.clone().iuxor(num);
            return num.clone().iuxor(this);
          };

          // Not ``this`` with ``width`` bitwidth
          BN.prototype.inotn = function inotn(width) {
            assert(typeof width === 'number' && width >= 0);

            var bytesNeeded = Math.ceil(width / 26) | 0;
            var bitsLeft = width % 26;

            // Extend the buffer with leading zeroes
            this._expand(bytesNeeded);

            if (bitsLeft > 0) {
              bytesNeeded--;
            }

            // Handle complete words
            for (var i = 0; i < bytesNeeded; i++) {
              this.words[i] = ~this.words[i] & 0x3ffffff;
            }

            // Handle the residue
            if (bitsLeft > 0) {
              this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));
            }

            // And remove leading zeroes
            return this.strip();
          };

          BN.prototype.notn = function notn(width) {
            return this.clone().inotn(width);
          };

          // Set `bit` of `this`
          BN.prototype.setn = function setn(bit, val) {
            assert(typeof bit === 'number' && bit >= 0);

            var off = (bit / 26) | 0;
            var wbit = bit % 26;

            this._expand(off + 1);

            if (val) {
              this.words[off] = this.words[off] | (1 << wbit);
            } else {
              this.words[off] = this.words[off] & ~(1 << wbit);
            }

            return this.strip();
          };

          // Add `num` to `this` in-place
          BN.prototype.iadd = function iadd(num) {
            var r;

            // negative + positive
            if (this.negative !== 0 && num.negative === 0) {
              this.negative = 0;
              r = this.isub(num);
              this.negative ^= 1;
              return this._normSign();

              // positive + negative
            } else if (this.negative === 0 && num.negative !== 0) {
              num.negative = 0;
              r = this.isub(num);
              num.negative = 1;
              return r._normSign();
            }

            // a.length > b.length
            var a, b;
            if (this.length > num.length) {
              a = this;
              b = num;
            } else {
              a = num;
              b = this;
            }

            var carry = 0;
            for (var i = 0; i < b.length; i++) {
              r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
              this.words[i] = r & 0x3ffffff;
              carry = r >>> 26;
            }
            for (; carry !== 0 && i < a.length; i++) {
              r = (a.words[i] | 0) + carry;
              this.words[i] = r & 0x3ffffff;
              carry = r >>> 26;
            }

            this.length = a.length;
            if (carry !== 0) {
              this.words[this.length] = carry;
              this.length++;
              // Copy the rest of the words
            } else if (a !== this) {
              for (; i < a.length; i++) {
                this.words[i] = a.words[i];
              }
            }

            return this;
          };

          // Add `num` to `this`
          BN.prototype.add = function add(num) {
            var res;
            if (num.negative !== 0 && this.negative === 0) {
              num.negative = 0;
              res = this.sub(num);
              num.negative ^= 1;
              return res;
            } else if (num.negative === 0 && this.negative !== 0) {
              this.negative = 0;
              res = num.sub(this);
              this.negative = 1;
              return res;
            }

            if (this.length > num.length) return this.clone().iadd(num);

            return num.clone().iadd(this);
          };

          // Subtract `num` from `this` in-place
          BN.prototype.isub = function isub(num) {
            // this - (-num) = this + num
            if (num.negative !== 0) {
              num.negative = 0;
              var r = this.iadd(num);
              num.negative = 1;
              return r._normSign();

              // -this - num = -(this + num)
            } else if (this.negative !== 0) {
              this.negative = 0;
              this.iadd(num);
              this.negative = 1;
              return this._normSign();
            }

            // At this point both numbers are positive
            var cmp = this.cmp(num);

            // Optimization - zeroify
            if (cmp === 0) {
              this.negative = 0;
              this.length = 1;
              this.words[0] = 0;
              return this;
            }

            // a > b
            var a, b;
            if (cmp > 0) {
              a = this;
              b = num;
            } else {
              a = num;
              b = this;
            }

            var carry = 0;
            for (var i = 0; i < b.length; i++) {
              r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
              carry = r >> 26;
              this.words[i] = r & 0x3ffffff;
            }
            for (; carry !== 0 && i < a.length; i++) {
              r = (a.words[i] | 0) + carry;
              carry = r >> 26;
              this.words[i] = r & 0x3ffffff;
            }

            // Copy rest of the words
            if (carry === 0 && i < a.length && a !== this) {
              for (; i < a.length; i++) {
                this.words[i] = a.words[i];
              }
            }

            this.length = Math.max(this.length, i);

            if (a !== this) {
              this.negative = 1;
            }

            return this.strip();
          };

          // Subtract `num` from `this`
          BN.prototype.sub = function sub(num) {
            return this.clone().isub(num);
          };

          function smallMulTo(self, num, out) {
            out.negative = num.negative ^ self.negative;
            var len = (self.length + num.length) | 0;
            out.length = len;
            len = (len - 1) | 0;

            // Peel one iteration (compiler can't do it, because of code complexity)
            var a = self.words[0] | 0;
            var b = num.words[0] | 0;
            var r = a * b;

            var lo = r & 0x3ffffff;
            var carry = (r / 0x4000000) | 0;
            out.words[0] = lo;

            for (var k = 1; k < len; k++) {
              // Sum all words with the same `i + j = k` and accumulate `ncarry`,
              // note that ncarry could be >= 0x3ffffff
              var ncarry = carry >>> 26;
              var rword = carry & 0x3ffffff;
              var maxJ = Math.min(k, num.length - 1);
              for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
                var i = (k - j) | 0;
                a = self.words[i] | 0;
                b = num.words[j] | 0;
                r = a * b + rword;
                ncarry += (r / 0x4000000) | 0;
                rword = r & 0x3ffffff;
              }
              out.words[k] = rword | 0;
              carry = ncarry | 0;
            }
            if (carry !== 0) {
              out.words[k] = carry | 0;
            } else {
              out.length--;
            }

            return out.strip();
          }

          // TODO(indutny): it may be reasonable to omit it for users who don't need
          // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
          // multiplication (like elliptic secp256k1).
          var comb10MulTo = function comb10MulTo(self, num, out) {
            var a = self.words;
            var b = num.words;
            var o = out.words;
            var c = 0;
            var lo;
            var mid;
            var hi;
            var a0 = a[0] | 0;
            var al0 = a0 & 0x1fff;
            var ah0 = a0 >>> 13;
            var a1 = a[1] | 0;
            var al1 = a1 & 0x1fff;
            var ah1 = a1 >>> 13;
            var a2 = a[2] | 0;
            var al2 = a2 & 0x1fff;
            var ah2 = a2 >>> 13;
            var a3 = a[3] | 0;
            var al3 = a3 & 0x1fff;
            var ah3 = a3 >>> 13;
            var a4 = a[4] | 0;
            var al4 = a4 & 0x1fff;
            var ah4 = a4 >>> 13;
            var a5 = a[5] | 0;
            var al5 = a5 & 0x1fff;
            var ah5 = a5 >>> 13;
            var a6 = a[6] | 0;
            var al6 = a6 & 0x1fff;
            var ah6 = a6 >>> 13;
            var a7 = a[7] | 0;
            var al7 = a7 & 0x1fff;
            var ah7 = a7 >>> 13;
            var a8 = a[8] | 0;
            var al8 = a8 & 0x1fff;
            var ah8 = a8 >>> 13;
            var a9 = a[9] | 0;
            var al9 = a9 & 0x1fff;
            var ah9 = a9 >>> 13;
            var b0 = b[0] | 0;
            var bl0 = b0 & 0x1fff;
            var bh0 = b0 >>> 13;
            var b1 = b[1] | 0;
            var bl1 = b1 & 0x1fff;
            var bh1 = b1 >>> 13;
            var b2 = b[2] | 0;
            var bl2 = b2 & 0x1fff;
            var bh2 = b2 >>> 13;
            var b3 = b[3] | 0;
            var bl3 = b3 & 0x1fff;
            var bh3 = b3 >>> 13;
            var b4 = b[4] | 0;
            var bl4 = b4 & 0x1fff;
            var bh4 = b4 >>> 13;
            var b5 = b[5] | 0;
            var bl5 = b5 & 0x1fff;
            var bh5 = b5 >>> 13;
            var b6 = b[6] | 0;
            var bl6 = b6 & 0x1fff;
            var bh6 = b6 >>> 13;
            var b7 = b[7] | 0;
            var bl7 = b7 & 0x1fff;
            var bh7 = b7 >>> 13;
            var b8 = b[8] | 0;
            var bl8 = b8 & 0x1fff;
            var bh8 = b8 >>> 13;
            var b9 = b[9] | 0;
            var bl9 = b9 & 0x1fff;
            var bh9 = b9 >>> 13;

            out.negative = self.negative ^ num.negative;
            out.length = 19;
            /* k = 0 */
            lo = Math.imul(al0, bl0);
            mid = Math.imul(al0, bh0);
            mid = (mid + Math.imul(ah0, bl0)) | 0;
            hi = Math.imul(ah0, bh0);
            var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
            c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;
            w0 &= 0x3ffffff;
            /* k = 1 */
            lo = Math.imul(al1, bl0);
            mid = Math.imul(al1, bh0);
            mid = (mid + Math.imul(ah1, bl0)) | 0;
            hi = Math.imul(ah1, bh0);
            lo = (lo + Math.imul(al0, bl1)) | 0;
            mid = (mid + Math.imul(al0, bh1)) | 0;
            mid = (mid + Math.imul(ah0, bl1)) | 0;
            hi = (hi + Math.imul(ah0, bh1)) | 0;
            var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
            c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;
            w1 &= 0x3ffffff;
            /* k = 2 */
            lo = Math.imul(al2, bl0);
            mid = Math.imul(al2, bh0);
            mid = (mid + Math.imul(ah2, bl0)) | 0;
            hi = Math.imul(ah2, bh0);
            lo = (lo + Math.imul(al1, bl1)) | 0;
            mid = (mid + Math.imul(al1, bh1)) | 0;
            mid = (mid + Math.imul(ah1, bl1)) | 0;
            hi = (hi + Math.imul(ah1, bh1)) | 0;
            lo = (lo + Math.imul(al0, bl2)) | 0;
            mid = (mid + Math.imul(al0, bh2)) | 0;
            mid = (mid + Math.imul(ah0, bl2)) | 0;
            hi = (hi + Math.imul(ah0, bh2)) | 0;
            var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
            c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;
            w2 &= 0x3ffffff;
            /* k = 3 */
            lo = Math.imul(al3, bl0);
            mid = Math.imul(al3, bh0);
            mid = (mid + Math.imul(ah3, bl0)) | 0;
            hi = Math.imul(ah3, bh0);
            lo = (lo + Math.imul(al2, bl1)) | 0;
            mid = (mid + Math.imul(al2, bh1)) | 0;
            mid = (mid + Math.imul(ah2, bl1)) | 0;
            hi = (hi + Math.imul(ah2, bh1)) | 0;
            lo = (lo + Math.imul(al1, bl2)) | 0;
            mid = (mid + Math.imul(al1, bh2)) | 0;
            mid = (mid + Math.imul(ah1, bl2)) | 0;
            hi = (hi + Math.imul(ah1, bh2)) | 0;
            lo = (lo + Math.imul(al0, bl3)) | 0;
            mid = (mid + Math.imul(al0, bh3)) | 0;
            mid = (mid + Math.imul(ah0, bl3)) | 0;
            hi = (hi + Math.imul(ah0, bh3)) | 0;
            var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
            c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;
            w3 &= 0x3ffffff;
            /* k = 4 */
            lo = Math.imul(al4, bl0);
            mid = Math.imul(al4, bh0);
            mid = (mid + Math.imul(ah4, bl0)) | 0;
            hi = Math.imul(ah4, bh0);
            lo = (lo + Math.imul(al3, bl1)) | 0;
            mid = (mid + Math.imul(al3, bh1)) | 0;
            mid = (mid + Math.imul(ah3, bl1)) | 0;
            hi = (hi + Math.imul(ah3, bh1)) | 0;
            lo = (lo + Math.imul(al2, bl2)) | 0;
            mid = (mid + Math.imul(al2, bh2)) | 0;
            mid = (mid + Math.imul(ah2, bl2)) | 0;
            hi = (hi + Math.imul(ah2, bh2)) | 0;
            lo = (lo + Math.imul(al1, bl3)) | 0;
            mid = (mid + Math.imul(al1, bh3)) | 0;
            mid = (mid + Math.imul(ah1, bl3)) | 0;
            hi = (hi + Math.imul(ah1, bh3)) | 0;
            lo = (lo + Math.imul(al0, bl4)) | 0;
            mid = (mid + Math.imul(al0, bh4)) | 0;
            mid = (mid + Math.imul(ah0, bl4)) | 0;
            hi = (hi + Math.imul(ah0, bh4)) | 0;
            var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
            c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;
            w4 &= 0x3ffffff;
            /* k = 5 */
            lo = Math.imul(al5, bl0);
            mid = Math.imul(al5, bh0);
            mid = (mid + Math.imul(ah5, bl0)) | 0;
            hi = Math.imul(ah5, bh0);
            lo = (lo + Math.imul(al4, bl1)) | 0;
            mid = (mid + Math.imul(al4, bh1)) | 0;
            mid = (mid + Math.imul(ah4, bl1)) | 0;
            hi = (hi + Math.imul(ah4, bh1)) | 0;
            lo = (lo + Math.imul(al3, bl2)) | 0;
            mid = (mid + Math.imul(al3, bh2)) | 0;
            mid = (mid + Math.imul(ah3, bl2)) | 0;
            hi = (hi + Math.imul(ah3, bh2)) | 0;
            lo = (lo + Math.imul(al2, bl3)) | 0;
            mid = (mid + Math.imul(al2, bh3)) | 0;
            mid = (mid + Math.imul(ah2, bl3)) | 0;
            hi = (hi + Math.imul(ah2, bh3)) | 0;
            lo = (lo + Math.imul(al1, bl4)) | 0;
            mid = (mid + Math.imul(al1, bh4)) | 0;
            mid = (mid + Math.imul(ah1, bl4)) | 0;
            hi = (hi + Math.imul(ah1, bh4)) | 0;
            lo = (lo + Math.imul(al0, bl5)) | 0;
            mid = (mid + Math.imul(al0, bh5)) | 0;
            mid = (mid + Math.imul(ah0, bl5)) | 0;
            hi = (hi + Math.imul(ah0, bh5)) | 0;
            var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
            c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;
            w5 &= 0x3ffffff;
            /* k = 6 */
            lo = Math.imul(al6, bl0);
            mid = Math.imul(al6, bh0);
            mid = (mid + Math.imul(ah6, bl0)) | 0;
            hi = Math.imul(ah6, bh0);
            lo = (lo + Math.imul(al5, bl1)) | 0;
            mid = (mid + Math.imul(al5, bh1)) | 0;
            mid = (mid + Math.imul(ah5, bl1)) | 0;
            hi = (hi + Math.imul(ah5, bh1)) | 0;
            lo = (lo + Math.imul(al4, bl2)) | 0;
            mid = (mid + Math.imul(al4, bh2)) | 0;
            mid = (mid + Math.imul(ah4, bl2)) | 0;
            hi = (hi + Math.imul(ah4, bh2)) | 0;
            lo = (lo + Math.imul(al3, bl3)) | 0;
            mid = (mid + Math.imul(al3, bh3)) | 0;
            mid = (mid + Math.imul(ah3, bl3)) | 0;
            hi = (hi + Math.imul(ah3, bh3)) | 0;
            lo = (lo + Math.imul(al2, bl4)) | 0;
            mid = (mid + Math.imul(al2, bh4)) | 0;
            mid = (mid + Math.imul(ah2, bl4)) | 0;
            hi = (hi + Math.imul(ah2, bh4)) | 0;
            lo = (lo + Math.imul(al1, bl5)) | 0;
            mid = (mid + Math.imul(al1, bh5)) | 0;
            mid = (mid + Math.imul(ah1, bl5)) | 0;
            hi = (hi + Math.imul(ah1, bh5)) | 0;
            lo = (lo + Math.imul(al0, bl6)) | 0;
            mid = (mid + Math.imul(al0, bh6)) | 0;
            mid = (mid + Math.imul(ah0, bl6)) | 0;
            hi = (hi + Math.imul(ah0, bh6)) | 0;
            var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
            c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;
            w6 &= 0x3ffffff;
            /* k = 7 */
            lo = Math.imul(al7, bl0);
            mid = Math.imul(al7, bh0);
            mid = (mid + Math.imul(ah7, bl0)) | 0;
            hi = Math.imul(ah7, bh0);
            lo = (lo + Math.imul(al6, bl1)) | 0;
            mid = (mid + Math.imul(al6, bh1)) | 0;
            mid = (mid + Math.imul(ah6, bl1)) | 0;
            hi = (hi + Math.imul(ah6, bh1)) | 0;
            lo = (lo + Math.imul(al5, bl2)) | 0;
            mid = (mid + Math.imul(al5, bh2)) | 0;
            mid = (mid + Math.imul(ah5, bl2)) | 0;
            hi = (hi + Math.imul(ah5, bh2)) | 0;
            lo = (lo + Math.imul(al4, bl3)) | 0;
            mid = (mid + Math.imul(al4, bh3)) | 0;
            mid = (mid + Math.imul(ah4, bl3)) | 0;
            hi = (hi + Math.imul(ah4, bh3)) | 0;
            lo = (lo + Math.imul(al3, bl4)) | 0;
            mid = (mid + Math.imul(al3, bh4)) | 0;
            mid = (mid + Math.imul(ah3, bl4)) | 0;
            hi = (hi + Math.imul(ah3, bh4)) | 0;
            lo = (lo + Math.imul(al2, bl5)) | 0;
            mid = (mid + Math.imul(al2, bh5)) | 0;
            mid = (mid + Math.imul(ah2, bl5)) | 0;
            hi = (hi + Math.imul(ah2, bh5)) | 0;
            lo = (lo + Math.imul(al1, bl6)) | 0;
            mid = (mid + Math.imul(al1, bh6)) | 0;
            mid = (mid + Math.imul(ah1, bl6)) | 0;
            hi = (hi + Math.imul(ah1, bh6)) | 0;
            lo = (lo + Math.imul(al0, bl7)) | 0;
            mid = (mid + Math.imul(al0, bh7)) | 0;
            mid = (mid + Math.imul(ah0, bl7)) | 0;
            hi = (hi + Math.imul(ah0, bh7)) | 0;
            var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
            c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;
            w7 &= 0x3ffffff;
            /* k = 8 */
            lo = Math.imul(al8, bl0);
            mid = Math.imul(al8, bh0);
            mid = (mid + Math.imul(ah8, bl0)) | 0;
            hi = Math.imul(ah8, bh0);
            lo = (lo + Math.imul(al7, bl1)) | 0;
            mid = (mid + Math.imul(al7, bh1)) | 0;
            mid = (mid + Math.imul(ah7, bl1)) | 0;
            hi = (hi + Math.imul(ah7, bh1)) | 0;
            lo = (lo + Math.imul(al6, bl2)) | 0;
            mid = (mid + Math.imul(al6, bh2)) | 0;
            mid = (mid + Math.imul(ah6, bl2)) | 0;
            hi = (hi + Math.imul(ah6, bh2)) | 0;
            lo = (lo + Math.imul(al5, bl3)) | 0;
            mid = (mid + Math.imul(al5, bh3)) | 0;
            mid = (mid + Math.imul(ah5, bl3)) | 0;
            hi = (hi + Math.imul(ah5, bh3)) | 0;
            lo = (lo + Math.imul(al4, bl4)) | 0;
            mid = (mid + Math.imul(al4, bh4)) | 0;
            mid = (mid + Math.imul(ah4, bl4)) | 0;
            hi = (hi + Math.imul(ah4, bh4)) | 0;
            lo = (lo + Math.imul(al3, bl5)) | 0;
            mid = (mid + Math.imul(al3, bh5)) | 0;
            mid = (mid + Math.imul(ah3, bl5)) | 0;
            hi = (hi + Math.imul(ah3, bh5)) | 0;
            lo = (lo + Math.imul(al2, bl6)) | 0;
            mid = (mid + Math.imul(al2, bh6)) | 0;
            mid = (mid + Math.imul(ah2, bl6)) | 0;
            hi = (hi + Math.imul(ah2, bh6)) | 0;
            lo = (lo + Math.imul(al1, bl7)) | 0;
            mid = (mid + Math.imul(al1, bh7)) | 0;
            mid = (mid + Math.imul(ah1, bl7)) | 0;
            hi = (hi + Math.imul(ah1, bh7)) | 0;
            lo = (lo + Math.imul(al0, bl8)) | 0;
            mid = (mid + Math.imul(al0, bh8)) | 0;
            mid = (mid + Math.imul(ah0, bl8)) | 0;
            hi = (hi + Math.imul(ah0, bh8)) | 0;
            var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
            c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;
            w8 &= 0x3ffffff;
            /* k = 9 */
            lo = Math.imul(al9, bl0);
            mid = Math.imul(al9, bh0);
            mid = (mid + Math.imul(ah9, bl0)) | 0;
            hi = Math.imul(ah9, bh0);
            lo = (lo + Math.imul(al8, bl1)) | 0;
            mid = (mid + Math.imul(al8, bh1)) | 0;
            mid = (mid + Math.imul(ah8, bl1)) | 0;
            hi = (hi + Math.imul(ah8, bh1)) | 0;
            lo = (lo + Math.imul(al7, bl2)) | 0;
            mid = (mid + Math.imul(al7, bh2)) | 0;
            mid = (mid + Math.imul(ah7, bl2)) | 0;
            hi = (hi + Math.imul(ah7, bh2)) | 0;
            lo = (lo + Math.imul(al6, bl3)) | 0;
            mid = (mid + Math.imul(al6, bh3)) | 0;
            mid = (mid + Math.imul(ah6, bl3)) | 0;
            hi = (hi + Math.imul(ah6, bh3)) | 0;
            lo = (lo + Math.imul(al5, bl4)) | 0;
            mid = (mid + Math.imul(al5, bh4)) | 0;
            mid = (mid + Math.imul(ah5, bl4)) | 0;
            hi = (hi + Math.imul(ah5, bh4)) | 0;
            lo = (lo + Math.imul(al4, bl5)) | 0;
            mid = (mid + Math.imul(al4, bh5)) | 0;
            mid = (mid + Math.imul(ah4, bl5)) | 0;
            hi = (hi + Math.imul(ah4, bh5)) | 0;
            lo = (lo + Math.imul(al3, bl6)) | 0;
            mid = (mid + Math.imul(al3, bh6)) | 0;
            mid = (mid + Math.imul(ah3, bl6)) | 0;
            hi = (hi + Math.imul(ah3, bh6)) | 0;
            lo = (lo + Math.imul(al2, bl7)) | 0;
            mid = (mid + Math.imul(al2, bh7)) | 0;
            mid = (mid + Math.imul(ah2, bl7)) | 0;
            hi = (hi + Math.imul(ah2, bh7)) | 0;
            lo = (lo + Math.imul(al1, bl8)) | 0;
            mid = (mid + Math.imul(al1, bh8)) | 0;
            mid = (mid + Math.imul(ah1, bl8)) | 0;
            hi = (hi + Math.imul(ah1, bh8)) | 0;
            lo = (lo + Math.imul(al0, bl9)) | 0;
            mid = (mid + Math.imul(al0, bh9)) | 0;
            mid = (mid + Math.imul(ah0, bl9)) | 0;
            hi = (hi + Math.imul(ah0, bh9)) | 0;
            var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
            c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;
            w9 &= 0x3ffffff;
            /* k = 10 */
            lo = Math.imul(al9, bl1);
            mid = Math.imul(al9, bh1);
            mid = (mid + Math.imul(ah9, bl1)) | 0;
            hi = Math.imul(ah9, bh1);
            lo = (lo + Math.imul(al8, bl2)) | 0;
            mid = (mid + Math.imul(al8, bh2)) | 0;
            mid = (mid + Math.imul(ah8, bl2)) | 0;
            hi = (hi + Math.imul(ah8, bh2)) | 0;
            lo = (lo + Math.imul(al7, bl3)) | 0;
            mid = (mid + Math.imul(al7, bh3)) | 0;
            mid = (mid + Math.imul(ah7, bl3)) | 0;
            hi = (hi + Math.imul(ah7, bh3)) | 0;
            lo = (lo + Math.imul(al6, bl4)) | 0;
            mid = (mid + Math.imul(al6, bh4)) | 0;
            mid = (mid + Math.imul(ah6, bl4)) | 0;
            hi = (hi + Math.imul(ah6, bh4)) | 0;
            lo = (lo + Math.imul(al5, bl5)) | 0;
            mid = (mid + Math.imul(al5, bh5)) | 0;
            mid = (mid + Math.imul(ah5, bl5)) | 0;
            hi = (hi + Math.imul(ah5, bh5)) | 0;
            lo = (lo + Math.imul(al4, bl6)) | 0;
            mid = (mid + Math.imul(al4, bh6)) | 0;
            mid = (mid + Math.imul(ah4, bl6)) | 0;
            hi = (hi + Math.imul(ah4, bh6)) | 0;
            lo = (lo + Math.imul(al3, bl7)) | 0;
            mid = (mid + Math.imul(al3, bh7)) | 0;
            mid = (mid + Math.imul(ah3, bl7)) | 0;
            hi = (hi + Math.imul(ah3, bh7)) | 0;
            lo = (lo + Math.imul(al2, bl8)) | 0;
            mid = (mid + Math.imul(al2, bh8)) | 0;
            mid = (mid + Math.imul(ah2, bl8)) | 0;
            hi = (hi + Math.imul(ah2, bh8)) | 0;
            lo = (lo + Math.imul(al1, bl9)) | 0;
            mid = (mid + Math.imul(al1, bh9)) | 0;
            mid = (mid + Math.imul(ah1, bl9)) | 0;
            hi = (hi + Math.imul(ah1, bh9)) | 0;
            var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
            c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;
            w10 &= 0x3ffffff;
            /* k = 11 */
            lo = Math.imul(al9, bl2);
            mid = Math.imul(al9, bh2);
            mid = (mid + Math.imul(ah9, bl2)) | 0;
            hi = Math.imul(ah9, bh2);
            lo = (lo + Math.imul(al8, bl3)) | 0;
            mid = (mid + Math.imul(al8, bh3)) | 0;
            mid = (mid + Math.imul(ah8, bl3)) | 0;
            hi = (hi + Math.imul(ah8, bh3)) | 0;
            lo = (lo + Math.imul(al7, bl4)) | 0;
            mid = (mid + Math.imul(al7, bh4)) | 0;
            mid = (mid + Math.imul(ah7, bl4)) | 0;
            hi = (hi + Math.imul(ah7, bh4)) | 0;
            lo = (lo + Math.imul(al6, bl5)) | 0;
            mid = (mid + Math.imul(al6, bh5)) | 0;
            mid = (mid + Math.imul(ah6, bl5)) | 0;
            hi = (hi + Math.imul(ah6, bh5)) | 0;
            lo = (lo + Math.imul(al5, bl6)) | 0;
            mid = (mid + Math.imul(al5, bh6)) | 0;
            mid = (mid + Math.imul(ah5, bl6)) | 0;
            hi = (hi + Math.imul(ah5, bh6)) | 0;
            lo = (lo + Math.imul(al4, bl7)) | 0;
            mid = (mid + Math.imul(al4, bh7)) | 0;
            mid = (mid + Math.imul(ah4, bl7)) | 0;
            hi = (hi + Math.imul(ah4, bh7)) | 0;
            lo = (lo + Math.imul(al3, bl8)) | 0;
            mid = (mid + Math.imul(al3, bh8)) | 0;
            mid = (mid + Math.imul(ah3, bl8)) | 0;
            hi = (hi + Math.imul(ah3, bh8)) | 0;
            lo = (lo + Math.imul(al2, bl9)) | 0;
            mid = (mid + Math.imul(al2, bh9)) | 0;
            mid = (mid + Math.imul(ah2, bl9)) | 0;
            hi = (hi + Math.imul(ah2, bh9)) | 0;
            var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
            c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;
            w11 &= 0x3ffffff;
            /* k = 12 */
            lo = Math.imul(al9, bl3);
            mid = Math.imul(al9, bh3);
            mid = (mid + Math.imul(ah9, bl3)) | 0;
            hi = Math.imul(ah9, bh3);
            lo = (lo + Math.imul(al8, bl4)) | 0;
            mid = (mid + Math.imul(al8, bh4)) | 0;
            mid = (mid + Math.imul(ah8, bl4)) | 0;
            hi = (hi + Math.imul(ah8, bh4)) | 0;
            lo = (lo + Math.imul(al7, bl5)) | 0;
            mid = (mid + Math.imul(al7, bh5)) | 0;
            mid = (mid + Math.imul(ah7, bl5)) | 0;
            hi = (hi + Math.imul(ah7, bh5)) | 0;
            lo = (lo + Math.imul(al6, bl6)) | 0;
            mid = (mid + Math.imul(al6, bh6)) | 0;
            mid = (mid + Math.imul(ah6, bl6)) | 0;
            hi = (hi + Math.imul(ah6, bh6)) | 0;
            lo = (lo + Math.imul(al5, bl7)) | 0;
            mid = (mid + Math.imul(al5, bh7)) | 0;
            mid = (mid + Math.imul(ah5, bl7)) | 0;
            hi = (hi + Math.imul(ah5, bh7)) | 0;
            lo = (lo + Math.imul(al4, bl8)) | 0;
            mid = (mid + Math.imul(al4, bh8)) | 0;
            mid = (mid + Math.imul(ah4, bl8)) | 0;
            hi = (hi + Math.imul(ah4, bh8)) | 0;
            lo = (lo + Math.imul(al3, bl9)) | 0;
            mid = (mid + Math.imul(al3, bh9)) | 0;
            mid = (mid + Math.imul(ah3, bl9)) | 0;
            hi = (hi + Math.imul(ah3, bh9)) | 0;
            var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
            c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;
            w12 &= 0x3ffffff;
            /* k = 13 */
            lo = Math.imul(al9, bl4);
            mid = Math.imul(al9, bh4);
            mid = (mid + Math.imul(ah9, bl4)) | 0;
            hi = Math.imul(ah9, bh4);
            lo = (lo + Math.imul(al8, bl5)) | 0;
            mid = (mid + Math.imul(al8, bh5)) | 0;
            mid = (mid + Math.imul(ah8, bl5)) | 0;
            hi = (hi + Math.imul(ah8, bh5)) | 0;
            lo = (lo + Math.imul(al7, bl6)) | 0;
            mid = (mid + Math.imul(al7, bh6)) | 0;
            mid = (mid + Math.imul(ah7, bl6)) | 0;
            hi = (hi + Math.imul(ah7, bh6)) | 0;
            lo = (lo + Math.imul(al6, bl7)) | 0;
            mid = (mid + Math.imul(al6, bh7)) | 0;
            mid = (mid + Math.imul(ah6, bl7)) | 0;
            hi = (hi + Math.imul(ah6, bh7)) | 0;
            lo = (lo + Math.imul(al5, bl8)) | 0;
            mid = (mid + Math.imul(al5, bh8)) | 0;
            mid = (mid + Math.imul(ah5, bl8)) | 0;
            hi = (hi + Math.imul(ah5, bh8)) | 0;
            lo = (lo + Math.imul(al4, bl9)) | 0;
            mid = (mid + Math.imul(al4, bh9)) | 0;
            mid = (mid + Math.imul(ah4, bl9)) | 0;
            hi = (hi + Math.imul(ah4, bh9)) | 0;
            var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
            c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;
            w13 &= 0x3ffffff;
            /* k = 14 */
            lo = Math.imul(al9, bl5);
            mid = Math.imul(al9, bh5);
            mid = (mid + Math.imul(ah9, bl5)) | 0;
            hi = Math.imul(ah9, bh5);
            lo = (lo + Math.imul(al8, bl6)) | 0;
            mid = (mid + Math.imul(al8, bh6)) | 0;
            mid = (mid + Math.imul(ah8, bl6)) | 0;
            hi = (hi + Math.imul(ah8, bh6)) | 0;
            lo = (lo + Math.imul(al7, bl7)) | 0;
            mid = (mid + Math.imul(al7, bh7)) | 0;
            mid = (mid + Math.imul(ah7, bl7)) | 0;
            hi = (hi + Math.imul(ah7, bh7)) | 0;
            lo = (lo + Math.imul(al6, bl8)) | 0;
            mid = (mid + Math.imul(al6, bh8)) | 0;
            mid = (mid + Math.imul(ah6, bl8)) | 0;
            hi = (hi + Math.imul(ah6, bh8)) | 0;
            lo = (lo + Math.imul(al5, bl9)) | 0;
            mid = (mid + Math.imul(al5, bh9)) | 0;
            mid = (mid + Math.imul(ah5, bl9)) | 0;
            hi = (hi + Math.imul(ah5, bh9)) | 0;
            var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
            c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;
            w14 &= 0x3ffffff;
            /* k = 15 */
            lo = Math.imul(al9, bl6);
            mid = Math.imul(al9, bh6);
            mid = (mid + Math.imul(ah9, bl6)) | 0;
            hi = Math.imul(ah9, bh6);
            lo = (lo + Math.imul(al8, bl7)) | 0;
            mid = (mid + Math.imul(al8, bh7)) | 0;
            mid = (mid + Math.imul(ah8, bl7)) | 0;
            hi = (hi + Math.imul(ah8, bh7)) | 0;
            lo = (lo + Math.imul(al7, bl8)) | 0;
            mid = (mid + Math.imul(al7, bh8)) | 0;
            mid = (mid + Math.imul(ah7, bl8)) | 0;
            hi = (hi + Math.imul(ah7, bh8)) | 0;
            lo = (lo + Math.imul(al6, bl9)) | 0;
            mid = (mid + Math.imul(al6, bh9)) | 0;
            mid = (mid + Math.imul(ah6, bl9)) | 0;
            hi = (hi + Math.imul(ah6, bh9)) | 0;
            var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
            c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;
            w15 &= 0x3ffffff;
            /* k = 16 */
            lo = Math.imul(al9, bl7);
            mid = Math.imul(al9, bh7);
            mid = (mid + Math.imul(ah9, bl7)) | 0;
            hi = Math.imul(ah9, bh7);
            lo = (lo + Math.imul(al8, bl8)) | 0;
            mid = (mid + Math.imul(al8, bh8)) | 0;
            mid = (mid + Math.imul(ah8, bl8)) | 0;
            hi = (hi + Math.imul(ah8, bh8)) | 0;
            lo = (lo + Math.imul(al7, bl9)) | 0;
            mid = (mid + Math.imul(al7, bh9)) | 0;
            mid = (mid + Math.imul(ah7, bl9)) | 0;
            hi = (hi + Math.imul(ah7, bh9)) | 0;
            var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
            c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;
            w16 &= 0x3ffffff;
            /* k = 17 */
            lo = Math.imul(al9, bl8);
            mid = Math.imul(al9, bh8);
            mid = (mid + Math.imul(ah9, bl8)) | 0;
            hi = Math.imul(ah9, bh8);
            lo = (lo + Math.imul(al8, bl9)) | 0;
            mid = (mid + Math.imul(al8, bh9)) | 0;
            mid = (mid + Math.imul(ah8, bl9)) | 0;
            hi = (hi + Math.imul(ah8, bh9)) | 0;
            var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
            c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;
            w17 &= 0x3ffffff;
            /* k = 18 */
            lo = Math.imul(al9, bl9);
            mid = Math.imul(al9, bh9);
            mid = (mid + Math.imul(ah9, bl9)) | 0;
            hi = Math.imul(ah9, bh9);
            var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
            c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;
            w18 &= 0x3ffffff;
            o[0] = w0;
            o[1] = w1;
            o[2] = w2;
            o[3] = w3;
            o[4] = w4;
            o[5] = w5;
            o[6] = w6;
            o[7] = w7;
            o[8] = w8;
            o[9] = w9;
            o[10] = w10;
            o[11] = w11;
            o[12] = w12;
            o[13] = w13;
            o[14] = w14;
            o[15] = w15;
            o[16] = w16;
            o[17] = w17;
            o[18] = w18;
            if (c !== 0) {
              o[19] = c;
              out.length++;
            }
            return out;
          };

          // Polyfill comb
          if (!Math.imul) {
            comb10MulTo = smallMulTo;
          }

          function bigMulTo(self, num, out) {
            out.negative = num.negative ^ self.negative;
            out.length = self.length + num.length;

            var carry = 0;
            var hncarry = 0;
            for (var k = 0; k < out.length - 1; k++) {
              // Sum all words with the same `i + j = k` and accumulate `ncarry`,
              // note that ncarry could be >= 0x3ffffff
              var ncarry = hncarry;
              hncarry = 0;
              var rword = carry & 0x3ffffff;
              var maxJ = Math.min(k, num.length - 1);
              for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
                var i = k - j;
                var a = self.words[i] | 0;
                var b = num.words[j] | 0;
                var r = a * b;

                var lo = r & 0x3ffffff;
                ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
                lo = (lo + rword) | 0;
                rword = lo & 0x3ffffff;
                ncarry = (ncarry + (lo >>> 26)) | 0;

                hncarry += ncarry >>> 26;
                ncarry &= 0x3ffffff;
              }
              out.words[k] = rword;
              carry = ncarry;
              ncarry = hncarry;
            }
            if (carry !== 0) {
              out.words[k] = carry;
            } else {
              out.length--;
            }

            return out.strip();
          }

          function jumboMulTo(self, num, out) {
            var fftm = new FFTM();
            return fftm.mulp(self, num, out);
          }

          BN.prototype.mulTo = function mulTo(num, out) {
            var res;
            var len = this.length + num.length;
            if (this.length === 10 && num.length === 10) {
              res = comb10MulTo(this, num, out);
            } else if (len < 63) {
              res = smallMulTo(this, num, out);
            } else if (len < 1024) {
              res = bigMulTo(this, num, out);
            } else {
              res = jumboMulTo(this, num, out);
            }

            return res;
          };

          // Cooley-Tukey algorithm for FFT
          // slightly revisited to rely on looping instead of recursion

          function FFTM(x, y) {
            this.x = x;
            this.y = y;
          }

          FFTM.prototype.makeRBT = function makeRBT(N) {
            var t = new Array(N);
            var l = BN.prototype._countBits(N) - 1;
            for (var i = 0; i < N; i++) {
              t[i] = this.revBin(i, l, N);
            }

            return t;
          };

          // Returns binary-reversed representation of `x`
          FFTM.prototype.revBin = function revBin(x, l, N) {
            if (x === 0 || x === N - 1) return x;

            var rb = 0;
            for (var i = 0; i < l; i++) {
              rb |= (x & 1) << (l - i - 1);
              x >>= 1;
            }

            return rb;
          };

          // Performs "tweedling" phase, therefore 'emulating'
          // behaviour of the recursive algorithm
          FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {
            for (var i = 0; i < N; i++) {
              rtws[i] = rws[rbt[i]];
              itws[i] = iws[rbt[i]];
            }
          };

          FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {
            this.permute(rbt, rws, iws, rtws, itws, N);

            for (var s = 1; s < N; s <<= 1) {
              var l = s << 1;

              var rtwdf = Math.cos(2 * Math.PI / l);
              var itwdf = Math.sin(2 * Math.PI / l);

              for (var p = 0; p < N; p += l) {
                var rtwdf_ = rtwdf;
                var itwdf_ = itwdf;

                for (var j = 0; j < s; j++) {
                  var re = rtws[p + j];
                  var ie = itws[p + j];

                  var ro = rtws[p + j + s];
                  var io = itws[p + j + s];

                  var rx = rtwdf_ * ro - itwdf_ * io;

                  io = rtwdf_ * io + itwdf_ * ro;
                  ro = rx;

                  rtws[p + j] = re + ro;
                  itws[p + j] = ie + io;

                  rtws[p + j + s] = re - ro;
                  itws[p + j + s] = ie - io;

                  /* jshint maxdepth : false */
                  if (j !== l) {
                    rx = rtwdf * rtwdf_ - itwdf * itwdf_;

                    itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                    rtwdf_ = rx;
                  }
                }
              }
            }
          };

          FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
            var N = Math.max(m, n) | 1;
            var odd = N & 1;
            var i = 0;
            for (N = N / 2 | 0; N; N = N >>> 1) {
              i++;
            }

            return 1 << i + 1 + odd;
          };

          FFTM.prototype.conjugate = function conjugate(rws, iws, N) {
            if (N <= 1) return;

            for (var i = 0; i < N / 2; i++) {
              var t = rws[i];

              rws[i] = rws[N - i - 1];
              rws[N - i - 1] = t;

              t = iws[i];

              iws[i] = -iws[N - i - 1];
              iws[N - i - 1] = -t;
            }
          };

          FFTM.prototype.normalize13b = function normalize13b(ws, N) {
            var carry = 0;
            for (var i = 0; i < N / 2; i++) {
              var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +
                Math.round(ws[2 * i] / N) +
                carry;

              ws[i] = w & 0x3ffffff;

              if (w < 0x4000000) {
                carry = 0;
              } else {
                carry = w / 0x4000000 | 0;
              }
            }

            return ws;
          };

          FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {
            var carry = 0;
            for (var i = 0; i < len; i++) {
              carry = carry + (ws[i] | 0);

              rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;
              rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;
            }

            // Pad with zeroes
            for (i = 2 * len; i < N; ++i) {
              rws[i] = 0;
            }

            assert(carry === 0);
            assert((carry & ~0x1fff) === 0);
          };

          FFTM.prototype.stub = function stub(N) {
            var ph = new Array(N);
            for (var i = 0; i < N; i++) {
              ph[i] = 0;
            }

            return ph;
          };

          FFTM.prototype.mulp = function mulp(x, y, out) {
            var N = 2 * this.guessLen13b(x.length, y.length);

            var rbt = this.makeRBT(N);

            var _ = this.stub(N);

            var rws = new Array(N);
            var rwst = new Array(N);
            var iwst = new Array(N);

            var nrws = new Array(N);
            var nrwst = new Array(N);
            var niwst = new Array(N);

            var rmws = out.words;
            rmws.length = N;

            this.convert13b(x.words, x.length, rws, N);
            this.convert13b(y.words, y.length, nrws, N);

            this.transform(rws, _, rwst, iwst, N, rbt);
            this.transform(nrws, _, nrwst, niwst, N, rbt);

            for (var i = 0; i < N; i++) {
              var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
              iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
              rwst[i] = rx;
            }

            this.conjugate(rwst, iwst, N);
            this.transform(rwst, iwst, rmws, _, N, rbt);
            this.conjugate(rmws, _, N);
            this.normalize13b(rmws, N);

            out.negative = x.negative ^ y.negative;
            out.length = x.length + y.length;
            return out.strip();
          };

          // Multiply `this` by `num`
          BN.prototype.mul = function mul(num) {
            var out = new BN(null);
            out.words = new Array(this.length + num.length);
            return this.mulTo(num, out);
          };

          // Multiply employing FFT
          BN.prototype.mulf = function mulf(num) {
            var out = new BN(null);
            out.words = new Array(this.length + num.length);
            return jumboMulTo(this, num, out);
          };

          // In-place Multiplication
          BN.prototype.imul = function imul(num) {
            return this.clone().mulTo(num, this);
          };

          BN.prototype.imuln = function imuln(num) {
            assert(typeof num === 'number');
            assert(num < 0x4000000);

            // Carry
            var carry = 0;
            for (var i = 0; i < this.length; i++) {
              var w = (this.words[i] | 0) * num;
              var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
              carry >>= 26;
              carry += (w / 0x4000000) | 0;
              // NOTE: lo is 27bit maximum
              carry += lo >>> 26;
              this.words[i] = lo & 0x3ffffff;
            }

            if (carry !== 0) {
              this.words[i] = carry;
              this.length++;
            }

            return this;
          };

          BN.prototype.muln = function muln(num) {
            return this.clone().imuln(num);
          };

          // `this` * `this`
          BN.prototype.sqr = function sqr() {
            return this.mul(this);
          };

          // `this` * `this` in-place
          BN.prototype.isqr = function isqr() {
            return this.imul(this.clone());
          };

          // Math.pow(`this`, `num`)
          BN.prototype.pow = function pow(num) {
            var w = toBitArray(num);
            if (w.length === 0) return new BN(1);

            // Skip leading zeroes
            var res = this;
            for (var i = 0; i < w.length; i++ , res = res.sqr()) {
              if (w[i] !== 0) break;
            }

            if (++i < w.length) {
              for (var q = res.sqr(); i < w.length; i++ , q = q.sqr()) {
                if (w[i] === 0) continue;

                res = res.mul(q);
              }
            }

            return res;
          };

          // Shift-left in-place
          BN.prototype.iushln = function iushln(bits) {
            assert(typeof bits === 'number' && bits >= 0);
            var r = bits % 26;
            var s = (bits - r) / 26;
            var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);
            var i;

            if (r !== 0) {
              var carry = 0;

              for (i = 0; i < this.length; i++) {
                var newCarry = this.words[i] & carryMask;
                var c = ((this.words[i] | 0) - newCarry) << r;
                this.words[i] = c | carry;
                carry = newCarry >>> (26 - r);
              }

              if (carry) {
                this.words[i] = carry;
                this.length++;
              }
            }

            if (s !== 0) {
              for (i = this.length - 1; i >= 0; i--) {
                this.words[i + s] = this.words[i];
              }

              for (i = 0; i < s; i++) {
                this.words[i] = 0;
              }

              this.length += s;
            }

            return this.strip();
          };

          BN.prototype.ishln = function ishln(bits) {
            // TODO(indutny): implement me
            assert(this.negative === 0);
            return this.iushln(bits);
          };

          // Shift-right in-place
          // NOTE: `hint` is a lowest bit before trailing zeroes
          // NOTE: if `extended` is present - it will be filled with destroyed bits
          BN.prototype.iushrn = function iushrn(bits, hint, extended) {
            assert(typeof bits === 'number' && bits >= 0);
            var h;
            if (hint) {
              h = (hint - (hint % 26)) / 26;
            } else {
              h = 0;
            }

            var r = bits % 26;
            var s = Math.min((bits - r) / 26, this.length);
            var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
            var maskedWords = extended;

            h -= s;
            h = Math.max(0, h);

            // Extended mode, copy masked part
            if (maskedWords) {
              for (var i = 0; i < s; i++) {
                maskedWords.words[i] = this.words[i];
              }
              maskedWords.length = s;
            }

            if (s === 0) {
              // No-op, we should not move anything at all
            } else if (this.length > s) {
              this.length -= s;
              for (i = 0; i < this.length; i++) {
                this.words[i] = this.words[i + s];
              }
            } else {
              this.words[0] = 0;
              this.length = 1;
            }

            var carry = 0;
            for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
              var word = this.words[i] | 0;
              this.words[i] = (carry << (26 - r)) | (word >>> r);
              carry = word & mask;
            }

            // Push carried bits as a mask
            if (maskedWords && carry !== 0) {
              maskedWords.words[maskedWords.length++] = carry;
            }

            if (this.length === 0) {
              this.words[0] = 0;
              this.length = 1;
            }

            return this.strip();
          };

          BN.prototype.ishrn = function ishrn(bits, hint, extended) {
            // TODO(indutny): implement me
            assert(this.negative === 0);
            return this.iushrn(bits, hint, extended);
          };

          // Shift-left
          BN.prototype.shln = function shln(bits) {
            return this.clone().ishln(bits);
          };

          BN.prototype.ushln = function ushln(bits) {
            return this.clone().iushln(bits);
          };

          // Shift-right
          BN.prototype.shrn = function shrn(bits) {
            return this.clone().ishrn(bits);
          };

          BN.prototype.ushrn = function ushrn(bits) {
            return this.clone().iushrn(bits);
          };

          // Test if n bit is set
          BN.prototype.testn = function testn(bit) {
            assert(typeof bit === 'number' && bit >= 0);
            var r = bit % 26;
            var s = (bit - r) / 26;
            var q = 1 << r;

            // Fast case: bit is much higher than all existing words
            if (this.length <= s) return false;

            // Check bit and return
            var w = this.words[s];

            return !!(w & q);
          };

          // Return only lowers bits of number (in-place)
          BN.prototype.imaskn = function imaskn(bits) {
            assert(typeof bits === 'number' && bits >= 0);
            var r = bits % 26;
            var s = (bits - r) / 26;

            assert(this.negative === 0, 'imaskn works only with positive numbers');

            if (this.length <= s) {
              return this;
            }

            if (r !== 0) {
              s++;
            }
            this.length = Math.min(s, this.length);

            if (r !== 0) {
              var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
              this.words[this.length - 1] &= mask;
            }

            return this.strip();
          };

          // Return only lowers bits of number
          BN.prototype.maskn = function maskn(bits) {
            return this.clone().imaskn(bits);
          };

          // Add plain number `num` to `this`
          BN.prototype.iaddn = function iaddn(num) {
            assert(typeof num === 'number');
            assert(num < 0x4000000);
            if (num < 0) return this.isubn(-num);

            // Possible sign change
            if (this.negative !== 0) {
              if (this.length === 1 && (this.words[0] | 0) < num) {
                this.words[0] = num - (this.words[0] | 0);
                this.negative = 0;
                return this;
              }

              this.negative = 0;
              this.isubn(num);
              this.negative = 1;
              return this;
            }

            // Add without checks
            return this._iaddn(num);
          };

          BN.prototype._iaddn = function _iaddn(num) {
            this.words[0] += num;

            // Carry
            for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
              this.words[i] -= 0x4000000;
              if (i === this.length - 1) {
                this.words[i + 1] = 1;
              } else {
                this.words[i + 1]++;
              }
            }
            this.length = Math.max(this.length, i + 1);

            return this;
          };

          // Subtract plain number `num` from `this`
          BN.prototype.isubn = function isubn(num) {
            assert(typeof num === 'number');
            assert(num < 0x4000000);
            if (num < 0) return this.iaddn(-num);

            if (this.negative !== 0) {
              this.negative = 0;
              this.iaddn(num);
              this.negative = 1;
              return this;
            }

            this.words[0] -= num;

            if (this.length === 1 && this.words[0] < 0) {
              this.words[0] = -this.words[0];
              this.negative = 1;
            } else {
              // Carry
              for (var i = 0; i < this.length && this.words[i] < 0; i++) {
                this.words[i] += 0x4000000;
                this.words[i + 1] -= 1;
              }
            }

            return this.strip();
          };

          BN.prototype.addn = function addn(num) {
            return this.clone().iaddn(num);
          };

          BN.prototype.subn = function subn(num) {
            return this.clone().isubn(num);
          };

          BN.prototype.iabs = function iabs() {
            this.negative = 0;

            return this;
          };

          BN.prototype.abs = function abs() {
            return this.clone().iabs();
          };

          BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
            var len = num.length + shift;
            var i;

            this._expand(len);

            var w;
            var carry = 0;
            for (i = 0; i < num.length; i++) {
              w = (this.words[i + shift] | 0) + carry;
              var right = (num.words[i] | 0) * mul;
              w -= right & 0x3ffffff;
              carry = (w >> 26) - ((right / 0x4000000) | 0);
              this.words[i + shift] = w & 0x3ffffff;
            }
            for (; i < this.length - shift; i++) {
              w = (this.words[i + shift] | 0) + carry;
              carry = w >> 26;
              this.words[i + shift] = w & 0x3ffffff;
            }

            if (carry === 0) return this.strip();

            // Subtraction overflow
            assert(carry === -1);
            carry = 0;
            for (i = 0; i < this.length; i++) {
              w = -(this.words[i] | 0) + carry;
              carry = w >> 26;
              this.words[i] = w & 0x3ffffff;
            }
            this.negative = 1;

            return this.strip();
          };

          BN.prototype._wordDiv = function _wordDiv(num, mode) {
            var shift = this.length - num.length;

            var a = this.clone();
            var b = num;

            // Normalize
            var bhi = b.words[b.length - 1] | 0;
            var bhiBits = this._countBits(bhi);
            shift = 26 - bhiBits;
            if (shift !== 0) {
              b = b.ushln(shift);
              a.iushln(shift);
              bhi = b.words[b.length - 1] | 0;
            }

            // Initialize quotient
            var m = a.length - b.length;
            var q;

            if (mode !== 'mod') {
              q = new BN(null);
              q.length = m + 1;
              q.words = new Array(q.length);
              for (var i = 0; i < q.length; i++) {
                q.words[i] = 0;
              }
            }

            var diff = a.clone()._ishlnsubmul(b, 1, m);
            if (diff.negative === 0) {
              a = diff;
              if (q) {
                q.words[m] = 1;
              }
            }

            for (var j = m - 1; j >= 0; j--) {
              var qj = (a.words[b.length + j] | 0) * 0x4000000 +
                (a.words[b.length + j - 1] | 0);

              // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
              // (0x7ffffff)
              qj = Math.min((qj / bhi) | 0, 0x3ffffff);

              a._ishlnsubmul(b, qj, j);
              while (a.negative !== 0) {
                qj--;
                a.negative = 0;
                a._ishlnsubmul(b, 1, j);
                if (!a.isZero()) {
                  a.negative ^= 1;
                }
              }
              if (q) {
                q.words[j] = qj;
              }
            }
            if (q) {
              q.strip();
            }
            a.strip();

            // Denormalize
            if (mode !== 'div' && shift !== 0) {
              a.iushrn(shift);
            }

            return {
              div: q || null,
              mod: a
            };
          };

          // NOTE: 1) `mode` can be set to `mod` to request mod only,
          //       to `div` to request div only, or be absent to
          //       request both div & mod
          //       2) `positive` is true if unsigned mod is requested
          BN.prototype.divmod = function divmod(num, mode, positive) {
            assert(!num.isZero());

            if (this.isZero()) {
              return {
                div: new BN(0),
                mod: new BN(0)
              };
            }

            var div, mod, res;
            if (this.negative !== 0 && num.negative === 0) {
              res = this.neg().divmod(num, mode);

              if (mode !== 'mod') {
                div = res.div.neg();
              }

              if (mode !== 'div') {
                mod = res.mod.neg();
                if (positive && mod.negative !== 0) {
                  mod.iadd(num);
                }
              }

              return {
                div: div,
                mod: mod
              };
            }

            if (this.negative === 0 && num.negative !== 0) {
              res = this.divmod(num.neg(), mode);

              if (mode !== 'mod') {
                div = res.div.neg();
              }

              return {
                div: div,
                mod: res.mod
              };
            }

            if ((this.negative & num.negative) !== 0) {
              res = this.neg().divmod(num.neg(), mode);

              if (mode !== 'div') {
                mod = res.mod.neg();
                if (positive && mod.negative !== 0) {
                  mod.isub(num);
                }
              }

              return {
                div: res.div,
                mod: mod
              };
            }

            // Both numbers are positive at this point

            // Strip both numbers to approximate shift value
            if (num.length > this.length || this.cmp(num) < 0) {
              return {
                div: new BN(0),
                mod: this
              };
            }

            // Very short reduction
            if (num.length === 1) {
              if (mode === 'div') {
                return {
                  div: this.divn(num.words[0]),
                  mod: null
                };
              }

              if (mode === 'mod') {
                return {
                  div: null,
                  mod: new BN(this.modn(num.words[0]))
                };
              }

              return {
                div: this.divn(num.words[0]),
                mod: new BN(this.modn(num.words[0]))
              };
            }

            return this._wordDiv(num, mode);
          };

          // Find `this` / `num`
          BN.prototype.div = function div(num) {
            return this.divmod(num, 'div', false).div;
          };

          // Find `this` % `num`
          BN.prototype.mod = function mod(num) {
            return this.divmod(num, 'mod', false).mod;
          };

          BN.prototype.umod = function umod(num) {
            return this.divmod(num, 'mod', true).mod;
          };

          // Find Round(`this` / `num`)
          BN.prototype.divRound = function divRound(num) {
            var dm = this.divmod(num);

            // Fast case - exact division
            if (dm.mod.isZero()) return dm.div;

            var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;

            var half = num.ushrn(1);
            var r2 = num.andln(1);
            var cmp = mod.cmp(half);

            // Round down
            if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;

            // Round up
            return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
          };

          BN.prototype.modn = function modn(num) {
            assert(num <= 0x3ffffff);
            var p = (1 << 26) % num;

            var acc = 0;
            for (var i = this.length - 1; i >= 0; i--) {
              acc = (p * acc + (this.words[i] | 0)) % num;
            }

            return acc;
          };

          // In-place division by number
          BN.prototype.idivn = function idivn(num) {
            assert(num <= 0x3ffffff);

            var carry = 0;
            for (var i = this.length - 1; i >= 0; i--) {
              var w = (this.words[i] | 0) + carry * 0x4000000;
              this.words[i] = (w / num) | 0;
              carry = w % num;
            }

            return this.strip();
          };

          BN.prototype.divn = function divn(num) {
            return this.clone().idivn(num);
          };

          BN.prototype.egcd = function egcd(p) {
            assert(p.negative === 0);
            assert(!p.isZero());

            var x = this;
            var y = p.clone();

            if (x.negative !== 0) {
              x = x.umod(p);
            } else {
              x = x.clone();
            }

            // A * x + B * y = x
            var A = new BN(1);
            var B = new BN(0);

            // C * x + D * y = y
            var C = new BN(0);
            var D = new BN(1);

            var g = 0;

            while (x.isEven() && y.isEven()) {
              x.iushrn(1);
              y.iushrn(1);
              ++g;
            }

            var yp = y.clone();
            var xp = x.clone();

            while (!x.isZero()) {
              for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
              if (i > 0) {
                x.iushrn(i);
                while (i-- > 0) {
                  if (A.isOdd() || B.isOdd()) {
                    A.iadd(yp);
                    B.isub(xp);
                  }

                  A.iushrn(1);
                  B.iushrn(1);
                }
              }

              for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
              if (j > 0) {
                y.iushrn(j);
                while (j-- > 0) {
                  if (C.isOdd() || D.isOdd()) {
                    C.iadd(yp);
                    D.isub(xp);
                  }

                  C.iushrn(1);
                  D.iushrn(1);
                }
              }

              if (x.cmp(y) >= 0) {
                x.isub(y);
                A.isub(C);
                B.isub(D);
              } else {
                y.isub(x);
                C.isub(A);
                D.isub(B);
              }
            }

            return {
              a: C,
              b: D,
              gcd: y.iushln(g)
            };
          };

          // This is reduced incarnation of the binary EEA
          // above, designated to invert members of the
          // _prime_ fields F(p) at a maximal speed
          BN.prototype._invmp = function _invmp(p) {
            assert(p.negative === 0);
            assert(!p.isZero());

            var a = this;
            var b = p.clone();

            if (a.negative !== 0) {
              a = a.umod(p);
            } else {
              a = a.clone();
            }

            var x1 = new BN(1);
            var x2 = new BN(0);

            var delta = b.clone();

            while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
              for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
              if (i > 0) {
                a.iushrn(i);
                while (i-- > 0) {
                  if (x1.isOdd()) {
                    x1.iadd(delta);
                  }

                  x1.iushrn(1);
                }
              }

              for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
              if (j > 0) {
                b.iushrn(j);
                while (j-- > 0) {
                  if (x2.isOdd()) {
                    x2.iadd(delta);
                  }

                  x2.iushrn(1);
                }
              }

              if (a.cmp(b) >= 0) {
                a.isub(b);
                x1.isub(x2);
              } else {
                b.isub(a);
                x2.isub(x1);
              }
            }

            var res;
            if (a.cmpn(1) === 0) {
              res = x1;
            } else {
              res = x2;
            }

            if (res.cmpn(0) < 0) {
              res.iadd(p);
            }

            return res;
          };

          BN.prototype.gcd = function gcd(num) {
            if (this.isZero()) return num.abs();
            if (num.isZero()) return this.abs();

            var a = this.clone();
            var b = num.clone();
            a.negative = 0;
            b.negative = 0;

            // Remove common factor of two
            for (var shift = 0; a.isEven() && b.isEven(); shift++) {
              a.iushrn(1);
              b.iushrn(1);
            }

            do {
              while (a.isEven()) {
                a.iushrn(1);
              }
              while (b.isEven()) {
                b.iushrn(1);
              }

              var r = a.cmp(b);
              if (r < 0) {
                // Swap `a` and `b` to make `a` always bigger than `b`
                var t = a;
                a = b;
                b = t;
              } else if (r === 0 || b.cmpn(1) === 0) {
                break;
              }

              a.isub(b);
            } while (true);

            return b.iushln(shift);
          };

          // Invert number in the field F(num)
          BN.prototype.invm = function invm(num) {
            return this.egcd(num).a.umod(num);
          };

          BN.prototype.isEven = function isEven() {
            return (this.words[0] & 1) === 0;
          };

          BN.prototype.isOdd = function isOdd() {
            return (this.words[0] & 1) === 1;
          };

          // And first word and num
          BN.prototype.andln = function andln(num) {
            return this.words[0] & num;
          };

          // Increment at the bit position in-line
          BN.prototype.bincn = function bincn(bit) {
            assert(typeof bit === 'number');
            var r = bit % 26;
            var s = (bit - r) / 26;
            var q = 1 << r;

            // Fast case: bit is much higher than all existing words
            if (this.length <= s) {
              this._expand(s + 1);
              this.words[s] |= q;
              return this;
            }

            // Add bit and propagate, if needed
            var carry = q;
            for (var i = s; carry !== 0 && i < this.length; i++) {
              var w = this.words[i] | 0;
              w += carry;
              carry = w >>> 26;
              w &= 0x3ffffff;
              this.words[i] = w;
            }
            if (carry !== 0) {
              this.words[i] = carry;
              this.length++;
            }
            return this;
          };

          BN.prototype.isZero = function isZero() {
            return this.length === 1 && this.words[0] === 0;
          };

          BN.prototype.cmpn = function cmpn(num) {
            var negative = num < 0;

            if (this.negative !== 0 && !negative) return -1;
            if (this.negative === 0 && negative) return 1;

            this.strip();

            var res;
            if (this.length > 1) {
              res = 1;
            } else {
              if (negative) {
                num = -num;
              }

              assert(num <= 0x3ffffff, 'Number is too big');

              var w = this.words[0] | 0;
              res = w === num ? 0 : w < num ? -1 : 1;
            }
            if (this.negative !== 0) return -res | 0;
            return res;
          };

          // Compare two numbers and return:
          // 1 - if `this` > `num`
          // 0 - if `this` == `num`
          // -1 - if `this` < `num`
          BN.prototype.cmp = function cmp(num) {
            if (this.negative !== 0 && num.negative === 0) return -1;
            if (this.negative === 0 && num.negative !== 0) return 1;

            var res = this.ucmp(num);
            if (this.negative !== 0) return -res | 0;
            return res;
          };

          // Unsigned comparison
          BN.prototype.ucmp = function ucmp(num) {
            // At this point both numbers have the same sign
            if (this.length > num.length) return 1;
            if (this.length < num.length) return -1;

            var res = 0;
            for (var i = this.length - 1; i >= 0; i--) {
              var a = this.words[i] | 0;
              var b = num.words[i] | 0;

              if (a === b) continue;
              if (a < b) {
                res = -1;
              } else if (a > b) {
                res = 1;
              }
              break;
            }
            return res;
          };

          BN.prototype.gtn = function gtn(num) {
            return this.cmpn(num) === 1;
          };

          BN.prototype.gt = function gt(num) {
            return this.cmp(num) === 1;
          };

          BN.prototype.gten = function gten(num) {
            return this.cmpn(num) >= 0;
          };

          BN.prototype.gte = function gte(num) {
            return this.cmp(num) >= 0;
          };

          BN.prototype.ltn = function ltn(num) {
            return this.cmpn(num) === -1;
          };

          BN.prototype.lt = function lt(num) {
            return this.cmp(num) === -1;
          };

          BN.prototype.lten = function lten(num) {
            return this.cmpn(num) <= 0;
          };

          BN.prototype.lte = function lte(num) {
            return this.cmp(num) <= 0;
          };

          BN.prototype.eqn = function eqn(num) {
            return this.cmpn(num) === 0;
          };

          BN.prototype.eq = function eq(num) {
            return this.cmp(num) === 0;
          };

          //
          // A reduce context, could be using montgomery or something better, depending
          // on the `m` itself.
          //
          BN.red = function red(num) {
            return new Red(num);
          };

          BN.prototype.toRed = function toRed(ctx) {
            assert(!this.red, 'Already a number in reduction context');
            assert(this.negative === 0, 'red works only with positives');
            return ctx.convertTo(this)._forceRed(ctx);
          };

          BN.prototype.fromRed = function fromRed() {
            assert(this.red, 'fromRed works only with numbers in reduction context');
            return this.red.convertFrom(this);
          };

          BN.prototype._forceRed = function _forceRed(ctx) {
            this.red = ctx;
            return this;
          };

          BN.prototype.forceRed = function forceRed(ctx) {
            assert(!this.red, 'Already a number in reduction context');
            return this._forceRed(ctx);
          };

          BN.prototype.redAdd = function redAdd(num) {
            assert(this.red, 'redAdd works only with red numbers');
            return this.red.add(this, num);
          };

          BN.prototype.redIAdd = function redIAdd(num) {
            assert(this.red, 'redIAdd works only with red numbers');
            return this.red.iadd(this, num);
          };

          BN.prototype.redSub = function redSub(num) {
            assert(this.red, 'redSub works only with red numbers');
            return this.red.sub(this, num);
          };

          BN.prototype.redISub = function redISub(num) {
            assert(this.red, 'redISub works only with red numbers');
            return this.red.isub(this, num);
          };

          BN.prototype.redShl = function redShl(num) {
            assert(this.red, 'redShl works only with red numbers');
            return this.red.shl(this, num);
          };

          BN.prototype.redMul = function redMul(num) {
            assert(this.red, 'redMul works only with red numbers');
            this.red._verify2(this, num);
            return this.red.mul(this, num);
          };

          BN.prototype.redIMul = function redIMul(num) {
            assert(this.red, 'redMul works only with red numbers');
            this.red._verify2(this, num);
            return this.red.imul(this, num);
          };

          BN.prototype.redSqr = function redSqr() {
            assert(this.red, 'redSqr works only with red numbers');
            this.red._verify1(this);
            return this.red.sqr(this);
          };

          BN.prototype.redISqr = function redISqr() {
            assert(this.red, 'redISqr works only with red numbers');
            this.red._verify1(this);
            return this.red.isqr(this);
          };

          // Square root over p
          BN.prototype.redSqrt = function redSqrt() {
            assert(this.red, 'redSqrt works only with red numbers');
            this.red._verify1(this);
            return this.red.sqrt(this);
          };

          BN.prototype.redInvm = function redInvm() {
            assert(this.red, 'redInvm works only with red numbers');
            this.red._verify1(this);
            return this.red.invm(this);
          };

          // Return negative clone of `this` % `red modulo`
          BN.prototype.redNeg = function redNeg() {
            assert(this.red, 'redNeg works only with red numbers');
            this.red._verify1(this);
            return this.red.neg(this);
          };

          BN.prototype.redPow = function redPow(num) {
            assert(this.red && !num.red, 'redPow(normalNum)');
            this.red._verify1(this);
            return this.red.pow(this, num);
          };

          // Prime numbers with efficient reduction
          var primes = {
            k256: null,
            p224: null,
            p192: null,
            p25519: null
          };

          // Pseudo-Mersenne prime
          function MPrime(name, p) {
            // P = 2 ^ N - K
            this.name = name;
            this.p = new BN(p, 16);
            this.n = this.p.bitLength();
            this.k = new BN(1).iushln(this.n).isub(this.p);

            this.tmp = this._tmp();
          }

          MPrime.prototype._tmp = function _tmp() {
            var tmp = new BN(null);
            tmp.words = new Array(Math.ceil(this.n / 13));
            return tmp;
          };

          MPrime.prototype.ireduce = function ireduce(num) {
            // Assumes that `num` is less than `P^2`
            // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
            var r = num;
            var rlen;

            do {
              this.split(r, this.tmp);
              r = this.imulK(r);
              r = r.iadd(this.tmp);
              rlen = r.bitLength();
            } while (rlen > this.n);

            var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
            if (cmp === 0) {
              r.words[0] = 0;
              r.length = 1;
            } else if (cmp > 0) {
              r.isub(this.p);
            } else {
              r.strip();
            }

            return r;
          };

          MPrime.prototype.split = function split(input, out) {
            input.iushrn(this.n, 0, out);
          };

          MPrime.prototype.imulK = function imulK(num) {
            return num.imul(this.k);
          };

          function K256() {
            MPrime.call(
              this,
              'k256',
              'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
          }
          inherits(K256, MPrime);

          K256.prototype.split = function split(input, output) {
            // 256 = 9 * 26 + 22
            var mask = 0x3fffff;

            var outLen = Math.min(input.length, 9);
            for (var i = 0; i < outLen; i++) {
              output.words[i] = input.words[i];
            }
            output.length = outLen;

            if (input.length <= 9) {
              input.words[0] = 0;
              input.length = 1;
              return;
            }

            // Shift by 9 limbs
            var prev = input.words[9];
            output.words[output.length++] = prev & mask;

            for (i = 10; i < input.length; i++) {
              var next = input.words[i] | 0;
              input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);
              prev = next;
            }
            prev >>>= 22;
            input.words[i - 10] = prev;
            if (prev === 0 && input.length > 10) {
              input.length -= 10;
            } else {
              input.length -= 9;
            }
          };

          K256.prototype.imulK = function imulK(num) {
            // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
            num.words[num.length] = 0;
            num.words[num.length + 1] = 0;
            num.length += 2;

            // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
            var lo = 0;
            for (var i = 0; i < num.length; i++) {
              var w = num.words[i] | 0;
              lo += w * 0x3d1;
              num.words[i] = lo & 0x3ffffff;
              lo = w * 0x40 + ((lo / 0x4000000) | 0);
            }

            // Fast length reduction
            if (num.words[num.length - 1] === 0) {
              num.length--;
              if (num.words[num.length - 1] === 0) {
                num.length--;
              }
            }
            return num;
          };

          function P224() {
            MPrime.call(
              this,
              'p224',
              'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
          }
          inherits(P224, MPrime);

          function P192() {
            MPrime.call(
              this,
              'p192',
              'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
          }
          inherits(P192, MPrime);

          function P25519() {
            // 2 ^ 255 - 19
            MPrime.call(
              this,
              '25519',
              '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
          }
          inherits(P25519, MPrime);

          P25519.prototype.imulK = function imulK(num) {
            // K = 0x13
            var carry = 0;
            for (var i = 0; i < num.length; i++) {
              var hi = (num.words[i] | 0) * 0x13 + carry;
              var lo = hi & 0x3ffffff;
              hi >>>= 26;

              num.words[i] = lo;
              carry = hi;
            }
            if (carry !== 0) {
              num.words[num.length++] = carry;
            }
            return num;
          };

          // Exported mostly for testing purposes, use plain name instead
          BN._prime = function prime(name) {
            // Cached version of prime
            if (primes[name]) return primes[name];

            var prime;
            if (name === 'k256') {
              prime = new K256();
            } else if (name === 'p224') {
              prime = new P224();
            } else if (name === 'p192') {
              prime = new P192();
            } else if (name === 'p25519') {
              prime = new P25519();
            } else {
              throw new Error('Unknown prime ' + name);
            }
            primes[name] = prime;

            return prime;
          };

          //
          // Base reduction engine
          //
          function Red(m) {
            if (typeof m === 'string') {
              var prime = BN._prime(m);
              this.m = prime.p;
              this.prime = prime;
            } else {
              assert(m.gtn(1), 'modulus must be greater than 1');
              this.m = m;
              this.prime = null;
            }
          }

          Red.prototype._verify1 = function _verify1(a) {
            assert(a.negative === 0, 'red works only with positives');
            assert(a.red, 'red works only with red numbers');
          };

          Red.prototype._verify2 = function _verify2(a, b) {
            assert((a.negative | b.negative) === 0, 'red works only with positives');
            assert(a.red && a.red === b.red,
              'red works only with red numbers');
          };

          Red.prototype.imod = function imod(a) {
            if (this.prime) return this.prime.ireduce(a)._forceRed(this);
            return a.umod(this.m)._forceRed(this);
          };

          Red.prototype.neg = function neg(a) {
            if (a.isZero()) {
              return a.clone();
            }

            return this.m.sub(a)._forceRed(this);
          };

          Red.prototype.add = function add(a, b) {
            this._verify2(a, b);

            var res = a.add(b);
            if (res.cmp(this.m) >= 0) {
              res.isub(this.m);
            }
            return res._forceRed(this);
          };

          Red.prototype.iadd = function iadd(a, b) {
            this._verify2(a, b);

            var res = a.iadd(b);
            if (res.cmp(this.m) >= 0) {
              res.isub(this.m);
            }
            return res;
          };

          Red.prototype.sub = function sub(a, b) {
            this._verify2(a, b);

            var res = a.sub(b);
            if (res.cmpn(0) < 0) {
              res.iadd(this.m);
            }
            return res._forceRed(this);
          };

          Red.prototype.isub = function isub(a, b) {
            this._verify2(a, b);

            var res = a.isub(b);
            if (res.cmpn(0) < 0) {
              res.iadd(this.m);
            }
            return res;
          };

          Red.prototype.shl = function shl(a, num) {
            this._verify1(a);
            return this.imod(a.ushln(num));
          };

          Red.prototype.imul = function imul(a, b) {
            this._verify2(a, b);
            return this.imod(a.imul(b));
          };

          Red.prototype.mul = function mul(a, b) {
            this._verify2(a, b);
            return this.imod(a.mul(b));
          };

          Red.prototype.isqr = function isqr(a) {
            return this.imul(a, a.clone());
          };

          Red.prototype.sqr = function sqr(a) {
            return this.mul(a, a);
          };

          Red.prototype.sqrt = function sqrt(a) {
            if (a.isZero()) return a.clone();

            var mod3 = this.m.andln(3);
            assert(mod3 % 2 === 1);

            // Fast case
            if (mod3 === 3) {
              var pow = this.m.add(new BN(1)).iushrn(2);
              return this.pow(a, pow);
            }

            // Tonelli-Shanks algorithm (Totally unoptimized and slow)
            //
            // Find Q and S, that Q * 2 ^ S = (P - 1)
            var q = this.m.subn(1);
            var s = 0;
            while (!q.isZero() && q.andln(1) === 0) {
              s++;
              q.iushrn(1);
            }
            assert(!q.isZero());

            var one = new BN(1).toRed(this);
            var nOne = one.redNeg();

            // Find quadratic non-residue
            // NOTE: Max is such because of generalized Riemann hypothesis.
            var lpow = this.m.subn(1).iushrn(1);
            var z = this.m.bitLength();
            z = new BN(2 * z * z).toRed(this);

            while (this.pow(z, lpow).cmp(nOne) !== 0) {
              z.redIAdd(nOne);
            }

            var c = this.pow(z, q);
            var r = this.pow(a, q.addn(1).iushrn(1));
            var t = this.pow(a, q);
            var m = s;
            while (t.cmp(one) !== 0) {
              var tmp = t;
              for (var i = 0; tmp.cmp(one) !== 0; i++) {
                tmp = tmp.redSqr();
              }
              assert(i < m);
              var b = this.pow(c, new BN(1).iushln(m - i - 1));

              r = r.redMul(b);
              c = b.redSqr();
              t = t.redMul(c);
              m = i;
            }

            return r;
          };

          Red.prototype.invm = function invm(a) {
            var inv = a._invmp(this.m);
            if (inv.negative !== 0) {
              inv.negative = 0;
              return this.imod(inv).redNeg();
            } else {
              return this.imod(inv);
            }
          };

          Red.prototype.pow = function pow(a, num) {
            if (num.isZero()) return new BN(1).toRed(this);
            if (num.cmpn(1) === 0) return a.clone();

            var windowSize = 4;
            var wnd = new Array(1 << windowSize);
            wnd[0] = new BN(1).toRed(this);
            wnd[1] = a;
            for (var i = 2; i < wnd.length; i++) {
              wnd[i] = this.mul(wnd[i - 1], a);
            }

            var res = wnd[0];
            var current = 0;
            var currentLen = 0;
            var start = num.bitLength() % 26;
            if (start === 0) {
              start = 26;
            }

            for (i = num.length - 1; i >= 0; i--) {
              var word = num.words[i];
              for (var j = start - 1; j >= 0; j--) {
                var bit = (word >> j) & 1;
                if (res !== wnd[0]) {
                  res = this.sqr(res);
                }

                if (bit === 0 && current === 0) {
                  currentLen = 0;
                  continue;
                }

                current <<= 1;
                current |= bit;
                currentLen++;
                if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;

                res = this.mul(res, wnd[current]);
                currentLen = 0;
                current = 0;
              }
              start = 26;
            }

            return res;
          };

          Red.prototype.convertTo = function convertTo(num) {
            var r = num.umod(this.m);

            return r === num ? r.clone() : r;
          };

          Red.prototype.convertFrom = function convertFrom(num) {
            var res = num.clone();
            res.red = null;
            return res;
          };

          //
          // Montgomery method engine
          //

          BN.mont = function mont(num) {
            return new Mont(num);
          };

          function Mont(m) {
            Red.call(this, m);

            this.shift = this.m.bitLength();
            if (this.shift % 26 !== 0) {
              this.shift += 26 - (this.shift % 26);
            }

            this.r = new BN(1).iushln(this.shift);
            this.r2 = this.imod(this.r.sqr());
            this.rinv = this.r._invmp(this.m);

            this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
            this.minv = this.minv.umod(this.r);
            this.minv = this.r.sub(this.minv);
          }
          inherits(Mont, Red);

          Mont.prototype.convertTo = function convertTo(num) {
            return this.imod(num.ushln(this.shift));
          };

          Mont.prototype.convertFrom = function convertFrom(num) {
            var r = this.imod(num.mul(this.rinv));
            r.red = null;
            return r;
          };

          Mont.prototype.imul = function imul(a, b) {
            if (a.isZero() || b.isZero()) {
              a.words[0] = 0;
              a.length = 1;
              return a;
            }

            var t = a.imul(b);
            var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
            var u = t.isub(c).iushrn(this.shift);
            var res = u;

            if (u.cmp(this.m) >= 0) {
              res = u.isub(this.m);
            } else if (u.cmpn(0) < 0) {
              res = u.iadd(this.m);
            }

            return res._forceRed(this);
          };

          Mont.prototype.mul = function mul(a, b) {
            if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);

            var t = a.mul(b);
            var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
            var u = t.isub(c).iushrn(this.shift);
            var res = u;
            if (u.cmp(this.m) >= 0) {
              res = u.isub(this.m);
            } else if (u.cmpn(0) < 0) {
              res = u.iadd(this.m);
            }

            return res._forceRed(this);
          };

          Mont.prototype.invm = function invm(a) {
            // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
            var res = this.imod(a._invmp(this.m).mul(this.r2));
            return res._forceRed(this);
          };
        })(typeof module === 'undefined' || module, this);

        /* WEBPACK VAR INJECTION */
      }.call(this, __webpack_require__(/*! ./../../../buildin/module.js */ "../../../../../AppData/Roaming/npm/node_modules/webpack/buildin/module.js")(module)))

      /***/
    }),

/***/ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/brorand/index.js":
/*!***********************************************!*\
  !*** (webpack)/node_modules/brorand/index.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

      var r;

      module.exports = function rand(len) {
        if (!r)
          r = new Rand(null);

        return r.generate(len);
      };

      function Rand(rand) {
        this.rand = rand;
      }
      module.exports.Rand = Rand;

      Rand.prototype.generate = function generate(len) {
        return this._rand(len);
      };

      // Emulate crypto API using randy
      Rand.prototype._rand = function _rand(n) {
        if (this.rand.getBytes)
          return this.rand.getBytes(n);

        var res = new Uint8Array(n);
        for (var i = 0; i < res.length; i++)
          res[i] = this.rand.getByte();
        return res;
      };

      if (typeof self === 'object') {
        if (self.crypto && self.crypto.getRandomValues) {
          // Modern browsers
          Rand.prototype._rand = function _rand(n) {
            var arr = new Uint8Array(n);
            self.crypto.getRandomValues(arr);
            return arr;
          };
        } else if (self.msCrypto && self.msCrypto.getRandomValues) {
          // IE
          Rand.prototype._rand = function _rand(n) {
            var arr = new Uint8Array(n);
            self.msCrypto.getRandomValues(arr);
            return arr;
          };

          // Safari's WebWorkers do not have `crypto`
        } else if (typeof window === 'object') {
          // Old junk
          Rand.prototype._rand = function () {
            throw new Error('Not implemented yet');
          };
        }
      } else {
        // Node.js or Web worker with no crypto support
        try {
          var crypto = __webpack_require__(/*! crypto */ 3);
          if (typeof crypto.randomBytes !== 'function')
            throw new Error('Not supported');

          Rand.prototype._rand = function _rand(n) {
            return crypto.randomBytes(n);
          };
        } catch (e) {
        }
      }


      /***/
    }),

/***/ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/browserify-aes/aes.js":
/*!****************************************************!*\
  !*** (webpack)/node_modules/browserify-aes/aes.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

      // based on the aes implimentation in triple sec
      // https://github.com/keybase/triplesec
      // which is in turn based on the one from crypto-js
      // https://code.google.com/p/crypto-js/

      var Buffer = __webpack_require__(/*! safe-buffer */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/safe-buffer/index.js").Buffer

      function asUInt32Array(buf) {
        if (!Buffer.isBuffer(buf)) buf = Buffer.from(buf)

        var len = (buf.length / 4) | 0
        var out = new Array(len)

        for (var i = 0; i < len; i++) {
          out[i] = buf.readUInt32BE(i * 4)
        }

        return out
      }

      function scrubVec(v) {
        for (var i = 0; i < v.length; v++) {
          v[i] = 0
        }
      }

      function cryptBlock(M, keySchedule, SUB_MIX, SBOX, nRounds) {
        var SUB_MIX0 = SUB_MIX[0]
        var SUB_MIX1 = SUB_MIX[1]
        var SUB_MIX2 = SUB_MIX[2]
        var SUB_MIX3 = SUB_MIX[3]

        var s0 = M[0] ^ keySchedule[0]
        var s1 = M[1] ^ keySchedule[1]
        var s2 = M[2] ^ keySchedule[2]
        var s3 = M[3] ^ keySchedule[3]
        var t0, t1, t2, t3
        var ksRow = 4

        for (var round = 1; round < nRounds; round++) {
          t0 = SUB_MIX0[s0 >>> 24] ^ SUB_MIX1[(s1 >>> 16) & 0xff] ^ SUB_MIX2[(s2 >>> 8) & 0xff] ^ SUB_MIX3[s3 & 0xff] ^ keySchedule[ksRow++]
          t1 = SUB_MIX0[s1 >>> 24] ^ SUB_MIX1[(s2 >>> 16) & 0xff] ^ SUB_MIX2[(s3 >>> 8) & 0xff] ^ SUB_MIX3[s0 & 0xff] ^ keySchedule[ksRow++]
          t2 = SUB_MIX0[s2 >>> 24] ^ SUB_MIX1[(s3 >>> 16) & 0xff] ^ SUB_MIX2[(s0 >>> 8) & 0xff] ^ SUB_MIX3[s1 & 0xff] ^ keySchedule[ksRow++]
          t3 = SUB_MIX0[s3 >>> 24] ^ SUB_MIX1[(s0 >>> 16) & 0xff] ^ SUB_MIX2[(s1 >>> 8) & 0xff] ^ SUB_MIX3[s2 & 0xff] ^ keySchedule[ksRow++]
          s0 = t0
          s1 = t1
          s2 = t2
          s3 = t3
        }

        t0 = ((SBOX[s0 >>> 24] << 24) | (SBOX[(s1 >>> 16) & 0xff] << 16) | (SBOX[(s2 >>> 8) & 0xff] << 8) | SBOX[s3 & 0xff]) ^ keySchedule[ksRow++]
        t1 = ((SBOX[s1 >>> 24] << 24) | (SBOX[(s2 >>> 16) & 0xff] << 16) | (SBOX[(s3 >>> 8) & 0xff] << 8) | SBOX[s0 & 0xff]) ^ keySchedule[ksRow++]
        t2 = ((SBOX[s2 >>> 24] << 24) | (SBOX[(s3 >>> 16) & 0xff] << 16) | (SBOX[(s0 >>> 8) & 0xff] << 8) | SBOX[s1 & 0xff]) ^ keySchedule[ksRow++]
        t3 = ((SBOX[s3 >>> 24] << 24) | (SBOX[(s0 >>> 16) & 0xff] << 16) | (SBOX[(s1 >>> 8) & 0xff] << 8) | SBOX[s2 & 0xff]) ^ keySchedule[ksRow++]
        t0 = t0 >>> 0
        t1 = t1 >>> 0
        t2 = t2 >>> 0
        t3 = t3 >>> 0

        return [t0, t1, t2, t3]
      }

      // AES constants
      var RCON = [0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36]
      var G = (function () {
        // Compute double table
        var d = new Array(256)
        for (var j = 0; j < 256; j++) {
          if (j < 128) {
            d[j] = j << 1
          } else {
            d[j] = (j << 1) ^ 0x11b
          }
        }

        var SBOX = []
        var INV_SBOX = []
        var SUB_MIX = [[], [], [], []]
        var INV_SUB_MIX = [[], [], [], []]

        // Walk GF(2^8)
        var x = 0
        var xi = 0
        for (var i = 0; i < 256; ++i) {
          // Compute sbox
          var sx = xi ^ (xi << 1) ^ (xi << 2) ^ (xi << 3) ^ (xi << 4)
          sx = (sx >>> 8) ^ (sx & 0xff) ^ 0x63
          SBOX[x] = sx
          INV_SBOX[sx] = x

          // Compute multiplication
          var x2 = d[x]
          var x4 = d[x2]
          var x8 = d[x4]

          // Compute sub bytes, mix columns tables
          var t = (d[sx] * 0x101) ^ (sx * 0x1010100)
          SUB_MIX[0][x] = (t << 24) | (t >>> 8)
          SUB_MIX[1][x] = (t << 16) | (t >>> 16)
          SUB_MIX[2][x] = (t << 8) | (t >>> 24)
          SUB_MIX[3][x] = t

          // Compute inv sub bytes, inv mix columns tables
          t = (x8 * 0x1010101) ^ (x4 * 0x10001) ^ (x2 * 0x101) ^ (x * 0x1010100)
          INV_SUB_MIX[0][sx] = (t << 24) | (t >>> 8)
          INV_SUB_MIX[1][sx] = (t << 16) | (t >>> 16)
          INV_SUB_MIX[2][sx] = (t << 8) | (t >>> 24)
          INV_SUB_MIX[3][sx] = t

          if (x === 0) {
            x = xi = 1
          } else {
            x = x2 ^ d[d[d[x8 ^ x2]]]
            xi ^= d[d[xi]]
          }
        }

        return {
          SBOX: SBOX,
          INV_SBOX: INV_SBOX,
          SUB_MIX: SUB_MIX,
          INV_SUB_MIX: INV_SUB_MIX
        }
      })()

      function AES(key) {
        this._key = asUInt32Array(key)
        this._reset()
      }

      AES.blockSize = 4 * 4
      AES.keySize = 256 / 8
      AES.prototype.blockSize = AES.blockSize
      AES.prototype.keySize = AES.keySize
      AES.prototype._reset = function () {
        var keyWords = this._key
        var keySize = keyWords.length
        var nRounds = keySize + 6
        var ksRows = (nRounds + 1) * 4

        var keySchedule = []
        for (var k = 0; k < keySize; k++) {
          keySchedule[k] = keyWords[k]
        }

        for (k = keySize; k < ksRows; k++) {
          var t = keySchedule[k - 1]

          if (k % keySize === 0) {
            t = (t << 8) | (t >>> 24)
            t =
              (G.SBOX[t >>> 24] << 24) |
              (G.SBOX[(t >>> 16) & 0xff] << 16) |
              (G.SBOX[(t >>> 8) & 0xff] << 8) |
              (G.SBOX[t & 0xff])

            t ^= RCON[(k / keySize) | 0] << 24
          } else if (keySize > 6 && k % keySize === 4) {
            t =
              (G.SBOX[t >>> 24] << 24) |
              (G.SBOX[(t >>> 16) & 0xff] << 16) |
              (G.SBOX[(t >>> 8) & 0xff] << 8) |
              (G.SBOX[t & 0xff])
          }

          keySchedule[k] = keySchedule[k - keySize] ^ t
        }

        var invKeySchedule = []
        for (var ik = 0; ik < ksRows; ik++) {
          var ksR = ksRows - ik
          var tt = keySchedule[ksR - (ik % 4 ? 0 : 4)]

          if (ik < 4 || ksR <= 4) {
            invKeySchedule[ik] = tt
          } else {
            invKeySchedule[ik] =
              G.INV_SUB_MIX[0][G.SBOX[tt >>> 24]] ^
              G.INV_SUB_MIX[1][G.SBOX[(tt >>> 16) & 0xff]] ^
              G.INV_SUB_MIX[2][G.SBOX[(tt >>> 8) & 0xff]] ^
              G.INV_SUB_MIX[3][G.SBOX[tt & 0xff]]
          }
        }

        this._nRounds = nRounds
        this._keySchedule = keySchedule
        this._invKeySchedule = invKeySchedule
      }

      AES.prototype.encryptBlockRaw = function (M) {
        M = asUInt32Array(M)
        return cryptBlock(M, this._keySchedule, G.SUB_MIX, G.SBOX, this._nRounds)
      }

      AES.prototype.encryptBlock = function (M) {
        var out = this.encryptBlockRaw(M)
        var buf = Buffer.allocUnsafe(16)
        buf.writeUInt32BE(out[0], 0)
        buf.writeUInt32BE(out[1], 4)
        buf.writeUInt32BE(out[2], 8)
        buf.writeUInt32BE(out[3], 12)
        return buf
      }

      AES.prototype.decryptBlock = function (M) {
        M = asUInt32Array(M)

        // swap
        var m1 = M[1]
        M[1] = M[3]
        M[3] = m1

        var out = cryptBlock(M, this._invKeySchedule, G.INV_SUB_MIX, G.INV_SBOX, this._nRounds)
        var buf = Buffer.allocUnsafe(16)
        buf.writeUInt32BE(out[0], 0)
        buf.writeUInt32BE(out[3], 4)
        buf.writeUInt32BE(out[2], 8)
        buf.writeUInt32BE(out[1], 12)
        return buf
      }

      AES.prototype.scrub = function () {
        scrubVec(this._keySchedule)
        scrubVec(this._invKeySchedule)
        scrubVec(this._key)
      }

      module.exports.AES = AES


      /***/
    }),

/***/ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/browserify-aes/authCipher.js":
/*!***********************************************************!*\
  !*** (webpack)/node_modules/browserify-aes/authCipher.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

      var aes = __webpack_require__(/*! ./aes */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/browserify-aes/aes.js")
      var Buffer = __webpack_require__(/*! safe-buffer */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/safe-buffer/index.js").Buffer
      var Transform = __webpack_require__(/*! cipher-base */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/cipher-base/index.js")
      var inherits = __webpack_require__(/*! inherits */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/inherits/inherits_browser.js")
      var GHASH = __webpack_require__(/*! ./ghash */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/browserify-aes/ghash.js")
      var xor = __webpack_require__(/*! buffer-xor */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/buffer-xor/index.js")
      var incr32 = __webpack_require__(/*! ./incr32 */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/browserify-aes/incr32.js")

      function xorTest(a, b) {
        var out = 0
        if (a.length !== b.length) out++

        var len = Math.min(a.length, b.length)
        for (var i = 0; i < len; ++i) {
          out += (a[i] ^ b[i])
        }

        return out
      }

      function calcIv(self, iv, ck) {
        if (iv.length === 12) {
          self._finID = Buffer.concat([iv, Buffer.from([0, 0, 0, 1])])
          return Buffer.concat([iv, Buffer.from([0, 0, 0, 2])])
        }
        var ghash = new GHASH(ck)
        var len = iv.length
        var toPad = len % 16
        ghash.update(iv)
        if (toPad) {
          toPad = 16 - toPad
          ghash.update(Buffer.alloc(toPad, 0))
        }
        ghash.update(Buffer.alloc(8, 0))
        var ivBits = len * 8
        var tail = Buffer.alloc(8)
        tail.writeUIntBE(ivBits, 0, 8)
        ghash.update(tail)
        self._finID = ghash.state
        var out = Buffer.from(self._finID)
        incr32(out)
        return out
      }
      function StreamCipher(mode, key, iv, decrypt) {
        Transform.call(this)

        var h = Buffer.alloc(4, 0)

        this._cipher = new aes.AES(key)
        var ck = this._cipher.encryptBlock(h)
        this._ghash = new GHASH(ck)
        iv = calcIv(this, iv, ck)

        this._prev = Buffer.from(iv)
        this._cache = Buffer.allocUnsafe(0)
        this._secCache = Buffer.allocUnsafe(0)
        this._decrypt = decrypt
        this._alen = 0
        this._len = 0
        this._mode = mode

        this._authTag = null
        this._called = false
      }

      inherits(StreamCipher, Transform)

      StreamCipher.prototype._update = function (chunk) {
        if (!this._called && this._alen) {
          var rump = 16 - (this._alen % 16)
          if (rump < 16) {
            rump = Buffer.alloc(rump, 0)
            this._ghash.update(rump)
          }
        }

        this._called = true
        var out = this._mode.encrypt(this, chunk)
        if (this._decrypt) {
          this._ghash.update(chunk)
        } else {
          this._ghash.update(out)
        }
        this._len += chunk.length
        return out
      }

      StreamCipher.prototype._final = function () {
        if (this._decrypt && !this._authTag) throw new Error('Unsupported state or unable to authenticate data')

        var tag = xor(this._ghash.final(this._alen * 8, this._len * 8), this._cipher.encryptBlock(this._finID))
        if (this._decrypt && xorTest(tag, this._authTag)) throw new Error('Unsupported state or unable to authenticate data')

        this._authTag = tag
        this._cipher.scrub()
      }

      StreamCipher.prototype.getAuthTag = function getAuthTag() {
        if (this._decrypt || !Buffer.isBuffer(this._authTag)) throw new Error('Attempting to get auth tag in unsupported state')

        return this._authTag
      }

      StreamCipher.prototype.setAuthTag = function setAuthTag(tag) {
        if (!this._decrypt) throw new Error('Attempting to set auth tag in unsupported state')

        this._authTag = tag
      }

      StreamCipher.prototype.setAAD = function setAAD(buf) {
        if (this._called) throw new Error('Attempting to set AAD in unsupported state')

        this._ghash.update(buf)
        this._alen += buf.length
      }

      module.exports = StreamCipher


      /***/
    }),

/***/ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/browserify-aes/browser.js":
/*!********************************************************!*\
  !*** (webpack)/node_modules/browserify-aes/browser.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

      var ciphers = __webpack_require__(/*! ./encrypter */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/browserify-aes/encrypter.js")
      var deciphers = __webpack_require__(/*! ./decrypter */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/browserify-aes/decrypter.js")
      var modes = __webpack_require__(/*! ./modes/list.json */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/browserify-aes/modes/list.json")

      function getCiphers() {
        return Object.keys(modes)
      }

      exports.createCipher = exports.Cipher = ciphers.createCipher
      exports.createCipheriv = exports.Cipheriv = ciphers.createCipheriv
      exports.createDecipher = exports.Decipher = deciphers.createDecipher
      exports.createDecipheriv = exports.Decipheriv = deciphers.createDecipheriv
      exports.listCiphers = exports.getCiphers = getCiphers


      /***/
    }),

/***/ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/browserify-aes/decrypter.js":
/*!**********************************************************!*\
  !*** (webpack)/node_modules/browserify-aes/decrypter.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

      var AuthCipher = __webpack_require__(/*! ./authCipher */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/browserify-aes/authCipher.js")
      var Buffer = __webpack_require__(/*! safe-buffer */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/safe-buffer/index.js").Buffer
      var MODES = __webpack_require__(/*! ./modes */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/browserify-aes/modes/index.js")
      var StreamCipher = __webpack_require__(/*! ./streamCipher */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/browserify-aes/streamCipher.js")
      var Transform = __webpack_require__(/*! cipher-base */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/cipher-base/index.js")
      var aes = __webpack_require__(/*! ./aes */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/browserify-aes/aes.js")
      var ebtk = __webpack_require__(/*! evp_bytestokey */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/evp_bytestokey/index.js")
      var inherits = __webpack_require__(/*! inherits */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/inherits/inherits_browser.js")

      function Decipher(mode, key, iv) {
        Transform.call(this)

        this._cache = new Splitter()
        this._last = void 0
        this._cipher = new aes.AES(key)
        this._prev = Buffer.from(iv)
        this._mode = mode
        this._autopadding = true
      }

      inherits(Decipher, Transform)

      Decipher.prototype._update = function (data) {
        this._cache.add(data)
        var chunk
        var thing
        var out = []
        while ((chunk = this._cache.get(this._autopadding))) {
          thing = this._mode.decrypt(this, chunk)
          out.push(thing)
        }
        return Buffer.concat(out)
      }

      Decipher.prototype._final = function () {
        var chunk = this._cache.flush()
        if (this._autopadding) {
          return unpad(this._mode.decrypt(this, chunk))
        } else if (chunk) {
          throw new Error('data not multiple of block length')
        }
      }

      Decipher.prototype.setAutoPadding = function (setTo) {
        this._autopadding = !!setTo
        return this
      }

      function Splitter() {
        this.cache = Buffer.allocUnsafe(0)
      }

      Splitter.prototype.add = function (data) {
        this.cache = Buffer.concat([this.cache, data])
      }

      Splitter.prototype.get = function (autoPadding) {
        var out
        if (autoPadding) {
          if (this.cache.length > 16) {
            out = this.cache.slice(0, 16)
            this.cache = this.cache.slice(16)
            return out
          }
        } else {
          if (this.cache.length >= 16) {
            out = this.cache.slice(0, 16)
            this.cache = this.cache.slice(16)
            return out
          }
        }

        return null
      }

      Splitter.prototype.flush = function () {
        if (this.cache.length) return this.cache
      }

      function unpad(last) {
        var padded = last[15]
        if (padded < 1 || padded > 16) {
          throw new Error('unable to decrypt data')
        }
        var i = -1
        while (++i < padded) {
          if (last[(i + (16 - padded))] !== padded) {
            throw new Error('unable to decrypt data')
          }
        }
        if (padded === 16) return

        return last.slice(0, 16 - padded)
      }

      function createDecipheriv(suite, password, iv) {
        var config = MODES[suite.toLowerCase()]
        if (!config) throw new TypeError('invalid suite type')

        if (typeof iv === 'string') iv = Buffer.from(iv)
        if (config.mode !== 'GCM' && iv.length !== config.iv) throw new TypeError('invalid iv length ' + iv.length)

        if (typeof password === 'string') password = Buffer.from(password)
        if (password.length !== config.key / 8) throw new TypeError('invalid key length ' + password.length)

        if (config.type === 'stream') {
          return new StreamCipher(config.module, password, iv, true)
        } else if (config.type === 'auth') {
          return new AuthCipher(config.module, password, iv, true)
        }

        return new Decipher(config.module, password, iv)
      }

      function createDecipher(suite, password) {
        var config = MODES[suite.toLowerCase()]
        if (!config) throw new TypeError('invalid suite type')

        var keys = ebtk(password, false, config.key, config.iv)
        return createDecipheriv(suite, keys.key, keys.iv)
      }

      exports.createDecipher = createDecipher
      exports.createDecipheriv = createDecipheriv


      /***/
    }),

/***/ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/browserify-aes/encrypter.js":
/*!**********************************************************!*\
  !*** (webpack)/node_modules/browserify-aes/encrypter.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

      var MODES = __webpack_require__(/*! ./modes */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/browserify-aes/modes/index.js")
      var AuthCipher = __webpack_require__(/*! ./authCipher */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/browserify-aes/authCipher.js")
      var Buffer = __webpack_require__(/*! safe-buffer */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/safe-buffer/index.js").Buffer
      var StreamCipher = __webpack_require__(/*! ./streamCipher */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/browserify-aes/streamCipher.js")
      var Transform = __webpack_require__(/*! cipher-base */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/cipher-base/index.js")
      var aes = __webpack_require__(/*! ./aes */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/browserify-aes/aes.js")
      var ebtk = __webpack_require__(/*! evp_bytestokey */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/evp_bytestokey/index.js")
      var inherits = __webpack_require__(/*! inherits */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/inherits/inherits_browser.js")

      function Cipher(mode, key, iv) {
        Transform.call(this)

        this._cache = new Splitter()
        this._cipher = new aes.AES(key)
        this._prev = Buffer.from(iv)
        this._mode = mode
        this._autopadding = true
      }

      inherits(Cipher, Transform)

      Cipher.prototype._update = function (data) {
        this._cache.add(data)
        var chunk
        var thing
        var out = []

        while ((chunk = this._cache.get())) {
          thing = this._mode.encrypt(this, chunk)
          out.push(thing)
        }

        return Buffer.concat(out)
      }

      var PADDING = Buffer.alloc(16, 0x10)

      Cipher.prototype._final = function () {
        var chunk = this._cache.flush()
        if (this._autopadding) {
          chunk = this._mode.encrypt(this, chunk)
          this._cipher.scrub()
          return chunk
        }

        if (!chunk.equals(PADDING)) {
          this._cipher.scrub()
          throw new Error('data not multiple of block length')
        }
      }

      Cipher.prototype.setAutoPadding = function (setTo) {
        this._autopadding = !!setTo
        return this
      }

      function Splitter() {
        this.cache = Buffer.allocUnsafe(0)
      }

      Splitter.prototype.add = function (data) {
        this.cache = Buffer.concat([this.cache, data])
      }

      Splitter.prototype.get = function () {
        if (this.cache.length > 15) {
          var out = this.cache.slice(0, 16)
          this.cache = this.cache.slice(16)
          return out
        }
        return null
      }

      Splitter.prototype.flush = function () {
        var len = 16 - this.cache.length
        var padBuff = Buffer.allocUnsafe(len)

        var i = -1
        while (++i < len) {
          padBuff.writeUInt8(len, i)
        }

        return Buffer.concat([this.cache, padBuff])
      }

      function createCipheriv(suite, password, iv) {
        var config = MODES[suite.toLowerCase()]
        if (!config) throw new TypeError('invalid suite type')

        if (typeof password === 'string') password = Buffer.from(password)
        if (password.length !== config.key / 8) throw new TypeError('invalid key length ' + password.length)

        if (typeof iv === 'string') iv = Buffer.from(iv)
        if (config.mode !== 'GCM' && iv.length !== config.iv) throw new TypeError('invalid iv length ' + iv.length)

        if (config.type === 'stream') {
          return new StreamCipher(config.module, password, iv)
        } else if (config.type === 'auth') {
          return new AuthCipher(config.module, password, iv)
        }

        return new Cipher(config.module, password, iv)
      }

      function createCipher(suite, password) {
        var config = MODES[suite.toLowerCase()]
        if (!config) throw new TypeError('invalid suite type')

        var keys = ebtk(password, false, config.key, config.iv)
        return createCipheriv(suite, keys.key, keys.iv)
      }

      exports.createCipheriv = createCipheriv
      exports.createCipher = createCipher


      /***/
    }),

/***/ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/browserify-aes/ghash.js":
/*!******************************************************!*\
  !*** (webpack)/node_modules/browserify-aes/ghash.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

      var Buffer = __webpack_require__(/*! safe-buffer */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/safe-buffer/index.js").Buffer
      var ZEROES = Buffer.alloc(16, 0)

      function toArray(buf) {
        return [
          buf.readUInt32BE(0),
          buf.readUInt32BE(4),
          buf.readUInt32BE(8),
          buf.readUInt32BE(12)
        ]
      }

      function fromArray(out) {
        var buf = Buffer.allocUnsafe(16)
        buf.writeUInt32BE(out[0] >>> 0, 0)
        buf.writeUInt32BE(out[1] >>> 0, 4)
        buf.writeUInt32BE(out[2] >>> 0, 8)
        buf.writeUInt32BE(out[3] >>> 0, 12)
        return buf
      }

      function GHASH(key) {
        this.h = key
        this.state = Buffer.alloc(16, 0)
        this.cache = Buffer.allocUnsafe(0)
      }

      // from http://bitwiseshiftleft.github.io/sjcl/doc/symbols/src/core_gcm.js.html
      // by Juho Vähä-Herttua
      GHASH.prototype.ghash = function (block) {
        var i = -1
        while (++i < block.length) {
          this.state[i] ^= block[i]
        }
        this._multiply()
      }

      GHASH.prototype._multiply = function () {
        var Vi = toArray(this.h)
        var Zi = [0, 0, 0, 0]
        var j, xi, lsbVi
        var i = -1
        while (++i < 128) {
          xi = (this.state[~~(i / 8)] & (1 << (7 - (i % 8)))) !== 0
          if (xi) {
            // Z_i+1 = Z_i ^ V_i
            Zi[0] ^= Vi[0]
            Zi[1] ^= Vi[1]
            Zi[2] ^= Vi[2]
            Zi[3] ^= Vi[3]
          }

          // Store the value of LSB(V_i)
          lsbVi = (Vi[3] & 1) !== 0

          // V_i+1 = V_i >> 1
          for (j = 3; j > 0; j--) {
            Vi[j] = (Vi[j] >>> 1) | ((Vi[j - 1] & 1) << 31)
          }
          Vi[0] = Vi[0] >>> 1

          // If LSB(V_i) is 1, V_i+1 = (V_i >> 1) ^ R
          if (lsbVi) {
            Vi[0] = Vi[0] ^ (0xe1 << 24)
          }
        }
        this.state = fromArray(Zi)
      }

      GHASH.prototype.update = function (buf) {
        this.cache = Buffer.concat([this.cache, buf])
        var chunk
        while (this.cache.length >= 16) {
          chunk = this.cache.slice(0, 16)
          this.cache = this.cache.slice(16)
          this.ghash(chunk)
        }
      }

      GHASH.prototype.final = function (abl, bl) {
        if (this.cache.length) {
          this.ghash(Buffer.concat([this.cache, ZEROES], 16))
        }

        this.ghash(fromArray([0, abl, 0, bl]))
        return this.state
      }

      module.exports = GHASH


      /***/
    }),

/***/ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/browserify-aes/incr32.js":
/*!*******************************************************!*\
  !*** (webpack)/node_modules/browserify-aes/incr32.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function (module, exports) {

      function incr32(iv) {
        var len = iv.length
        var item
        while (len--) {
          item = iv.readUInt8(len)
          if (item === 255) {
            iv.writeUInt8(0, len)
          } else {
            item++
            iv.writeUInt8(item, len)
            break
          }
        }
      }
      module.exports = incr32


      /***/
    }),

/***/ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/browserify-aes/modes/cbc.js":
/*!**********************************************************!*\
  !*** (webpack)/node_modules/browserify-aes/modes/cbc.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

      var xor = __webpack_require__(/*! buffer-xor */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/buffer-xor/index.js")

      exports.encrypt = function (self, block) {
        var data = xor(block, self._prev)

        self._prev = self._cipher.encryptBlock(data)
        return self._prev
      }

      exports.decrypt = function (self, block) {
        var pad = self._prev

        self._prev = block
        var out = self._cipher.decryptBlock(block)

        return xor(out, pad)
      }


      /***/
    }),

/***/ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/browserify-aes/modes/cfb.js":
/*!**********************************************************!*\
  !*** (webpack)/node_modules/browserify-aes/modes/cfb.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

      var Buffer = __webpack_require__(/*! safe-buffer */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/safe-buffer/index.js").Buffer
      var xor = __webpack_require__(/*! buffer-xor */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/buffer-xor/index.js")

      function encryptStart(self, data, decrypt) {
        var len = data.length
        var out = xor(data, self._cache)
        self._cache = self._cache.slice(len)
        self._prev = Buffer.concat([self._prev, decrypt ? data : out])
        return out
      }

      exports.encrypt = function (self, data, decrypt) {
        var out = Buffer.allocUnsafe(0)
        var len

        while (data.length) {
          if (self._cache.length === 0) {
            self._cache = self._cipher.encryptBlock(self._prev)
            self._prev = Buffer.allocUnsafe(0)
          }

          if (self._cache.length <= data.length) {
            len = self._cache.length
            out = Buffer.concat([out, encryptStart(self, data.slice(0, len), decrypt)])
            data = data.slice(len)
          } else {
            out = Buffer.concat([out, encryptStart(self, data, decrypt)])
            break
          }
        }

        return out
      }


      /***/
    }),

/***/ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/browserify-aes/modes/cfb1.js":
/*!***********************************************************!*\
  !*** (webpack)/node_modules/browserify-aes/modes/cfb1.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

      var Buffer = __webpack_require__(/*! safe-buffer */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/safe-buffer/index.js").Buffer

      function encryptByte(self, byteParam, decrypt) {
        var pad
        var i = -1
        var len = 8
        var out = 0
        var bit, value
        while (++i < len) {
          pad = self._cipher.encryptBlock(self._prev)
          bit = (byteParam & (1 << (7 - i))) ? 0x80 : 0
          value = pad[0] ^ bit
          out += ((value & 0x80) >> (i % 8))
          self._prev = shiftIn(self._prev, decrypt ? bit : value)
        }
        return out
      }

      function shiftIn(buffer, value) {
        var len = buffer.length
        var i = -1
        var out = Buffer.allocUnsafe(buffer.length)
        buffer = Buffer.concat([buffer, Buffer.from([value])])

        while (++i < len) {
          out[i] = buffer[i] << 1 | buffer[i + 1] >> (7)
        }

        return out
      }

      exports.encrypt = function (self, chunk, decrypt) {
        var len = chunk.length
        var out = Buffer.allocUnsafe(len)
        var i = -1

        while (++i < len) {
          out[i] = encryptByte(self, chunk[i], decrypt)
        }

        return out
      }


      /***/
    }),

/***/ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/browserify-aes/modes/cfb8.js":
/*!***********************************************************!*\
  !*** (webpack)/node_modules/browserify-aes/modes/cfb8.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

      var Buffer = __webpack_require__(/*! safe-buffer */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/safe-buffer/index.js").Buffer

      function encryptByte(self, byteParam, decrypt) {
        var pad = self._cipher.encryptBlock(self._prev)
        var out = pad[0] ^ byteParam

        self._prev = Buffer.concat([
          self._prev.slice(1),
          Buffer.from([decrypt ? byteParam : out])
        ])

        return out
      }

      exports.encrypt = function (self, chunk, decrypt) {
        var len = chunk.length
        var out = Buffer.allocUnsafe(len)
        var i = -1

        while (++i < len) {
          out[i] = encryptByte(self, chunk[i], decrypt)
        }

        return out
      }


      /***/
    }),

/***/ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/browserify-aes/modes/ctr.js":
/*!**********************************************************!*\
  !*** (webpack)/node_modules/browserify-aes/modes/ctr.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

      var xor = __webpack_require__(/*! buffer-xor */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/buffer-xor/index.js")
      var Buffer = __webpack_require__(/*! safe-buffer */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/safe-buffer/index.js").Buffer
      var incr32 = __webpack_require__(/*! ../incr32 */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/browserify-aes/incr32.js")

      function getBlock(self) {
        var out = self._cipher.encryptBlockRaw(self._prev)
        incr32(self._prev)
        return out
      }

      var blockSize = 16
      exports.encrypt = function (self, chunk) {
        var chunkNum = Math.ceil(chunk.length / blockSize)
        var start = self._cache.length
        self._cache = Buffer.concat([
          self._cache,
          Buffer.allocUnsafe(chunkNum * blockSize)
        ])
        for (var i = 0; i < chunkNum; i++) {
          var out = getBlock(self)
          var offset = start + i * blockSize
          self._cache.writeUInt32BE(out[0], offset + 0)
          self._cache.writeUInt32BE(out[1], offset + 4)
          self._cache.writeUInt32BE(out[2], offset + 8)
          self._cache.writeUInt32BE(out[3], offset + 12)
        }
        var pad = self._cache.slice(0, chunk.length)
        self._cache = self._cache.slice(chunk.length)
        return xor(chunk, pad)
      }


      /***/
    }),

/***/ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/browserify-aes/modes/ecb.js":
/*!**********************************************************!*\
  !*** (webpack)/node_modules/browserify-aes/modes/ecb.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function (module, exports) {

      exports.encrypt = function (self, block) {
        return self._cipher.encryptBlock(block)
      }

      exports.decrypt = function (self, block) {
        return self._cipher.decryptBlock(block)
      }


      /***/
    }),

/***/ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/browserify-aes/modes/index.js":
/*!************************************************************!*\
  !*** (webpack)/node_modules/browserify-aes/modes/index.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

      var modeModules = {
        ECB: __webpack_require__(/*! ./ecb */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/browserify-aes/modes/ecb.js"),
        CBC: __webpack_require__(/*! ./cbc */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/browserify-aes/modes/cbc.js"),
        CFB: __webpack_require__(/*! ./cfb */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/browserify-aes/modes/cfb.js"),
        CFB8: __webpack_require__(/*! ./cfb8 */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/browserify-aes/modes/cfb8.js"),
        CFB1: __webpack_require__(/*! ./cfb1 */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/browserify-aes/modes/cfb1.js"),
        OFB: __webpack_require__(/*! ./ofb */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/browserify-aes/modes/ofb.js"),
        CTR: __webpack_require__(/*! ./ctr */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/browserify-aes/modes/ctr.js"),
        GCM: __webpack_require__(/*! ./ctr */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/browserify-aes/modes/ctr.js")
      }

      var modes = __webpack_require__(/*! ./list.json */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/browserify-aes/modes/list.json")

      for (var key in modes) {
        modes[key].module = modeModules[modes[key].mode]
      }

      module.exports = modes


      /***/
    }),

/***/ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/browserify-aes/modes/list.json":
/*!*************************************************************!*\
  !*** (webpack)/node_modules/browserify-aes/modes/list.json ***!
  \*************************************************************/
/*! exports provided: aes-128-ecb, aes-192-ecb, aes-256-ecb, aes-128-cbc, aes-192-cbc, aes-256-cbc, aes128, aes192, aes256, aes-128-cfb, aes-192-cfb, aes-256-cfb, aes-128-cfb8, aes-192-cfb8, aes-256-cfb8, aes-128-cfb1, aes-192-cfb1, aes-256-cfb1, aes-128-ofb, aes-192-ofb, aes-256-ofb, aes-128-ctr, aes-192-ctr, aes-256-ctr, aes-128-gcm, aes-192-gcm, aes-256-gcm, default */
/***/ (function (module) {

      module.exports = { "aes-128-ecb": { "cipher": "AES", "key": 128, "iv": 0, "mode": "ECB", "type": "block" }, "aes-192-ecb": { "cipher": "AES", "key": 192, "iv": 0, "mode": "ECB", "type": "block" }, "aes-256-ecb": { "cipher": "AES", "key": 256, "iv": 0, "mode": "ECB", "type": "block" }, "aes-128-cbc": { "cipher": "AES", "key": 128, "iv": 16, "mode": "CBC", "type": "block" }, "aes-192-cbc": { "cipher": "AES", "key": 192, "iv": 16, "mode": "CBC", "type": "block" }, "aes-256-cbc": { "cipher": "AES", "key": 256, "iv": 16, "mode": "CBC", "type": "block" }, "aes128": { "cipher": "AES", "key": 128, "iv": 16, "mode": "CBC", "type": "block" }, "aes192": { "cipher": "AES", "key": 192, "iv": 16, "mode": "CBC", "type": "block" }, "aes256": { "cipher": "AES", "key": 256, "iv": 16, "mode": "CBC", "type": "block" }, "aes-128-cfb": { "cipher": "AES", "key": 128, "iv": 16, "mode": "CFB", "type": "stream" }, "aes-192-cfb": { "cipher": "AES", "key": 192, "iv": 16, "mode": "CFB", "type": "stream" }, "aes-256-cfb": { "cipher": "AES", "key": 256, "iv": 16, "mode": "CFB", "type": "stream" }, "aes-128-cfb8": { "cipher": "AES", "key": 128, "iv": 16, "mode": "CFB8", "type": "stream" }, "aes-192-cfb8": { "cipher": "AES", "key": 192, "iv": 16, "mode": "CFB8", "type": "stream" }, "aes-256-cfb8": { "cipher": "AES", "key": 256, "iv": 16, "mode": "CFB8", "type": "stream" }, "aes-128-cfb1": { "cipher": "AES", "key": 128, "iv": 16, "mode": "CFB1", "type": "stream" }, "aes-192-cfb1": { "cipher": "AES", "key": 192, "iv": 16, "mode": "CFB1", "type": "stream" }, "aes-256-cfb1": { "cipher": "AES", "key": 256, "iv": 16, "mode": "CFB1", "type": "stream" }, "aes-128-ofb": { "cipher": "AES", "key": 128, "iv": 16, "mode": "OFB", "type": "stream" }, "aes-192-ofb": { "cipher": "AES", "key": 192, "iv": 16, "mode": "OFB", "type": "stream" }, "aes-256-ofb": { "cipher": "AES", "key": 256, "iv": 16, "mode": "OFB", "type": "stream" }, "aes-128-ctr": { "cipher": "AES", "key": 128, "iv": 16, "mode": "CTR", "type": "stream" }, "aes-192-ctr": { "cipher": "AES", "key": 192, "iv": 16, "mode": "CTR", "type": "stream" }, "aes-256-ctr": { "cipher": "AES", "key": 256, "iv": 16, "mode": "CTR", "type": "stream" }, "aes-128-gcm": { "cipher": "AES", "key": 128, "iv": 12, "mode": "GCM", "type": "auth" }, "aes-192-gcm": { "cipher": "AES", "key": 192, "iv": 12, "mode": "GCM", "type": "auth" }, "aes-256-gcm": { "cipher": "AES", "key": 256, "iv": 12, "mode": "GCM", "type": "auth" } };

      /***/
    }),

/***/ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/browserify-aes/modes/ofb.js":
/*!**********************************************************!*\
  !*** (webpack)/node_modules/browserify-aes/modes/ofb.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function (Buffer) {
        var xor = __webpack_require__(/*! buffer-xor */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/buffer-xor/index.js")

        function getBlock(self) {
          self._prev = self._cipher.encryptBlock(self._prev)
          return self._prev
        }

        exports.encrypt = function (self, chunk) {
          while (self._cache.length < chunk.length) {
            self._cache = Buffer.concat([self._cache, getBlock(self)])
          }

          var pad = self._cache.slice(0, chunk.length)
          self._cache = self._cache.slice(chunk.length)
          return xor(chunk, pad)
        }

        /* WEBPACK VAR INJECTION */
      }.call(this, __webpack_require__(/*! ./../../buffer/index.js */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/buffer/index.js").Buffer))

      /***/
    }),

/***/ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/browserify-aes/streamCipher.js":
/*!*************************************************************!*\
  !*** (webpack)/node_modules/browserify-aes/streamCipher.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

      var aes = __webpack_require__(/*! ./aes */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/browserify-aes/aes.js")
      var Buffer = __webpack_require__(/*! safe-buffer */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/safe-buffer/index.js").Buffer
      var Transform = __webpack_require__(/*! cipher-base */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/cipher-base/index.js")
      var inherits = __webpack_require__(/*! inherits */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/inherits/inherits_browser.js")

      function StreamCipher(mode, key, iv, decrypt) {
        Transform.call(this)

        this._cipher = new aes.AES(key)
        this._prev = Buffer.from(iv)
        this._cache = Buffer.allocUnsafe(0)
        this._secCache = Buffer.allocUnsafe(0)
        this._decrypt = decrypt
        this._mode = mode
      }

      inherits(StreamCipher, Transform)

      StreamCipher.prototype._update = function (chunk) {
        return this._mode.encrypt(this, chunk, this._decrypt)
      }

      StreamCipher.prototype._final = function () {
        this._cipher.scrub()
      }

      module.exports = StreamCipher


      /***/
    }),

/***/ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/browserify-cipher/browser.js":
/*!***********************************************************!*\
  !*** (webpack)/node_modules/browserify-cipher/browser.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

      var DES = __webpack_require__(/*! browserify-des */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/browserify-des/index.js")
      var aes = __webpack_require__(/*! browserify-aes/browser */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/browserify-aes/browser.js")
      var aesModes = __webpack_require__(/*! browserify-aes/modes */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/browserify-aes/modes/index.js")
      var desModes = __webpack_require__(/*! browserify-des/modes */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/browserify-des/modes.js")
      var ebtk = __webpack_require__(/*! evp_bytestokey */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/evp_bytestokey/index.js")

      function createCipher(suite, password) {
        suite = suite.toLowerCase()

        var keyLen, ivLen
        if (aesModes[suite]) {
          keyLen = aesModes[suite].key
          ivLen = aesModes[suite].iv
        } else if (desModes[suite]) {
          keyLen = desModes[suite].key * 8
          ivLen = desModes[suite].iv
        } else {
          throw new TypeError('invalid suite type')
        }

        var keys = ebtk(password, false, keyLen, ivLen)
        return createCipheriv(suite, keys.key, keys.iv)
      }

      function createDecipher(suite, password) {
        suite = suite.toLowerCase()

        var keyLen, ivLen
        if (aesModes[suite]) {
          keyLen = aesModes[suite].key
          ivLen = aesModes[suite].iv
        } else if (desModes[suite]) {
          keyLen = desModes[suite].key * 8
          ivLen = desModes[suite].iv
        } else {
          throw new TypeError('invalid suite type')
        }

        var keys = ebtk(password, false, keyLen, ivLen)
        return createDecipheriv(suite, keys.key, keys.iv)
      }

      function createCipheriv(suite, key, iv) {
        suite = suite.toLowerCase()
        if (aesModes[suite]) return aes.createCipheriv(suite, key, iv)
        if (desModes[suite]) return new DES({ key: key, iv: iv, mode: suite })

        throw new TypeError('invalid suite type')
      }

      function createDecipheriv(suite, key, iv) {
        suite = suite.toLowerCase()
        if (aesModes[suite]) return aes.createDecipheriv(suite, key, iv)
        if (desModes[suite]) return new DES({ key: key, iv: iv, mode: suite, decrypt: true })

        throw new TypeError('invalid suite type')
      }

      function getCiphers() {
        return Object.keys(desModes).concat(aes.getCiphers())
      }

      exports.createCipher = exports.Cipher = createCipher
      exports.createCipheriv = exports.Cipheriv = createCipheriv
      exports.createDecipher = exports.Decipher = createDecipher
      exports.createDecipheriv = exports.Decipheriv = createDecipheriv
      exports.listCiphers = exports.getCiphers = getCiphers


      /***/
    }),

/***/ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/browserify-des/index.js":
/*!******************************************************!*\
  !*** (webpack)/node_modules/browserify-des/index.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

      var CipherBase = __webpack_require__(/*! cipher-base */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/cipher-base/index.js")
      var des = __webpack_require__(/*! des.js */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/des.js/lib/des.js")
      var inherits = __webpack_require__(/*! inherits */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/inherits/inherits_browser.js")
      var Buffer = __webpack_require__(/*! safe-buffer */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/safe-buffer/index.js").Buffer

      var modes = {
        'des-ede3-cbc': des.CBC.instantiate(des.EDE),
        'des-ede3': des.EDE,
        'des-ede-cbc': des.CBC.instantiate(des.EDE),
        'des-ede': des.EDE,
        'des-cbc': des.CBC.instantiate(des.DES),
        'des-ecb': des.DES
      }
      modes.des = modes['des-cbc']
      modes.des3 = modes['des-ede3-cbc']
      module.exports = DES
      inherits(DES, CipherBase)
      function DES(opts) {
        CipherBase.call(this)
        var modeName = opts.mode.toLowerCase()
        var mode = modes[modeName]
        var type
        if (opts.decrypt) {
          type = 'decrypt'
        } else {
          type = 'encrypt'
        }
        var key = opts.key
        if (!Buffer.isBuffer(key)) {
          key = Buffer.from(key)
        }
        if (modeName === 'des-ede' || modeName === 'des-ede-cbc') {
          key = Buffer.concat([key, key.slice(0, 8)])
        }
        var iv = opts.iv
        if (!Buffer.isBuffer(iv)) {
          iv = Buffer.from(iv)
        }
        this._des = mode.create({
          key: key,
          iv: iv,
          type: type
        })
      }
      DES.prototype._update = function (data) {
        return Buffer.from(this._des.update(data))
      }
      DES.prototype._final = function () {
        return Buffer.from(this._des.final())
      }


      /***/
    }),

/***/ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/browserify-des/modes.js":
/*!******************************************************!*\
  !*** (webpack)/node_modules/browserify-des/modes.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function (module, exports) {

      exports['des-ecb'] = {
        key: 8,
        iv: 0
      }
      exports['des-cbc'] = exports.des = {
        key: 8,
        iv: 8
      }
      exports['des-ede3-cbc'] = exports.des3 = {
        key: 24,
        iv: 8
      }
      exports['des-ede3'] = {
        key: 24,
        iv: 0
      }
      exports['des-ede-cbc'] = {
        key: 16,
        iv: 8
      }
      exports['des-ede'] = {
        key: 16,
        iv: 0
      }


      /***/
    }),

/***/ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/browserify-rsa/index.js":
/*!******************************************************!*\
  !*** (webpack)/node_modules/browserify-rsa/index.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function (Buffer) {
        var bn = __webpack_require__(/*! bn.js */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/bn.js/lib/bn.js");
        var randomBytes = __webpack_require__(/*! randombytes */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/randombytes/browser.js");
        module.exports = crt;
        function blind(priv) {
          var r = getr(priv);
          var blinder = r.toRed(bn.mont(priv.modulus))
            .redPow(new bn(priv.publicExponent)).fromRed();
          return {
            blinder: blinder,
            unblinder: r.invm(priv.modulus)
          };
        }
        function crt(msg, priv) {
          var blinds = blind(priv);
          var len = priv.modulus.byteLength();
          var mod = bn.mont(priv.modulus);
          var blinded = new bn(msg).mul(blinds.blinder).umod(priv.modulus);
          var c1 = blinded.toRed(bn.mont(priv.prime1));
          var c2 = blinded.toRed(bn.mont(priv.prime2));
          var qinv = priv.coefficient;
          var p = priv.prime1;
          var q = priv.prime2;
          var m1 = c1.redPow(priv.exponent1);
          var m2 = c2.redPow(priv.exponent2);
          m1 = m1.fromRed();
          m2 = m2.fromRed();
          var h = m1.isub(m2).imul(qinv).umod(p);
          h.imul(q);
          m2.iadd(h);
          return new Buffer(m2.imul(blinds.unblinder).umod(priv.modulus).toArray(false, len));
        }
        crt.getr = getr;
        function getr(priv) {
          var len = priv.modulus.byteLength();
          var r = new bn(randomBytes(len));
          while (r.cmp(priv.modulus) >= 0 || !r.umod(priv.prime1) || !r.umod(priv.prime2)) {
            r = new bn(randomBytes(len));
          }
          return r;
        }

        /* WEBPACK VAR INJECTION */
      }.call(this, __webpack_require__(/*! ./../buffer/index.js */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/buffer/index.js").Buffer))

      /***/
    }),

/***/ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/browserify-sign/algos.js":
/*!*******************************************************!*\
  !*** (webpack)/node_modules/browserify-sign/algos.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

      module.exports = __webpack_require__(/*! ./browser/algorithms.json */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/browserify-sign/browser/algorithms.json")


      /***/
    }),

/***/ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/browserify-sign/browser/algorithms.json":
/*!**********************************************************************!*\
  !*** (webpack)/node_modules/browserify-sign/browser/algorithms.json ***!
  \**********************************************************************/
/*! exports provided: sha224WithRSAEncryption, RSA-SHA224, sha256WithRSAEncryption, RSA-SHA256, sha384WithRSAEncryption, RSA-SHA384, sha512WithRSAEncryption, RSA-SHA512, RSA-SHA1, ecdsa-with-SHA1, sha256, sha224, sha384, sha512, DSA-SHA, DSA-SHA1, DSA, DSA-WITH-SHA224, DSA-SHA224, DSA-WITH-SHA256, DSA-SHA256, DSA-WITH-SHA384, DSA-SHA384, DSA-WITH-SHA512, DSA-SHA512, DSA-RIPEMD160, ripemd160WithRSA, RSA-RIPEMD160, md5WithRSAEncryption, RSA-MD5, default */
/***/ (function (module) {

      module.exports = { "sha224WithRSAEncryption": { "sign": "rsa", "hash": "sha224", "id": "302d300d06096086480165030402040500041c" }, "RSA-SHA224": { "sign": "ecdsa/rsa", "hash": "sha224", "id": "302d300d06096086480165030402040500041c" }, "sha256WithRSAEncryption": { "sign": "rsa", "hash": "sha256", "id": "3031300d060960864801650304020105000420" }, "RSA-SHA256": { "sign": "ecdsa/rsa", "hash": "sha256", "id": "3031300d060960864801650304020105000420" }, "sha384WithRSAEncryption": { "sign": "rsa", "hash": "sha384", "id": "3041300d060960864801650304020205000430" }, "RSA-SHA384": { "sign": "ecdsa/rsa", "hash": "sha384", "id": "3041300d060960864801650304020205000430" }, "sha512WithRSAEncryption": { "sign": "rsa", "hash": "sha512", "id": "3051300d060960864801650304020305000440" }, "RSA-SHA512": { "sign": "ecdsa/rsa", "hash": "sha512", "id": "3051300d060960864801650304020305000440" }, "RSA-SHA1": { "sign": "rsa", "hash": "sha1", "id": "3021300906052b0e03021a05000414" }, "ecdsa-with-SHA1": { "sign": "ecdsa", "hash": "sha1", "id": "" }, "sha256": { "sign": "ecdsa", "hash": "sha256", "id": "" }, "sha224": { "sign": "ecdsa", "hash": "sha224", "id": "" }, "sha384": { "sign": "ecdsa", "hash": "sha384", "id": "" }, "sha512": { "sign": "ecdsa", "hash": "sha512", "id": "" }, "DSA-SHA": { "sign": "dsa", "hash": "sha1", "id": "" }, "DSA-SHA1": { "sign": "dsa", "hash": "sha1", "id": "" }, "DSA": { "sign": "dsa", "hash": "sha1", "id": "" }, "DSA-WITH-SHA224": { "sign": "dsa", "hash": "sha224", "id": "" }, "DSA-SHA224": { "sign": "dsa", "hash": "sha224", "id": "" }, "DSA-WITH-SHA256": { "sign": "dsa", "hash": "sha256", "id": "" }, "DSA-SHA256": { "sign": "dsa", "hash": "sha256", "id": "" }, "DSA-WITH-SHA384": { "sign": "dsa", "hash": "sha384", "id": "" }, "DSA-SHA384": { "sign": "dsa", "hash": "sha384", "id": "" }, "DSA-WITH-SHA512": { "sign": "dsa", "hash": "sha512", "id": "" }, "DSA-SHA512": { "sign": "dsa", "hash": "sha512", "id": "" }, "DSA-RIPEMD160": { "sign": "dsa", "hash": "rmd160", "id": "" }, "ripemd160WithRSA": { "sign": "rsa", "hash": "rmd160", "id": "3021300906052b2403020105000414" }, "RSA-RIPEMD160": { "sign": "rsa", "hash": "rmd160", "id": "3021300906052b2403020105000414" }, "md5WithRSAEncryption": { "sign": "rsa", "hash": "md5", "id": "3020300c06082a864886f70d020505000410" }, "RSA-MD5": { "sign": "rsa", "hash": "md5", "id": "3020300c06082a864886f70d020505000410" } };

      /***/
    }),

/***/ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/browserify-sign/browser/curves.json":
/*!******************************************************************!*\
  !*** (webpack)/node_modules/browserify-sign/browser/curves.json ***!
  \******************************************************************/
/*! exports provided: 1.3.132.0.10, 1.3.132.0.33, 1.2.840.10045.3.1.1, 1.2.840.10045.3.1.7, 1.3.132.0.34, 1.3.132.0.35, default */
/***/ (function (module) {

      module.exports = { "1.3.132.0.10": "secp256k1", "1.3.132.0.33": "p224", "1.2.840.10045.3.1.1": "p192", "1.2.840.10045.3.1.7": "p256", "1.3.132.0.34": "p384", "1.3.132.0.35": "p521" };

      /***/
    }),

/***/ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/browserify-sign/browser/index.js":
/*!***************************************************************!*\
  !*** (webpack)/node_modules/browserify-sign/browser/index.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function (Buffer) {
        var createHash = __webpack_require__(/*! create-hash */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/create-hash/browser.js")
        var stream = __webpack_require__(/*! stream */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/stream-browserify/index.js")
        var inherits = __webpack_require__(/*! inherits */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/inherits/inherits_browser.js")
        var sign = __webpack_require__(/*! ./sign */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/browserify-sign/browser/sign.js")
        var verify = __webpack_require__(/*! ./verify */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/browserify-sign/browser/verify.js")

        var algorithms = __webpack_require__(/*! ./algorithms.json */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/browserify-sign/browser/algorithms.json")
        Object.keys(algorithms).forEach(function (key) {
          algorithms[key].id = new Buffer(algorithms[key].id, 'hex')
          algorithms[key.toLowerCase()] = algorithms[key]
        })

        function Sign(algorithm) {
          stream.Writable.call(this)

          var data = algorithms[algorithm]
          if (!data) throw new Error('Unknown message digest')

          this._hashType = data.hash
          this._hash = createHash(data.hash)
          this._tag = data.id
          this._signType = data.sign
        }
        inherits(Sign, stream.Writable)

        Sign.prototype._write = function _write(data, _, done) {
          this._hash.update(data)
          done()
        }

        Sign.prototype.update = function update(data, enc) {
          if (typeof data === 'string') data = new Buffer(data, enc)

          this._hash.update(data)
          return this
        }

        Sign.prototype.sign = function signMethod(key, enc) {
          this.end()
          var hash = this._hash.digest()
          var sig = sign(hash, key, this._hashType, this._signType, this._tag)

          return enc ? sig.toString(enc) : sig
        }

        function Verify(algorithm) {
          stream.Writable.call(this)

          var data = algorithms[algorithm]
          if (!data) throw new Error('Unknown message digest')

          this._hash = createHash(data.hash)
          this._tag = data.id
          this._signType = data.sign
        }
        inherits(Verify, stream.Writable)

        Verify.prototype._write = function _write(data, _, done) {
          this._hash.update(data)
          done()
        }

        Verify.prototype.update = function update(data, enc) {
          if (typeof data === 'string') data = new Buffer(data, enc)

          this._hash.update(data)
          return this
        }

        Verify.prototype.verify = function verifyMethod(key, sig, enc) {
          if (typeof sig === 'string') sig = new Buffer(sig, enc)

          this.end()
          var hash = this._hash.digest()
          return verify(sig, hash, key, this._signType, this._tag)
        }

        function createSign(algorithm) {
          return new Sign(algorithm)
        }

        function createVerify(algorithm) {
          return new Verify(algorithm)
        }

        module.exports = {
          Sign: createSign,
          Verify: createVerify,
          createSign: createSign,
          createVerify: createVerify
        }

        /* WEBPACK VAR INJECTION */
      }.call(this, __webpack_require__(/*! ./../../buffer/index.js */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/buffer/index.js").Buffer))

      /***/
    }),

/***/ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/browserify-sign/browser/sign.js":
/*!**************************************************************!*\
  !*** (webpack)/node_modules/browserify-sign/browser/sign.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function (Buffer) {// much of this based on https://github.com/indutny/self-signed/blob/gh-pages/lib/rsa.js
        var createHmac = __webpack_require__(/*! create-hmac */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/create-hmac/browser.js")
        var crt = __webpack_require__(/*! browserify-rsa */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/browserify-rsa/index.js")
        var EC = __webpack_require__(/*! elliptic */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/elliptic/lib/elliptic.js").ec
        var BN = __webpack_require__(/*! bn.js */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/bn.js/lib/bn.js")
        var parseKeys = __webpack_require__(/*! parse-asn1 */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/parse-asn1/index.js")
        var curves = __webpack_require__(/*! ./curves.json */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/browserify-sign/browser/curves.json")

        function sign(hash, key, hashType, signType, tag) {
          var priv = parseKeys(key)
          if (priv.curve) {
            // rsa keys can be interpreted as ecdsa ones in openssl
            if (signType !== 'ecdsa' && signType !== 'ecdsa/rsa') throw new Error('wrong private key type')
            return ecSign(hash, priv)
          } else if (priv.type === 'dsa') {
            if (signType !== 'dsa') throw new Error('wrong private key type')
            return dsaSign(hash, priv, hashType)
          } else {
            if (signType !== 'rsa' && signType !== 'ecdsa/rsa') throw new Error('wrong private key type')
          }
          hash = Buffer.concat([tag, hash])
          var len = priv.modulus.byteLength()
          var pad = [0, 1]
          while (hash.length + pad.length + 1 < len) pad.push(0xff)
          pad.push(0x00)
          var i = -1
          while (++i < hash.length) pad.push(hash[i])

          var out = crt(pad, priv)
          return out
        }

        function ecSign(hash, priv) {
          var curveId = curves[priv.curve.join('.')]
          if (!curveId) throw new Error('unknown curve ' + priv.curve.join('.'))

          var curve = new EC(curveId)
          var key = curve.keyFromPrivate(priv.privateKey)
          var out = key.sign(hash)

          return new Buffer(out.toDER())
        }

        function dsaSign(hash, priv, algo) {
          var x = priv.params.priv_key
          var p = priv.params.p
          var q = priv.params.q
          var g = priv.params.g
          var r = new BN(0)
          var k
          var H = bits2int(hash, q).mod(q)
          var s = false
          var kv = getKey(x, q, hash, algo)
          while (s === false) {
            k = makeKey(q, kv, algo)
            r = makeR(g, k, p, q)
            s = k.invm(q).imul(H.add(x.mul(r))).mod(q)
            if (s.cmpn(0) === 0) {
              s = false
              r = new BN(0)
            }
          }
          return toDER(r, s)
        }

        function toDER(r, s) {
          r = r.toArray()
          s = s.toArray()

          // Pad values
          if (r[0] & 0x80) r = [0].concat(r)
          if (s[0] & 0x80) s = [0].concat(s)

          var total = r.length + s.length + 4
          var res = [0x30, total, 0x02, r.length]
          res = res.concat(r, [0x02, s.length], s)
          return new Buffer(res)
        }

        function getKey(x, q, hash, algo) {
          x = new Buffer(x.toArray())
          if (x.length < q.byteLength()) {
            var zeros = new Buffer(q.byteLength() - x.length)
            zeros.fill(0)
            x = Buffer.concat([zeros, x])
          }
          var hlen = hash.length
          var hbits = bits2octets(hash, q)
          var v = new Buffer(hlen)
          v.fill(1)
          var k = new Buffer(hlen)
          k.fill(0)
          k = createHmac(algo, k).update(v).update(new Buffer([0])).update(x).update(hbits).digest()
          v = createHmac(algo, k).update(v).digest()
          k = createHmac(algo, k).update(v).update(new Buffer([1])).update(x).update(hbits).digest()
          v = createHmac(algo, k).update(v).digest()
          return { k: k, v: v }
        }

        function bits2int(obits, q) {
          var bits = new BN(obits)
          var shift = (obits.length << 3) - q.bitLength()
          if (shift > 0) bits.ishrn(shift)
          return bits
        }

        function bits2octets(bits, q) {
          bits = bits2int(bits, q)
          bits = bits.mod(q)
          var out = new Buffer(bits.toArray())
          if (out.length < q.byteLength()) {
            var zeros = new Buffer(q.byteLength() - out.length)
            zeros.fill(0)
            out = Buffer.concat([zeros, out])
          }
          return out
        }

        function makeKey(q, kv, algo) {
          var t
          var k

          do {
            t = new Buffer(0)

            while (t.length * 8 < q.bitLength()) {
              kv.v = createHmac(algo, kv.k).update(kv.v).digest()
              t = Buffer.concat([t, kv.v])
            }

            k = bits2int(t, q)
            kv.k = createHmac(algo, kv.k).update(kv.v).update(new Buffer([0])).digest()
            kv.v = createHmac(algo, kv.k).update(kv.v).digest()
          } while (k.cmp(q) !== -1)

          return k
        }

        function makeR(g, k, p, q) {
          return g.toRed(BN.mont(p)).redPow(k).fromRed().mod(q)
        }

        module.exports = sign
        module.exports.getKey = getKey
        module.exports.makeKey = makeKey

        /* WEBPACK VAR INJECTION */
      }.call(this, __webpack_require__(/*! ./../../buffer/index.js */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/buffer/index.js").Buffer))

      /***/
    }),

/***/ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/browserify-sign/browser/verify.js":
/*!****************************************************************!*\
  !*** (webpack)/node_modules/browserify-sign/browser/verify.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function (Buffer) {// much of this based on https://github.com/indutny/self-signed/blob/gh-pages/lib/rsa.js
        var BN = __webpack_require__(/*! bn.js */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/bn.js/lib/bn.js")
        var EC = __webpack_require__(/*! elliptic */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/elliptic/lib/elliptic.js").ec
        var parseKeys = __webpack_require__(/*! parse-asn1 */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/parse-asn1/index.js")
        var curves = __webpack_require__(/*! ./curves.json */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/browserify-sign/browser/curves.json")

        function verify(sig, hash, key, signType, tag) {
          var pub = parseKeys(key)
          if (pub.type === 'ec') {
            // rsa keys can be interpreted as ecdsa ones in openssl
            if (signType !== 'ecdsa' && signType !== 'ecdsa/rsa') throw new Error('wrong public key type')
            return ecVerify(sig, hash, pub)
          } else if (pub.type === 'dsa') {
            if (signType !== 'dsa') throw new Error('wrong public key type')
            return dsaVerify(sig, hash, pub)
          } else {
            if (signType !== 'rsa' && signType !== 'ecdsa/rsa') throw new Error('wrong public key type')
          }
          hash = Buffer.concat([tag, hash])
          var len = pub.modulus.byteLength()
          var pad = [1]
          var padNum = 0
          while (hash.length + pad.length + 2 < len) {
            pad.push(0xff)
            padNum++
          }
          pad.push(0x00)
          var i = -1
          while (++i < hash.length) {
            pad.push(hash[i])
          }
          pad = new Buffer(pad)
          var red = BN.mont(pub.modulus)
          sig = new BN(sig).toRed(red)

          sig = sig.redPow(new BN(pub.publicExponent))
          sig = new Buffer(sig.fromRed().toArray())
          var out = padNum < 8 ? 1 : 0
          len = Math.min(sig.length, pad.length)
          if (sig.length !== pad.length) out = 1

          i = -1
          while (++i < len) out |= sig[i] ^ pad[i]
          return out === 0
        }

        function ecVerify(sig, hash, pub) {
          var curveId = curves[pub.data.algorithm.curve.join('.')]
          if (!curveId) throw new Error('unknown curve ' + pub.data.algorithm.curve.join('.'))

          var curve = new EC(curveId)
          var pubkey = pub.data.subjectPrivateKey.data

          return curve.verify(hash, sig, pubkey)
        }

        function dsaVerify(sig, hash, pub) {
          var p = pub.data.p
          var q = pub.data.q
          var g = pub.data.g
          var y = pub.data.pub_key
          var unpacked = parseKeys.signature.decode(sig, 'der')
          var s = unpacked.s
          var r = unpacked.r
          checkValue(s, q)
          checkValue(r, q)
          var montp = BN.mont(p)
          var w = s.invm(q)
          var v = g.toRed(montp)
            .redPow(new BN(hash).mul(w).mod(q))
            .fromRed()
            .mul(y.toRed(montp).redPow(r.mul(w).mod(q)).fromRed())
            .mod(p)
            .mod(q)
          return v.cmp(r) === 0
        }

        function checkValue(b, q) {
          if (b.cmpn(0) <= 0) throw new Error('invalid sig')
          if (b.cmp(q) >= q) throw new Error('invalid sig')
        }

        module.exports = verify

        /* WEBPACK VAR INJECTION */
      }.call(this, __webpack_require__(/*! ./../../buffer/index.js */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/buffer/index.js").Buffer))

      /***/
    }),

/***/ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/buffer-xor/index.js":
/*!**************************************************!*\
  !*** (webpack)/node_modules/buffer-xor/index.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function (Buffer) {
        module.exports = function xor(a, b) {
          var length = Math.min(a.length, b.length)
          var buffer = new Buffer(length)

          for (var i = 0; i < length; ++i) {
            buffer[i] = a[i] ^ b[i]
          }

          return buffer
        }

        /* WEBPACK VAR INJECTION */
      }.call(this, __webpack_require__(/*! ./../buffer/index.js */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/buffer/index.js").Buffer))

      /***/
    }),

/***/ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/buffer/index.js":
/*!**********************************************!*\
  !*** (webpack)/node_modules/buffer/index.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

      "use strict";
/* WEBPACK VAR INJECTION */(function (global) {/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
        /* eslint-disable no-proto */



        var base64 = __webpack_require__(/*! base64-js */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/base64-js/index.js")
        var ieee754 = __webpack_require__(/*! ieee754 */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/ieee754/index.js")
        var isArray = __webpack_require__(/*! isarray */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/isarray/index.js")

        exports.Buffer = Buffer
        exports.SlowBuffer = SlowBuffer
        exports.INSPECT_MAX_BYTES = 50

        /**
         * If `Buffer.TYPED_ARRAY_SUPPORT`:
         *   === true    Use Uint8Array implementation (fastest)
         *   === false   Use Object implementation (most compatible, even IE6)
         *
         * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
         * Opera 11.6+, iOS 4.2+.
         *
         * Due to various browser bugs, sometimes the Object implementation will be used even
         * when the browser supports typed arrays.
         *
         * Note:
         *
         *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
         *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
         *
         *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
         *
         *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
         *     incorrect length in some situations.
        
         * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
         * get the Object implementation, which is slower but behaves correctly.
         */
        Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined
          ? global.TYPED_ARRAY_SUPPORT
          : typedArraySupport()

        /*
         * Export kMaxLength after typed array support is determined.
         */
        exports.kMaxLength = kMaxLength()

        function typedArraySupport() {
          try {
            var arr = new Uint8Array(1)
            arr.__proto__ = { __proto__: Uint8Array.prototype, foo: function () { return 42 } }
            return arr.foo() === 42 && // typed array instances can be augmented
              typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
              arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
          } catch (e) {
            return false
          }
        }

        function kMaxLength() {
          return Buffer.TYPED_ARRAY_SUPPORT
            ? 0x7fffffff
            : 0x3fffffff
        }

        function createBuffer(that, length) {
          if (kMaxLength() < length) {
            throw new RangeError('Invalid typed array length')
          }
          if (Buffer.TYPED_ARRAY_SUPPORT) {
            // Return an augmented `Uint8Array` instance, for best performance
            that = new Uint8Array(length)
            that.__proto__ = Buffer.prototype
          } else {
            // Fallback: Return an object instance of the Buffer class
            if (that === null) {
              that = new Buffer(length)
            }
            that.length = length
          }

          return that
        }

        /**
         * The Buffer constructor returns instances of `Uint8Array` that have their
         * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
         * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
         * and the `Uint8Array` methods. Square bracket notation works as expected -- it
         * returns a single octet.
         *
         * The `Uint8Array` prototype remains unmodified.
         */

        function Buffer(arg, encodingOrOffset, length) {
          if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
            return new Buffer(arg, encodingOrOffset, length)
          }

          // Common case.
          if (typeof arg === 'number') {
            if (typeof encodingOrOffset === 'string') {
              throw new Error(
                'If encoding is specified then the first argument must be a string'
              )
            }
            return allocUnsafe(this, arg)
          }
          return from(this, arg, encodingOrOffset, length)
        }

        Buffer.poolSize = 8192 // not used by this implementation

        // TODO: Legacy, not needed anymore. Remove in next major version.
        Buffer._augment = function (arr) {
          arr.__proto__ = Buffer.prototype
          return arr
        }

        function from(that, value, encodingOrOffset, length) {
          if (typeof value === 'number') {
            throw new TypeError('"value" argument must not be a number')
          }

          if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
            return fromArrayBuffer(that, value, encodingOrOffset, length)
          }

          if (typeof value === 'string') {
            return fromString(that, value, encodingOrOffset)
          }

          return fromObject(that, value)
        }

        /**
         * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
         * if value is a number.
         * Buffer.from(str[, encoding])
         * Buffer.from(array)
         * Buffer.from(buffer)
         * Buffer.from(arrayBuffer[, byteOffset[, length]])
         **/
        Buffer.from = function (value, encodingOrOffset, length) {
          return from(null, value, encodingOrOffset, length)
        }

        if (Buffer.TYPED_ARRAY_SUPPORT) {
          Buffer.prototype.__proto__ = Uint8Array.prototype
          Buffer.__proto__ = Uint8Array
          if (typeof Symbol !== 'undefined' && Symbol.species &&
            Buffer[Symbol.species] === Buffer) {
            // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
            Object.defineProperty(Buffer, Symbol.species, {
              value: null,
              configurable: true
            })
          }
        }

        function assertSize(size) {
          if (typeof size !== 'number') {
            throw new TypeError('"size" argument must be a number')
          } else if (size < 0) {
            throw new RangeError('"size" argument must not be negative')
          }
        }

        function alloc(that, size, fill, encoding) {
          assertSize(size)
          if (size <= 0) {
            return createBuffer(that, size)
          }
          if (fill !== undefined) {
            // Only pay attention to encoding if it's a string. This
            // prevents accidentally sending in a number that would
            // be interpretted as a start offset.
            return typeof encoding === 'string'
              ? createBuffer(that, size).fill(fill, encoding)
              : createBuffer(that, size).fill(fill)
          }
          return createBuffer(that, size)
        }

        /**
         * Creates a new filled Buffer instance.
         * alloc(size[, fill[, encoding]])
         **/
        Buffer.alloc = function (size, fill, encoding) {
          return alloc(null, size, fill, encoding)
        }

        function allocUnsafe(that, size) {
          assertSize(size)
          that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)
          if (!Buffer.TYPED_ARRAY_SUPPORT) {
            for (var i = 0; i < size; ++i) {
              that[i] = 0
            }
          }
          return that
        }

        /**
         * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
         * */
        Buffer.allocUnsafe = function (size) {
          return allocUnsafe(null, size)
        }
        /**
         * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
         */
        Buffer.allocUnsafeSlow = function (size) {
          return allocUnsafe(null, size)
        }

        function fromString(that, string, encoding) {
          if (typeof encoding !== 'string' || encoding === '') {
            encoding = 'utf8'
          }

          if (!Buffer.isEncoding(encoding)) {
            throw new TypeError('"encoding" must be a valid string encoding')
          }

          var length = byteLength(string, encoding) | 0
          that = createBuffer(that, length)

          var actual = that.write(string, encoding)

          if (actual !== length) {
            // Writing a hex string, for example, that contains invalid characters will
            // cause everything after the first invalid character to be ignored. (e.g.
            // 'abxxcd' will be treated as 'ab')
            that = that.slice(0, actual)
          }

          return that
        }

        function fromArrayLike(that, array) {
          var length = array.length < 0 ? 0 : checked(array.length) | 0
          that = createBuffer(that, length)
          for (var i = 0; i < length; i += 1) {
            that[i] = array[i] & 255
          }
          return that
        }

        function fromArrayBuffer(that, array, byteOffset, length) {
          array.byteLength // this throws if `array` is not a valid ArrayBuffer

          if (byteOffset < 0 || array.byteLength < byteOffset) {
            throw new RangeError('\'offset\' is out of bounds')
          }

          if (array.byteLength < byteOffset + (length || 0)) {
            throw new RangeError('\'length\' is out of bounds')
          }

          if (byteOffset === undefined && length === undefined) {
            array = new Uint8Array(array)
          } else if (length === undefined) {
            array = new Uint8Array(array, byteOffset)
          } else {
            array = new Uint8Array(array, byteOffset, length)
          }

          if (Buffer.TYPED_ARRAY_SUPPORT) {
            // Return an augmented `Uint8Array` instance, for best performance
            that = array
            that.__proto__ = Buffer.prototype
          } else {
            // Fallback: Return an object instance of the Buffer class
            that = fromArrayLike(that, array)
          }
          return that
        }

        function fromObject(that, obj) {
          if (Buffer.isBuffer(obj)) {
            var len = checked(obj.length) | 0
            that = createBuffer(that, len)

            if (that.length === 0) {
              return that
            }

            obj.copy(that, 0, 0, len)
            return that
          }

          if (obj) {
            if ((typeof ArrayBuffer !== 'undefined' &&
              obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
              if (typeof obj.length !== 'number' || isnan(obj.length)) {
                return createBuffer(that, 0)
              }
              return fromArrayLike(that, obj)
            }

            if (obj.type === 'Buffer' && isArray(obj.data)) {
              return fromArrayLike(that, obj.data)
            }
          }

          throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
        }

        function checked(length) {
          // Note: cannot use `length < kMaxLength()` here because that fails when
          // length is NaN (which is otherwise coerced to zero.)
          if (length >= kMaxLength()) {
            throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
              'size: 0x' + kMaxLength().toString(16) + ' bytes')
          }
          return length | 0
        }

        function SlowBuffer(length) {
          if (+length != length) { // eslint-disable-line eqeqeq
            length = 0
          }
          return Buffer.alloc(+length)
        }

        Buffer.isBuffer = function isBuffer(b) {
          return !!(b != null && b._isBuffer)
        }

        Buffer.compare = function compare(a, b) {
          if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
            throw new TypeError('Arguments must be Buffers')
          }

          if (a === b) return 0

          var x = a.length
          var y = b.length

          for (var i = 0, len = Math.min(x, y); i < len; ++i) {
            if (a[i] !== b[i]) {
              x = a[i]
              y = b[i]
              break
            }
          }

          if (x < y) return -1
          if (y < x) return 1
          return 0
        }

        Buffer.isEncoding = function isEncoding(encoding) {
          switch (String(encoding).toLowerCase()) {
            case 'hex':
            case 'utf8':
            case 'utf-8':
            case 'ascii':
            case 'latin1':
            case 'binary':
            case 'base64':
            case 'ucs2':
            case 'ucs-2':
            case 'utf16le':
            case 'utf-16le':
              return true
            default:
              return false
          }
        }

        Buffer.concat = function concat(list, length) {
          if (!isArray(list)) {
            throw new TypeError('"list" argument must be an Array of Buffers')
          }

          if (list.length === 0) {
            return Buffer.alloc(0)
          }

          var i
          if (length === undefined) {
            length = 0
            for (i = 0; i < list.length; ++i) {
              length += list[i].length
            }
          }

          var buffer = Buffer.allocUnsafe(length)
          var pos = 0
          for (i = 0; i < list.length; ++i) {
            var buf = list[i]
            if (!Buffer.isBuffer(buf)) {
              throw new TypeError('"list" argument must be an Array of Buffers')
            }
            buf.copy(buffer, pos)
            pos += buf.length
          }
          return buffer
        }

        function byteLength(string, encoding) {
          if (Buffer.isBuffer(string)) {
            return string.length
          }
          if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
            (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
            return string.byteLength
          }
          if (typeof string !== 'string') {
            string = '' + string
          }

          var len = string.length
          if (len === 0) return 0

          // Use a for loop to avoid recursion
          var loweredCase = false
          for (; ;) {
            switch (encoding) {
              case 'ascii':
              case 'latin1':
              case 'binary':
                return len
              case 'utf8':
              case 'utf-8':
              case undefined:
                return utf8ToBytes(string).length
              case 'ucs2':
              case 'ucs-2':
              case 'utf16le':
              case 'utf-16le':
                return len * 2
              case 'hex':
                return len >>> 1
              case 'base64':
                return base64ToBytes(string).length
              default:
                if (loweredCase) return utf8ToBytes(string).length // assume utf8
                encoding = ('' + encoding).toLowerCase()
                loweredCase = true
            }
          }
        }
        Buffer.byteLength = byteLength

        function slowToString(encoding, start, end) {
          var loweredCase = false

          // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
          // property of a typed array.

          // This behaves neither like String nor Uint8Array in that we set start/end
          // to their upper/lower bounds if the value passed is out of range.
          // undefined is handled specially as per ECMA-262 6th Edition,
          // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
          if (start === undefined || start < 0) {
            start = 0
          }
          // Return early if start > this.length. Done here to prevent potential uint32
          // coercion fail below.
          if (start > this.length) {
            return ''
          }

          if (end === undefined || end > this.length) {
            end = this.length
          }

          if (end <= 0) {
            return ''
          }

          // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
          end >>>= 0
          start >>>= 0

          if (end <= start) {
            return ''
          }

          if (!encoding) encoding = 'utf8'

          while (true) {
            switch (encoding) {
              case 'hex':
                return hexSlice(this, start, end)

              case 'utf8':
              case 'utf-8':
                return utf8Slice(this, start, end)

              case 'ascii':
                return asciiSlice(this, start, end)

              case 'latin1':
              case 'binary':
                return latin1Slice(this, start, end)

              case 'base64':
                return base64Slice(this, start, end)

              case 'ucs2':
              case 'ucs-2':
              case 'utf16le':
              case 'utf-16le':
                return utf16leSlice(this, start, end)

              default:
                if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
                encoding = (encoding + '').toLowerCase()
                loweredCase = true
            }
          }
        }

        // The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
        // Buffer instances.
        Buffer.prototype._isBuffer = true

        function swap(b, n, m) {
          var i = b[n]
          b[n] = b[m]
          b[m] = i
        }

        Buffer.prototype.swap16 = function swap16() {
          var len = this.length
          if (len % 2 !== 0) {
            throw new RangeError('Buffer size must be a multiple of 16-bits')
          }
          for (var i = 0; i < len; i += 2) {
            swap(this, i, i + 1)
          }
          return this
        }

        Buffer.prototype.swap32 = function swap32() {
          var len = this.length
          if (len % 4 !== 0) {
            throw new RangeError('Buffer size must be a multiple of 32-bits')
          }
          for (var i = 0; i < len; i += 4) {
            swap(this, i, i + 3)
            swap(this, i + 1, i + 2)
          }
          return this
        }

        Buffer.prototype.swap64 = function swap64() {
          var len = this.length
          if (len % 8 !== 0) {
            throw new RangeError('Buffer size must be a multiple of 64-bits')
          }
          for (var i = 0; i < len; i += 8) {
            swap(this, i, i + 7)
            swap(this, i + 1, i + 6)
            swap(this, i + 2, i + 5)
            swap(this, i + 3, i + 4)
          }
          return this
        }

        Buffer.prototype.toString = function toString() {
          var length = this.length | 0
          if (length === 0) return ''
          if (arguments.length === 0) return utf8Slice(this, 0, length)
          return slowToString.apply(this, arguments)
        }

        Buffer.prototype.equals = function equals(b) {
          if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
          if (this === b) return true
          return Buffer.compare(this, b) === 0
        }

        Buffer.prototype.inspect = function inspect() {
          var str = ''
          var max = exports.INSPECT_MAX_BYTES
          if (this.length > 0) {
            str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
            if (this.length > max) str += ' ... '
          }
          return '<Buffer ' + str + '>'
        }

        Buffer.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
          if (!Buffer.isBuffer(target)) {
            throw new TypeError('Argument must be a Buffer')
          }

          if (start === undefined) {
            start = 0
          }
          if (end === undefined) {
            end = target ? target.length : 0
          }
          if (thisStart === undefined) {
            thisStart = 0
          }
          if (thisEnd === undefined) {
            thisEnd = this.length
          }

          if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
            throw new RangeError('out of range index')
          }

          if (thisStart >= thisEnd && start >= end) {
            return 0
          }
          if (thisStart >= thisEnd) {
            return -1
          }
          if (start >= end) {
            return 1
          }

          start >>>= 0
          end >>>= 0
          thisStart >>>= 0
          thisEnd >>>= 0

          if (this === target) return 0

          var x = thisEnd - thisStart
          var y = end - start
          var len = Math.min(x, y)

          var thisCopy = this.slice(thisStart, thisEnd)
          var targetCopy = target.slice(start, end)

          for (var i = 0; i < len; ++i) {
            if (thisCopy[i] !== targetCopy[i]) {
              x = thisCopy[i]
              y = targetCopy[i]
              break
            }
          }

          if (x < y) return -1
          if (y < x) return 1
          return 0
        }

        // Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
        // OR the last index of `val` in `buffer` at offset <= `byteOffset`.
        //
        // Arguments:
        // - buffer - a Buffer to search
        // - val - a string, Buffer, or number
        // - byteOffset - an index into `buffer`; will be clamped to an int32
        // - encoding - an optional encoding, relevant is val is a string
        // - dir - true for indexOf, false for lastIndexOf
        function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
          // Empty buffer means no match
          if (buffer.length === 0) return -1

          // Normalize byteOffset
          if (typeof byteOffset === 'string') {
            encoding = byteOffset
            byteOffset = 0
          } else if (byteOffset > 0x7fffffff) {
            byteOffset = 0x7fffffff
          } else if (byteOffset < -0x80000000) {
            byteOffset = -0x80000000
          }
          byteOffset = +byteOffset  // Coerce to Number.
          if (isNaN(byteOffset)) {
            // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
            byteOffset = dir ? 0 : (buffer.length - 1)
          }

          // Normalize byteOffset: negative offsets start from the end of the buffer
          if (byteOffset < 0) byteOffset = buffer.length + byteOffset
          if (byteOffset >= buffer.length) {
            if (dir) return -1
            else byteOffset = buffer.length - 1
          } else if (byteOffset < 0) {
            if (dir) byteOffset = 0
            else return -1
          }

          // Normalize val
          if (typeof val === 'string') {
            val = Buffer.from(val, encoding)
          }

          // Finally, search either indexOf (if dir is true) or lastIndexOf
          if (Buffer.isBuffer(val)) {
            // Special case: looking for empty string/buffer always fails
            if (val.length === 0) {
              return -1
            }
            return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
          } else if (typeof val === 'number') {
            val = val & 0xFF // Search for a byte value [0-255]
            if (Buffer.TYPED_ARRAY_SUPPORT &&
              typeof Uint8Array.prototype.indexOf === 'function') {
              if (dir) {
                return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
              } else {
                return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
              }
            }
            return arrayIndexOf(buffer, [val], byteOffset, encoding, dir)
          }

          throw new TypeError('val must be string, number or Buffer')
        }

        function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
          var indexSize = 1
          var arrLength = arr.length
          var valLength = val.length

          if (encoding !== undefined) {
            encoding = String(encoding).toLowerCase()
            if (encoding === 'ucs2' || encoding === 'ucs-2' ||
              encoding === 'utf16le' || encoding === 'utf-16le') {
              if (arr.length < 2 || val.length < 2) {
                return -1
              }
              indexSize = 2
              arrLength /= 2
              valLength /= 2
              byteOffset /= 2
            }
          }

          function read(buf, i) {
            if (indexSize === 1) {
              return buf[i]
            } else {
              return buf.readUInt16BE(i * indexSize)
            }
          }

          var i
          if (dir) {
            var foundIndex = -1
            for (i = byteOffset; i < arrLength; i++) {
              if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
                if (foundIndex === -1) foundIndex = i
                if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
              } else {
                if (foundIndex !== -1) i -= i - foundIndex
                foundIndex = -1
              }
            }
          } else {
            if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
            for (i = byteOffset; i >= 0; i--) {
              var found = true
              for (var j = 0; j < valLength; j++) {
                if (read(arr, i + j) !== read(val, j)) {
                  found = false
                  break
                }
              }
              if (found) return i
            }
          }

          return -1
        }

        Buffer.prototype.includes = function includes(val, byteOffset, encoding) {
          return this.indexOf(val, byteOffset, encoding) !== -1
        }

        Buffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
          return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
        }

        Buffer.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
          return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
        }

        function hexWrite(buf, string, offset, length) {
          offset = Number(offset) || 0
          var remaining = buf.length - offset
          if (!length) {
            length = remaining
          } else {
            length = Number(length)
            if (length > remaining) {
              length = remaining
            }
          }

          // must be an even number of digits
          var strLen = string.length
          if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

          if (length > strLen / 2) {
            length = strLen / 2
          }
          for (var i = 0; i < length; ++i) {
            var parsed = parseInt(string.substr(i * 2, 2), 16)
            if (isNaN(parsed)) return i
            buf[offset + i] = parsed
          }
          return i
        }

        function utf8Write(buf, string, offset, length) {
          return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
        }

        function asciiWrite(buf, string, offset, length) {
          return blitBuffer(asciiToBytes(string), buf, offset, length)
        }

        function latin1Write(buf, string, offset, length) {
          return asciiWrite(buf, string, offset, length)
        }

        function base64Write(buf, string, offset, length) {
          return blitBuffer(base64ToBytes(string), buf, offset, length)
        }

        function ucs2Write(buf, string, offset, length) {
          return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
        }

        Buffer.prototype.write = function write(string, offset, length, encoding) {
          // Buffer#write(string)
          if (offset === undefined) {
            encoding = 'utf8'
            length = this.length
            offset = 0
            // Buffer#write(string, encoding)
          } else if (length === undefined && typeof offset === 'string') {
            encoding = offset
            length = this.length
            offset = 0
            // Buffer#write(string, offset[, length][, encoding])
          } else if (isFinite(offset)) {
            offset = offset | 0
            if (isFinite(length)) {
              length = length | 0
              if (encoding === undefined) encoding = 'utf8'
            } else {
              encoding = length
              length = undefined
            }
            // legacy write(string, encoding, offset, length) - remove in v0.13
          } else {
            throw new Error(
              'Buffer.write(string, encoding, offset[, length]) is no longer supported'
            )
          }

          var remaining = this.length - offset
          if (length === undefined || length > remaining) length = remaining

          if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
            throw new RangeError('Attempt to write outside buffer bounds')
          }

          if (!encoding) encoding = 'utf8'

          var loweredCase = false
          for (; ;) {
            switch (encoding) {
              case 'hex':
                return hexWrite(this, string, offset, length)

              case 'utf8':
              case 'utf-8':
                return utf8Write(this, string, offset, length)

              case 'ascii':
                return asciiWrite(this, string, offset, length)

              case 'latin1':
              case 'binary':
                return latin1Write(this, string, offset, length)

              case 'base64':
                // Warning: maxLength not taken into account in base64Write
                return base64Write(this, string, offset, length)

              case 'ucs2':
              case 'ucs-2':
              case 'utf16le':
              case 'utf-16le':
                return ucs2Write(this, string, offset, length)

              default:
                if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
                encoding = ('' + encoding).toLowerCase()
                loweredCase = true
            }
          }
        }

        Buffer.prototype.toJSON = function toJSON() {
          return {
            type: 'Buffer',
            data: Array.prototype.slice.call(this._arr || this, 0)
          }
        }

        function base64Slice(buf, start, end) {
          if (start === 0 && end === buf.length) {
            return base64.fromByteArray(buf)
          } else {
            return base64.fromByteArray(buf.slice(start, end))
          }
        }

        function utf8Slice(buf, start, end) {
          end = Math.min(buf.length, end)
          var res = []

          var i = start
          while (i < end) {
            var firstByte = buf[i]
            var codePoint = null
            var bytesPerSequence = (firstByte > 0xEF) ? 4
              : (firstByte > 0xDF) ? 3
                : (firstByte > 0xBF) ? 2
                  : 1

            if (i + bytesPerSequence <= end) {
              var secondByte, thirdByte, fourthByte, tempCodePoint

              switch (bytesPerSequence) {
                case 1:
                  if (firstByte < 0x80) {
                    codePoint = firstByte
                  }
                  break
                case 2:
                  secondByte = buf[i + 1]
                  if ((secondByte & 0xC0) === 0x80) {
                    tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
                    if (tempCodePoint > 0x7F) {
                      codePoint = tempCodePoint
                    }
                  }
                  break
                case 3:
                  secondByte = buf[i + 1]
                  thirdByte = buf[i + 2]
                  if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
                    tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
                    if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
                      codePoint = tempCodePoint
                    }
                  }
                  break
                case 4:
                  secondByte = buf[i + 1]
                  thirdByte = buf[i + 2]
                  fourthByte = buf[i + 3]
                  if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
                    tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
                    if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
                      codePoint = tempCodePoint
                    }
                  }
              }
            }

            if (codePoint === null) {
              // we did not generate a valid codePoint so insert a
              // replacement char (U+FFFD) and advance only 1 byte
              codePoint = 0xFFFD
              bytesPerSequence = 1
            } else if (codePoint > 0xFFFF) {
              // encode to utf16 (surrogate pair dance)
              codePoint -= 0x10000
              res.push(codePoint >>> 10 & 0x3FF | 0xD800)
              codePoint = 0xDC00 | codePoint & 0x3FF
            }

            res.push(codePoint)
            i += bytesPerSequence
          }

          return decodeCodePointsArray(res)
        }

        // Based on http://stackoverflow.com/a/22747272/680742, the browser with
        // the lowest limit is Chrome, with 0x10000 args.
        // We go 1 magnitude less, for safety
        var MAX_ARGUMENTS_LENGTH = 0x1000

        function decodeCodePointsArray(codePoints) {
          var len = codePoints.length
          if (len <= MAX_ARGUMENTS_LENGTH) {
            return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
          }

          // Decode in chunks to avoid "call stack size exceeded".
          var res = ''
          var i = 0
          while (i < len) {
            res += String.fromCharCode.apply(
              String,
              codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
            )
          }
          return res
        }

        function asciiSlice(buf, start, end) {
          var ret = ''
          end = Math.min(buf.length, end)

          for (var i = start; i < end; ++i) {
            ret += String.fromCharCode(buf[i] & 0x7F)
          }
          return ret
        }

        function latin1Slice(buf, start, end) {
          var ret = ''
          end = Math.min(buf.length, end)

          for (var i = start; i < end; ++i) {
            ret += String.fromCharCode(buf[i])
          }
          return ret
        }

        function hexSlice(buf, start, end) {
          var len = buf.length

          if (!start || start < 0) start = 0
          if (!end || end < 0 || end > len) end = len

          var out = ''
          for (var i = start; i < end; ++i) {
            out += toHex(buf[i])
          }
          return out
        }

        function utf16leSlice(buf, start, end) {
          var bytes = buf.slice(start, end)
          var res = ''
          for (var i = 0; i < bytes.length; i += 2) {
            res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
          }
          return res
        }

        Buffer.prototype.slice = function slice(start, end) {
          var len = this.length
          start = ~~start
          end = end === undefined ? len : ~~end

          if (start < 0) {
            start += len
            if (start < 0) start = 0
          } else if (start > len) {
            start = len
          }

          if (end < 0) {
            end += len
            if (end < 0) end = 0
          } else if (end > len) {
            end = len
          }

          if (end < start) end = start

          var newBuf
          if (Buffer.TYPED_ARRAY_SUPPORT) {
            newBuf = this.subarray(start, end)
            newBuf.__proto__ = Buffer.prototype
          } else {
            var sliceLen = end - start
            newBuf = new Buffer(sliceLen, undefined)
            for (var i = 0; i < sliceLen; ++i) {
              newBuf[i] = this[i + start]
            }
          }

          return newBuf
        }

        /*
         * Need to make sure that buffer isn't trying to write out of bounds.
         */
        function checkOffset(offset, ext, length) {
          if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
          if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
        }

        Buffer.prototype.readUIntLE = function readUIntLE(offset, byteLength, noAssert) {
          offset = offset | 0
          byteLength = byteLength | 0
          if (!noAssert) checkOffset(offset, byteLength, this.length)

          var val = this[offset]
          var mul = 1
          var i = 0
          while (++i < byteLength && (mul *= 0x100)) {
            val += this[offset + i] * mul
          }

          return val
        }

        Buffer.prototype.readUIntBE = function readUIntBE(offset, byteLength, noAssert) {
          offset = offset | 0
          byteLength = byteLength | 0
          if (!noAssert) {
            checkOffset(offset, byteLength, this.length)
          }

          var val = this[offset + --byteLength]
          var mul = 1
          while (byteLength > 0 && (mul *= 0x100)) {
            val += this[offset + --byteLength] * mul
          }

          return val
        }

        Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {
          if (!noAssert) checkOffset(offset, 1, this.length)
          return this[offset]
        }

        Buffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
          if (!noAssert) checkOffset(offset, 2, this.length)
          return this[offset] | (this[offset + 1] << 8)
        }

        Buffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
          if (!noAssert) checkOffset(offset, 2, this.length)
          return (this[offset] << 8) | this[offset + 1]
        }

        Buffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
          if (!noAssert) checkOffset(offset, 4, this.length)

          return ((this[offset]) |
            (this[offset + 1] << 8) |
            (this[offset + 2] << 16)) +
            (this[offset + 3] * 0x1000000)
        }

        Buffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
          if (!noAssert) checkOffset(offset, 4, this.length)

          return (this[offset] * 0x1000000) +
            ((this[offset + 1] << 16) |
              (this[offset + 2] << 8) |
              this[offset + 3])
        }

        Buffer.prototype.readIntLE = function readIntLE(offset, byteLength, noAssert) {
          offset = offset | 0
          byteLength = byteLength | 0
          if (!noAssert) checkOffset(offset, byteLength, this.length)

          var val = this[offset]
          var mul = 1
          var i = 0
          while (++i < byteLength && (mul *= 0x100)) {
            val += this[offset + i] * mul
          }
          mul *= 0x80

          if (val >= mul) val -= Math.pow(2, 8 * byteLength)

          return val
        }

        Buffer.prototype.readIntBE = function readIntBE(offset, byteLength, noAssert) {
          offset = offset | 0
          byteLength = byteLength | 0
          if (!noAssert) checkOffset(offset, byteLength, this.length)

          var i = byteLength
          var mul = 1
          var val = this[offset + --i]
          while (i > 0 && (mul *= 0x100)) {
            val += this[offset + --i] * mul
          }
          mul *= 0x80

          if (val >= mul) val -= Math.pow(2, 8 * byteLength)

          return val
        }

        Buffer.prototype.readInt8 = function readInt8(offset, noAssert) {
          if (!noAssert) checkOffset(offset, 1, this.length)
          if (!(this[offset] & 0x80)) return (this[offset])
          return ((0xff - this[offset] + 1) * -1)
        }

        Buffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
          if (!noAssert) checkOffset(offset, 2, this.length)
          var val = this[offset] | (this[offset + 1] << 8)
          return (val & 0x8000) ? val | 0xFFFF0000 : val
        }

        Buffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
          if (!noAssert) checkOffset(offset, 2, this.length)
          var val = this[offset + 1] | (this[offset] << 8)
          return (val & 0x8000) ? val | 0xFFFF0000 : val
        }

        Buffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
          if (!noAssert) checkOffset(offset, 4, this.length)

          return (this[offset]) |
            (this[offset + 1] << 8) |
            (this[offset + 2] << 16) |
            (this[offset + 3] << 24)
        }

        Buffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
          if (!noAssert) checkOffset(offset, 4, this.length)

          return (this[offset] << 24) |
            (this[offset + 1] << 16) |
            (this[offset + 2] << 8) |
            (this[offset + 3])
        }

        Buffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
          if (!noAssert) checkOffset(offset, 4, this.length)
          return ieee754.read(this, offset, true, 23, 4)
        }

        Buffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
          if (!noAssert) checkOffset(offset, 4, this.length)
          return ieee754.read(this, offset, false, 23, 4)
        }

        Buffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
          if (!noAssert) checkOffset(offset, 8, this.length)
          return ieee754.read(this, offset, true, 52, 8)
        }

        Buffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
          if (!noAssert) checkOffset(offset, 8, this.length)
          return ieee754.read(this, offset, false, 52, 8)
        }

        function checkInt(buf, value, offset, ext, max, min) {
          if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
          if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
          if (offset + ext > buf.length) throw new RangeError('Index out of range')
        }

        Buffer.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength, noAssert) {
          value = +value
          offset = offset | 0
          byteLength = byteLength | 0
          if (!noAssert) {
            var maxBytes = Math.pow(2, 8 * byteLength) - 1
            checkInt(this, value, offset, byteLength, maxBytes, 0)
          }

          var mul = 1
          var i = 0
          this[offset] = value & 0xFF
          while (++i < byteLength && (mul *= 0x100)) {
            this[offset + i] = (value / mul) & 0xFF
          }

          return offset + byteLength
        }

        Buffer.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength, noAssert) {
          value = +value
          offset = offset | 0
          byteLength = byteLength | 0
          if (!noAssert) {
            var maxBytes = Math.pow(2, 8 * byteLength) - 1
            checkInt(this, value, offset, byteLength, maxBytes, 0)
          }

          var i = byteLength - 1
          var mul = 1
          this[offset + i] = value & 0xFF
          while (--i >= 0 && (mul *= 0x100)) {
            this[offset + i] = (value / mul) & 0xFF
          }

          return offset + byteLength
        }

        Buffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
          value = +value
          offset = offset | 0
          if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
          if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
          this[offset] = (value & 0xff)
          return offset + 1
        }

        function objectWriteUInt16(buf, value, offset, littleEndian) {
          if (value < 0) value = 0xffff + value + 1
          for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
            buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
              (littleEndian ? i : 1 - i) * 8
          }
        }

        Buffer.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
          value = +value
          offset = offset | 0
          if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
          if (Buffer.TYPED_ARRAY_SUPPORT) {
            this[offset] = (value & 0xff)
            this[offset + 1] = (value >>> 8)
          } else {
            objectWriteUInt16(this, value, offset, true)
          }
          return offset + 2
        }

        Buffer.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
          value = +value
          offset = offset | 0
          if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
          if (Buffer.TYPED_ARRAY_SUPPORT) {
            this[offset] = (value >>> 8)
            this[offset + 1] = (value & 0xff)
          } else {
            objectWriteUInt16(this, value, offset, false)
          }
          return offset + 2
        }

        function objectWriteUInt32(buf, value, offset, littleEndian) {
          if (value < 0) value = 0xffffffff + value + 1
          for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
            buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
          }
        }

        Buffer.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
          value = +value
          offset = offset | 0
          if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
          if (Buffer.TYPED_ARRAY_SUPPORT) {
            this[offset + 3] = (value >>> 24)
            this[offset + 2] = (value >>> 16)
            this[offset + 1] = (value >>> 8)
            this[offset] = (value & 0xff)
          } else {
            objectWriteUInt32(this, value, offset, true)
          }
          return offset + 4
        }

        Buffer.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
          value = +value
          offset = offset | 0
          if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
          if (Buffer.TYPED_ARRAY_SUPPORT) {
            this[offset] = (value >>> 24)
            this[offset + 1] = (value >>> 16)
            this[offset + 2] = (value >>> 8)
            this[offset + 3] = (value & 0xff)
          } else {
            objectWriteUInt32(this, value, offset, false)
          }
          return offset + 4
        }

        Buffer.prototype.writeIntLE = function writeIntLE(value, offset, byteLength, noAssert) {
          value = +value
          offset = offset | 0
          if (!noAssert) {
            var limit = Math.pow(2, 8 * byteLength - 1)

            checkInt(this, value, offset, byteLength, limit - 1, -limit)
          }

          var i = 0
          var mul = 1
          var sub = 0
          this[offset] = value & 0xFF
          while (++i < byteLength && (mul *= 0x100)) {
            if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
              sub = 1
            }
            this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
          }

          return offset + byteLength
        }

        Buffer.prototype.writeIntBE = function writeIntBE(value, offset, byteLength, noAssert) {
          value = +value
          offset = offset | 0
          if (!noAssert) {
            var limit = Math.pow(2, 8 * byteLength - 1)

            checkInt(this, value, offset, byteLength, limit - 1, -limit)
          }

          var i = byteLength - 1
          var mul = 1
          var sub = 0
          this[offset + i] = value & 0xFF
          while (--i >= 0 && (mul *= 0x100)) {
            if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
              sub = 1
            }
            this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
          }

          return offset + byteLength
        }

        Buffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
          value = +value
          offset = offset | 0
          if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
          if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
          if (value < 0) value = 0xff + value + 1
          this[offset] = (value & 0xff)
          return offset + 1
        }

        Buffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
          value = +value
          offset = offset | 0
          if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
          if (Buffer.TYPED_ARRAY_SUPPORT) {
            this[offset] = (value & 0xff)
            this[offset + 1] = (value >>> 8)
          } else {
            objectWriteUInt16(this, value, offset, true)
          }
          return offset + 2
        }

        Buffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
          value = +value
          offset = offset | 0
          if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
          if (Buffer.TYPED_ARRAY_SUPPORT) {
            this[offset] = (value >>> 8)
            this[offset + 1] = (value & 0xff)
          } else {
            objectWriteUInt16(this, value, offset, false)
          }
          return offset + 2
        }

        Buffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
          value = +value
          offset = offset | 0
          if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
          if (Buffer.TYPED_ARRAY_SUPPORT) {
            this[offset] = (value & 0xff)
            this[offset + 1] = (value >>> 8)
            this[offset + 2] = (value >>> 16)
            this[offset + 3] = (value >>> 24)
          } else {
            objectWriteUInt32(this, value, offset, true)
          }
          return offset + 4
        }

        Buffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
          value = +value
          offset = offset | 0
          if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
          if (value < 0) value = 0xffffffff + value + 1
          if (Buffer.TYPED_ARRAY_SUPPORT) {
            this[offset] = (value >>> 24)
            this[offset + 1] = (value >>> 16)
            this[offset + 2] = (value >>> 8)
            this[offset + 3] = (value & 0xff)
          } else {
            objectWriteUInt32(this, value, offset, false)
          }
          return offset + 4
        }

        function checkIEEE754(buf, value, offset, ext, max, min) {
          if (offset + ext > buf.length) throw new RangeError('Index out of range')
          if (offset < 0) throw new RangeError('Index out of range')
        }

        function writeFloat(buf, value, offset, littleEndian, noAssert) {
          if (!noAssert) {
            checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
          }
          ieee754.write(buf, value, offset, littleEndian, 23, 4)
          return offset + 4
        }

        Buffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
          return writeFloat(this, value, offset, true, noAssert)
        }

        Buffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
          return writeFloat(this, value, offset, false, noAssert)
        }

        function writeDouble(buf, value, offset, littleEndian, noAssert) {
          if (!noAssert) {
            checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
          }
          ieee754.write(buf, value, offset, littleEndian, 52, 8)
          return offset + 8
        }

        Buffer.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
          return writeDouble(this, value, offset, true, noAssert)
        }

        Buffer.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
          return writeDouble(this, value, offset, false, noAssert)
        }

        // copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
        Buffer.prototype.copy = function copy(target, targetStart, start, end) {
          if (!start) start = 0
          if (!end && end !== 0) end = this.length
          if (targetStart >= target.length) targetStart = target.length
          if (!targetStart) targetStart = 0
          if (end > 0 && end < start) end = start

          // Copy 0 bytes; we're done
          if (end === start) return 0
          if (target.length === 0 || this.length === 0) return 0

          // Fatal error conditions
          if (targetStart < 0) {
            throw new RangeError('targetStart out of bounds')
          }
          if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
          if (end < 0) throw new RangeError('sourceEnd out of bounds')

          // Are we oob?
          if (end > this.length) end = this.length
          if (target.length - targetStart < end - start) {
            end = target.length - targetStart + start
          }

          var len = end - start
          var i

          if (this === target && start < targetStart && targetStart < end) {
            // descending copy from end
            for (i = len - 1; i >= 0; --i) {
              target[i + targetStart] = this[i + start]
            }
          } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
            // ascending copy from start
            for (i = 0; i < len; ++i) {
              target[i + targetStart] = this[i + start]
            }
          } else {
            Uint8Array.prototype.set.call(
              target,
              this.subarray(start, start + len),
              targetStart
            )
          }

          return len
        }

        // Usage:
        //    buffer.fill(number[, offset[, end]])
        //    buffer.fill(buffer[, offset[, end]])
        //    buffer.fill(string[, offset[, end]][, encoding])
        Buffer.prototype.fill = function fill(val, start, end, encoding) {
          // Handle string cases:
          if (typeof val === 'string') {
            if (typeof start === 'string') {
              encoding = start
              start = 0
              end = this.length
            } else if (typeof end === 'string') {
              encoding = end
              end = this.length
            }
            if (val.length === 1) {
              var code = val.charCodeAt(0)
              if (code < 256) {
                val = code
              }
            }
            if (encoding !== undefined && typeof encoding !== 'string') {
              throw new TypeError('encoding must be a string')
            }
            if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
              throw new TypeError('Unknown encoding: ' + encoding)
            }
          } else if (typeof val === 'number') {
            val = val & 255
          }

          // Invalid ranges are not set to a default, so can range check early.
          if (start < 0 || this.length < start || this.length < end) {
            throw new RangeError('Out of range index')
          }

          if (end <= start) {
            return this
          }

          start = start >>> 0
          end = end === undefined ? this.length : end >>> 0

          if (!val) val = 0

          var i
          if (typeof val === 'number') {
            for (i = start; i < end; ++i) {
              this[i] = val
            }
          } else {
            var bytes = Buffer.isBuffer(val)
              ? val
              : utf8ToBytes(new Buffer(val, encoding).toString())
            var len = bytes.length
            for (i = 0; i < end - start; ++i) {
              this[i + start] = bytes[i % len]
            }
          }

          return this
        }

        // HELPER FUNCTIONS
        // ================

        var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g

        function base64clean(str) {
          // Node strips out invalid characters like \n and \t from the string, base64-js does not
          str = stringtrim(str).replace(INVALID_BASE64_RE, '')
          // Node converts strings with length < 2 to ''
          if (str.length < 2) return ''
          // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
          while (str.length % 4 !== 0) {
            str = str + '='
          }
          return str
        }

        function stringtrim(str) {
          if (str.trim) return str.trim()
          return str.replace(/^\s+|\s+$/g, '')
        }

        function toHex(n) {
          if (n < 16) return '0' + n.toString(16)
          return n.toString(16)
        }

        function utf8ToBytes(string, units) {
          units = units || Infinity
          var codePoint
          var length = string.length
          var leadSurrogate = null
          var bytes = []

          for (var i = 0; i < length; ++i) {
            codePoint = string.charCodeAt(i)

            // is surrogate component
            if (codePoint > 0xD7FF && codePoint < 0xE000) {
              // last char was a lead
              if (!leadSurrogate) {
                // no lead yet
                if (codePoint > 0xDBFF) {
                  // unexpected trail
                  if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
                  continue
                } else if (i + 1 === length) {
                  // unpaired lead
                  if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
                  continue
                }

                // valid lead
                leadSurrogate = codePoint

                continue
              }

              // 2 leads in a row
              if (codePoint < 0xDC00) {
                if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
                leadSurrogate = codePoint
                continue
              }

              // valid surrogate pair
              codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
            } else if (leadSurrogate) {
              // valid bmp char, but last char was a lead
              if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
            }

            leadSurrogate = null

            // encode utf8
            if (codePoint < 0x80) {
              if ((units -= 1) < 0) break
              bytes.push(codePoint)
            } else if (codePoint < 0x800) {
              if ((units -= 2) < 0) break
              bytes.push(
                codePoint >> 0x6 | 0xC0,
                codePoint & 0x3F | 0x80
              )
            } else if (codePoint < 0x10000) {
              if ((units -= 3) < 0) break
              bytes.push(
                codePoint >> 0xC | 0xE0,
                codePoint >> 0x6 & 0x3F | 0x80,
                codePoint & 0x3F | 0x80
              )
            } else if (codePoint < 0x110000) {
              if ((units -= 4) < 0) break
              bytes.push(
                codePoint >> 0x12 | 0xF0,
                codePoint >> 0xC & 0x3F | 0x80,
                codePoint >> 0x6 & 0x3F | 0x80,
                codePoint & 0x3F | 0x80
              )
            } else {
              throw new Error('Invalid code point')
            }
          }

          return bytes
        }

        function asciiToBytes(str) {
          var byteArray = []
          for (var i = 0; i < str.length; ++i) {
            // Node's code seems to be doing this and not & 0x7F..
            byteArray.push(str.charCodeAt(i) & 0xFF)
          }
          return byteArray
        }

        function utf16leToBytes(str, units) {
          var c, hi, lo
          var byteArray = []
          for (var i = 0; i < str.length; ++i) {
            if ((units -= 2) < 0) break

            c = str.charCodeAt(i)
            hi = c >> 8
            lo = c % 256
            byteArray.push(lo)
            byteArray.push(hi)
          }

          return byteArray
        }

        function base64ToBytes(str) {
          return base64.toByteArray(base64clean(str))
        }

        function blitBuffer(src, dst, offset, length) {
          for (var i = 0; i < length; ++i) {
            if ((i + offset >= dst.length) || (i >= src.length)) break
            dst[i + offset] = src[i]
          }
          return i
        }

        function isnan(val) {
          return val !== val // eslint-disable-line no-self-compare
        }

        /* WEBPACK VAR INJECTION */
      }.call(this, __webpack_require__(/*! ./../../buildin/global.js */ "../../../../../AppData/Roaming/npm/node_modules/webpack/buildin/global.js")))

      /***/
    }),

/***/ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/cipher-base/index.js":
/*!***************************************************!*\
  !*** (webpack)/node_modules/cipher-base/index.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

      var Buffer = __webpack_require__(/*! safe-buffer */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/safe-buffer/index.js").Buffer
      var Transform = __webpack_require__(/*! stream */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/stream-browserify/index.js").Transform
      var StringDecoder = __webpack_require__(/*! string_decoder */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/string_decoder/lib/string_decoder.js").StringDecoder
      var inherits = __webpack_require__(/*! inherits */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/inherits/inherits_browser.js")

      function CipherBase(hashMode) {
        Transform.call(this)
        this.hashMode = typeof hashMode === 'string'
        if (this.hashMode) {
          this[hashMode] = this._finalOrDigest
        } else {
          this.final = this._finalOrDigest
        }
        if (this._final) {
          this.__final = this._final
          this._final = null
        }
        this._decoder = null
        this._encoding = null
      }
      inherits(CipherBase, Transform)

      CipherBase.prototype.update = function (data, inputEnc, outputEnc) {
        if (typeof data === 'string') {
          data = Buffer.from(data, inputEnc)
        }

        var outData = this._update(data)
        if (this.hashMode) return this

        if (outputEnc) {
          outData = this._toString(outData, outputEnc)
        }

        return outData
      }

      CipherBase.prototype.setAutoPadding = function () { }
      CipherBase.prototype.getAuthTag = function () {
        throw new Error('trying to get auth tag in unsupported state')
      }

      CipherBase.prototype.setAuthTag = function () {
        throw new Error('trying to set auth tag in unsupported state')
      }

      CipherBase.prototype.setAAD = function () {
        throw new Error('trying to set aad in unsupported state')
      }

      CipherBase.prototype._transform = function (data, _, next) {
        var err
        try {
          if (this.hashMode) {
            this._update(data)
          } else {
            this.push(this._update(data))
          }
        } catch (e) {
          err = e
        } finally {
          next(err)
        }
      }
      CipherBase.prototype._flush = function (done) {
        var err
        try {
          this.push(this.__final())
        } catch (e) {
          err = e
        }

        done(err)
      }
      CipherBase.prototype._finalOrDigest = function (outputEnc) {
        var outData = this.__final() || Buffer.alloc(0)
        if (outputEnc) {
          outData = this._toString(outData, outputEnc, true)
        }
        return outData
      }

      CipherBase.prototype._toString = function (value, enc, fin) {
        if (!this._decoder) {
          this._decoder = new StringDecoder(enc)
          this._encoding = enc
        }

        if (this._encoding !== enc) throw new Error('can\'t switch encodings')

        var out = this._decoder.write(value)
        if (fin) {
          out += this._decoder.end()
        }

        return out
      }

      module.exports = CipherBase


      /***/
    }),

/***/ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/core-util-is/lib/util.js":
/*!*******************************************************!*\
  !*** (webpack)/node_modules/core-util-is/lib/util.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function (Buffer) {// Copyright Joyent, Inc. and other Node contributors.
        //
        // Permission is hereby granted, free of charge, to any person obtaining a
        // copy of this software and associated documentation files (the
        // "Software"), to deal in the Software without restriction, including
        // without limitation the rights to use, copy, modify, merge, publish,
        // distribute, sublicense, and/or sell copies of the Software, and to permit
        // persons to whom the Software is furnished to do so, subject to the
        // following conditions:
        //
        // The above copyright notice and this permission notice shall be included
        // in all copies or substantial portions of the Software.
        //
        // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
        // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
        // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
        // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
        // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
        // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
        // USE OR OTHER DEALINGS IN THE SOFTWARE.

        // NOTE: These type checking functions intentionally don't use `instanceof`
        // because it is fragile and can be easily faked with `Object.create()`.

        function isArray(arg) {
          if (Array.isArray) {
            return Array.isArray(arg);
          }
          return objectToString(arg) === '[object Array]';
        }
        exports.isArray = isArray;

        function isBoolean(arg) {
          return typeof arg === 'boolean';
        }
        exports.isBoolean = isBoolean;

        function isNull(arg) {
          return arg === null;
        }
        exports.isNull = isNull;

        function isNullOrUndefined(arg) {
          return arg == null;
        }
        exports.isNullOrUndefined = isNullOrUndefined;

        function isNumber(arg) {
          return typeof arg === 'number';
        }
        exports.isNumber = isNumber;

        function isString(arg) {
          return typeof arg === 'string';
        }
        exports.isString = isString;

        function isSymbol(arg) {
          return typeof arg === 'symbol';
        }
        exports.isSymbol = isSymbol;

        function isUndefined(arg) {
          return arg === void 0;
        }
        exports.isUndefined = isUndefined;

        function isRegExp(re) {
          return objectToString(re) === '[object RegExp]';
        }
        exports.isRegExp = isRegExp;

        function isObject(arg) {
          return typeof arg === 'object' && arg !== null;
        }
        exports.isObject = isObject;

        function isDate(d) {
          return objectToString(d) === '[object Date]';
        }
        exports.isDate = isDate;

        function isError(e) {
          return (objectToString(e) === '[object Error]' || e instanceof Error);
        }
        exports.isError = isError;

        function isFunction(arg) {
          return typeof arg === 'function';
        }
        exports.isFunction = isFunction;

        function isPrimitive(arg) {
          return arg === null ||
            typeof arg === 'boolean' ||
            typeof arg === 'number' ||
            typeof arg === 'string' ||
            typeof arg === 'symbol' ||  // ES6 symbol
            typeof arg === 'undefined';
        }
        exports.isPrimitive = isPrimitive;

        exports.isBuffer = Buffer.isBuffer;

        function objectToString(o) {
          return Object.prototype.toString.call(o);
        }

        /* WEBPACK VAR INJECTION */
      }.call(this, __webpack_require__(/*! ./../../buffer/index.js */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/buffer/index.js").Buffer))

      /***/
    }),

/***/ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/create-ecdh/browser.js":
/*!*****************************************************!*\
  !*** (webpack)/node_modules/create-ecdh/browser.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function (Buffer) {
        var elliptic = __webpack_require__(/*! elliptic */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/elliptic/lib/elliptic.js")
        var BN = __webpack_require__(/*! bn.js */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/bn.js/lib/bn.js")

        module.exports = function createECDH(curve) {
          return new ECDH(curve)
        }

        var aliases = {
          secp256k1: {
            name: 'secp256k1',
            byteLength: 32
          },
          secp224r1: {
            name: 'p224',
            byteLength: 28
          },
          prime256v1: {
            name: 'p256',
            byteLength: 32
          },
          prime192v1: {
            name: 'p192',
            byteLength: 24
          },
          ed25519: {
            name: 'ed25519',
            byteLength: 32
          },
          secp384r1: {
            name: 'p384',
            byteLength: 48
          },
          secp521r1: {
            name: 'p521',
            byteLength: 66
          }
        }

        aliases.p224 = aliases.secp224r1
        aliases.p256 = aliases.secp256r1 = aliases.prime256v1
        aliases.p192 = aliases.secp192r1 = aliases.prime192v1
        aliases.p384 = aliases.secp384r1
        aliases.p521 = aliases.secp521r1

        function ECDH(curve) {
          this.curveType = aliases[curve]
          if (!this.curveType) {
            this.curveType = {
              name: curve
            }
          }
          this.curve = new elliptic.ec(this.curveType.name) // eslint-disable-line new-cap
          this.keys = void 0
        }

        ECDH.prototype.generateKeys = function (enc, format) {
          this.keys = this.curve.genKeyPair()
          return this.getPublicKey(enc, format)
        }

        ECDH.prototype.computeSecret = function (other, inenc, enc) {
          inenc = inenc || 'utf8'
          if (!Buffer.isBuffer(other)) {
            other = new Buffer(other, inenc)
          }
          var otherPub = this.curve.keyFromPublic(other).getPublic()
          var out = otherPub.mul(this.keys.getPrivate()).getX()
          return formatReturnValue(out, enc, this.curveType.byteLength)
        }

        ECDH.prototype.getPublicKey = function (enc, format) {
          var key = this.keys.getPublic(format === 'compressed', true)
          if (format === 'hybrid') {
            if (key[key.length - 1] % 2) {
              key[0] = 7
            } else {
              key[0] = 6
            }
          }
          return formatReturnValue(key, enc)
        }

        ECDH.prototype.getPrivateKey = function (enc) {
          return formatReturnValue(this.keys.getPrivate(), enc)
        }

        ECDH.prototype.setPublicKey = function (pub, enc) {
          enc = enc || 'utf8'
          if (!Buffer.isBuffer(pub)) {
            pub = new Buffer(pub, enc)
          }
          this.keys._importPublic(pub)
          return this
        }

        ECDH.prototype.setPrivateKey = function (priv, enc) {
          enc = enc || 'utf8'
          if (!Buffer.isBuffer(priv)) {
            priv = new Buffer(priv, enc)
          }

          var _priv = new BN(priv)
          _priv = _priv.toString(16)
          this.keys = this.curve.genKeyPair()
          this.keys._importPrivate(_priv)
          return this
        }

        function formatReturnValue(bn, enc, len) {
          if (!Array.isArray(bn)) {
            bn = bn.toArray()
          }
          var buf = new Buffer(bn)
          if (len && buf.length < len) {
            var zeros = new Buffer(len - buf.length)
            zeros.fill(0)
            buf = Buffer.concat([zeros, buf])
          }
          if (!enc) {
            return buf
          } else {
            return buf.toString(enc)
          }
        }

        /* WEBPACK VAR INJECTION */
      }.call(this, __webpack_require__(/*! ./../buffer/index.js */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/buffer/index.js").Buffer))

      /***/
    }),

/***/ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/create-hash/browser.js":
/*!*****************************************************!*\
  !*** (webpack)/node_modules/create-hash/browser.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

      "use strict";

      var inherits = __webpack_require__(/*! inherits */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/inherits/inherits_browser.js")
      var MD5 = __webpack_require__(/*! md5.js */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/md5.js/index.js")
      var RIPEMD160 = __webpack_require__(/*! ripemd160 */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/ripemd160/index.js")
      var sha = __webpack_require__(/*! sha.js */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/sha.js/index.js")
      var Base = __webpack_require__(/*! cipher-base */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/cipher-base/index.js")

      function Hash(hash) {
        Base.call(this, 'digest')

        this._hash = hash
      }

      inherits(Hash, Base)

      Hash.prototype._update = function (data) {
        this._hash.update(data)
      }

      Hash.prototype._final = function () {
        return this._hash.digest()
      }

      module.exports = function createHash(alg) {
        alg = alg.toLowerCase()
        if (alg === 'md5') return new MD5()
        if (alg === 'rmd160' || alg === 'ripemd160') return new RIPEMD160()

        return new Hash(sha(alg))
      }


      /***/
    }),

/***/ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/create-hash/md5.js":
/*!*************************************************!*\
  !*** (webpack)/node_modules/create-hash/md5.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

      var MD5 = __webpack_require__(/*! md5.js */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/md5.js/index.js")

      module.exports = function (buffer) {
        return new MD5().update(buffer).digest()
      }


      /***/
    }),

/***/ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/create-hmac/browser.js":
/*!*****************************************************!*\
  !*** (webpack)/node_modules/create-hmac/browser.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

      "use strict";

      var inherits = __webpack_require__(/*! inherits */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/inherits/inherits_browser.js")
      var Legacy = __webpack_require__(/*! ./legacy */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/create-hmac/legacy.js")
      var Base = __webpack_require__(/*! cipher-base */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/cipher-base/index.js")
      var Buffer = __webpack_require__(/*! safe-buffer */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/safe-buffer/index.js").Buffer
      var md5 = __webpack_require__(/*! create-hash/md5 */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/create-hash/md5.js")
      var RIPEMD160 = __webpack_require__(/*! ripemd160 */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/ripemd160/index.js")

      var sha = __webpack_require__(/*! sha.js */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/sha.js/index.js")

      var ZEROS = Buffer.alloc(128)

      function Hmac(alg, key) {
        Base.call(this, 'digest')
        if (typeof key === 'string') {
          key = Buffer.from(key)
        }

        var blocksize = (alg === 'sha512' || alg === 'sha384') ? 128 : 64

        this._alg = alg
        this._key = key
        if (key.length > blocksize) {
          var hash = alg === 'rmd160' ? new RIPEMD160() : sha(alg)
          key = hash.update(key).digest()
        } else if (key.length < blocksize) {
          key = Buffer.concat([key, ZEROS], blocksize)
        }

        var ipad = this._ipad = Buffer.allocUnsafe(blocksize)
        var opad = this._opad = Buffer.allocUnsafe(blocksize)

        for (var i = 0; i < blocksize; i++) {
          ipad[i] = key[i] ^ 0x36
          opad[i] = key[i] ^ 0x5C
        }
        this._hash = alg === 'rmd160' ? new RIPEMD160() : sha(alg)
        this._hash.update(ipad)
      }

      inherits(Hmac, Base)

      Hmac.prototype._update = function (data) {
        this._hash.update(data)
      }

      Hmac.prototype._final = function () {
        var h = this._hash.digest()
        var hash = this._alg === 'rmd160' ? new RIPEMD160() : sha(this._alg)
        return hash.update(this._opad).update(h).digest()
      }

      module.exports = function createHmac(alg, key) {
        alg = alg.toLowerCase()
        if (alg === 'rmd160' || alg === 'ripemd160') {
          return new Hmac('rmd160', key)
        }
        if (alg === 'md5') {
          return new Legacy(md5, key)
        }
        return new Hmac(alg, key)
      }


      /***/
    }),

/***/ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/create-hmac/legacy.js":
/*!****************************************************!*\
  !*** (webpack)/node_modules/create-hmac/legacy.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

      "use strict";

      var inherits = __webpack_require__(/*! inherits */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/inherits/inherits_browser.js")
      var Buffer = __webpack_require__(/*! safe-buffer */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/safe-buffer/index.js").Buffer

      var Base = __webpack_require__(/*! cipher-base */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/cipher-base/index.js")

      var ZEROS = Buffer.alloc(128)
      var blocksize = 64

      function Hmac(alg, key) {
        Base.call(this, 'digest')
        if (typeof key === 'string') {
          key = Buffer.from(key)
        }

        this._alg = alg
        this._key = key

        if (key.length > blocksize) {
          key = alg(key)
        } else if (key.length < blocksize) {
          key = Buffer.concat([key, ZEROS], blocksize)
        }

        var ipad = this._ipad = Buffer.allocUnsafe(blocksize)
        var opad = this._opad = Buffer.allocUnsafe(blocksize)

        for (var i = 0; i < blocksize; i++) {
          ipad[i] = key[i] ^ 0x36
          opad[i] = key[i] ^ 0x5C
        }

        this._hash = [ipad]
      }

      inherits(Hmac, Base)

      Hmac.prototype._update = function (data) {
        this._hash.push(data)
      }

      Hmac.prototype._final = function () {
        var h = this._alg(Buffer.concat(this._hash))
        return this._alg(Buffer.concat([this._opad, h]))
      }
      module.exports = Hmac


      /***/
    }),

/***/ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/crypto-browserify/index.js":
/*!*********************************************************!*\
  !*** (webpack)/node_modules/crypto-browserify/index.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

      "use strict";


      exports.randomBytes = exports.rng = exports.pseudoRandomBytes = exports.prng = __webpack_require__(/*! randombytes */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/randombytes/browser.js")
      exports.createHash = exports.Hash = __webpack_require__(/*! create-hash */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/create-hash/browser.js")
      exports.createHmac = exports.Hmac = __webpack_require__(/*! create-hmac */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/create-hmac/browser.js")

      var algos = __webpack_require__(/*! browserify-sign/algos */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/browserify-sign/algos.js")
      var algoKeys = Object.keys(algos)
      var hashes = ['sha1', 'sha224', 'sha256', 'sha384', 'sha512', 'md5', 'rmd160'].concat(algoKeys)
      exports.getHashes = function () {
        return hashes
      }

      var p = __webpack_require__(/*! pbkdf2 */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/pbkdf2/browser.js")
      exports.pbkdf2 = p.pbkdf2
      exports.pbkdf2Sync = p.pbkdf2Sync

      var aes = __webpack_require__(/*! browserify-cipher */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/browserify-cipher/browser.js")

      exports.Cipher = aes.Cipher
      exports.createCipher = aes.createCipher
      exports.Cipheriv = aes.Cipheriv
      exports.createCipheriv = aes.createCipheriv
      exports.Decipher = aes.Decipher
      exports.createDecipher = aes.createDecipher
      exports.Decipheriv = aes.Decipheriv
      exports.createDecipheriv = aes.createDecipheriv
      exports.getCiphers = aes.getCiphers
      exports.listCiphers = aes.listCiphers

      var dh = __webpack_require__(/*! diffie-hellman */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/diffie-hellman/browser.js")

      exports.DiffieHellmanGroup = dh.DiffieHellmanGroup
      exports.createDiffieHellmanGroup = dh.createDiffieHellmanGroup
      exports.getDiffieHellman = dh.getDiffieHellman
      exports.createDiffieHellman = dh.createDiffieHellman
      exports.DiffieHellman = dh.DiffieHellman

      var sign = __webpack_require__(/*! browserify-sign */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/browserify-sign/browser/index.js")

      exports.createSign = sign.createSign
      exports.Sign = sign.Sign
      exports.createVerify = sign.createVerify
      exports.Verify = sign.Verify

      exports.createECDH = __webpack_require__(/*! create-ecdh */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/create-ecdh/browser.js")

      var publicEncrypt = __webpack_require__(/*! public-encrypt */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/public-encrypt/browser.js")

      exports.publicEncrypt = publicEncrypt.publicEncrypt
      exports.privateEncrypt = publicEncrypt.privateEncrypt
      exports.publicDecrypt = publicEncrypt.publicDecrypt
      exports.privateDecrypt = publicEncrypt.privateDecrypt

      // the least I can do is make error messages for the rest of the node.js/crypto api.
      // ;[
      //   'createCredentials'
      // ].forEach(function (name) {
      //   exports[name] = function () {
      //     throw new Error([
      //       'sorry, ' + name + ' is not implemented yet',
      //       'we accept pull requests',
      //       'https://github.com/crypto-browserify/crypto-browserify'
      //     ].join('\n'))
      //   }
      // })

      var rf = __webpack_require__(/*! randomfill */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/randomfill/browser.js")

      exports.randomFill = rf.randomFill
      exports.randomFillSync = rf.randomFillSync

      exports.createCredentials = function () {
        throw new Error([
          'sorry, createCredentials is not implemented yet',
          'we accept pull requests',
          'https://github.com/crypto-browserify/crypto-browserify'
        ].join('\n'))
      }

      exports.constants = {
        'DH_CHECK_P_NOT_SAFE_PRIME': 2,
        'DH_CHECK_P_NOT_PRIME': 1,
        'DH_UNABLE_TO_CHECK_GENERATOR': 4,
        'DH_NOT_SUITABLE_GENERATOR': 8,
        'NPN_ENABLED': 1,
        'ALPN_ENABLED': 1,
        'RSA_PKCS1_PADDING': 1,
        'RSA_SSLV23_PADDING': 2,
        'RSA_NO_PADDING': 3,
        'RSA_PKCS1_OAEP_PADDING': 4,
        'RSA_X931_PADDING': 5,
        'RSA_PKCS1_PSS_PADDING': 6,
        'POINT_CONVERSION_COMPRESSED': 2,
        'POINT_CONVERSION_UNCOMPRESSED': 4,
        'POINT_CONVERSION_HYBRID': 6
      }


      /***/
    }),

/***/ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/des.js/lib/des.js":
/*!************************************************!*\
  !*** (webpack)/node_modules/des.js/lib/des.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

      "use strict";


      exports.utils = __webpack_require__(/*! ./des/utils */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/des.js/lib/des/utils.js");
      exports.Cipher = __webpack_require__(/*! ./des/cipher */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/des.js/lib/des/cipher.js");
      exports.DES = __webpack_require__(/*! ./des/des */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/des.js/lib/des/des.js");
      exports.CBC = __webpack_require__(/*! ./des/cbc */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/des.js/lib/des/cbc.js");
      exports.EDE = __webpack_require__(/*! ./des/ede */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/des.js/lib/des/ede.js");


      /***/
    }),

/***/ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/des.js/lib/des/cbc.js":
/*!****************************************************!*\
  !*** (webpack)/node_modules/des.js/lib/des/cbc.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

      "use strict";


      var assert = __webpack_require__(/*! minimalistic-assert */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/minimalistic-assert/index.js");
      var inherits = __webpack_require__(/*! inherits */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/inherits/inherits_browser.js");

      var proto = {};

      function CBCState(iv) {
        assert.equal(iv.length, 8, 'Invalid IV length');

        this.iv = new Array(8);
        for (var i = 0; i < this.iv.length; i++)
          this.iv[i] = iv[i];
      }

      function instantiate(Base) {
        function CBC(options) {
          Base.call(this, options);
          this._cbcInit();
        }
        inherits(CBC, Base);

        var keys = Object.keys(proto);
        for (var i = 0; i < keys.length; i++) {
          var key = keys[i];
          CBC.prototype[key] = proto[key];
        }

        CBC.create = function create(options) {
          return new CBC(options);
        };

        return CBC;
      }

      exports.instantiate = instantiate;

      proto._cbcInit = function _cbcInit() {
        var state = new CBCState(this.options.iv);
        this._cbcState = state;
      };

      proto._update = function _update(inp, inOff, out, outOff) {
        var state = this._cbcState;
        var superProto = this.constructor.super_.prototype;

        var iv = state.iv;
        if (this.type === 'encrypt') {
          for (var i = 0; i < this.blockSize; i++)
            iv[i] ^= inp[inOff + i];

          superProto._update.call(this, iv, 0, out, outOff);

          for (var i = 0; i < this.blockSize; i++)
            iv[i] = out[outOff + i];
        } else {
          superProto._update.call(this, inp, inOff, out, outOff);

          for (var i = 0; i < this.blockSize; i++)
            out[outOff + i] ^= iv[i];

          for (var i = 0; i < this.blockSize; i++)
            iv[i] = inp[inOff + i];
        }
      };


      /***/
    }),

/***/ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/des.js/lib/des/cipher.js":
/*!*******************************************************!*\
  !*** (webpack)/node_modules/des.js/lib/des/cipher.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

      "use strict";


      var assert = __webpack_require__(/*! minimalistic-assert */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/minimalistic-assert/index.js");

      function Cipher(options) {
        this.options = options;

        this.type = this.options.type;
        this.blockSize = 8;
        this._init();

        this.buffer = new Array(this.blockSize);
        this.bufferOff = 0;
      }
      module.exports = Cipher;

      Cipher.prototype._init = function _init() {
        // Might be overrided
      };

      Cipher.prototype.update = function update(data) {
        if (data.length === 0)
          return [];

        if (this.type === 'decrypt')
          return this._updateDecrypt(data);
        else
          return this._updateEncrypt(data);
      };

      Cipher.prototype._buffer = function _buffer(data, off) {
        // Append data to buffer
        var min = Math.min(this.buffer.length - this.bufferOff, data.length - off);
        for (var i = 0; i < min; i++)
          this.buffer[this.bufferOff + i] = data[off + i];
        this.bufferOff += min;

        // Shift next
        return min;
      };

      Cipher.prototype._flushBuffer = function _flushBuffer(out, off) {
        this._update(this.buffer, 0, out, off);
        this.bufferOff = 0;
        return this.blockSize;
      };

      Cipher.prototype._updateEncrypt = function _updateEncrypt(data) {
        var inputOff = 0;
        var outputOff = 0;

        var count = ((this.bufferOff + data.length) / this.blockSize) | 0;
        var out = new Array(count * this.blockSize);

        if (this.bufferOff !== 0) {
          inputOff += this._buffer(data, inputOff);

          if (this.bufferOff === this.buffer.length)
            outputOff += this._flushBuffer(out, outputOff);
        }

        // Write blocks
        var max = data.length - ((data.length - inputOff) % this.blockSize);
        for (; inputOff < max; inputOff += this.blockSize) {
          this._update(data, inputOff, out, outputOff);
          outputOff += this.blockSize;
        }

        // Queue rest
        for (; inputOff < data.length; inputOff++ , this.bufferOff++)
          this.buffer[this.bufferOff] = data[inputOff];

        return out;
      };

      Cipher.prototype._updateDecrypt = function _updateDecrypt(data) {
        var inputOff = 0;
        var outputOff = 0;

        var count = Math.ceil((this.bufferOff + data.length) / this.blockSize) - 1;
        var out = new Array(count * this.blockSize);

        // TODO(indutny): optimize it, this is far from optimal
        for (; count > 0; count--) {
          inputOff += this._buffer(data, inputOff);
          outputOff += this._flushBuffer(out, outputOff);
        }

        // Buffer rest of the input
        inputOff += this._buffer(data, inputOff);

        return out;
      };

      Cipher.prototype.final = function final(buffer) {
        var first;
        if (buffer)
          first = this.update(buffer);

        var last;
        if (this.type === 'encrypt')
          last = this._finalEncrypt();
        else
          last = this._finalDecrypt();

        if (first)
          return first.concat(last);
        else
          return last;
      };

      Cipher.prototype._pad = function _pad(buffer, off) {
        if (off === 0)
          return false;

        while (off < buffer.length)
          buffer[off++] = 0;

        return true;
      };

      Cipher.prototype._finalEncrypt = function _finalEncrypt() {
        if (!this._pad(this.buffer, this.bufferOff))
          return [];

        var out = new Array(this.blockSize);
        this._update(this.buffer, 0, out, 0);
        return out;
      };

      Cipher.prototype._unpad = function _unpad(buffer) {
        return buffer;
      };

      Cipher.prototype._finalDecrypt = function _finalDecrypt() {
        assert.equal(this.bufferOff, this.blockSize, 'Not enough data to decrypt');
        var out = new Array(this.blockSize);
        this._flushBuffer(out, 0);

        return this._unpad(out);
      };


      /***/
    }),

/***/ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/des.js/lib/des/des.js":
/*!****************************************************!*\
  !*** (webpack)/node_modules/des.js/lib/des/des.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

      "use strict";


      var assert = __webpack_require__(/*! minimalistic-assert */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/minimalistic-assert/index.js");
      var inherits = __webpack_require__(/*! inherits */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/inherits/inherits_browser.js");

      var des = __webpack_require__(/*! ../des */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/des.js/lib/des.js");
      var utils = des.utils;
      var Cipher = des.Cipher;

      function DESState() {
        this.tmp = new Array(2);
        this.keys = null;
      }

      function DES(options) {
        Cipher.call(this, options);

        var state = new DESState();
        this._desState = state;

        this.deriveKeys(state, options.key);
      }
      inherits(DES, Cipher);
      module.exports = DES;

      DES.create = function create(options) {
        return new DES(options);
      };

      var shiftTable = [
        1, 1, 2, 2, 2, 2, 2, 2,
        1, 2, 2, 2, 2, 2, 2, 1
      ];

      DES.prototype.deriveKeys = function deriveKeys(state, key) {
        state.keys = new Array(16 * 2);

        assert.equal(key.length, this.blockSize, 'Invalid key length');

        var kL = utils.readUInt32BE(key, 0);
        var kR = utils.readUInt32BE(key, 4);

        utils.pc1(kL, kR, state.tmp, 0);
        kL = state.tmp[0];
        kR = state.tmp[1];
        for (var i = 0; i < state.keys.length; i += 2) {
          var shift = shiftTable[i >>> 1];
          kL = utils.r28shl(kL, shift);
          kR = utils.r28shl(kR, shift);
          utils.pc2(kL, kR, state.keys, i);
        }
      };

      DES.prototype._update = function _update(inp, inOff, out, outOff) {
        var state = this._desState;

        var l = utils.readUInt32BE(inp, inOff);
        var r = utils.readUInt32BE(inp, inOff + 4);

        // Initial Permutation
        utils.ip(l, r, state.tmp, 0);
        l = state.tmp[0];
        r = state.tmp[1];

        if (this.type === 'encrypt')
          this._encrypt(state, l, r, state.tmp, 0);
        else
          this._decrypt(state, l, r, state.tmp, 0);

        l = state.tmp[0];
        r = state.tmp[1];

        utils.writeUInt32BE(out, l, outOff);
        utils.writeUInt32BE(out, r, outOff + 4);
      };

      DES.prototype._pad = function _pad(buffer, off) {
        var value = buffer.length - off;
        for (var i = off; i < buffer.length; i++)
          buffer[i] = value;

        return true;
      };

      DES.prototype._unpad = function _unpad(buffer) {
        var pad = buffer[buffer.length - 1];
        for (var i = buffer.length - pad; i < buffer.length; i++)
          assert.equal(buffer[i], pad);

        return buffer.slice(0, buffer.length - pad);
      };

      DES.prototype._encrypt = function _encrypt(state, lStart, rStart, out, off) {
        var l = lStart;
        var r = rStart;

        // Apply f() x16 times
        for (var i = 0; i < state.keys.length; i += 2) {
          var keyL = state.keys[i];
          var keyR = state.keys[i + 1];

          // f(r, k)
          utils.expand(r, state.tmp, 0);

          keyL ^= state.tmp[0];
          keyR ^= state.tmp[1];
          var s = utils.substitute(keyL, keyR);
          var f = utils.permute(s);

          var t = r;
          r = (l ^ f) >>> 0;
          l = t;
        }

        // Reverse Initial Permutation
        utils.rip(r, l, out, off);
      };

      DES.prototype._decrypt = function _decrypt(state, lStart, rStart, out, off) {
        var l = rStart;
        var r = lStart;

        // Apply f() x16 times
        for (var i = state.keys.length - 2; i >= 0; i -= 2) {
          var keyL = state.keys[i];
          var keyR = state.keys[i + 1];

          // f(r, k)
          utils.expand(l, state.tmp, 0);

          keyL ^= state.tmp[0];
          keyR ^= state.tmp[1];
          var s = utils.substitute(keyL, keyR);
          var f = utils.permute(s);

          var t = l;
          l = (r ^ f) >>> 0;
          r = t;
        }

        // Reverse Initial Permutation
        utils.rip(l, r, out, off);
      };


      /***/
    }),

/***/ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/des.js/lib/des/ede.js":
/*!****************************************************!*\
  !*** (webpack)/node_modules/des.js/lib/des/ede.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

      "use strict";


      var assert = __webpack_require__(/*! minimalistic-assert */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/minimalistic-assert/index.js");
      var inherits = __webpack_require__(/*! inherits */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/inherits/inherits_browser.js");

      var des = __webpack_require__(/*! ../des */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/des.js/lib/des.js");
      var Cipher = des.Cipher;
      var DES = des.DES;

      function EDEState(type, key) {
        assert.equal(key.length, 24, 'Invalid key length');

        var k1 = key.slice(0, 8);
        var k2 = key.slice(8, 16);
        var k3 = key.slice(16, 24);

        if (type === 'encrypt') {
          this.ciphers = [
            DES.create({ type: 'encrypt', key: k1 }),
            DES.create({ type: 'decrypt', key: k2 }),
            DES.create({ type: 'encrypt', key: k3 })
          ];
        } else {
          this.ciphers = [
            DES.create({ type: 'decrypt', key: k3 }),
            DES.create({ type: 'encrypt', key: k2 }),
            DES.create({ type: 'decrypt', key: k1 })
          ];
        }
      }

      function EDE(options) {
        Cipher.call(this, options);

        var state = new EDEState(this.type, this.options.key);
        this._edeState = state;
      }
      inherits(EDE, Cipher);

      module.exports = EDE;

      EDE.create = function create(options) {
        return new EDE(options);
      };

      EDE.prototype._update = function _update(inp, inOff, out, outOff) {
        var state = this._edeState;

        state.ciphers[0]._update(inp, inOff, out, outOff);
        state.ciphers[1]._update(out, outOff, out, outOff);
        state.ciphers[2]._update(out, outOff, out, outOff);
      };

      EDE.prototype._pad = DES.prototype._pad;
      EDE.prototype._unpad = DES.prototype._unpad;


      /***/
    }),

/***/ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/des.js/lib/des/utils.js":
/*!******************************************************!*\
  !*** (webpack)/node_modules/des.js/lib/des/utils.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

      "use strict";


      exports.readUInt32BE = function readUInt32BE(bytes, off) {
        var res = (bytes[0 + off] << 24) |
          (bytes[1 + off] << 16) |
          (bytes[2 + off] << 8) |
          bytes[3 + off];
        return res >>> 0;
      };

      exports.writeUInt32BE = function writeUInt32BE(bytes, value, off) {
        bytes[0 + off] = value >>> 24;
        bytes[1 + off] = (value >>> 16) & 0xff;
        bytes[2 + off] = (value >>> 8) & 0xff;
        bytes[3 + off] = value & 0xff;
      };

      exports.ip = function ip(inL, inR, out, off) {
        var outL = 0;
        var outR = 0;

        for (var i = 6; i >= 0; i -= 2) {
          for (var j = 0; j <= 24; j += 8) {
            outL <<= 1;
            outL |= (inR >>> (j + i)) & 1;
          }
          for (var j = 0; j <= 24; j += 8) {
            outL <<= 1;
            outL |= (inL >>> (j + i)) & 1;
          }
        }

        for (var i = 6; i >= 0; i -= 2) {
          for (var j = 1; j <= 25; j += 8) {
            outR <<= 1;
            outR |= (inR >>> (j + i)) & 1;
          }
          for (var j = 1; j <= 25; j += 8) {
            outR <<= 1;
            outR |= (inL >>> (j + i)) & 1;
          }
        }

        out[off + 0] = outL >>> 0;
        out[off + 1] = outR >>> 0;
      };

      exports.rip = function rip(inL, inR, out, off) {
        var outL = 0;
        var outR = 0;

        for (var i = 0; i < 4; i++) {
          for (var j = 24; j >= 0; j -= 8) {
            outL <<= 1;
            outL |= (inR >>> (j + i)) & 1;
            outL <<= 1;
            outL |= (inL >>> (j + i)) & 1;
          }
        }
        for (var i = 4; i < 8; i++) {
          for (var j = 24; j >= 0; j -= 8) {
            outR <<= 1;
            outR |= (inR >>> (j + i)) & 1;
            outR <<= 1;
            outR |= (inL >>> (j + i)) & 1;
          }
        }

        out[off + 0] = outL >>> 0;
        out[off + 1] = outR >>> 0;
      };

      exports.pc1 = function pc1(inL, inR, out, off) {
        var outL = 0;
        var outR = 0;

        // 7, 15, 23, 31, 39, 47, 55, 63
        // 6, 14, 22, 30, 39, 47, 55, 63
        // 5, 13, 21, 29, 39, 47, 55, 63
        // 4, 12, 20, 28
        for (var i = 7; i >= 5; i--) {
          for (var j = 0; j <= 24; j += 8) {
            outL <<= 1;
            outL |= (inR >> (j + i)) & 1;
          }
          for (var j = 0; j <= 24; j += 8) {
            outL <<= 1;
            outL |= (inL >> (j + i)) & 1;
          }
        }
        for (var j = 0; j <= 24; j += 8) {
          outL <<= 1;
          outL |= (inR >> (j + i)) & 1;
        }

        // 1, 9, 17, 25, 33, 41, 49, 57
        // 2, 10, 18, 26, 34, 42, 50, 58
        // 3, 11, 19, 27, 35, 43, 51, 59
        // 36, 44, 52, 60
        for (var i = 1; i <= 3; i++) {
          for (var j = 0; j <= 24; j += 8) {
            outR <<= 1;
            outR |= (inR >> (j + i)) & 1;
          }
          for (var j = 0; j <= 24; j += 8) {
            outR <<= 1;
            outR |= (inL >> (j + i)) & 1;
          }
        }
        for (var j = 0; j <= 24; j += 8) {
          outR <<= 1;
          outR |= (inL >> (j + i)) & 1;
        }

        out[off + 0] = outL >>> 0;
        out[off + 1] = outR >>> 0;
      };

      exports.r28shl = function r28shl(num, shift) {
        return ((num << shift) & 0xfffffff) | (num >>> (28 - shift));
      };

      var pc2table = [
        // inL => outL
        14, 11, 17, 4, 27, 23, 25, 0,
        13, 22, 7, 18, 5, 9, 16, 24,
        2, 20, 12, 21, 1, 8, 15, 26,

        // inR => outR
        15, 4, 25, 19, 9, 1, 26, 16,
        5, 11, 23, 8, 12, 7, 17, 0,
        22, 3, 10, 14, 6, 20, 27, 24
      ];

      exports.pc2 = function pc2(inL, inR, out, off) {
        var outL = 0;
        var outR = 0;

        var len = pc2table.length >>> 1;
        for (var i = 0; i < len; i++) {
          outL <<= 1;
          outL |= (inL >>> pc2table[i]) & 0x1;
        }
        for (var i = len; i < pc2table.length; i++) {
          outR <<= 1;
          outR |= (inR >>> pc2table[i]) & 0x1;
        }

        out[off + 0] = outL >>> 0;
        out[off + 1] = outR >>> 0;
      };

      exports.expand = function expand(r, out, off) {
        var outL = 0;
        var outR = 0;

        outL = ((r & 1) << 5) | (r >>> 27);
        for (var i = 23; i >= 15; i -= 4) {
          outL <<= 6;
          outL |= (r >>> i) & 0x3f;
        }
        for (var i = 11; i >= 3; i -= 4) {
          outR |= (r >>> i) & 0x3f;
          outR <<= 6;
        }
        outR |= ((r & 0x1f) << 1) | (r >>> 31);

        out[off + 0] = outL >>> 0;
        out[off + 1] = outR >>> 0;
      };

      var sTable = [
        14, 0, 4, 15, 13, 7, 1, 4, 2, 14, 15, 2, 11, 13, 8, 1,
        3, 10, 10, 6, 6, 12, 12, 11, 5, 9, 9, 5, 0, 3, 7, 8,
        4, 15, 1, 12, 14, 8, 8, 2, 13, 4, 6, 9, 2, 1, 11, 7,
        15, 5, 12, 11, 9, 3, 7, 14, 3, 10, 10, 0, 5, 6, 0, 13,

        15, 3, 1, 13, 8, 4, 14, 7, 6, 15, 11, 2, 3, 8, 4, 14,
        9, 12, 7, 0, 2, 1, 13, 10, 12, 6, 0, 9, 5, 11, 10, 5,
        0, 13, 14, 8, 7, 10, 11, 1, 10, 3, 4, 15, 13, 4, 1, 2,
        5, 11, 8, 6, 12, 7, 6, 12, 9, 0, 3, 5, 2, 14, 15, 9,

        10, 13, 0, 7, 9, 0, 14, 9, 6, 3, 3, 4, 15, 6, 5, 10,
        1, 2, 13, 8, 12, 5, 7, 14, 11, 12, 4, 11, 2, 15, 8, 1,
        13, 1, 6, 10, 4, 13, 9, 0, 8, 6, 15, 9, 3, 8, 0, 7,
        11, 4, 1, 15, 2, 14, 12, 3, 5, 11, 10, 5, 14, 2, 7, 12,

        7, 13, 13, 8, 14, 11, 3, 5, 0, 6, 6, 15, 9, 0, 10, 3,
        1, 4, 2, 7, 8, 2, 5, 12, 11, 1, 12, 10, 4, 14, 15, 9,
        10, 3, 6, 15, 9, 0, 0, 6, 12, 10, 11, 1, 7, 13, 13, 8,
        15, 9, 1, 4, 3, 5, 14, 11, 5, 12, 2, 7, 8, 2, 4, 14,

        2, 14, 12, 11, 4, 2, 1, 12, 7, 4, 10, 7, 11, 13, 6, 1,
        8, 5, 5, 0, 3, 15, 15, 10, 13, 3, 0, 9, 14, 8, 9, 6,
        4, 11, 2, 8, 1, 12, 11, 7, 10, 1, 13, 14, 7, 2, 8, 13,
        15, 6, 9, 15, 12, 0, 5, 9, 6, 10, 3, 4, 0, 5, 14, 3,

        12, 10, 1, 15, 10, 4, 15, 2, 9, 7, 2, 12, 6, 9, 8, 5,
        0, 6, 13, 1, 3, 13, 4, 14, 14, 0, 7, 11, 5, 3, 11, 8,
        9, 4, 14, 3, 15, 2, 5, 12, 2, 9, 8, 5, 12, 15, 3, 10,
        7, 11, 0, 14, 4, 1, 10, 7, 1, 6, 13, 0, 11, 8, 6, 13,

        4, 13, 11, 0, 2, 11, 14, 7, 15, 4, 0, 9, 8, 1, 13, 10,
        3, 14, 12, 3, 9, 5, 7, 12, 5, 2, 10, 15, 6, 8, 1, 6,
        1, 6, 4, 11, 11, 13, 13, 8, 12, 1, 3, 4, 7, 10, 14, 7,
        10, 9, 15, 5, 6, 0, 8, 15, 0, 14, 5, 2, 9, 3, 2, 12,

        13, 1, 2, 15, 8, 13, 4, 8, 6, 10, 15, 3, 11, 7, 1, 4,
        10, 12, 9, 5, 3, 6, 14, 11, 5, 0, 0, 14, 12, 9, 7, 2,
        7, 2, 11, 1, 4, 14, 1, 7, 9, 4, 12, 10, 14, 8, 2, 13,
        0, 15, 6, 12, 10, 9, 13, 0, 15, 3, 3, 5, 5, 6, 8, 11
      ];

      exports.substitute = function substitute(inL, inR) {
        var out = 0;
        for (var i = 0; i < 4; i++) {
          var b = (inL >>> (18 - i * 6)) & 0x3f;
          var sb = sTable[i * 0x40 + b];

          out <<= 4;
          out |= sb;
        }
        for (var i = 0; i < 4; i++) {
          var b = (inR >>> (18 - i * 6)) & 0x3f;
          var sb = sTable[4 * 0x40 + i * 0x40 + b];

          out <<= 4;
          out |= sb;
        }
        return out >>> 0;
      };

      var permuteTable = [
        16, 25, 12, 11, 3, 20, 4, 15, 31, 17, 9, 6, 27, 14, 1, 22,
        30, 24, 8, 18, 0, 5, 29, 23, 13, 19, 2, 26, 10, 21, 28, 7
      ];

      exports.permute = function permute(num) {
        var out = 0;
        for (var i = 0; i < permuteTable.length; i++) {
          out <<= 1;
          out |= (num >>> permuteTable[i]) & 0x1;
        }
        return out >>> 0;
      };

      exports.padSplit = function padSplit(num, size, group) {
        var str = num.toString(2);
        while (str.length < size)
          str = '0' + str;

        var out = [];
        for (var i = 0; i < size; i += group)
          out.push(str.slice(i, i + group));
        return out.join(' ');
      };


      /***/
    }),

/***/ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/diffie-hellman/browser.js":
/*!********************************************************!*\
  !*** (webpack)/node_modules/diffie-hellman/browser.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function (Buffer) {
        var generatePrime = __webpack_require__(/*! ./lib/generatePrime */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/diffie-hellman/lib/generatePrime.js")
        var primes = __webpack_require__(/*! ./lib/primes.json */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/diffie-hellman/lib/primes.json")

        var DH = __webpack_require__(/*! ./lib/dh */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/diffie-hellman/lib/dh.js")

        function getDiffieHellman(mod) {
          var prime = new Buffer(primes[mod].prime, 'hex')
          var gen = new Buffer(primes[mod].gen, 'hex')

          return new DH(prime, gen)
        }

        var ENCODINGS = {
          'binary': true, 'hex': true, 'base64': true
        }

        function createDiffieHellman(prime, enc, generator, genc) {
          if (Buffer.isBuffer(enc) || ENCODINGS[enc] === undefined) {
            return createDiffieHellman(prime, 'binary', enc, generator)
          }

          enc = enc || 'binary'
          genc = genc || 'binary'
          generator = generator || new Buffer([2])

          if (!Buffer.isBuffer(generator)) {
            generator = new Buffer(generator, genc)
          }

          if (typeof prime === 'number') {
            return new DH(generatePrime(prime, generator), generator, true)
          }

          if (!Buffer.isBuffer(prime)) {
            prime = new Buffer(prime, enc)
          }

          return new DH(prime, generator, true)
        }

        exports.DiffieHellmanGroup = exports.createDiffieHellmanGroup = exports.getDiffieHellman = getDiffieHellman
        exports.createDiffieHellman = exports.DiffieHellman = createDiffieHellman

        /* WEBPACK VAR INJECTION */
      }.call(this, __webpack_require__(/*! ./../buffer/index.js */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/buffer/index.js").Buffer))

      /***/
    }),

/***/ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/diffie-hellman/lib/dh.js":
/*!*******************************************************!*\
  !*** (webpack)/node_modules/diffie-hellman/lib/dh.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function (Buffer) {
        var BN = __webpack_require__(/*! bn.js */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/bn.js/lib/bn.js");
        var MillerRabin = __webpack_require__(/*! miller-rabin */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/miller-rabin/lib/mr.js");
        var millerRabin = new MillerRabin();
        var TWENTYFOUR = new BN(24);
        var ELEVEN = new BN(11);
        var TEN = new BN(10);
        var THREE = new BN(3);
        var SEVEN = new BN(7);
        var primes = __webpack_require__(/*! ./generatePrime */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/diffie-hellman/lib/generatePrime.js");
        var randomBytes = __webpack_require__(/*! randombytes */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/randombytes/browser.js");
        module.exports = DH;

        function setPublicKey(pub, enc) {
          enc = enc || 'utf8';
          if (!Buffer.isBuffer(pub)) {
            pub = new Buffer(pub, enc);
          }
          this._pub = new BN(pub);
          return this;
        }

        function setPrivateKey(priv, enc) {
          enc = enc || 'utf8';
          if (!Buffer.isBuffer(priv)) {
            priv = new Buffer(priv, enc);
          }
          this._priv = new BN(priv);
          return this;
        }

        var primeCache = {};
        function checkPrime(prime, generator) {
          var gen = generator.toString('hex');
          var hex = [gen, prime.toString(16)].join('_');
          if (hex in primeCache) {
            return primeCache[hex];
          }
          var error = 0;

          if (prime.isEven() ||
            !primes.simpleSieve ||
            !primes.fermatTest(prime) ||
            !millerRabin.test(prime)) {
            //not a prime so +1
            error += 1;

            if (gen === '02' || gen === '05') {
              // we'd be able to check the generator
              // it would fail so +8
              error += 8;
            } else {
              //we wouldn't be able to test the generator
              // so +4
              error += 4;
            }
            primeCache[hex] = error;
            return error;
          }
          if (!millerRabin.test(prime.shrn(1))) {
            //not a safe prime
            error += 2;
          }
          var rem;
          switch (gen) {
            case '02':
              if (prime.mod(TWENTYFOUR).cmp(ELEVEN)) {
                // unsuidable generator
                error += 8;
              }
              break;
            case '05':
              rem = prime.mod(TEN);
              if (rem.cmp(THREE) && rem.cmp(SEVEN)) {
                // prime mod 10 needs to equal 3 or 7
                error += 8;
              }
              break;
            default:
              error += 4;
          }
          primeCache[hex] = error;
          return error;
        }

        function DH(prime, generator, malleable) {
          this.setGenerator(generator);
          this.__prime = new BN(prime);
          this._prime = BN.mont(this.__prime);
          this._primeLen = prime.length;
          this._pub = undefined;
          this._priv = undefined;
          this._primeCode = undefined;
          if (malleable) {
            this.setPublicKey = setPublicKey;
            this.setPrivateKey = setPrivateKey;
          } else {
            this._primeCode = 8;
          }
        }
        Object.defineProperty(DH.prototype, 'verifyError', {
          enumerable: true,
          get: function () {
            if (typeof this._primeCode !== 'number') {
              this._primeCode = checkPrime(this.__prime, this.__gen);
            }
            return this._primeCode;
          }
        });
        DH.prototype.generateKeys = function () {
          if (!this._priv) {
            this._priv = new BN(randomBytes(this._primeLen));
          }
          this._pub = this._gen.toRed(this._prime).redPow(this._priv).fromRed();
          return this.getPublicKey();
        };

        DH.prototype.computeSecret = function (other) {
          other = new BN(other);
          other = other.toRed(this._prime);
          var secret = other.redPow(this._priv).fromRed();
          var out = new Buffer(secret.toArray());
          var prime = this.getPrime();
          if (out.length < prime.length) {
            var front = new Buffer(prime.length - out.length);
            front.fill(0);
            out = Buffer.concat([front, out]);
          }
          return out;
        };

        DH.prototype.getPublicKey = function getPublicKey(enc) {
          return formatReturnValue(this._pub, enc);
        };

        DH.prototype.getPrivateKey = function getPrivateKey(enc) {
          return formatReturnValue(this._priv, enc);
        };

        DH.prototype.getPrime = function (enc) {
          return formatReturnValue(this.__prime, enc);
        };

        DH.prototype.getGenerator = function (enc) {
          return formatReturnValue(this._gen, enc);
        };

        DH.prototype.setGenerator = function (gen, enc) {
          enc = enc || 'utf8';
          if (!Buffer.isBuffer(gen)) {
            gen = new Buffer(gen, enc);
          }
          this.__gen = gen;
          this._gen = new BN(gen);
          return this;
        };

        function formatReturnValue(bn, enc) {
          var buf = new Buffer(bn.toArray());
          if (!enc) {
            return buf;
          } else {
            return buf.toString(enc);
          }
        }

        /* WEBPACK VAR INJECTION */
      }.call(this, __webpack_require__(/*! ./../../buffer/index.js */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/buffer/index.js").Buffer))

      /***/
    }),

/***/ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/diffie-hellman/lib/generatePrime.js":
/*!******************************************************************!*\
  !*** (webpack)/node_modules/diffie-hellman/lib/generatePrime.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

      var randomBytes = __webpack_require__(/*! randombytes */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/randombytes/browser.js");
      module.exports = findPrime;
      findPrime.simpleSieve = simpleSieve;
      findPrime.fermatTest = fermatTest;
      var BN = __webpack_require__(/*! bn.js */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/bn.js/lib/bn.js");
      var TWENTYFOUR = new BN(24);
      var MillerRabin = __webpack_require__(/*! miller-rabin */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/miller-rabin/lib/mr.js");
      var millerRabin = new MillerRabin();
      var ONE = new BN(1);
      var TWO = new BN(2);
      var FIVE = new BN(5);
      var SIXTEEN = new BN(16);
      var EIGHT = new BN(8);
      var TEN = new BN(10);
      var THREE = new BN(3);
      var SEVEN = new BN(7);
      var ELEVEN = new BN(11);
      var FOUR = new BN(4);
      var TWELVE = new BN(12);
      var primes = null;

      function _getPrimes() {
        if (primes !== null)
          return primes;

        var limit = 0x100000;
        var res = [];
        res[0] = 2;
        for (var i = 1, k = 3; k < limit; k += 2) {
          var sqrt = Math.ceil(Math.sqrt(k));
          for (var j = 0; j < i && res[j] <= sqrt; j++)
            if (k % res[j] === 0)
              break;

          if (i !== j && res[j] <= sqrt)
            continue;

          res[i++] = k;
        }
        primes = res;
        return res;
      }

      function simpleSieve(p) {
        var primes = _getPrimes();

        for (var i = 0; i < primes.length; i++)
          if (p.modn(primes[i]) === 0) {
            if (p.cmpn(primes[i]) === 0) {
              return true;
            } else {
              return false;
            }
          }

        return true;
      }

      function fermatTest(p) {
        var red = BN.mont(p);
        return TWO.toRed(red).redPow(p.subn(1)).fromRed().cmpn(1) === 0;
      }

      function findPrime(bits, gen) {
        if (bits < 16) {
          // this is what openssl does
          if (gen === 2 || gen === 5) {
            return new BN([0x8c, 0x7b]);
          } else {
            return new BN([0x8c, 0x27]);
          }
        }
        gen = new BN(gen);

        var num, n2;

        while (true) {
          num = new BN(randomBytes(Math.ceil(bits / 8)));
          while (num.bitLength() > bits) {
            num.ishrn(1);
          }
          if (num.isEven()) {
            num.iadd(ONE);
          }
          if (!num.testn(1)) {
            num.iadd(TWO);
          }
          if (!gen.cmp(TWO)) {
            while (num.mod(TWENTYFOUR).cmp(ELEVEN)) {
              num.iadd(FOUR);
            }
          } else if (!gen.cmp(FIVE)) {
            while (num.mod(TEN).cmp(THREE)) {
              num.iadd(FOUR);
            }
          }
          n2 = num.shrn(1);
          if (simpleSieve(n2) && simpleSieve(num) &&
            fermatTest(n2) && fermatTest(num) &&
            millerRabin.test(n2) && millerRabin.test(num)) {
            return num;
          }
        }

      }


      /***/
    }),

/***/ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/diffie-hellman/lib/primes.json":
/*!*************************************************************!*\
  !*** (webpack)/node_modules/diffie-hellman/lib/primes.json ***!
  \*************************************************************/
/*! exports provided: modp1, modp2, modp5, modp14, modp15, modp16, modp17, modp18, default */
/***/ (function (module) {

      module.exports = { "modp1": { "gen": "02", "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a63a3620ffffffffffffffff" }, "modp2": { "gen": "02", "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece65381ffffffffffffffff" }, "modp5": { "gen": "02", "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca237327ffffffffffffffff" }, "modp14": { "gen": "02", "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aacaa68ffffffffffffffff" }, "modp15": { "gen": "02", "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a93ad2caffffffffffffffff" }, "modp16": { "gen": "02", "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c934063199ffffffffffffffff" }, "modp17": { "gen": "02", "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dcc4024ffffffffffffffff" }, "modp18": { "gen": "02", "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dbe115974a3926f12fee5e438777cb6a932df8cd8bec4d073b931ba3bc832b68d9dd300741fa7bf8afc47ed2576f6936ba424663aab639c5ae4f5683423b4742bf1c978238f16cbe39d652de3fdb8befc848ad922222e04a4037c0713eb57a81a23f0c73473fc646cea306b4bcbc8862f8385ddfa9d4b7fa2c087e879683303ed5bdd3a062b3cf5b3a278a66d2a13f83f44f82ddf310ee074ab6a364597e899a0255dc164f31cc50846851df9ab48195ded7ea1b1d510bd7ee74d73faf36bc31ecfa268359046f4eb879f924009438b481c6cd7889a002ed5ee382bc9190da6fc026e479558e4475677e9aa9e3050e2765694dfc81f56e880b96e7160c980dd98edd3dfffffffffffffffff" } };

      /***/
    }),

/***/ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/elliptic/lib/elliptic.js":
/*!*******************************************************!*\
  !*** (webpack)/node_modules/elliptic/lib/elliptic.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

      "use strict";


      var elliptic = exports;

      elliptic.version = __webpack_require__(/*! ../package.json */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/elliptic/package.json").version;
      elliptic.utils = __webpack_require__(/*! ./elliptic/utils */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/elliptic/lib/elliptic/utils.js");
      elliptic.rand = __webpack_require__(/*! brorand */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/brorand/index.js");
      elliptic.curve = __webpack_require__(/*! ./elliptic/curve */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/elliptic/lib/elliptic/curve/index.js");
      elliptic.curves = __webpack_require__(/*! ./elliptic/curves */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/elliptic/lib/elliptic/curves.js");

      // Protocols
      elliptic.ec = __webpack_require__(/*! ./elliptic/ec */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/elliptic/lib/elliptic/ec/index.js");
      elliptic.eddsa = __webpack_require__(/*! ./elliptic/eddsa */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/elliptic/lib/elliptic/eddsa/index.js");


      /***/
    }),

/***/ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/elliptic/lib/elliptic/curve/base.js":
/*!******************************************************************!*\
  !*** (webpack)/node_modules/elliptic/lib/elliptic/curve/base.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

      "use strict";


      var BN = __webpack_require__(/*! bn.js */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/bn.js/lib/bn.js");
      var elliptic = __webpack_require__(/*! ../../elliptic */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/elliptic/lib/elliptic.js");
      var utils = elliptic.utils;
      var getNAF = utils.getNAF;
      var getJSF = utils.getJSF;
      var assert = utils.assert;

      function BaseCurve(type, conf) {
        this.type = type;
        this.p = new BN(conf.p, 16);

        // Use Montgomery, when there is no fast reduction for the prime
        this.red = conf.prime ? BN.red(conf.prime) : BN.mont(this.p);

        // Useful for many curves
        this.zero = new BN(0).toRed(this.red);
        this.one = new BN(1).toRed(this.red);
        this.two = new BN(2).toRed(this.red);

        // Curve configuration, optional
        this.n = conf.n && new BN(conf.n, 16);
        this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);

        // Temporary arrays
        this._wnafT1 = new Array(4);
        this._wnafT2 = new Array(4);
        this._wnafT3 = new Array(4);
        this._wnafT4 = new Array(4);

        // Generalized Greg Maxwell's trick
        var adjustCount = this.n && this.p.div(this.n);
        if (!adjustCount || adjustCount.cmpn(100) > 0) {
          this.redN = null;
        } else {
          this._maxwellTrick = true;
          this.redN = this.n.toRed(this.red);
        }
      }
      module.exports = BaseCurve;

      BaseCurve.prototype.point = function point() {
        throw new Error('Not implemented');
      };

      BaseCurve.prototype.validate = function validate() {
        throw new Error('Not implemented');
      };

      BaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {
        assert(p.precomputed);
        var doubles = p._getDoubles();

        var naf = getNAF(k, 1);
        var I = (1 << (doubles.step + 1)) - (doubles.step % 2 === 0 ? 2 : 1);
        I /= 3;

        // Translate into more windowed form
        var repr = [];
        for (var j = 0; j < naf.length; j += doubles.step) {
          var nafW = 0;
          for (var k = j + doubles.step - 1; k >= j; k--)
            nafW = (nafW << 1) + naf[k];
          repr.push(nafW);
        }

        var a = this.jpoint(null, null, null);
        var b = this.jpoint(null, null, null);
        for (var i = I; i > 0; i--) {
          for (var j = 0; j < repr.length; j++) {
            var nafW = repr[j];
            if (nafW === i)
              b = b.mixedAdd(doubles.points[j]);
            else if (nafW === -i)
              b = b.mixedAdd(doubles.points[j].neg());
          }
          a = a.add(b);
        }
        return a.toP();
      };

      BaseCurve.prototype._wnafMul = function _wnafMul(p, k) {
        var w = 4;

        // Precompute window
        var nafPoints = p._getNAFPoints(w);
        w = nafPoints.wnd;
        var wnd = nafPoints.points;

        // Get NAF form
        var naf = getNAF(k, w);

        // Add `this`*(N+1) for every w-NAF index
        var acc = this.jpoint(null, null, null);
        for (var i = naf.length - 1; i >= 0; i--) {
          // Count zeroes
          for (var k = 0; i >= 0 && naf[i] === 0; i--)
            k++;
          if (i >= 0)
            k++;
          acc = acc.dblp(k);

          if (i < 0)
            break;
          var z = naf[i];
          assert(z !== 0);
          if (p.type === 'affine') {
            // J +- P
            if (z > 0)
              acc = acc.mixedAdd(wnd[(z - 1) >> 1]);
            else
              acc = acc.mixedAdd(wnd[(-z - 1) >> 1].neg());
          } else {
            // J +- J
            if (z > 0)
              acc = acc.add(wnd[(z - 1) >> 1]);
            else
              acc = acc.add(wnd[(-z - 1) >> 1].neg());
          }
        }
        return p.type === 'affine' ? acc.toP() : acc;
      };

      BaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW,
        points,
        coeffs,
        len,
        jacobianResult) {
        var wndWidth = this._wnafT1;
        var wnd = this._wnafT2;
        var naf = this._wnafT3;

        // Fill all arrays
        var max = 0;
        for (var i = 0; i < len; i++) {
          var p = points[i];
          var nafPoints = p._getNAFPoints(defW);
          wndWidth[i] = nafPoints.wnd;
          wnd[i] = nafPoints.points;
        }

        // Comb small window NAFs
        for (var i = len - 1; i >= 1; i -= 2) {
          var a = i - 1;
          var b = i;
          if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {
            naf[a] = getNAF(coeffs[a], wndWidth[a]);
            naf[b] = getNAF(coeffs[b], wndWidth[b]);
            max = Math.max(naf[a].length, max);
            max = Math.max(naf[b].length, max);
            continue;
          }

          var comb = [
            points[a], /* 1 */
            null, /* 3 */
            null, /* 5 */
            points[b] /* 7 */
          ];

          // Try to avoid Projective points, if possible
          if (points[a].y.cmp(points[b].y) === 0) {
            comb[1] = points[a].add(points[b]);
            comb[2] = points[a].toJ().mixedAdd(points[b].neg());
          } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {
            comb[1] = points[a].toJ().mixedAdd(points[b]);
            comb[2] = points[a].add(points[b].neg());
          } else {
            comb[1] = points[a].toJ().mixedAdd(points[b]);
            comb[2] = points[a].toJ().mixedAdd(points[b].neg());
          }

          var index = [
            -3, /* -1 -1 */
            -1, /* -1 0 */
            -5, /* -1 1 */
            -7, /* 0 -1 */
            0, /* 0 0 */
            7, /* 0 1 */
            5, /* 1 -1 */
            1, /* 1 0 */
            3  /* 1 1 */
          ];

          var jsf = getJSF(coeffs[a], coeffs[b]);
          max = Math.max(jsf[0].length, max);
          naf[a] = new Array(max);
          naf[b] = new Array(max);
          for (var j = 0; j < max; j++) {
            var ja = jsf[0][j] | 0;
            var jb = jsf[1][j] | 0;

            naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];
            naf[b][j] = 0;
            wnd[a] = comb;
          }
        }

        var acc = this.jpoint(null, null, null);
        var tmp = this._wnafT4;
        for (var i = max; i >= 0; i--) {
          var k = 0;

          while (i >= 0) {
            var zero = true;
            for (var j = 0; j < len; j++) {
              tmp[j] = naf[j][i] | 0;
              if (tmp[j] !== 0)
                zero = false;
            }
            if (!zero)
              break;
            k++;
            i--;
          }
          if (i >= 0)
            k++;
          acc = acc.dblp(k);
          if (i < 0)
            break;

          for (var j = 0; j < len; j++) {
            var z = tmp[j];
            var p;
            if (z === 0)
              continue;
            else if (z > 0)
              p = wnd[j][(z - 1) >> 1];
            else if (z < 0)
              p = wnd[j][(-z - 1) >> 1].neg();

            if (p.type === 'affine')
              acc = acc.mixedAdd(p);
            else
              acc = acc.add(p);
          }
        }
        // Zeroify references
        for (var i = 0; i < len; i++)
          wnd[i] = null;

        if (jacobianResult)
          return acc;
        else
          return acc.toP();
      };

      function BasePoint(curve, type) {
        this.curve = curve;
        this.type = type;
        this.precomputed = null;
      }
      BaseCurve.BasePoint = BasePoint;

      BasePoint.prototype.eq = function eq(/*other*/) {
        throw new Error('Not implemented');
      };

      BasePoint.prototype.validate = function validate() {
        return this.curve.validate(this);
      };

      BaseCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
        bytes = utils.toArray(bytes, enc);

        var len = this.p.byteLength();

        // uncompressed, hybrid-odd, hybrid-even
        if ((bytes[0] === 0x04 || bytes[0] === 0x06 || bytes[0] === 0x07) &&
          bytes.length - 1 === 2 * len) {
          if (bytes[0] === 0x06)
            assert(bytes[bytes.length - 1] % 2 === 0);
          else if (bytes[0] === 0x07)
            assert(bytes[bytes.length - 1] % 2 === 1);

          var res = this.point(bytes.slice(1, 1 + len),
            bytes.slice(1 + len, 1 + 2 * len));

          return res;
        } else if ((bytes[0] === 0x02 || bytes[0] === 0x03) &&
          bytes.length - 1 === len) {
          return this.pointFromX(bytes.slice(1, 1 + len), bytes[0] === 0x03);
        }
        throw new Error('Unknown point format');
      };

      BasePoint.prototype.encodeCompressed = function encodeCompressed(enc) {
        return this.encode(enc, true);
      };

      BasePoint.prototype._encode = function _encode(compact) {
        var len = this.curve.p.byteLength();
        var x = this.getX().toArray('be', len);

        if (compact)
          return [this.getY().isEven() ? 0x02 : 0x03].concat(x);

        return [0x04].concat(x, this.getY().toArray('be', len));
      };

      BasePoint.prototype.encode = function encode(enc, compact) {
        return utils.encode(this._encode(compact), enc);
      };

      BasePoint.prototype.precompute = function precompute(power) {
        if (this.precomputed)
          return this;

        var precomputed = {
          doubles: null,
          naf: null,
          beta: null
        };
        precomputed.naf = this._getNAFPoints(8);
        precomputed.doubles = this._getDoubles(4, power);
        precomputed.beta = this._getBeta();
        this.precomputed = precomputed;

        return this;
      };

      BasePoint.prototype._hasDoubles = function _hasDoubles(k) {
        if (!this.precomputed)
          return false;

        var doubles = this.precomputed.doubles;
        if (!doubles)
          return false;

        return doubles.points.length >= Math.ceil((k.bitLength() + 1) / doubles.step);
      };

      BasePoint.prototype._getDoubles = function _getDoubles(step, power) {
        if (this.precomputed && this.precomputed.doubles)
          return this.precomputed.doubles;

        var doubles = [this];
        var acc = this;
        for (var i = 0; i < power; i += step) {
          for (var j = 0; j < step; j++)
            acc = acc.dbl();
          doubles.push(acc);
        }
        return {
          step: step,
          points: doubles
        };
      };

      BasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {
        if (this.precomputed && this.precomputed.naf)
          return this.precomputed.naf;

        var res = [this];
        var max = (1 << wnd) - 1;
        var dbl = max === 1 ? null : this.dbl();
        for (var i = 1; i < max; i++)
          res[i] = res[i - 1].add(dbl);
        return {
          wnd: wnd,
          points: res
        };
      };

      BasePoint.prototype._getBeta = function _getBeta() {
        return null;
      };

      BasePoint.prototype.dblp = function dblp(k) {
        var r = this;
        for (var i = 0; i < k; i++)
          r = r.dbl();
        return r;
      };


      /***/
    }),

/***/ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/elliptic/lib/elliptic/curve/edwards.js":
/*!*********************************************************************!*\
  !*** (webpack)/node_modules/elliptic/lib/elliptic/curve/edwards.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

      "use strict";


      var curve = __webpack_require__(/*! ../curve */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/elliptic/lib/elliptic/curve/index.js");
      var elliptic = __webpack_require__(/*! ../../elliptic */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/elliptic/lib/elliptic.js");
      var BN = __webpack_require__(/*! bn.js */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/bn.js/lib/bn.js");
      var inherits = __webpack_require__(/*! inherits */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/inherits/inherits_browser.js");
      var Base = curve.base;

      var assert = elliptic.utils.assert;

      function EdwardsCurve(conf) {
        // NOTE: Important as we are creating point in Base.call()
        this.twisted = (conf.a | 0) !== 1;
        this.mOneA = this.twisted && (conf.a | 0) === -1;
        this.extended = this.mOneA;

        Base.call(this, 'edwards', conf);

        this.a = new BN(conf.a, 16).umod(this.red.m);
        this.a = this.a.toRed(this.red);
        this.c = new BN(conf.c, 16).toRed(this.red);
        this.c2 = this.c.redSqr();
        this.d = new BN(conf.d, 16).toRed(this.red);
        this.dd = this.d.redAdd(this.d);

        assert(!this.twisted || this.c.fromRed().cmpn(1) === 0);
        this.oneC = (conf.c | 0) === 1;
      }
      inherits(EdwardsCurve, Base);
      module.exports = EdwardsCurve;

      EdwardsCurve.prototype._mulA = function _mulA(num) {
        if (this.mOneA)
          return num.redNeg();
        else
          return this.a.redMul(num);
      };

      EdwardsCurve.prototype._mulC = function _mulC(num) {
        if (this.oneC)
          return num;
        else
          return this.c.redMul(num);
      };

      // Just for compatibility with Short curve
      EdwardsCurve.prototype.jpoint = function jpoint(x, y, z, t) {
        return this.point(x, y, z, t);
      };

      EdwardsCurve.prototype.pointFromX = function pointFromX(x, odd) {
        x = new BN(x, 16);
        if (!x.red)
          x = x.toRed(this.red);

        var x2 = x.redSqr();
        var rhs = this.c2.redSub(this.a.redMul(x2));
        var lhs = this.one.redSub(this.c2.redMul(this.d).redMul(x2));

        var y2 = rhs.redMul(lhs.redInvm());
        var y = y2.redSqrt();
        if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
          throw new Error('invalid point');

        var isOdd = y.fromRed().isOdd();
        if (odd && !isOdd || !odd && isOdd)
          y = y.redNeg();

        return this.point(x, y);
      };

      EdwardsCurve.prototype.pointFromY = function pointFromY(y, odd) {
        y = new BN(y, 16);
        if (!y.red)
          y = y.toRed(this.red);

        // x^2 = (y^2 - c^2) / (c^2 d y^2 - a)
        var y2 = y.redSqr();
        var lhs = y2.redSub(this.c2);
        var rhs = y2.redMul(this.d).redMul(this.c2).redSub(this.a);
        var x2 = lhs.redMul(rhs.redInvm());

        if (x2.cmp(this.zero) === 0) {
          if (odd)
            throw new Error('invalid point');
          else
            return this.point(this.zero, y);
        }

        var x = x2.redSqrt();
        if (x.redSqr().redSub(x2).cmp(this.zero) !== 0)
          throw new Error('invalid point');

        if (x.fromRed().isOdd() !== odd)
          x = x.redNeg();

        return this.point(x, y);
      };

      EdwardsCurve.prototype.validate = function validate(point) {
        if (point.isInfinity())
          return true;

        // Curve: A * X^2 + Y^2 = C^2 * (1 + D * X^2 * Y^2)
        point.normalize();

        var x2 = point.x.redSqr();
        var y2 = point.y.redSqr();
        var lhs = x2.redMul(this.a).redAdd(y2);
        var rhs = this.c2.redMul(this.one.redAdd(this.d.redMul(x2).redMul(y2)));

        return lhs.cmp(rhs) === 0;
      };

      function Point(curve, x, y, z, t) {
        Base.BasePoint.call(this, curve, 'projective');
        if (x === null && y === null && z === null) {
          this.x = this.curve.zero;
          this.y = this.curve.one;
          this.z = this.curve.one;
          this.t = this.curve.zero;
          this.zOne = true;
        } else {
          this.x = new BN(x, 16);
          this.y = new BN(y, 16);
          this.z = z ? new BN(z, 16) : this.curve.one;
          this.t = t && new BN(t, 16);
          if (!this.x.red)
            this.x = this.x.toRed(this.curve.red);
          if (!this.y.red)
            this.y = this.y.toRed(this.curve.red);
          if (!this.z.red)
            this.z = this.z.toRed(this.curve.red);
          if (this.t && !this.t.red)
            this.t = this.t.toRed(this.curve.red);
          this.zOne = this.z === this.curve.one;

          // Use extended coordinates
          if (this.curve.extended && !this.t) {
            this.t = this.x.redMul(this.y);
            if (!this.zOne)
              this.t = this.t.redMul(this.z.redInvm());
          }
        }
      }
      inherits(Point, Base.BasePoint);

      EdwardsCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
        return Point.fromJSON(this, obj);
      };

      EdwardsCurve.prototype.point = function point(x, y, z, t) {
        return new Point(this, x, y, z, t);
      };

      Point.fromJSON = function fromJSON(curve, obj) {
        return new Point(curve, obj[0], obj[1], obj[2]);
      };

      Point.prototype.inspect = function inspect() {
        if (this.isInfinity())
          return '<EC Point Infinity>';
        return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
          ' y: ' + this.y.fromRed().toString(16, 2) +
          ' z: ' + this.z.fromRed().toString(16, 2) + '>';
      };

      Point.prototype.isInfinity = function isInfinity() {
        // XXX This code assumes that zero is always zero in red
        return this.x.cmpn(0) === 0 &&
          (this.y.cmp(this.z) === 0 ||
            (this.zOne && this.y.cmp(this.curve.c) === 0));
      };

      Point.prototype._extDbl = function _extDbl() {
        // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
        //     #doubling-dbl-2008-hwcd
        // 4M + 4S

        // A = X1^2
        var a = this.x.redSqr();
        // B = Y1^2
        var b = this.y.redSqr();
        // C = 2 * Z1^2
        var c = this.z.redSqr();
        c = c.redIAdd(c);
        // D = a * A
        var d = this.curve._mulA(a);
        // E = (X1 + Y1)^2 - A - B
        var e = this.x.redAdd(this.y).redSqr().redISub(a).redISub(b);
        // G = D + B
        var g = d.redAdd(b);
        // F = G - C
        var f = g.redSub(c);
        // H = D - B
        var h = d.redSub(b);
        // X3 = E * F
        var nx = e.redMul(f);
        // Y3 = G * H
        var ny = g.redMul(h);
        // T3 = E * H
        var nt = e.redMul(h);
        // Z3 = F * G
        var nz = f.redMul(g);
        return this.curve.point(nx, ny, nz, nt);
      };

      Point.prototype._projDbl = function _projDbl() {
        // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
        //     #doubling-dbl-2008-bbjlp
        //     #doubling-dbl-2007-bl
        // and others
        // Generally 3M + 4S or 2M + 4S

        // B = (X1 + Y1)^2
        var b = this.x.redAdd(this.y).redSqr();
        // C = X1^2
        var c = this.x.redSqr();
        // D = Y1^2
        var d = this.y.redSqr();

        var nx;
        var ny;
        var nz;
        if (this.curve.twisted) {
          // E = a * C
          var e = this.curve._mulA(c);
          // F = E + D
          var f = e.redAdd(d);
          if (this.zOne) {
            // X3 = (B - C - D) * (F - 2)
            nx = b.redSub(c).redSub(d).redMul(f.redSub(this.curve.two));
            // Y3 = F * (E - D)
            ny = f.redMul(e.redSub(d));
            // Z3 = F^2 - 2 * F
            nz = f.redSqr().redSub(f).redSub(f);
          } else {
            // H = Z1^2
            var h = this.z.redSqr();
            // J = F - 2 * H
            var j = f.redSub(h).redISub(h);
            // X3 = (B-C-D)*J
            nx = b.redSub(c).redISub(d).redMul(j);
            // Y3 = F * (E - D)
            ny = f.redMul(e.redSub(d));
            // Z3 = F * J
            nz = f.redMul(j);
          }
        } else {
          // E = C + D
          var e = c.redAdd(d);
          // H = (c * Z1)^2
          var h = this.curve._mulC(this.z).redSqr();
          // J = E - 2 * H
          var j = e.redSub(h).redSub(h);
          // X3 = c * (B - E) * J
          nx = this.curve._mulC(b.redISub(e)).redMul(j);
          // Y3 = c * E * (C - D)
          ny = this.curve._mulC(e).redMul(c.redISub(d));
          // Z3 = E * J
          nz = e.redMul(j);
        }
        return this.curve.point(nx, ny, nz);
      };

      Point.prototype.dbl = function dbl() {
        if (this.isInfinity())
          return this;

        // Double in extended coordinates
        if (this.curve.extended)
          return this._extDbl();
        else
          return this._projDbl();
      };

      Point.prototype._extAdd = function _extAdd(p) {
        // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
        //     #addition-add-2008-hwcd-3
        // 8M

        // A = (Y1 - X1) * (Y2 - X2)
        var a = this.y.redSub(this.x).redMul(p.y.redSub(p.x));
        // B = (Y1 + X1) * (Y2 + X2)
        var b = this.y.redAdd(this.x).redMul(p.y.redAdd(p.x));
        // C = T1 * k * T2
        var c = this.t.redMul(this.curve.dd).redMul(p.t);
        // D = Z1 * 2 * Z2
        var d = this.z.redMul(p.z.redAdd(p.z));
        // E = B - A
        var e = b.redSub(a);
        // F = D - C
        var f = d.redSub(c);
        // G = D + C
        var g = d.redAdd(c);
        // H = B + A
        var h = b.redAdd(a);
        // X3 = E * F
        var nx = e.redMul(f);
        // Y3 = G * H
        var ny = g.redMul(h);
        // T3 = E * H
        var nt = e.redMul(h);
        // Z3 = F * G
        var nz = f.redMul(g);
        return this.curve.point(nx, ny, nz, nt);
      };

      Point.prototype._projAdd = function _projAdd(p) {
        // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
        //     #addition-add-2008-bbjlp
        //     #addition-add-2007-bl
        // 10M + 1S

        // A = Z1 * Z2
        var a = this.z.redMul(p.z);
        // B = A^2
        var b = a.redSqr();
        // C = X1 * X2
        var c = this.x.redMul(p.x);
        // D = Y1 * Y2
        var d = this.y.redMul(p.y);
        // E = d * C * D
        var e = this.curve.d.redMul(c).redMul(d);
        // F = B - E
        var f = b.redSub(e);
        // G = B + E
        var g = b.redAdd(e);
        // X3 = A * F * ((X1 + Y1) * (X2 + Y2) - C - D)
        var tmp = this.x.redAdd(this.y).redMul(p.x.redAdd(p.y)).redISub(c).redISub(d);
        var nx = a.redMul(f).redMul(tmp);
        var ny;
        var nz;
        if (this.curve.twisted) {
          // Y3 = A * G * (D - a * C)
          ny = a.redMul(g).redMul(d.redSub(this.curve._mulA(c)));
          // Z3 = F * G
          nz = f.redMul(g);
        } else {
          // Y3 = A * G * (D - C)
          ny = a.redMul(g).redMul(d.redSub(c));
          // Z3 = c * F * G
          nz = this.curve._mulC(f).redMul(g);
        }
        return this.curve.point(nx, ny, nz);
      };

      Point.prototype.add = function add(p) {
        if (this.isInfinity())
          return p;
        if (p.isInfinity())
          return this;

        if (this.curve.extended)
          return this._extAdd(p);
        else
          return this._projAdd(p);
      };

      Point.prototype.mul = function mul(k) {
        if (this._hasDoubles(k))
          return this.curve._fixedNafMul(this, k);
        else
          return this.curve._wnafMul(this, k);
      };

      Point.prototype.mulAdd = function mulAdd(k1, p, k2) {
        return this.curve._wnafMulAdd(1, [this, p], [k1, k2], 2, false);
      };

      Point.prototype.jmulAdd = function jmulAdd(k1, p, k2) {
        return this.curve._wnafMulAdd(1, [this, p], [k1, k2], 2, true);
      };

      Point.prototype.normalize = function normalize() {
        if (this.zOne)
          return this;

        // Normalize coordinates
        var zi = this.z.redInvm();
        this.x = this.x.redMul(zi);
        this.y = this.y.redMul(zi);
        if (this.t)
          this.t = this.t.redMul(zi);
        this.z = this.curve.one;
        this.zOne = true;
        return this;
      };

      Point.prototype.neg = function neg() {
        return this.curve.point(this.x.redNeg(),
          this.y,
          this.z,
          this.t && this.t.redNeg());
      };

      Point.prototype.getX = function getX() {
        this.normalize();
        return this.x.fromRed();
      };

      Point.prototype.getY = function getY() {
        this.normalize();
        return this.y.fromRed();
      };

      Point.prototype.eq = function eq(other) {
        return this === other ||
          this.getX().cmp(other.getX()) === 0 &&
          this.getY().cmp(other.getY()) === 0;
      };

      Point.prototype.eqXToP = function eqXToP(x) {
        var rx = x.toRed(this.curve.red).redMul(this.z);
        if (this.x.cmp(rx) === 0)
          return true;

        var xc = x.clone();
        var t = this.curve.redN.redMul(this.z);
        for (; ;) {
          xc.iadd(this.curve.n);
          if (xc.cmp(this.curve.p) >= 0)
            return false;

          rx.redIAdd(t);
          if (this.x.cmp(rx) === 0)
            return true;
        }
      };

      // Compatibility with BaseCurve
      Point.prototype.toP = Point.prototype.normalize;
      Point.prototype.mixedAdd = Point.prototype.add;


      /***/
    }),

/***/ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/elliptic/lib/elliptic/curve/index.js":
/*!*******************************************************************!*\
  !*** (webpack)/node_modules/elliptic/lib/elliptic/curve/index.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

      "use strict";


      var curve = exports;

      curve.base = __webpack_require__(/*! ./base */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/elliptic/lib/elliptic/curve/base.js");
      curve.short = __webpack_require__(/*! ./short */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/elliptic/lib/elliptic/curve/short.js");
      curve.mont = __webpack_require__(/*! ./mont */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/elliptic/lib/elliptic/curve/mont.js");
      curve.edwards = __webpack_require__(/*! ./edwards */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/elliptic/lib/elliptic/curve/edwards.js");


      /***/
    }),

/***/ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/elliptic/lib/elliptic/curve/mont.js":
/*!******************************************************************!*\
  !*** (webpack)/node_modules/elliptic/lib/elliptic/curve/mont.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

      "use strict";


      var curve = __webpack_require__(/*! ../curve */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/elliptic/lib/elliptic/curve/index.js");
      var BN = __webpack_require__(/*! bn.js */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/bn.js/lib/bn.js");
      var inherits = __webpack_require__(/*! inherits */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/inherits/inherits_browser.js");
      var Base = curve.base;

      var elliptic = __webpack_require__(/*! ../../elliptic */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/elliptic/lib/elliptic.js");
      var utils = elliptic.utils;

      function MontCurve(conf) {
        Base.call(this, 'mont', conf);

        this.a = new BN(conf.a, 16).toRed(this.red);
        this.b = new BN(conf.b, 16).toRed(this.red);
        this.i4 = new BN(4).toRed(this.red).redInvm();
        this.two = new BN(2).toRed(this.red);
        this.a24 = this.i4.redMul(this.a.redAdd(this.two));
      }
      inherits(MontCurve, Base);
      module.exports = MontCurve;

      MontCurve.prototype.validate = function validate(point) {
        var x = point.normalize().x;
        var x2 = x.redSqr();
        var rhs = x2.redMul(x).redAdd(x2.redMul(this.a)).redAdd(x);
        var y = rhs.redSqrt();

        return y.redSqr().cmp(rhs) === 0;
      };

      function Point(curve, x, z) {
        Base.BasePoint.call(this, curve, 'projective');
        if (x === null && z === null) {
          this.x = this.curve.one;
          this.z = this.curve.zero;
        } else {
          this.x = new BN(x, 16);
          this.z = new BN(z, 16);
          if (!this.x.red)
            this.x = this.x.toRed(this.curve.red);
          if (!this.z.red)
            this.z = this.z.toRed(this.curve.red);
        }
      }
      inherits(Point, Base.BasePoint);

      MontCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
        return this.point(utils.toArray(bytes, enc), 1);
      };

      MontCurve.prototype.point = function point(x, z) {
        return new Point(this, x, z);
      };

      MontCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
        return Point.fromJSON(this, obj);
      };

      Point.prototype.precompute = function precompute() {
        // No-op
      };

      Point.prototype._encode = function _encode() {
        return this.getX().toArray('be', this.curve.p.byteLength());
      };

      Point.fromJSON = function fromJSON(curve, obj) {
        return new Point(curve, obj[0], obj[1] || curve.one);
      };

      Point.prototype.inspect = function inspect() {
        if (this.isInfinity())
          return '<EC Point Infinity>';
        return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
          ' z: ' + this.z.fromRed().toString(16, 2) + '>';
      };

      Point.prototype.isInfinity = function isInfinity() {
        // XXX This code assumes that zero is always zero in red
        return this.z.cmpn(0) === 0;
      };

      Point.prototype.dbl = function dbl() {
        // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#doubling-dbl-1987-m-3
        // 2M + 2S + 4A

        // A = X1 + Z1
        var a = this.x.redAdd(this.z);
        // AA = A^2
        var aa = a.redSqr();
        // B = X1 - Z1
        var b = this.x.redSub(this.z);
        // BB = B^2
        var bb = b.redSqr();
        // C = AA - BB
        var c = aa.redSub(bb);
        // X3 = AA * BB
        var nx = aa.redMul(bb);
        // Z3 = C * (BB + A24 * C)
        var nz = c.redMul(bb.redAdd(this.curve.a24.redMul(c)));
        return this.curve.point(nx, nz);
      };

      Point.prototype.add = function add() {
        throw new Error('Not supported on Montgomery curve');
      };

      Point.prototype.diffAdd = function diffAdd(p, diff) {
        // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#diffadd-dadd-1987-m-3
        // 4M + 2S + 6A

        // A = X2 + Z2
        var a = this.x.redAdd(this.z);
        // B = X2 - Z2
        var b = this.x.redSub(this.z);
        // C = X3 + Z3
        var c = p.x.redAdd(p.z);
        // D = X3 - Z3
        var d = p.x.redSub(p.z);
        // DA = D * A
        var da = d.redMul(a);
        // CB = C * B
        var cb = c.redMul(b);
        // X5 = Z1 * (DA + CB)^2
        var nx = diff.z.redMul(da.redAdd(cb).redSqr());
        // Z5 = X1 * (DA - CB)^2
        var nz = diff.x.redMul(da.redISub(cb).redSqr());
        return this.curve.point(nx, nz);
      };

      Point.prototype.mul = function mul(k) {
        var t = k.clone();
        var a = this; // (N / 2) * Q + Q
        var b = this.curve.point(null, null); // (N / 2) * Q
        var c = this; // Q

        for (var bits = []; t.cmpn(0) !== 0; t.iushrn(1))
          bits.push(t.andln(1));

        for (var i = bits.length - 1; i >= 0; i--) {
          if (bits[i] === 0) {
            // N * Q + Q = ((N / 2) * Q + Q)) + (N / 2) * Q
            a = a.diffAdd(b, c);
            // N * Q = 2 * ((N / 2) * Q + Q))
            b = b.dbl();
          } else {
            // N * Q = ((N / 2) * Q + Q) + ((N / 2) * Q)
            b = a.diffAdd(b, c);
            // N * Q + Q = 2 * ((N / 2) * Q + Q)
            a = a.dbl();
          }
        }
        return b;
      };

      Point.prototype.mulAdd = function mulAdd() {
        throw new Error('Not supported on Montgomery curve');
      };

      Point.prototype.jumlAdd = function jumlAdd() {
        throw new Error('Not supported on Montgomery curve');
      };

      Point.prototype.eq = function eq(other) {
        return this.getX().cmp(other.getX()) === 0;
      };

      Point.prototype.normalize = function normalize() {
        this.x = this.x.redMul(this.z.redInvm());
        this.z = this.curve.one;
        return this;
      };

      Point.prototype.getX = function getX() {
        // Normalize coordinates
        this.normalize();

        return this.x.fromRed();
      };


      /***/
    }),

/***/ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/elliptic/lib/elliptic/curve/short.js":
/*!*******************************************************************!*\
  !*** (webpack)/node_modules/elliptic/lib/elliptic/curve/short.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

      "use strict";


      var curve = __webpack_require__(/*! ../curve */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/elliptic/lib/elliptic/curve/index.js");
      var elliptic = __webpack_require__(/*! ../../elliptic */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/elliptic/lib/elliptic.js");
      var BN = __webpack_require__(/*! bn.js */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/bn.js/lib/bn.js");
      var inherits = __webpack_require__(/*! inherits */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/inherits/inherits_browser.js");
      var Base = curve.base;

      var assert = elliptic.utils.assert;

      function ShortCurve(conf) {
        Base.call(this, 'short', conf);

        this.a = new BN(conf.a, 16).toRed(this.red);
        this.b = new BN(conf.b, 16).toRed(this.red);
        this.tinv = this.two.redInvm();

        this.zeroA = this.a.fromRed().cmpn(0) === 0;
        this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;

        // If the curve is endomorphic, precalculate beta and lambda
        this.endo = this._getEndomorphism(conf);
        this._endoWnafT1 = new Array(4);
        this._endoWnafT2 = new Array(4);
      }
      inherits(ShortCurve, Base);
      module.exports = ShortCurve;

      ShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {
        // No efficient endomorphism
        if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1)
          return;

        // Compute beta and lambda, that lambda * P = (beta * Px; Py)
        var beta;
        var lambda;
        if (conf.beta) {
          beta = new BN(conf.beta, 16).toRed(this.red);
        } else {
          var betas = this._getEndoRoots(this.p);
          // Choose the smallest beta
          beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];
          beta = beta.toRed(this.red);
        }
        if (conf.lambda) {
          lambda = new BN(conf.lambda, 16);
        } else {
          // Choose the lambda that is matching selected beta
          var lambdas = this._getEndoRoots(this.n);
          if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) {
            lambda = lambdas[0];
          } else {
            lambda = lambdas[1];
            assert(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);
          }
        }

        // Get basis vectors, used for balanced length-two representation
        var basis;
        if (conf.basis) {
          basis = conf.basis.map(function (vec) {
            return {
              a: new BN(vec.a, 16),
              b: new BN(vec.b, 16)
            };
          });
        } else {
          basis = this._getEndoBasis(lambda);
        }

        return {
          beta: beta,
          lambda: lambda,
          basis: basis
        };
      };

      ShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {
        // Find roots of for x^2 + x + 1 in F
        // Root = (-1 +- Sqrt(-3)) / 2
        //
        var red = num === this.p ? this.red : BN.mont(num);
        var tinv = new BN(2).toRed(red).redInvm();
        var ntinv = tinv.redNeg();

        var s = new BN(3).toRed(red).redNeg().redSqrt().redMul(tinv);

        var l1 = ntinv.redAdd(s).fromRed();
        var l2 = ntinv.redSub(s).fromRed();
        return [l1, l2];
      };

      ShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {
        // aprxSqrt >= sqrt(this.n)
        var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2));

        // 3.74
        // Run EGCD, until r(L + 1) < aprxSqrt
        var u = lambda;
        var v = this.n.clone();
        var x1 = new BN(1);
        var y1 = new BN(0);
        var x2 = new BN(0);
        var y2 = new BN(1);

        // NOTE: all vectors are roots of: a + b * lambda = 0 (mod n)
        var a0;
        var b0;
        // First vector
        var a1;
        var b1;
        // Second vector
        var a2;
        var b2;

        var prevR;
        var i = 0;
        var r;
        var x;
        while (u.cmpn(0) !== 0) {
          var q = v.div(u);
          r = v.sub(q.mul(u));
          x = x2.sub(q.mul(x1));
          var y = y2.sub(q.mul(y1));

          if (!a1 && r.cmp(aprxSqrt) < 0) {
            a0 = prevR.neg();
            b0 = x1;
            a1 = r.neg();
            b1 = x;
          } else if (a1 && ++i === 2) {
            break;
          }
          prevR = r;

          v = u;
          u = r;
          x2 = x1;
          x1 = x;
          y2 = y1;
          y1 = y;
        }
        a2 = r.neg();
        b2 = x;

        var len1 = a1.sqr().add(b1.sqr());
        var len2 = a2.sqr().add(b2.sqr());
        if (len2.cmp(len1) >= 0) {
          a2 = a0;
          b2 = b0;
        }

        // Normalize signs
        if (a1.negative) {
          a1 = a1.neg();
          b1 = b1.neg();
        }
        if (a2.negative) {
          a2 = a2.neg();
          b2 = b2.neg();
        }

        return [
          { a: a1, b: b1 },
          { a: a2, b: b2 }
        ];
      };

      ShortCurve.prototype._endoSplit = function _endoSplit(k) {
        var basis = this.endo.basis;
        var v1 = basis[0];
        var v2 = basis[1];

        var c1 = v2.b.mul(k).divRound(this.n);
        var c2 = v1.b.neg().mul(k).divRound(this.n);

        var p1 = c1.mul(v1.a);
        var p2 = c2.mul(v2.a);
        var q1 = c1.mul(v1.b);
        var q2 = c2.mul(v2.b);

        // Calculate answer
        var k1 = k.sub(p1).sub(p2);
        var k2 = q1.add(q2).neg();
        return { k1: k1, k2: k2 };
      };

      ShortCurve.prototype.pointFromX = function pointFromX(x, odd) {
        x = new BN(x, 16);
        if (!x.red)
          x = x.toRed(this.red);

        var y2 = x.redSqr().redMul(x).redIAdd(x.redMul(this.a)).redIAdd(this.b);
        var y = y2.redSqrt();
        if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
          throw new Error('invalid point');

        // XXX Is there any way to tell if the number is odd without converting it
        // to non-red form?
        var isOdd = y.fromRed().isOdd();
        if (odd && !isOdd || !odd && isOdd)
          y = y.redNeg();

        return this.point(x, y);
      };

      ShortCurve.prototype.validate = function validate(point) {
        if (point.inf)
          return true;

        var x = point.x;
        var y = point.y;

        var ax = this.a.redMul(x);
        var rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);
        return y.redSqr().redISub(rhs).cmpn(0) === 0;
      };

      ShortCurve.prototype._endoWnafMulAdd =
        function _endoWnafMulAdd(points, coeffs, jacobianResult) {
          var npoints = this._endoWnafT1;
          var ncoeffs = this._endoWnafT2;
          for (var i = 0; i < points.length; i++) {
            var split = this._endoSplit(coeffs[i]);
            var p = points[i];
            var beta = p._getBeta();

            if (split.k1.negative) {
              split.k1.ineg();
              p = p.neg(true);
            }
            if (split.k2.negative) {
              split.k2.ineg();
              beta = beta.neg(true);
            }

            npoints[i * 2] = p;
            npoints[i * 2 + 1] = beta;
            ncoeffs[i * 2] = split.k1;
            ncoeffs[i * 2 + 1] = split.k2;
          }
          var res = this._wnafMulAdd(1, npoints, ncoeffs, i * 2, jacobianResult);

          // Clean-up references to points and coefficients
          for (var j = 0; j < i * 2; j++) {
            npoints[j] = null;
            ncoeffs[j] = null;
          }
          return res;
        };

      function Point(curve, x, y, isRed) {
        Base.BasePoint.call(this, curve, 'affine');
        if (x === null && y === null) {
          this.x = null;
          this.y = null;
          this.inf = true;
        } else {
          this.x = new BN(x, 16);
          this.y = new BN(y, 16);
          // Force redgomery representation when loading from JSON
          if (isRed) {
            this.x.forceRed(this.curve.red);
            this.y.forceRed(this.curve.red);
          }
          if (!this.x.red)
            this.x = this.x.toRed(this.curve.red);
          if (!this.y.red)
            this.y = this.y.toRed(this.curve.red);
          this.inf = false;
        }
      }
      inherits(Point, Base.BasePoint);

      ShortCurve.prototype.point = function point(x, y, isRed) {
        return new Point(this, x, y, isRed);
      };

      ShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {
        return Point.fromJSON(this, obj, red);
      };

      Point.prototype._getBeta = function _getBeta() {
        if (!this.curve.endo)
          return;

        var pre = this.precomputed;
        if (pre && pre.beta)
          return pre.beta;

        var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
        if (pre) {
          var curve = this.curve;
          var endoMul = function (p) {
            return curve.point(p.x.redMul(curve.endo.beta), p.y);
          };
          pre.beta = beta;
          beta.precomputed = {
            beta: null,
            naf: pre.naf && {
              wnd: pre.naf.wnd,
              points: pre.naf.points.map(endoMul)
            },
            doubles: pre.doubles && {
              step: pre.doubles.step,
              points: pre.doubles.points.map(endoMul)
            }
          };
        }
        return beta;
      };

      Point.prototype.toJSON = function toJSON() {
        if (!this.precomputed)
          return [this.x, this.y];

        return [this.x, this.y, this.precomputed && {
          doubles: this.precomputed.doubles && {
            step: this.precomputed.doubles.step,
            points: this.precomputed.doubles.points.slice(1)
          },
          naf: this.precomputed.naf && {
            wnd: this.precomputed.naf.wnd,
            points: this.precomputed.naf.points.slice(1)
          }
        }];
      };

      Point.fromJSON = function fromJSON(curve, obj, red) {
        if (typeof obj === 'string')
          obj = JSON.parse(obj);
        var res = curve.point(obj[0], obj[1], red);
        if (!obj[2])
          return res;

        function obj2point(obj) {
          return curve.point(obj[0], obj[1], red);
        }

        var pre = obj[2];
        res.precomputed = {
          beta: null,
          doubles: pre.doubles && {
            step: pre.doubles.step,
            points: [res].concat(pre.doubles.points.map(obj2point))
          },
          naf: pre.naf && {
            wnd: pre.naf.wnd,
            points: [res].concat(pre.naf.points.map(obj2point))
          }
        };
        return res;
      };

      Point.prototype.inspect = function inspect() {
        if (this.isInfinity())
          return '<EC Point Infinity>';
        return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
          ' y: ' + this.y.fromRed().toString(16, 2) + '>';
      };

      Point.prototype.isInfinity = function isInfinity() {
        return this.inf;
      };

      Point.prototype.add = function add(p) {
        // O + P = P
        if (this.inf)
          return p;

        // P + O = P
        if (p.inf)
          return this;

        // P + P = 2P
        if (this.eq(p))
          return this.dbl();

        // P + (-P) = O
        if (this.neg().eq(p))
          return this.curve.point(null, null);

        // P + Q = O
        if (this.x.cmp(p.x) === 0)
          return this.curve.point(null, null);

        var c = this.y.redSub(p.y);
        if (c.cmpn(0) !== 0)
          c = c.redMul(this.x.redSub(p.x).redInvm());
        var nx = c.redSqr().redISub(this.x).redISub(p.x);
        var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
        return this.curve.point(nx, ny);
      };

      Point.prototype.dbl = function dbl() {
        if (this.inf)
          return this;

        // 2P = O
        var ys1 = this.y.redAdd(this.y);
        if (ys1.cmpn(0) === 0)
          return this.curve.point(null, null);

        var a = this.curve.a;

        var x2 = this.x.redSqr();
        var dyinv = ys1.redInvm();
        var c = x2.redAdd(x2).redIAdd(x2).redIAdd(a).redMul(dyinv);

        var nx = c.redSqr().redISub(this.x.redAdd(this.x));
        var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
        return this.curve.point(nx, ny);
      };

      Point.prototype.getX = function getX() {
        return this.x.fromRed();
      };

      Point.prototype.getY = function getY() {
        return this.y.fromRed();
      };

      Point.prototype.mul = function mul(k) {
        k = new BN(k, 16);

        if (this._hasDoubles(k))
          return this.curve._fixedNafMul(this, k);
        else if (this.curve.endo)
          return this.curve._endoWnafMulAdd([this], [k]);
        else
          return this.curve._wnafMul(this, k);
      };

      Point.prototype.mulAdd = function mulAdd(k1, p2, k2) {
        var points = [this, p2];
        var coeffs = [k1, k2];
        if (this.curve.endo)
          return this.curve._endoWnafMulAdd(points, coeffs);
        else
          return this.curve._wnafMulAdd(1, points, coeffs, 2);
      };

      Point.prototype.jmulAdd = function jmulAdd(k1, p2, k2) {
        var points = [this, p2];
        var coeffs = [k1, k2];
        if (this.curve.endo)
          return this.curve._endoWnafMulAdd(points, coeffs, true);
        else
          return this.curve._wnafMulAdd(1, points, coeffs, 2, true);
      };

      Point.prototype.eq = function eq(p) {
        return this === p ||
          this.inf === p.inf &&
          (this.inf || this.x.cmp(p.x) === 0 && this.y.cmp(p.y) === 0);
      };

      Point.prototype.neg = function neg(_precompute) {
        if (this.inf)
          return this;

        var res = this.curve.point(this.x, this.y.redNeg());
        if (_precompute && this.precomputed) {
          var pre = this.precomputed;
          var negate = function (p) {
            return p.neg();
          };
          res.precomputed = {
            naf: pre.naf && {
              wnd: pre.naf.wnd,
              points: pre.naf.points.map(negate)
            },
            doubles: pre.doubles && {
              step: pre.doubles.step,
              points: pre.doubles.points.map(negate)
            }
          };
        }
        return res;
      };

      Point.prototype.toJ = function toJ() {
        if (this.inf)
          return this.curve.jpoint(null, null, null);

        var res = this.curve.jpoint(this.x, this.y, this.curve.one);
        return res;
      };

      function JPoint(curve, x, y, z) {
        Base.BasePoint.call(this, curve, 'jacobian');
        if (x === null && y === null && z === null) {
          this.x = this.curve.one;
          this.y = this.curve.one;
          this.z = new BN(0);
        } else {
          this.x = new BN(x, 16);
          this.y = new BN(y, 16);
          this.z = new BN(z, 16);
        }
        if (!this.x.red)
          this.x = this.x.toRed(this.curve.red);
        if (!this.y.red)
          this.y = this.y.toRed(this.curve.red);
        if (!this.z.red)
          this.z = this.z.toRed(this.curve.red);

        this.zOne = this.z === this.curve.one;
      }
      inherits(JPoint, Base.BasePoint);

      ShortCurve.prototype.jpoint = function jpoint(x, y, z) {
        return new JPoint(this, x, y, z);
      };

      JPoint.prototype.toP = function toP() {
        if (this.isInfinity())
          return this.curve.point(null, null);

        var zinv = this.z.redInvm();
        var zinv2 = zinv.redSqr();
        var ax = this.x.redMul(zinv2);
        var ay = this.y.redMul(zinv2).redMul(zinv);

        return this.curve.point(ax, ay);
      };

      JPoint.prototype.neg = function neg() {
        return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
      };

      JPoint.prototype.add = function add(p) {
        // O + P = P
        if (this.isInfinity())
          return p;

        // P + O = P
        if (p.isInfinity())
          return this;

        // 12M + 4S + 7A
        var pz2 = p.z.redSqr();
        var z2 = this.z.redSqr();
        var u1 = this.x.redMul(pz2);
        var u2 = p.x.redMul(z2);
        var s1 = this.y.redMul(pz2.redMul(p.z));
        var s2 = p.y.redMul(z2.redMul(this.z));

        var h = u1.redSub(u2);
        var r = s1.redSub(s2);
        if (h.cmpn(0) === 0) {
          if (r.cmpn(0) !== 0)
            return this.curve.jpoint(null, null, null);
          else
            return this.dbl();
        }

        var h2 = h.redSqr();
        var h3 = h2.redMul(h);
        var v = u1.redMul(h2);

        var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
        var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
        var nz = this.z.redMul(p.z).redMul(h);

        return this.curve.jpoint(nx, ny, nz);
      };

      JPoint.prototype.mixedAdd = function mixedAdd(p) {
        // O + P = P
        if (this.isInfinity())
          return p.toJ();

        // P + O = P
        if (p.isInfinity())
          return this;

        // 8M + 3S + 7A
        var z2 = this.z.redSqr();
        var u1 = this.x;
        var u2 = p.x.redMul(z2);
        var s1 = this.y;
        var s2 = p.y.redMul(z2).redMul(this.z);

        var h = u1.redSub(u2);
        var r = s1.redSub(s2);
        if (h.cmpn(0) === 0) {
          if (r.cmpn(0) !== 0)
            return this.curve.jpoint(null, null, null);
          else
            return this.dbl();
        }

        var h2 = h.redSqr();
        var h3 = h2.redMul(h);
        var v = u1.redMul(h2);

        var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
        var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
        var nz = this.z.redMul(h);

        return this.curve.jpoint(nx, ny, nz);
      };

      JPoint.prototype.dblp = function dblp(pow) {
        if (pow === 0)
          return this;
        if (this.isInfinity())
          return this;
        if (!pow)
          return this.dbl();

        if (this.curve.zeroA || this.curve.threeA) {
          var r = this;
          for (var i = 0; i < pow; i++)
            r = r.dbl();
          return r;
        }

        // 1M + 2S + 1A + N * (4S + 5M + 8A)
        // N = 1 => 6M + 6S + 9A
        var a = this.curve.a;
        var tinv = this.curve.tinv;

        var jx = this.x;
        var jy = this.y;
        var jz = this.z;
        var jz4 = jz.redSqr().redSqr();

        // Reuse results
        var jyd = jy.redAdd(jy);
        for (var i = 0; i < pow; i++) {
          var jx2 = jx.redSqr();
          var jyd2 = jyd.redSqr();
          var jyd4 = jyd2.redSqr();
          var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

          var t1 = jx.redMul(jyd2);
          var nx = c.redSqr().redISub(t1.redAdd(t1));
          var t2 = t1.redISub(nx);
          var dny = c.redMul(t2);
          dny = dny.redIAdd(dny).redISub(jyd4);
          var nz = jyd.redMul(jz);
          if (i + 1 < pow)
            jz4 = jz4.redMul(jyd4);

          jx = nx;
          jz = nz;
          jyd = dny;
        }

        return this.curve.jpoint(jx, jyd.redMul(tinv), jz);
      };

      JPoint.prototype.dbl = function dbl() {
        if (this.isInfinity())
          return this;

        if (this.curve.zeroA)
          return this._zeroDbl();
        else if (this.curve.threeA)
          return this._threeDbl();
        else
          return this._dbl();
      };

      JPoint.prototype._zeroDbl = function _zeroDbl() {
        var nx;
        var ny;
        var nz;
        // Z = 1
        if (this.zOne) {
          // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
          //     #doubling-mdbl-2007-bl
          // 1M + 5S + 14A

          // XX = X1^2
          var xx = this.x.redSqr();
          // YY = Y1^2
          var yy = this.y.redSqr();
          // YYYY = YY^2
          var yyyy = yy.redSqr();
          // S = 2 * ((X1 + YY)^2 - XX - YYYY)
          var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
          s = s.redIAdd(s);
          // M = 3 * XX + a; a = 0
          var m = xx.redAdd(xx).redIAdd(xx);
          // T = M ^ 2 - 2*S
          var t = m.redSqr().redISub(s).redISub(s);

          // 8 * YYYY
          var yyyy8 = yyyy.redIAdd(yyyy);
          yyyy8 = yyyy8.redIAdd(yyyy8);
          yyyy8 = yyyy8.redIAdd(yyyy8);

          // X3 = T
          nx = t;
          // Y3 = M * (S - T) - 8 * YYYY
          ny = m.redMul(s.redISub(t)).redISub(yyyy8);
          // Z3 = 2*Y1
          nz = this.y.redAdd(this.y);
        } else {
          // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
          //     #doubling-dbl-2009-l
          // 2M + 5S + 13A

          // A = X1^2
          var a = this.x.redSqr();
          // B = Y1^2
          var b = this.y.redSqr();
          // C = B^2
          var c = b.redSqr();
          // D = 2 * ((X1 + B)^2 - A - C)
          var d = this.x.redAdd(b).redSqr().redISub(a).redISub(c);
          d = d.redIAdd(d);
          // E = 3 * A
          var e = a.redAdd(a).redIAdd(a);
          // F = E^2
          var f = e.redSqr();

          // 8 * C
          var c8 = c.redIAdd(c);
          c8 = c8.redIAdd(c8);
          c8 = c8.redIAdd(c8);

          // X3 = F - 2 * D
          nx = f.redISub(d).redISub(d);
          // Y3 = E * (D - X3) - 8 * C
          ny = e.redMul(d.redISub(nx)).redISub(c8);
          // Z3 = 2 * Y1 * Z1
          nz = this.y.redMul(this.z);
          nz = nz.redIAdd(nz);
        }

        return this.curve.jpoint(nx, ny, nz);
      };

      JPoint.prototype._threeDbl = function _threeDbl() {
        var nx;
        var ny;
        var nz;
        // Z = 1
        if (this.zOne) {
          // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html
          //     #doubling-mdbl-2007-bl
          // 1M + 5S + 15A

          // XX = X1^2
          var xx = this.x.redSqr();
          // YY = Y1^2
          var yy = this.y.redSqr();
          // YYYY = YY^2
          var yyyy = yy.redSqr();
          // S = 2 * ((X1 + YY)^2 - XX - YYYY)
          var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
          s = s.redIAdd(s);
          // M = 3 * XX + a
          var m = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);
          // T = M^2 - 2 * S
          var t = m.redSqr().redISub(s).redISub(s);
          // X3 = T
          nx = t;
          // Y3 = M * (S - T) - 8 * YYYY
          var yyyy8 = yyyy.redIAdd(yyyy);
          yyyy8 = yyyy8.redIAdd(yyyy8);
          yyyy8 = yyyy8.redIAdd(yyyy8);
          ny = m.redMul(s.redISub(t)).redISub(yyyy8);
          // Z3 = 2 * Y1
          nz = this.y.redAdd(this.y);
        } else {
          // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html#doubling-dbl-2001-b
          // 3M + 5S

          // delta = Z1^2
          var delta = this.z.redSqr();
          // gamma = Y1^2
          var gamma = this.y.redSqr();
          // beta = X1 * gamma
          var beta = this.x.redMul(gamma);
          // alpha = 3 * (X1 - delta) * (X1 + delta)
          var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));
          alpha = alpha.redAdd(alpha).redIAdd(alpha);
          // X3 = alpha^2 - 8 * beta
          var beta4 = beta.redIAdd(beta);
          beta4 = beta4.redIAdd(beta4);
          var beta8 = beta4.redAdd(beta4);
          nx = alpha.redSqr().redISub(beta8);
          // Z3 = (Y1 + Z1)^2 - gamma - delta
          nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);
          // Y3 = alpha * (4 * beta - X3) - 8 * gamma^2
          var ggamma8 = gamma.redSqr();
          ggamma8 = ggamma8.redIAdd(ggamma8);
          ggamma8 = ggamma8.redIAdd(ggamma8);
          ggamma8 = ggamma8.redIAdd(ggamma8);
          ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);
        }

        return this.curve.jpoint(nx, ny, nz);
      };

      JPoint.prototype._dbl = function _dbl() {
        var a = this.curve.a;

        // 4M + 6S + 10A
        var jx = this.x;
        var jy = this.y;
        var jz = this.z;
        var jz4 = jz.redSqr().redSqr();

        var jx2 = jx.redSqr();
        var jy2 = jy.redSqr();

        var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

        var jxd4 = jx.redAdd(jx);
        jxd4 = jxd4.redIAdd(jxd4);
        var t1 = jxd4.redMul(jy2);
        var nx = c.redSqr().redISub(t1.redAdd(t1));
        var t2 = t1.redISub(nx);

        var jyd8 = jy2.redSqr();
        jyd8 = jyd8.redIAdd(jyd8);
        jyd8 = jyd8.redIAdd(jyd8);
        jyd8 = jyd8.redIAdd(jyd8);
        var ny = c.redMul(t2).redISub(jyd8);
        var nz = jy.redAdd(jy).redMul(jz);

        return this.curve.jpoint(nx, ny, nz);
      };

      JPoint.prototype.trpl = function trpl() {
        if (!this.curve.zeroA)
          return this.dbl().add(this);

        // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html#tripling-tpl-2007-bl
        // 5M + 10S + ...

        // XX = X1^2
        var xx = this.x.redSqr();
        // YY = Y1^2
        var yy = this.y.redSqr();
        // ZZ = Z1^2
        var zz = this.z.redSqr();
        // YYYY = YY^2
        var yyyy = yy.redSqr();
        // M = 3 * XX + a * ZZ2; a = 0
        var m = xx.redAdd(xx).redIAdd(xx);
        // MM = M^2
        var mm = m.redSqr();
        // E = 6 * ((X1 + YY)^2 - XX - YYYY) - MM
        var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
        e = e.redIAdd(e);
        e = e.redAdd(e).redIAdd(e);
        e = e.redISub(mm);
        // EE = E^2
        var ee = e.redSqr();
        // T = 16*YYYY
        var t = yyyy.redIAdd(yyyy);
        t = t.redIAdd(t);
        t = t.redIAdd(t);
        t = t.redIAdd(t);
        // U = (M + E)^2 - MM - EE - T
        var u = m.redIAdd(e).redSqr().redISub(mm).redISub(ee).redISub(t);
        // X3 = 4 * (X1 * EE - 4 * YY * U)
        var yyu4 = yy.redMul(u);
        yyu4 = yyu4.redIAdd(yyu4);
        yyu4 = yyu4.redIAdd(yyu4);
        var nx = this.x.redMul(ee).redISub(yyu4);
        nx = nx.redIAdd(nx);
        nx = nx.redIAdd(nx);
        // Y3 = 8 * Y1 * (U * (T - U) - E * EE)
        var ny = this.y.redMul(u.redMul(t.redISub(u)).redISub(e.redMul(ee)));
        ny = ny.redIAdd(ny);
        ny = ny.redIAdd(ny);
        ny = ny.redIAdd(ny);
        // Z3 = (Z1 + E)^2 - ZZ - EE
        var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);

        return this.curve.jpoint(nx, ny, nz);
      };

      JPoint.prototype.mul = function mul(k, kbase) {
        k = new BN(k, kbase);

        return this.curve._wnafMul(this, k);
      };

      JPoint.prototype.eq = function eq(p) {
        if (p.type === 'affine')
          return this.eq(p.toJ());

        if (this === p)
          return true;

        // x1 * z2^2 == x2 * z1^2
        var z2 = this.z.redSqr();
        var pz2 = p.z.redSqr();
        if (this.x.redMul(pz2).redISub(p.x.redMul(z2)).cmpn(0) !== 0)
          return false;

        // y1 * z2^3 == y2 * z1^3
        var z3 = z2.redMul(this.z);
        var pz3 = pz2.redMul(p.z);
        return this.y.redMul(pz3).redISub(p.y.redMul(z3)).cmpn(0) === 0;
      };

      JPoint.prototype.eqXToP = function eqXToP(x) {
        var zs = this.z.redSqr();
        var rx = x.toRed(this.curve.red).redMul(zs);
        if (this.x.cmp(rx) === 0)
          return true;

        var xc = x.clone();
        var t = this.curve.redN.redMul(zs);
        for (; ;) {
          xc.iadd(this.curve.n);
          if (xc.cmp(this.curve.p) >= 0)
            return false;

          rx.redIAdd(t);
          if (this.x.cmp(rx) === 0)
            return true;
        }
      };

      JPoint.prototype.inspect = function inspect() {
        if (this.isInfinity())
          return '<EC JPoint Infinity>';
        return '<EC JPoint x: ' + this.x.toString(16, 2) +
          ' y: ' + this.y.toString(16, 2) +
          ' z: ' + this.z.toString(16, 2) + '>';
      };

      JPoint.prototype.isInfinity = function isInfinity() {
        // XXX This code assumes that zero is always zero in red
        return this.z.cmpn(0) === 0;
      };


      /***/
    }),

/***/ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/elliptic/lib/elliptic/curves.js":
/*!**************************************************************!*\
  !*** (webpack)/node_modules/elliptic/lib/elliptic/curves.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

      "use strict";


      var curves = exports;

      var hash = __webpack_require__(/*! hash.js */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/hash.js/lib/hash.js");
      var elliptic = __webpack_require__(/*! ../elliptic */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/elliptic/lib/elliptic.js");

      var assert = elliptic.utils.assert;

      function PresetCurve(options) {
        if (options.type === 'short')
          this.curve = new elliptic.curve.short(options);
        else if (options.type === 'edwards')
          this.curve = new elliptic.curve.edwards(options);
        else
          this.curve = new elliptic.curve.mont(options);
        this.g = this.curve.g;
        this.n = this.curve.n;
        this.hash = options.hash;

        assert(this.g.validate(), 'Invalid curve');
        assert(this.g.mul(this.n).isInfinity(), 'Invalid curve, G*N != O');
      }
      curves.PresetCurve = PresetCurve;

      function defineCurve(name, options) {
        Object.defineProperty(curves, name, {
          configurable: true,
          enumerable: true,
          get: function () {
            var curve = new PresetCurve(options);
            Object.defineProperty(curves, name, {
              configurable: true,
              enumerable: true,
              value: curve
            });
            return curve;
          }
        });
      }

      defineCurve('p192', {
        type: 'short',
        prime: 'p192',
        p: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff',
        a: 'ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc',
        b: '64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1',
        n: 'ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831',
        hash: hash.sha256,
        gRed: false,
        g: [
          '188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012',
          '07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811'
        ]
      });

      defineCurve('p224', {
        type: 'short',
        prime: 'p224',
        p: 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001',
        a: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe',
        b: 'b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4',
        n: 'ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d',
        hash: hash.sha256,
        gRed: false,
        g: [
          'b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21',
          'bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34'
        ]
      });

      defineCurve('p256', {
        type: 'short',
        prime: null,
        p: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff',
        a: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc',
        b: '5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b',
        n: 'ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551',
        hash: hash.sha256,
        gRed: false,
        g: [
          '6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296',
          '4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5'
        ]
      });

      defineCurve('p384', {
        type: 'short',
        prime: null,
        p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
        'fffffffe ffffffff 00000000 00000000 ffffffff',
        a: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
        'fffffffe ffffffff 00000000 00000000 fffffffc',
        b: 'b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f ' +
        '5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef',
        n: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 ' +
        'f4372ddf 581a0db2 48b0a77a ecec196a ccc52973',
        hash: hash.sha384,
        gRed: false,
        g: [
          'aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 ' +
          '5502f25d bf55296c 3a545e38 72760ab7',
          '3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 ' +
          '0a60b1ce 1d7e819d 7a431d7c 90ea0e5f'
        ]
      });

      defineCurve('p521', {
        type: 'short',
        prime: null,
        p: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
        'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
        'ffffffff ffffffff ffffffff ffffffff ffffffff',
        a: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
        'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
        'ffffffff ffffffff ffffffff ffffffff fffffffc',
        b: '00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b ' +
        '99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd ' +
        '3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00',
        n: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
        'ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 ' +
        'f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409',
        hash: hash.sha512,
        gRed: false,
        g: [
          '000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 ' +
          '053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 ' +
          'a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66',
          '00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 ' +
          '579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 ' +
          '3fad0761 353c7086 a272c240 88be9476 9fd16650'
        ]
      });

      defineCurve('curve25519', {
        type: 'mont',
        prime: 'p25519',
        p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
        a: '76d06',
        b: '1',
        n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
        hash: hash.sha256,
        gRed: false,
        g: [
          '9'
        ]
      });

      defineCurve('ed25519', {
        type: 'edwards',
        prime: 'p25519',
        p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
        a: '-1',
        c: '1',
        // -121665 * (121666^(-1)) (mod P)
        d: '52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3',
        n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
        hash: hash.sha256,
        gRed: false,
        g: [
          '216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a',

          // 4/5
          '6666666666666666666666666666666666666666666666666666666666666658'
        ]
      });

      var pre;
      try {
        pre = __webpack_require__(/*! ./precomputed/secp256k1 */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/elliptic/lib/elliptic/precomputed/secp256k1.js");
      } catch (e) {
        pre = undefined;
      }

      defineCurve('secp256k1', {
        type: 'short',
        prime: 'k256',
        p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f',
        a: '0',
        b: '7',
        n: 'ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141',
        h: '1',
        hash: hash.sha256,

        // Precomputed endomorphism
        beta: '7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee',
        lambda: '5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72',
        basis: [
          {
            a: '3086d221a7d46bcde86c90e49284eb15',
            b: '-e4437ed6010e88286f547fa90abfe4c3'
          },
          {
            a: '114ca50f7a8e2f3f657c1108d9d44cfd8',
            b: '3086d221a7d46bcde86c90e49284eb15'
          }
        ],

        gRed: false,
        g: [
          '79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798',
          '483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8',
          pre
        ]
      });


      /***/
    }),

/***/ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/elliptic/lib/elliptic/ec/index.js":
/*!****************************************************************!*\
  !*** (webpack)/node_modules/elliptic/lib/elliptic/ec/index.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

      "use strict";


      var BN = __webpack_require__(/*! bn.js */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/bn.js/lib/bn.js");
      var HmacDRBG = __webpack_require__(/*! hmac-drbg */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/hmac-drbg/lib/hmac-drbg.js");
      var elliptic = __webpack_require__(/*! ../../elliptic */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/elliptic/lib/elliptic.js");
      var utils = elliptic.utils;
      var assert = utils.assert;

      var KeyPair = __webpack_require__(/*! ./key */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/elliptic/lib/elliptic/ec/key.js");
      var Signature = __webpack_require__(/*! ./signature */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/elliptic/lib/elliptic/ec/signature.js");

      function EC(options) {
        if (!(this instanceof EC))
          return new EC(options);

        // Shortcut `elliptic.ec(curve-name)`
        if (typeof options === 'string') {
          assert(elliptic.curves.hasOwnProperty(options), 'Unknown curve ' + options);

          options = elliptic.curves[options];
        }

        // Shortcut for `elliptic.ec(elliptic.curves.curveName)`
        if (options instanceof elliptic.curves.PresetCurve)
          options = { curve: options };

        this.curve = options.curve.curve;
        this.n = this.curve.n;
        this.nh = this.n.ushrn(1);
        this.g = this.curve.g;

        // Point on curve
        this.g = options.curve.g;
        this.g.precompute(options.curve.n.bitLength() + 1);

        // Hash for function for DRBG
        this.hash = options.hash || options.curve.hash;
      }
      module.exports = EC;

      EC.prototype.keyPair = function keyPair(options) {
        return new KeyPair(this, options);
      };

      EC.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {
        return KeyPair.fromPrivate(this, priv, enc);
      };

      EC.prototype.keyFromPublic = function keyFromPublic(pub, enc) {
        return KeyPair.fromPublic(this, pub, enc);
      };

      EC.prototype.genKeyPair = function genKeyPair(options) {
        if (!options)
          options = {};

        // Instantiate Hmac_DRBG
        var drbg = new HmacDRBG({
          hash: this.hash,
          pers: options.pers,
          persEnc: options.persEnc || 'utf8',
          entropy: options.entropy || elliptic.rand(this.hash.hmacStrength),
          entropyEnc: options.entropy && options.entropyEnc || 'utf8',
          nonce: this.n.toArray()
        });

        var bytes = this.n.byteLength();
        var ns2 = this.n.sub(new BN(2));
        do {
          var priv = new BN(drbg.generate(bytes));
          if (priv.cmp(ns2) > 0)
            continue;

          priv.iaddn(1);
          return this.keyFromPrivate(priv);
        } while (true);
      };

      EC.prototype._truncateToN = function truncateToN(msg, truncOnly) {
        var delta = msg.byteLength() * 8 - this.n.bitLength();
        if (delta > 0)
          msg = msg.ushrn(delta);
        if (!truncOnly && msg.cmp(this.n) >= 0)
          return msg.sub(this.n);
        else
          return msg;
      };

      EC.prototype.sign = function sign(msg, key, enc, options) {
        if (typeof enc === 'object') {
          options = enc;
          enc = null;
        }
        if (!options)
          options = {};

        key = this.keyFromPrivate(key, enc);
        msg = this._truncateToN(new BN(msg, 16));

        // Zero-extend key to provide enough entropy
        var bytes = this.n.byteLength();
        var bkey = key.getPrivate().toArray('be', bytes);

        // Zero-extend nonce to have the same byte size as N
        var nonce = msg.toArray('be', bytes);

        // Instantiate Hmac_DRBG
        var drbg = new HmacDRBG({
          hash: this.hash,
          entropy: bkey,
          nonce: nonce,
          pers: options.pers,
          persEnc: options.persEnc || 'utf8'
        });

        // Number of bytes to generate
        var ns1 = this.n.sub(new BN(1));

        for (var iter = 0; true; iter++) {
          var k = options.k ?
            options.k(iter) :
            new BN(drbg.generate(this.n.byteLength()));
          k = this._truncateToN(k, true);
          if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0)
            continue;

          var kp = this.g.mul(k);
          if (kp.isInfinity())
            continue;

          var kpX = kp.getX();
          var r = kpX.umod(this.n);
          if (r.cmpn(0) === 0)
            continue;

          var s = k.invm(this.n).mul(r.mul(key.getPrivate()).iadd(msg));
          s = s.umod(this.n);
          if (s.cmpn(0) === 0)
            continue;

          var recoveryParam = (kp.getY().isOdd() ? 1 : 0) |
            (kpX.cmp(r) !== 0 ? 2 : 0);

          // Use complement of `s`, if it is > `n / 2`
          if (options.canonical && s.cmp(this.nh) > 0) {
            s = this.n.sub(s);
            recoveryParam ^= 1;
          }

          return new Signature({ r: r, s: s, recoveryParam: recoveryParam });
        }
      };

      EC.prototype.verify = function verify(msg, signature, key, enc) {
        msg = this._truncateToN(new BN(msg, 16));
        key = this.keyFromPublic(key, enc);
        signature = new Signature(signature, 'hex');

        // Perform primitive values validation
        var r = signature.r;
        var s = signature.s;
        if (r.cmpn(1) < 0 || r.cmp(this.n) >= 0)
          return false;
        if (s.cmpn(1) < 0 || s.cmp(this.n) >= 0)
          return false;

        // Validate signature
        var sinv = s.invm(this.n);
        var u1 = sinv.mul(msg).umod(this.n);
        var u2 = sinv.mul(r).umod(this.n);

        if (!this.curve._maxwellTrick) {
          var p = this.g.mulAdd(u1, key.getPublic(), u2);
          if (p.isInfinity())
            return false;

          return p.getX().umod(this.n).cmp(r) === 0;
        }

        // NOTE: Greg Maxwell's trick, inspired by:
        // https://git.io/vad3K

        var p = this.g.jmulAdd(u1, key.getPublic(), u2);
        if (p.isInfinity())
          return false;

        // Compare `p.x` of Jacobian point with `r`,
        // this will do `p.x == r * p.z^2` instead of multiplying `p.x` by the
        // inverse of `p.z^2`
        return p.eqXToP(r);
      };

      EC.prototype.recoverPubKey = function (msg, signature, j, enc) {
        assert((3 & j) === j, 'The recovery param is more than two bits');
        signature = new Signature(signature, enc);

        var n = this.n;
        var e = new BN(msg);
        var r = signature.r;
        var s = signature.s;

        // A set LSB signifies that the y-coordinate is odd
        var isYOdd = j & 1;
        var isSecondKey = j >> 1;
        if (r.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey)
          throw new Error('Unable to find sencond key candinate');

        // 1.1. Let x = r + jn.
        if (isSecondKey)
          r = this.curve.pointFromX(r.add(this.curve.n), isYOdd);
        else
          r = this.curve.pointFromX(r, isYOdd);

        var rInv = signature.r.invm(n);
        var s1 = n.sub(e).mul(rInv).umod(n);
        var s2 = s.mul(rInv).umod(n);

        // 1.6.1 Compute Q = r^-1 (sR -  eG)
        //               Q = r^-1 (sR + -eG)
        return this.g.mulAdd(s1, r, s2);
      };

      EC.prototype.getKeyRecoveryParam = function (e, signature, Q, enc) {
        signature = new Signature(signature, enc);
        if (signature.recoveryParam !== null)
          return signature.recoveryParam;

        for (var i = 0; i < 4; i++) {
          var Qprime;
          try {
            Qprime = this.recoverPubKey(e, signature, i);
          } catch (e) {
            continue;
          }

          if (Qprime.eq(Q))
            return i;
        }
        throw new Error('Unable to find valid recovery factor');
      };


      /***/
    }),

/***/ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/elliptic/lib/elliptic/ec/key.js":
/*!**************************************************************!*\
  !*** (webpack)/node_modules/elliptic/lib/elliptic/ec/key.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

      "use strict";


      var BN = __webpack_require__(/*! bn.js */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/bn.js/lib/bn.js");
      var elliptic = __webpack_require__(/*! ../../elliptic */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/elliptic/lib/elliptic.js");
      var utils = elliptic.utils;
      var assert = utils.assert;

      function KeyPair(ec, options) {
        this.ec = ec;
        this.priv = null;
        this.pub = null;

        // KeyPair(ec, { priv: ..., pub: ... })
        if (options.priv)
          this._importPrivate(options.priv, options.privEnc);
        if (options.pub)
          this._importPublic(options.pub, options.pubEnc);
      }
      module.exports = KeyPair;

      KeyPair.fromPublic = function fromPublic(ec, pub, enc) {
        if (pub instanceof KeyPair)
          return pub;

        return new KeyPair(ec, {
          pub: pub,
          pubEnc: enc
        });
      };

      KeyPair.fromPrivate = function fromPrivate(ec, priv, enc) {
        if (priv instanceof KeyPair)
          return priv;

        return new KeyPair(ec, {
          priv: priv,
          privEnc: enc
        });
      };

      KeyPair.prototype.validate = function validate() {
        var pub = this.getPublic();

        if (pub.isInfinity())
          return { result: false, reason: 'Invalid public key' };
        if (!pub.validate())
          return { result: false, reason: 'Public key is not a point' };
        if (!pub.mul(this.ec.curve.n).isInfinity())
          return { result: false, reason: 'Public key * N != O' };

        return { result: true, reason: null };
      };

      KeyPair.prototype.getPublic = function getPublic(compact, enc) {
        // compact is optional argument
        if (typeof compact === 'string') {
          enc = compact;
          compact = null;
        }

        if (!this.pub)
          this.pub = this.ec.g.mul(this.priv);

        if (!enc)
          return this.pub;

        return this.pub.encode(enc, compact);
      };

      KeyPair.prototype.getPrivate = function getPrivate(enc) {
        if (enc === 'hex')
          return this.priv.toString(16, 2);
        else
          return this.priv;
      };

      KeyPair.prototype._importPrivate = function _importPrivate(key, enc) {
        this.priv = new BN(key, enc || 16);

        // Ensure that the priv won't be bigger than n, otherwise we may fail
        // in fixed multiplication method
        this.priv = this.priv.umod(this.ec.curve.n);
      };

      KeyPair.prototype._importPublic = function _importPublic(key, enc) {
        if (key.x || key.y) {
          // Montgomery points only have an `x` coordinate.
          // Weierstrass/Edwards points on the other hand have both `x` and
          // `y` coordinates.
          if (this.ec.curve.type === 'mont') {
            assert(key.x, 'Need x coordinate');
          } else if (this.ec.curve.type === 'short' ||
            this.ec.curve.type === 'edwards') {
            assert(key.x && key.y, 'Need both x and y coordinate');
          }
          this.pub = this.ec.curve.point(key.x, key.y);
          return;
        }
        this.pub = this.ec.curve.decodePoint(key, enc);
      };

      // ECDH
      KeyPair.prototype.derive = function derive(pub) {
        return pub.mul(this.priv).getX();
      };

      // ECDSA
      KeyPair.prototype.sign = function sign(msg, enc, options) {
        return this.ec.sign(msg, this, enc, options);
      };

      KeyPair.prototype.verify = function verify(msg, signature) {
        return this.ec.verify(msg, signature, this);
      };

      KeyPair.prototype.inspect = function inspect() {
        return '<Key priv: ' + (this.priv && this.priv.toString(16, 2)) +
          ' pub: ' + (this.pub && this.pub.inspect()) + ' >';
      };


      /***/
    }),

/***/ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/elliptic/lib/elliptic/ec/signature.js":
/*!********************************************************************!*\
  !*** (webpack)/node_modules/elliptic/lib/elliptic/ec/signature.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

      "use strict";


      var BN = __webpack_require__(/*! bn.js */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/bn.js/lib/bn.js");

      var elliptic = __webpack_require__(/*! ../../elliptic */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/elliptic/lib/elliptic.js");
      var utils = elliptic.utils;
      var assert = utils.assert;

      function Signature(options, enc) {
        if (options instanceof Signature)
          return options;

        if (this._importDER(options, enc))
          return;

        assert(options.r && options.s, 'Signature without r or s');
        this.r = new BN(options.r, 16);
        this.s = new BN(options.s, 16);
        if (options.recoveryParam === undefined)
          this.recoveryParam = null;
        else
          this.recoveryParam = options.recoveryParam;
      }
      module.exports = Signature;

      function Position() {
        this.place = 0;
      }

      function getLength(buf, p) {
        var initial = buf[p.place++];
        if (!(initial & 0x80)) {
          return initial;
        }
        var octetLen = initial & 0xf;
        var val = 0;
        for (var i = 0, off = p.place; i < octetLen; i++ , off++) {
          val <<= 8;
          val |= buf[off];
        }
        p.place = off;
        return val;
      }

      function rmPadding(buf) {
        var i = 0;
        var len = buf.length - 1;
        while (!buf[i] && !(buf[i + 1] & 0x80) && i < len) {
          i++;
        }
        if (i === 0) {
          return buf;
        }
        return buf.slice(i);
      }

      Signature.prototype._importDER = function _importDER(data, enc) {
        data = utils.toArray(data, enc);
        var p = new Position();
        if (data[p.place++] !== 0x30) {
          return false;
        }
        var len = getLength(data, p);
        if ((len + p.place) !== data.length) {
          return false;
        }
        if (data[p.place++] !== 0x02) {
          return false;
        }
        var rlen = getLength(data, p);
        var r = data.slice(p.place, rlen + p.place);
        p.place += rlen;
        if (data[p.place++] !== 0x02) {
          return false;
        }
        var slen = getLength(data, p);
        if (data.length !== slen + p.place) {
          return false;
        }
        var s = data.slice(p.place, slen + p.place);
        if (r[0] === 0 && (r[1] & 0x80)) {
          r = r.slice(1);
        }
        if (s[0] === 0 && (s[1] & 0x80)) {
          s = s.slice(1);
        }

        this.r = new BN(r);
        this.s = new BN(s);
        this.recoveryParam = null;

        return true;
      };

      function constructLength(arr, len) {
        if (len < 0x80) {
          arr.push(len);
          return;
        }
        var octets = 1 + (Math.log(len) / Math.LN2 >>> 3);
        arr.push(octets | 0x80);
        while (--octets) {
          arr.push((len >>> (octets << 3)) & 0xff);
        }
        arr.push(len);
      }

      Signature.prototype.toDER = function toDER(enc) {
        var r = this.r.toArray();
        var s = this.s.toArray();

        // Pad values
        if (r[0] & 0x80)
          r = [0].concat(r);
        // Pad values
        if (s[0] & 0x80)
          s = [0].concat(s);

        r = rmPadding(r);
        s = rmPadding(s);

        while (!s[0] && !(s[1] & 0x80)) {
          s = s.slice(1);
        }
        var arr = [0x02];
        constructLength(arr, r.length);
        arr = arr.concat(r);
        arr.push(0x02);
        constructLength(arr, s.length);
        var backHalf = arr.concat(s);
        var res = [0x30];
        constructLength(res, backHalf.length);
        res = res.concat(backHalf);
        return utils.encode(res, enc);
      };


      /***/
    }),

/***/ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/elliptic/lib/elliptic/eddsa/index.js":
/*!*******************************************************************!*\
  !*** (webpack)/node_modules/elliptic/lib/elliptic/eddsa/index.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

      "use strict";


      var hash = __webpack_require__(/*! hash.js */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/hash.js/lib/hash.js");
      var elliptic = __webpack_require__(/*! ../../elliptic */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/elliptic/lib/elliptic.js");
      var utils = elliptic.utils;
      var assert = utils.assert;
      var parseBytes = utils.parseBytes;
      var KeyPair = __webpack_require__(/*! ./key */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/elliptic/lib/elliptic/eddsa/key.js");
      var Signature = __webpack_require__(/*! ./signature */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/elliptic/lib/elliptic/eddsa/signature.js");

      function EDDSA(curve) {
        assert(curve === 'ed25519', 'only tested with ed25519 so far');

        if (!(this instanceof EDDSA))
          return new EDDSA(curve);

        var curve = elliptic.curves[curve].curve;
        this.curve = curve;
        this.g = curve.g;
        this.g.precompute(curve.n.bitLength() + 1);

        this.pointClass = curve.point().constructor;
        this.encodingLength = Math.ceil(curve.n.bitLength() / 8);
        this.hash = hash.sha512;
      }

      module.exports = EDDSA;

      /**
      * @param {Array|String} message - message bytes
      * @param {Array|String|KeyPair} secret - secret bytes or a keypair
      * @returns {Signature} - signature
      */
      EDDSA.prototype.sign = function sign(message, secret) {
        message = parseBytes(message);
        var key = this.keyFromSecret(secret);
        var r = this.hashInt(key.messagePrefix(), message);
        var R = this.g.mul(r);
        var Rencoded = this.encodePoint(R);
        var s_ = this.hashInt(Rencoded, key.pubBytes(), message)
          .mul(key.priv());
        var S = r.add(s_).umod(this.curve.n);
        return this.makeSignature({ R: R, S: S, Rencoded: Rencoded });
      };

      /**
      * @param {Array} message - message bytes
      * @param {Array|String|Signature} sig - sig bytes
      * @param {Array|String|Point|KeyPair} pub - public key
      * @returns {Boolean} - true if public key matches sig of message
      */
      EDDSA.prototype.verify = function verify(message, sig, pub) {
        message = parseBytes(message);
        sig = this.makeSignature(sig);
        var key = this.keyFromPublic(pub);
        var h = this.hashInt(sig.Rencoded(), key.pubBytes(), message);
        var SG = this.g.mul(sig.S());
        var RplusAh = sig.R().add(key.pub().mul(h));
        return RplusAh.eq(SG);
      };

      EDDSA.prototype.hashInt = function hashInt() {
        var hash = this.hash();
        for (var i = 0; i < arguments.length; i++)
          hash.update(arguments[i]);
        return utils.intFromLE(hash.digest()).umod(this.curve.n);
      };

      EDDSA.prototype.keyFromPublic = function keyFromPublic(pub) {
        return KeyPair.fromPublic(this, pub);
      };

      EDDSA.prototype.keyFromSecret = function keyFromSecret(secret) {
        return KeyPair.fromSecret(this, secret);
      };

      EDDSA.prototype.makeSignature = function makeSignature(sig) {
        if (sig instanceof Signature)
          return sig;
        return new Signature(this, sig);
      };

      /**
      * * https://tools.ietf.org/html/draft-josefsson-eddsa-ed25519-03#section-5.2
      *
      * EDDSA defines methods for encoding and decoding points and integers. These are
      * helper convenience methods, that pass along to utility functions implied
      * parameters.
      *
      */
      EDDSA.prototype.encodePoint = function encodePoint(point) {
        var enc = point.getY().toArray('le', this.encodingLength);
        enc[this.encodingLength - 1] |= point.getX().isOdd() ? 0x80 : 0;
        return enc;
      };

      EDDSA.prototype.decodePoint = function decodePoint(bytes) {
        bytes = utils.parseBytes(bytes);

        var lastIx = bytes.length - 1;
        var normed = bytes.slice(0, lastIx).concat(bytes[lastIx] & ~0x80);
        var xIsOdd = (bytes[lastIx] & 0x80) !== 0;

        var y = utils.intFromLE(normed);
        return this.curve.pointFromY(y, xIsOdd);
      };

      EDDSA.prototype.encodeInt = function encodeInt(num) {
        return num.toArray('le', this.encodingLength);
      };

      EDDSA.prototype.decodeInt = function decodeInt(bytes) {
        return utils.intFromLE(bytes);
      };

      EDDSA.prototype.isPoint = function isPoint(val) {
        return val instanceof this.pointClass;
      };


      /***/
    }),

/***/ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/elliptic/lib/elliptic/eddsa/key.js":
/*!*****************************************************************!*\
  !*** (webpack)/node_modules/elliptic/lib/elliptic/eddsa/key.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

      "use strict";


      var elliptic = __webpack_require__(/*! ../../elliptic */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/elliptic/lib/elliptic.js");
      var utils = elliptic.utils;
      var assert = utils.assert;
      var parseBytes = utils.parseBytes;
      var cachedProperty = utils.cachedProperty;

      /**
      * @param {EDDSA} eddsa - instance
      * @param {Object} params - public/private key parameters
      *
      * @param {Array<Byte>} [params.secret] - secret seed bytes
      * @param {Point} [params.pub] - public key point (aka `A` in eddsa terms)
      * @param {Array<Byte>} [params.pub] - public key point encoded as bytes
      *
      */
      function KeyPair(eddsa, params) {
        this.eddsa = eddsa;
        this._secret = parseBytes(params.secret);
        if (eddsa.isPoint(params.pub))
          this._pub = params.pub;
        else
          this._pubBytes = parseBytes(params.pub);
      }

      KeyPair.fromPublic = function fromPublic(eddsa, pub) {
        if (pub instanceof KeyPair)
          return pub;
        return new KeyPair(eddsa, { pub: pub });
      };

      KeyPair.fromSecret = function fromSecret(eddsa, secret) {
        if (secret instanceof KeyPair)
          return secret;
        return new KeyPair(eddsa, { secret: secret });
      };

      KeyPair.prototype.secret = function secret() {
        return this._secret;
      };

      cachedProperty(KeyPair, 'pubBytes', function pubBytes() {
        return this.eddsa.encodePoint(this.pub());
      });

      cachedProperty(KeyPair, 'pub', function pub() {
        if (this._pubBytes)
          return this.eddsa.decodePoint(this._pubBytes);
        return this.eddsa.g.mul(this.priv());
      });

      cachedProperty(KeyPair, 'privBytes', function privBytes() {
        var eddsa = this.eddsa;
        var hash = this.hash();
        var lastIx = eddsa.encodingLength - 1;

        var a = hash.slice(0, eddsa.encodingLength);
        a[0] &= 248;
        a[lastIx] &= 127;
        a[lastIx] |= 64;

        return a;
      });

      cachedProperty(KeyPair, 'priv', function priv() {
        return this.eddsa.decodeInt(this.privBytes());
      });

      cachedProperty(KeyPair, 'hash', function hash() {
        return this.eddsa.hash().update(this.secret()).digest();
      });

      cachedProperty(KeyPair, 'messagePrefix', function messagePrefix() {
        return this.hash().slice(this.eddsa.encodingLength);
      });

      KeyPair.prototype.sign = function sign(message) {
        assert(this._secret, 'KeyPair can only verify');
        return this.eddsa.sign(message, this);
      };

      KeyPair.prototype.verify = function verify(message, sig) {
        return this.eddsa.verify(message, sig, this);
      };

      KeyPair.prototype.getSecret = function getSecret(enc) {
        assert(this._secret, 'KeyPair is public only');
        return utils.encode(this.secret(), enc);
      };

      KeyPair.prototype.getPublic = function getPublic(enc) {
        return utils.encode(this.pubBytes(), enc);
      };

      module.exports = KeyPair;


      /***/
    }),

/***/ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/elliptic/lib/elliptic/eddsa/signature.js":
/*!***********************************************************************!*\
  !*** (webpack)/node_modules/elliptic/lib/elliptic/eddsa/signature.js ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

      "use strict";


      var BN = __webpack_require__(/*! bn.js */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/bn.js/lib/bn.js");
      var elliptic = __webpack_require__(/*! ../../elliptic */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/elliptic/lib/elliptic.js");
      var utils = elliptic.utils;
      var assert = utils.assert;
      var cachedProperty = utils.cachedProperty;
      var parseBytes = utils.parseBytes;

      /**
      * @param {EDDSA} eddsa - eddsa instance
      * @param {Array<Bytes>|Object} sig -
      * @param {Array<Bytes>|Point} [sig.R] - R point as Point or bytes
      * @param {Array<Bytes>|bn} [sig.S] - S scalar as bn or bytes
      * @param {Array<Bytes>} [sig.Rencoded] - R point encoded
      * @param {Array<Bytes>} [sig.Sencoded] - S scalar encoded
      */
      function Signature(eddsa, sig) {
        this.eddsa = eddsa;

        if (typeof sig !== 'object')
          sig = parseBytes(sig);

        if (Array.isArray(sig)) {
          sig = {
            R: sig.slice(0, eddsa.encodingLength),
            S: sig.slice(eddsa.encodingLength)
          };
        }

        assert(sig.R && sig.S, 'Signature without R or S');

        if (eddsa.isPoint(sig.R))
          this._R = sig.R;
        if (sig.S instanceof BN)
          this._S = sig.S;

        this._Rencoded = Array.isArray(sig.R) ? sig.R : sig.Rencoded;
        this._Sencoded = Array.isArray(sig.S) ? sig.S : sig.Sencoded;
      }

      cachedProperty(Signature, 'S', function S() {
        return this.eddsa.decodeInt(this.Sencoded());
      });

      cachedProperty(Signature, 'R', function R() {
        return this.eddsa.decodePoint(this.Rencoded());
      });

      cachedProperty(Signature, 'Rencoded', function Rencoded() {
        return this.eddsa.encodePoint(this.R());
      });

      cachedProperty(Signature, 'Sencoded', function Sencoded() {
        return this.eddsa.encodeInt(this.S());
      });

      Signature.prototype.toBytes = function toBytes() {
        return this.Rencoded().concat(this.Sencoded());
      };

      Signature.prototype.toHex = function toHex() {
        return utils.encode(this.toBytes(), 'hex').toUpperCase();
      };

      module.exports = Signature;


      /***/
    }),

/***/ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/elliptic/lib/elliptic/precomputed/secp256k1.js":
/*!*****************************************************************************!*\
  !*** (webpack)/node_modules/elliptic/lib/elliptic/precomputed/secp256k1.js ***!
  \*****************************************************************************/
/*! no static exports found */
/***/ (function (module, exports) {

      module.exports = {
        doubles: {
          step: 4,
          points: [
            [
              'e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a',
              'f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821'
            ],
            [
              '8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508',
              '11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf'
            ],
            [
              '175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739',
              'd3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695'
            ],
            [
              '363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640',
              '4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9'
            ],
            [
              '8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c',
              '4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36'
            ],
            [
              '723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda',
              '96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f'
            ],
            [
              'eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa',
              '5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999'
            ],
            [
              '100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0',
              'cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09'
            ],
            [
              'e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d',
              '9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d'
            ],
            [
              'feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d',
              'e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088'
            ],
            [
              'da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1',
              '9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d'
            ],
            [
              '53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0',
              '5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8'
            ],
            [
              '8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047',
              '10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a'
            ],
            [
              '385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862',
              '283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453'
            ],
            [
              '6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7',
              '7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160'
            ],
            [
              '3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd',
              '56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0'
            ],
            [
              '85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83',
              '7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6'
            ],
            [
              '948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a',
              '53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589'
            ],
            [
              '6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8',
              'bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17'
            ],
            [
              'e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d',
              '4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda'
            ],
            [
              'e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725',
              '7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd'
            ],
            [
              '213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754',
              '4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2'
            ],
            [
              '4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c',
              '17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6'
            ],
            [
              'fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6',
              '6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f'
            ],
            [
              '76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39',
              'c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01'
            ],
            [
              'c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891',
              '893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3'
            ],
            [
              'd895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b',
              'febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f'
            ],
            [
              'b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03',
              '2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7'
            ],
            [
              'e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d',
              'eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78'
            ],
            [
              'a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070',
              '7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1'
            ],
            [
              '90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4',
              'e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150'
            ],
            [
              '8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da',
              '662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82'
            ],
            [
              'e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11',
              '1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc'
            ],
            [
              '8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e',
              'efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b'
            ],
            [
              'e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41',
              '2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51'
            ],
            [
              'b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef',
              '67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45'
            ],
            [
              'd68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8',
              'db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120'
            ],
            [
              '324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d',
              '648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84'
            ],
            [
              '4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96',
              '35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d'
            ],
            [
              '9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd',
              'ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d'
            ],
            [
              '6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5',
              '9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8'
            ],
            [
              'a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266',
              '40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8'
            ],
            [
              '7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71',
              '34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac'
            ],
            [
              '928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac',
              'c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f'
            ],
            [
              '85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751',
              '1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962'
            ],
            [
              'ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e',
              '493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907'
            ],
            [
              '827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241',
              'c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec'
            ],
            [
              'eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3',
              'be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d'
            ],
            [
              'e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f',
              '4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414'
            ],
            [
              '1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19',
              'aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd'
            ],
            [
              '146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be',
              'b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0'
            ],
            [
              'fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9',
              '6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811'
            ],
            [
              'da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2',
              '8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1'
            ],
            [
              'a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13',
              '7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c'
            ],
            [
              '174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c',
              'ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73'
            ],
            [
              '959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba',
              '2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd'
            ],
            [
              'd2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151',
              'e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405'
            ],
            [
              '64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073',
              'd99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589'
            ],
            [
              '8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458',
              '38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e'
            ],
            [
              '13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b',
              '69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27'
            ],
            [
              'bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366',
              'd3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1'
            ],
            [
              '8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa',
              '40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482'
            ],
            [
              '8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0',
              '620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945'
            ],
            [
              'dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787',
              '7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573'
            ],
            [
              'f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e',
              'ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82'
            ]
          ]
        },
        naf: {
          wnd: 7,
          points: [
            [
              'f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9',
              '388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672'
            ],
            [
              '2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4',
              'd8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6'
            ],
            [
              '5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc',
              '6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da'
            ],
            [
              'acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe',
              'cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37'
            ],
            [
              '774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb',
              'd984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b'
            ],
            [
              'f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8',
              'ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81'
            ],
            [
              'd7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e',
              '581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58'
            ],
            [
              'defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34',
              '4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77'
            ],
            [
              '2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c',
              '85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a'
            ],
            [
              '352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5',
              '321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c'
            ],
            [
              '2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f',
              '2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67'
            ],
            [
              '9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714',
              '73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402'
            ],
            [
              'daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729',
              'a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55'
            ],
            [
              'c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db',
              '2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482'
            ],
            [
              '6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4',
              'e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82'
            ],
            [
              '1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5',
              'b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396'
            ],
            [
              '605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479',
              '2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49'
            ],
            [
              '62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d',
              '80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf'
            ],
            [
              '80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f',
              '1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a'
            ],
            [
              '7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb',
              'd0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7'
            ],
            [
              'd528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9',
              'eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933'
            ],
            [
              '49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963',
              '758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a'
            ],
            [
              '77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74',
              '958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6'
            ],
            [
              'f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530',
              'e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37'
            ],
            [
              '463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b',
              '5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e'
            ],
            [
              'f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247',
              'cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6'
            ],
            [
              'caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1',
              'cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476'
            ],
            [
              '2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120',
              '4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40'
            ],
            [
              '7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435',
              '91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61'
            ],
            [
              '754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18',
              '673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683'
            ],
            [
              'e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8',
              '59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5'
            ],
            [
              '186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb',
              '3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b'
            ],
            [
              'df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f',
              '55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417'
            ],
            [
              '5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143',
              'efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868'
            ],
            [
              '290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba',
              'e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a'
            ],
            [
              'af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45',
              'f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6'
            ],
            [
              '766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a',
              '744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996'
            ],
            [
              '59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e',
              'c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e'
            ],
            [
              'f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8',
              'e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d'
            ],
            [
              '7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c',
              '30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2'
            ],
            [
              '948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519',
              'e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e'
            ],
            [
              '7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab',
              '100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437'
            ],
            [
              '3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca',
              'ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311'
            ],
            [
              'd3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf',
              '8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4'
            ],
            [
              '1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610',
              '68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575'
            ],
            [
              '733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4',
              'f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d'
            ],
            [
              '15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c',
              'd56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d'
            ],
            [
              'a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940',
              'edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629'
            ],
            [
              'e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980',
              'a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06'
            ],
            [
              '311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3',
              '66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374'
            ],
            [
              '34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf',
              '9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee'
            ],
            [
              'f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63',
              '4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1'
            ],
            [
              'd7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448',
              'fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b'
            ],
            [
              '32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf',
              '5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661'
            ],
            [
              '7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5',
              '8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6'
            ],
            [
              'ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6',
              '8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e'
            ],
            [
              '16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5',
              '5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d'
            ],
            [
              'eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99',
              'f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc'
            ],
            [
              '78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51',
              'f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4'
            ],
            [
              '494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5',
              '42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c'
            ],
            [
              'a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5',
              '204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b'
            ],
            [
              'c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997',
              '4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913'
            ],
            [
              '841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881',
              '73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154'
            ],
            [
              '5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5',
              '39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865'
            ],
            [
              '36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66',
              'd2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc'
            ],
            [
              '336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726',
              'ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224'
            ],
            [
              '8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede',
              '6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e'
            ],
            [
              '1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94',
              '60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6'
            ],
            [
              '85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31',
              '3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511'
            ],
            [
              '29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51',
              'b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b'
            ],
            [
              'a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252',
              'ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2'
            ],
            [
              '4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5',
              'cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c'
            ],
            [
              'd24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b',
              '6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3'
            ],
            [
              'ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4',
              '322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d'
            ],
            [
              'af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f',
              '6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700'
            ],
            [
              'e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889',
              '2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4'
            ],
            [
              '591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246',
              'b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196'
            ],
            [
              '11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984',
              '998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4'
            ],
            [
              '3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a',
              'b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257'
            ],
            [
              'cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030',
              'bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13'
            ],
            [
              'c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197',
              '6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096'
            ],
            [
              'c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593',
              'c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38'
            ],
            [
              'a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef',
              '21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f'
            ],
            [
              '347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38',
              '60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448'
            ],
            [
              'da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a',
              '49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a'
            ],
            [
              'c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111',
              '5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4'
            ],
            [
              '4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502',
              '7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437'
            ],
            [
              '3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea',
              'be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7'
            ],
            [
              'cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26',
              '8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d'
            ],
            [
              'b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986',
              '39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a'
            ],
            [
              'd4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e',
              '62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54'
            ],
            [
              '48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4',
              '25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77'
            ],
            [
              'dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda',
              'ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517'
            ],
            [
              '6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859',
              'cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10'
            ],
            [
              'e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f',
              'f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125'
            ],
            [
              'eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c',
              '6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e'
            ],
            [
              '13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942',
              'fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1'
            ],
            [
              'ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a',
              '1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2'
            ],
            [
              'b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80',
              '5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423'
            ],
            [
              'ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d',
              '438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8'
            ],
            [
              '8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1',
              'cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758'
            ],
            [
              '52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63',
              'c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375'
            ],
            [
              'e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352',
              '6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d'
            ],
            [
              '7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193',
              'ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec'
            ],
            [
              '5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00',
              '9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0'
            ],
            [
              '32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58',
              'ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c'
            ],
            [
              'e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7',
              'd3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4'
            ],
            [
              '8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8',
              'c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f'
            ],
            [
              '4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e',
              '67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649'
            ],
            [
              '3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d',
              'cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826'
            ],
            [
              '674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b',
              '299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5'
            ],
            [
              'd32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f',
              'f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87'
            ],
            [
              '30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6',
              '462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b'
            ],
            [
              'be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297',
              '62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc'
            ],
            [
              '93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a',
              '7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c'
            ],
            [
              'b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c',
              'ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f'
            ],
            [
              'd5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52',
              '4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a'
            ],
            [
              'd3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb',
              'bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46'
            ],
            [
              '463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065',
              'bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f'
            ],
            [
              '7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917',
              '603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03'
            ],
            [
              '74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9',
              'cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08'
            ],
            [
              '30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3',
              '553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8'
            ],
            [
              '9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57',
              '712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373'
            ],
            [
              '176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66',
              'ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3'
            ],
            [
              '75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8',
              '9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8'
            ],
            [
              '809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721',
              '9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1'
            ],
            [
              '1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180',
              '4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9'
            ]
          ]
        }
      };


      /***/
    }),

/***/ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/elliptic/lib/elliptic/utils.js":
/*!*************************************************************!*\
  !*** (webpack)/node_modules/elliptic/lib/elliptic/utils.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

      "use strict";


      var utils = exports;
      var BN = __webpack_require__(/*! bn.js */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/bn.js/lib/bn.js");
      var minAssert = __webpack_require__(/*! minimalistic-assert */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/minimalistic-assert/index.js");
      var minUtils = __webpack_require__(/*! minimalistic-crypto-utils */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/minimalistic-crypto-utils/lib/utils.js");

      utils.assert = minAssert;
      utils.toArray = minUtils.toArray;
      utils.zero2 = minUtils.zero2;
      utils.toHex = minUtils.toHex;
      utils.encode = minUtils.encode;

      // Represent num in a w-NAF form
      function getNAF(num, w) {
        var naf = [];
        var ws = 1 << (w + 1);
        var k = num.clone();
        while (k.cmpn(1) >= 0) {
          var z;
          if (k.isOdd()) {
            var mod = k.andln(ws - 1);
            if (mod > (ws >> 1) - 1)
              z = (ws >> 1) - mod;
            else
              z = mod;
            k.isubn(z);
          } else {
            z = 0;
          }
          naf.push(z);

          // Optimization, shift by word if possible
          var shift = (k.cmpn(0) !== 0 && k.andln(ws - 1) === 0) ? (w + 1) : 1;
          for (var i = 1; i < shift; i++)
            naf.push(0);
          k.iushrn(shift);
        }

        return naf;
      }
      utils.getNAF = getNAF;

      // Represent k1, k2 in a Joint Sparse Form
      function getJSF(k1, k2) {
        var jsf = [
          [],
          []
        ];

        k1 = k1.clone();
        k2 = k2.clone();
        var d1 = 0;
        var d2 = 0;
        while (k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0) {

          // First phase
          var m14 = (k1.andln(3) + d1) & 3;
          var m24 = (k2.andln(3) + d2) & 3;
          if (m14 === 3)
            m14 = -1;
          if (m24 === 3)
            m24 = -1;
          var u1;
          if ((m14 & 1) === 0) {
            u1 = 0;
          } else {
            var m8 = (k1.andln(7) + d1) & 7;
            if ((m8 === 3 || m8 === 5) && m24 === 2)
              u1 = -m14;
            else
              u1 = m14;
          }
          jsf[0].push(u1);

          var u2;
          if ((m24 & 1) === 0) {
            u2 = 0;
          } else {
            var m8 = (k2.andln(7) + d2) & 7;
            if ((m8 === 3 || m8 === 5) && m14 === 2)
              u2 = -m24;
            else
              u2 = m24;
          }
          jsf[1].push(u2);

          // Second phase
          if (2 * d1 === u1 + 1)
            d1 = 1 - d1;
          if (2 * d2 === u2 + 1)
            d2 = 1 - d2;
          k1.iushrn(1);
          k2.iushrn(1);
        }

        return jsf;
      }
      utils.getJSF = getJSF;

      function cachedProperty(obj, name, computer) {
        var key = '_' + name;
        obj.prototype[name] = function cachedProperty() {
          return this[key] !== undefined ? this[key] :
            this[key] = computer.call(this);
        };
      }
      utils.cachedProperty = cachedProperty;

      function parseBytes(bytes) {
        return typeof bytes === 'string' ? utils.toArray(bytes, 'hex') :
          bytes;
      }
      utils.parseBytes = parseBytes;

      function intFromLE(bytes) {
        return new BN(bytes, 'hex', 'le');
      }
      utils.intFromLE = intFromLE;



      /***/
    }),

/***/ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/elliptic/package.json":
/*!****************************************************!*\
  !*** (webpack)/node_modules/elliptic/package.json ***!
  \****************************************************/
/*! exports provided: _from, _id, _inBundle, _integrity, _location, _phantomChildren, _requested, _requiredBy, _resolved, _shasum, _spec, _where, author, bugs, bundleDependencies, dependencies, deprecated, description, devDependencies, files, homepage, keywords, license, main, name, repository, scripts, version, default */
/***/ (function (module) {

      module.exports = { "_from": "elliptic@^6.0.0", "_id": "elliptic@6.4.1", "_inBundle": false, "_integrity": "sha512-BsXLz5sqX8OHcsh7CqBMztyXARmGQ3LWPtGjJi6DiJHq5C/qvi9P3OqgswKSDftbu8+IoI/QDTAm2fFnQ9SZSQ==", "_location": "/webpack/elliptic", "_phantomChildren": {}, "_requested": { "type": "range", "registry": true, "raw": "elliptic@^6.0.0", "name": "elliptic", "escapedName": "elliptic", "rawSpec": "^6.0.0", "saveSpec": null, "fetchSpec": "^6.0.0" }, "_requiredBy": ["/webpack/browserify-sign", "/webpack/create-ecdh"], "_resolved": "https://registry.npmjs.org/elliptic/-/elliptic-6.4.1.tgz", "_shasum": "c2d0b7776911b86722c632c3c06c60f2f819939a", "_spec": "elliptic@^6.0.0", "_where": "C:\\Users\\Administrator\\AppData\\Roaming\\npm\\node_modules\\webpack\\node_modules\\browserify-sign", "author": { "name": "Fedor Indutny", "email": "fedor@indutny.com" }, "bugs": { "url": "https://github.com/indutny/elliptic/issues" }, "bundleDependencies": false, "dependencies": { "bn.js": "^4.4.0", "brorand": "^1.0.1", "hash.js": "^1.0.0", "hmac-drbg": "^1.0.0", "inherits": "^2.0.1", "minimalistic-assert": "^1.0.0", "minimalistic-crypto-utils": "^1.0.0" }, "deprecated": false, "description": "EC cryptography", "devDependencies": { "brfs": "^1.4.3", "coveralls": "^2.11.3", "grunt": "^0.4.5", "grunt-browserify": "^5.0.0", "grunt-cli": "^1.2.0", "grunt-contrib-connect": "^1.0.0", "grunt-contrib-copy": "^1.0.0", "grunt-contrib-uglify": "^1.0.1", "grunt-mocha-istanbul": "^3.0.1", "grunt-saucelabs": "^8.6.2", "istanbul": "^0.4.2", "jscs": "^2.9.0", "jshint": "^2.6.0", "mocha": "^2.1.0" }, "files": ["lib"], "homepage": "https://github.com/indutny/elliptic", "keywords": ["EC", "Elliptic", "curve", "Cryptography"], "license": "MIT", "main": "lib/elliptic.js", "name": "elliptic", "repository": { "type": "git", "url": "git+ssh://git@github.com/indutny/elliptic.git" }, "scripts": { "jscs": "jscs benchmarks/*.js lib/*.js lib/**/*.js lib/**/**/*.js test/index.js", "jshint": "jscs benchmarks/*.js lib/*.js lib/**/*.js lib/**/**/*.js test/index.js", "lint": "npm run jscs && npm run jshint", "test": "npm run lint && npm run unit", "unit": "istanbul test _mocha --reporter=spec test/index.js", "version": "grunt dist && git add dist/" }, "version": "6.4.1" };

      /***/
    }),

/***/ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/events/events.js":
/*!***********************************************!*\
  !*** (webpack)/node_modules/events/events.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function (module, exports) {

      // Copyright Joyent, Inc. and other Node contributors.
      //
      // Permission is hereby granted, free of charge, to any person obtaining a
      // copy of this software and associated documentation files (the
      // "Software"), to deal in the Software without restriction, including
      // without limitation the rights to use, copy, modify, merge, publish,
      // distribute, sublicense, and/or sell copies of the Software, and to permit
      // persons to whom the Software is furnished to do so, subject to the
      // following conditions:
      //
      // The above copyright notice and this permission notice shall be included
      // in all copies or substantial portions of the Software.
      //
      // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
      // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
      // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
      // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
      // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
      // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
      // USE OR OTHER DEALINGS IN THE SOFTWARE.

      function EventEmitter() {
        this._events = this._events || {};
        this._maxListeners = this._maxListeners || undefined;
      }
      module.exports = EventEmitter;

      // Backwards-compat with node 0.10.x
      EventEmitter.EventEmitter = EventEmitter;

      EventEmitter.prototype._events = undefined;
      EventEmitter.prototype._maxListeners = undefined;

      // By default EventEmitters will print a warning if more than 10 listeners are
      // added to it. This is a useful default which helps finding memory leaks.
      EventEmitter.defaultMaxListeners = 10;

      // Obviously not all Emitters should be limited to 10. This function allows
      // that to be increased. Set to zero for unlimited.
      EventEmitter.prototype.setMaxListeners = function (n) {
        if (!isNumber(n) || n < 0 || isNaN(n))
          throw TypeError('n must be a positive number');
        this._maxListeners = n;
        return this;
      };

      EventEmitter.prototype.emit = function (type) {
        var er, handler, len, args, i, listeners;

        if (!this._events)
          this._events = {};

        // If there is no 'error' event listener then throw.
        if (type === 'error') {
          if (!this._events.error ||
            (isObject(this._events.error) && !this._events.error.length)) {
            er = arguments[1];
            if (er instanceof Error) {
              throw er; // Unhandled 'error' event
            } else {
              // At least give some kind of context to the user
              var err = new Error('Uncaught, unspecified "error" event. (' + er + ')');
              err.context = er;
              throw err;
            }
          }
        }

        handler = this._events[type];

        if (isUndefined(handler))
          return false;

        if (isFunction(handler)) {
          switch (arguments.length) {
            // fast cases
            case 1:
              handler.call(this);
              break;
            case 2:
              handler.call(this, arguments[1]);
              break;
            case 3:
              handler.call(this, arguments[1], arguments[2]);
              break;
            // slower
            default:
              args = Array.prototype.slice.call(arguments, 1);
              handler.apply(this, args);
          }
        } else if (isObject(handler)) {
          args = Array.prototype.slice.call(arguments, 1);
          listeners = handler.slice();
          len = listeners.length;
          for (i = 0; i < len; i++)
            listeners[i].apply(this, args);
        }

        return true;
      };

      EventEmitter.prototype.addListener = function (type, listener) {
        var m;

        if (!isFunction(listener))
          throw TypeError('listener must be a function');

        if (!this._events)
          this._events = {};

        // To avoid recursion in the case that type === "newListener"! Before
        // adding it to the listeners, first emit "newListener".
        if (this._events.newListener)
          this.emit('newListener', type,
            isFunction(listener.listener) ?
              listener.listener : listener);

        if (!this._events[type])
          // Optimize the case of one listener. Don't need the extra array object.
          this._events[type] = listener;
        else if (isObject(this._events[type]))
          // If we've already got an array, just append.
          this._events[type].push(listener);
        else
          // Adding the second element, need to change to array.
          this._events[type] = [this._events[type], listener];

        // Check for listener leak
        if (isObject(this._events[type]) && !this._events[type].warned) {
          if (!isUndefined(this._maxListeners)) {
            m = this._maxListeners;
          } else {
            m = EventEmitter.defaultMaxListeners;
          }

          if (m && m > 0 && this._events[type].length > m) {
            this._events[type].warned = true;
            console.error('(node) warning: possible EventEmitter memory ' +
              'leak detected. %d listeners added. ' +
              'Use emitter.setMaxListeners() to increase limit.',
              this._events[type].length);
            if (typeof console.trace === 'function') {
              // not supported in IE 10
              console.trace();
            }
          }
        }

        return this;
      };

      EventEmitter.prototype.on = EventEmitter.prototype.addListener;

      EventEmitter.prototype.once = function (type, listener) {
        if (!isFunction(listener))
          throw TypeError('listener must be a function');

        var fired = false;

        function g() {
          this.removeListener(type, g);

          if (!fired) {
            fired = true;
            listener.apply(this, arguments);
          }
        }

        g.listener = listener;
        this.on(type, g);

        return this;
      };

      // emits a 'removeListener' event iff the listener was removed
      EventEmitter.prototype.removeListener = function (type, listener) {
        var list, position, length, i;

        if (!isFunction(listener))
          throw TypeError('listener must be a function');

        if (!this._events || !this._events[type])
          return this;

        list = this._events[type];
        length = list.length;
        position = -1;

        if (list === listener ||
          (isFunction(list.listener) && list.listener === listener)) {
          delete this._events[type];
          if (this._events.removeListener)
            this.emit('removeListener', type, listener);

        } else if (isObject(list)) {
          for (i = length; i-- > 0;) {
            if (list[i] === listener ||
              (list[i].listener && list[i].listener === listener)) {
              position = i;
              break;
            }
          }

          if (position < 0)
            return this;

          if (list.length === 1) {
            list.length = 0;
            delete this._events[type];
          } else {
            list.splice(position, 1);
          }

          if (this._events.removeListener)
            this.emit('removeListener', type, listener);
        }

        return this;
      };

      EventEmitter.prototype.removeAllListeners = function (type) {
        var key, listeners;

        if (!this._events)
          return this;

        // not listening for removeListener, no need to emit
        if (!this._events.removeListener) {
          if (arguments.length === 0)
            this._events = {};
          else if (this._events[type])
            delete this._events[type];
          return this;
        }

        // emit removeListener for all listeners on all events
        if (arguments.length === 0) {
          for (key in this._events) {
            if (key === 'removeListener') continue;
            this.removeAllListeners(key);
          }
          this.removeAllListeners('removeListener');
          this._events = {};
          return this;
        }

        listeners = this._events[type];

        if (isFunction(listeners)) {
          this.removeListener(type, listeners);
        } else if (listeners) {
          // LIFO order
          while (listeners.length)
            this.removeListener(type, listeners[listeners.length - 1]);
        }
        delete this._events[type];

        return this;
      };

      EventEmitter.prototype.listeners = function (type) {
        var ret;
        if (!this._events || !this._events[type])
          ret = [];
        else if (isFunction(this._events[type]))
          ret = [this._events[type]];
        else
          ret = this._events[type].slice();
        return ret;
      };

      EventEmitter.prototype.listenerCount = function (type) {
        if (this._events) {
          var evlistener = this._events[type];

          if (isFunction(evlistener))
            return 1;
          else if (evlistener)
            return evlistener.length;
        }
        return 0;
      };

      EventEmitter.listenerCount = function (emitter, type) {
        return emitter.listenerCount(type);
      };

      function isFunction(arg) {
        return typeof arg === 'function';
      }

      function isNumber(arg) {
        return typeof arg === 'number';
      }

      function isObject(arg) {
        return typeof arg === 'object' && arg !== null;
      }

      function isUndefined(arg) {
        return arg === void 0;
      }


      /***/
    }),

/***/ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/evp_bytestokey/index.js":
/*!******************************************************!*\
  !*** (webpack)/node_modules/evp_bytestokey/index.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

      var Buffer = __webpack_require__(/*! safe-buffer */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/safe-buffer/index.js").Buffer
      var MD5 = __webpack_require__(/*! md5.js */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/md5.js/index.js")

      /* eslint-disable camelcase */
      function EVP_BytesToKey(password, salt, keyBits, ivLen) {
        if (!Buffer.isBuffer(password)) password = Buffer.from(password, 'binary')
        if (salt) {
          if (!Buffer.isBuffer(salt)) salt = Buffer.from(salt, 'binary')
          if (salt.length !== 8) throw new RangeError('salt should be Buffer with 8 byte length')
        }

        var keyLen = keyBits / 8
        var key = Buffer.alloc(keyLen)
        var iv = Buffer.alloc(ivLen || 0)
        var tmp = Buffer.alloc(0)

        while (keyLen > 0 || ivLen > 0) {
          var hash = new MD5()
          hash.update(tmp)
          hash.update(password)
          if (salt) hash.update(salt)
          tmp = hash.digest()

          var used = 0

          if (keyLen > 0) {
            var keyStart = key.length - keyLen
            used = Math.min(keyLen, tmp.length)
            tmp.copy(key, keyStart, 0, used)
            keyLen -= used
          }

          if (used < tmp.length && ivLen > 0) {
            var ivStart = iv.length - ivLen
            var length = Math.min(ivLen, tmp.length - used)
            tmp.copy(iv, ivStart, used, used + length)
            ivLen -= length
          }
        }

        tmp.fill(0)
        return { key: key, iv: iv }
      }

      module.exports = EVP_BytesToKey


      /***/
    }),

/***/ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/hash-base/index.js":
/*!*************************************************!*\
  !*** (webpack)/node_modules/hash-base/index.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

      "use strict";

      var Buffer = __webpack_require__(/*! safe-buffer */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/safe-buffer/index.js").Buffer
      var Transform = __webpack_require__(/*! stream */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/stream-browserify/index.js").Transform
      var inherits = __webpack_require__(/*! inherits */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/inherits/inherits_browser.js")

      function throwIfNotStringOrBuffer(val, prefix) {
        if (!Buffer.isBuffer(val) && typeof val !== 'string') {
          throw new TypeError(prefix + ' must be a string or a buffer')
        }
      }

      function HashBase(blockSize) {
        Transform.call(this)

        this._block = Buffer.allocUnsafe(blockSize)
        this._blockSize = blockSize
        this._blockOffset = 0
        this._length = [0, 0, 0, 0]

        this._finalized = false
      }

      inherits(HashBase, Transform)

      HashBase.prototype._transform = function (chunk, encoding, callback) {
        var error = null
        try {
          this.update(chunk, encoding)
        } catch (err) {
          error = err
        }

        callback(error)
      }

      HashBase.prototype._flush = function (callback) {
        var error = null
        try {
          this.push(this.digest())
        } catch (err) {
          error = err
        }

        callback(error)
      }

      HashBase.prototype.update = function (data, encoding) {
        throwIfNotStringOrBuffer(data, 'Data')
        if (this._finalized) throw new Error('Digest already called')
        if (!Buffer.isBuffer(data)) data = Buffer.from(data, encoding)

        // consume data
        var block = this._block
        var offset = 0
        while (this._blockOffset + data.length - offset >= this._blockSize) {
          for (var i = this._blockOffset; i < this._blockSize;) block[i++] = data[offset++]
          this._update()
          this._blockOffset = 0
        }
        while (offset < data.length) block[this._blockOffset++] = data[offset++]

        // update length
        for (var j = 0, carry = data.length * 8; carry > 0; ++j) {
          this._length[j] += carry
          carry = (this._length[j] / 0x0100000000) | 0
          if (carry > 0) this._length[j] -= 0x0100000000 * carry
        }

        return this
      }

      HashBase.prototype._update = function () {
        throw new Error('_update is not implemented')
      }

      HashBase.prototype.digest = function (encoding) {
        if (this._finalized) throw new Error('Digest already called')
        this._finalized = true

        var digest = this._digest()
        if (encoding !== undefined) digest = digest.toString(encoding)

        // reset state
        this._block.fill(0)
        this._blockOffset = 0
        for (var i = 0; i < 4; ++i) this._length[i] = 0

        return digest
      }

      HashBase.prototype._digest = function () {
        throw new Error('_digest is not implemented')
      }

      module.exports = HashBase


      /***/
    }),

/***/ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/hash.js/lib/hash.js":
/*!**************************************************!*\
  !*** (webpack)/node_modules/hash.js/lib/hash.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

      var hash = exports;

      hash.utils = __webpack_require__(/*! ./hash/utils */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/hash.js/lib/hash/utils.js");
      hash.common = __webpack_require__(/*! ./hash/common */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/hash.js/lib/hash/common.js");
      hash.sha = __webpack_require__(/*! ./hash/sha */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/hash.js/lib/hash/sha.js");
      hash.ripemd = __webpack_require__(/*! ./hash/ripemd */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/hash.js/lib/hash/ripemd.js");
      hash.hmac = __webpack_require__(/*! ./hash/hmac */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/hash.js/lib/hash/hmac.js");

      // Proxy hash functions to the main object
      hash.sha1 = hash.sha.sha1;
      hash.sha256 = hash.sha.sha256;
      hash.sha224 = hash.sha.sha224;
      hash.sha384 = hash.sha.sha384;
      hash.sha512 = hash.sha.sha512;
      hash.ripemd160 = hash.ripemd.ripemd160;


      /***/
    }),

/***/ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/hash.js/lib/hash/common.js":
/*!*********************************************************!*\
  !*** (webpack)/node_modules/hash.js/lib/hash/common.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

      "use strict";


      var utils = __webpack_require__(/*! ./utils */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/hash.js/lib/hash/utils.js");
      var assert = __webpack_require__(/*! minimalistic-assert */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/minimalistic-assert/index.js");

      function BlockHash() {
        this.pending = null;
        this.pendingTotal = 0;
        this.blockSize = this.constructor.blockSize;
        this.outSize = this.constructor.outSize;
        this.hmacStrength = this.constructor.hmacStrength;
        this.padLength = this.constructor.padLength / 8;
        this.endian = 'big';

        this._delta8 = this.blockSize / 8;
        this._delta32 = this.blockSize / 32;
      }
      exports.BlockHash = BlockHash;

      BlockHash.prototype.update = function update(msg, enc) {
        // Convert message to array, pad it, and join into 32bit blocks
        msg = utils.toArray(msg, enc);
        if (!this.pending)
          this.pending = msg;
        else
          this.pending = this.pending.concat(msg);
        this.pendingTotal += msg.length;

        // Enough data, try updating
        if (this.pending.length >= this._delta8) {
          msg = this.pending;

          // Process pending data in blocks
          var r = msg.length % this._delta8;
          this.pending = msg.slice(msg.length - r, msg.length);
          if (this.pending.length === 0)
            this.pending = null;

          msg = utils.join32(msg, 0, msg.length - r, this.endian);
          for (var i = 0; i < msg.length; i += this._delta32)
            this._update(msg, i, i + this._delta32);
        }

        return this;
      };

      BlockHash.prototype.digest = function digest(enc) {
        this.update(this._pad());
        assert(this.pending === null);

        return this._digest(enc);
      };

      BlockHash.prototype._pad = function pad() {
        var len = this.pendingTotal;
        var bytes = this._delta8;
        var k = bytes - ((len + this.padLength) % bytes);
        var res = new Array(k + this.padLength);
        res[0] = 0x80;
        for (var i = 1; i < k; i++)
          res[i] = 0;

        // Append length
        len <<= 3;
        if (this.endian === 'big') {
          for (var t = 8; t < this.padLength; t++)
            res[i++] = 0;

          res[i++] = 0;
          res[i++] = 0;
          res[i++] = 0;
          res[i++] = 0;
          res[i++] = (len >>> 24) & 0xff;
          res[i++] = (len >>> 16) & 0xff;
          res[i++] = (len >>> 8) & 0xff;
          res[i++] = len & 0xff;
        } else {
          res[i++] = len & 0xff;
          res[i++] = (len >>> 8) & 0xff;
          res[i++] = (len >>> 16) & 0xff;
          res[i++] = (len >>> 24) & 0xff;
          res[i++] = 0;
          res[i++] = 0;
          res[i++] = 0;
          res[i++] = 0;

          for (t = 8; t < this.padLength; t++)
            res[i++] = 0;
        }

        return res;
      };


      /***/
    }),

/***/ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/hash.js/lib/hash/hmac.js":
/*!*******************************************************!*\
  !*** (webpack)/node_modules/hash.js/lib/hash/hmac.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

      "use strict";


      var utils = __webpack_require__(/*! ./utils */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/hash.js/lib/hash/utils.js");
      var assert = __webpack_require__(/*! minimalistic-assert */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/minimalistic-assert/index.js");

      function Hmac(hash, key, enc) {
        if (!(this instanceof Hmac))
          return new Hmac(hash, key, enc);
        this.Hash = hash;
        this.blockSize = hash.blockSize / 8;
        this.outSize = hash.outSize / 8;
        this.inner = null;
        this.outer = null;

        this._init(utils.toArray(key, enc));
      }
      module.exports = Hmac;

      Hmac.prototype._init = function init(key) {
        // Shorten key, if needed
        if (key.length > this.blockSize)
          key = new this.Hash().update(key).digest();
        assert(key.length <= this.blockSize);

        // Add padding to key
        for (var i = key.length; i < this.blockSize; i++)
          key.push(0);

        for (i = 0; i < key.length; i++)
          key[i] ^= 0x36;
        this.inner = new this.Hash().update(key);

        // 0x36 ^ 0x5c = 0x6a
        for (i = 0; i < key.length; i++)
          key[i] ^= 0x6a;
        this.outer = new this.Hash().update(key);
      };

      Hmac.prototype.update = function update(msg, enc) {
        this.inner.update(msg, enc);
        return this;
      };

      Hmac.prototype.digest = function digest(enc) {
        this.outer.update(this.inner.digest());
        return this.outer.digest(enc);
      };


      /***/
    }),

/***/ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/hash.js/lib/hash/ripemd.js":
/*!*********************************************************!*\
  !*** (webpack)/node_modules/hash.js/lib/hash/ripemd.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

      "use strict";


      var utils = __webpack_require__(/*! ./utils */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/hash.js/lib/hash/utils.js");
      var common = __webpack_require__(/*! ./common */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/hash.js/lib/hash/common.js");

      var rotl32 = utils.rotl32;
      var sum32 = utils.sum32;
      var sum32_3 = utils.sum32_3;
      var sum32_4 = utils.sum32_4;
      var BlockHash = common.BlockHash;

      function RIPEMD160() {
        if (!(this instanceof RIPEMD160))
          return new RIPEMD160();

        BlockHash.call(this);

        this.h = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0];
        this.endian = 'little';
      }
      utils.inherits(RIPEMD160, BlockHash);
      exports.ripemd160 = RIPEMD160;

      RIPEMD160.blockSize = 512;
      RIPEMD160.outSize = 160;
      RIPEMD160.hmacStrength = 192;
      RIPEMD160.padLength = 64;

      RIPEMD160.prototype._update = function update(msg, start) {
        var A = this.h[0];
        var B = this.h[1];
        var C = this.h[2];
        var D = this.h[3];
        var E = this.h[4];
        var Ah = A;
        var Bh = B;
        var Ch = C;
        var Dh = D;
        var Eh = E;
        for (var j = 0; j < 80; j++) {
          var T = sum32(
            rotl32(
              sum32_4(A, f(j, B, C, D), msg[r[j] + start], K(j)),
              s[j]),
            E);
          A = E;
          E = D;
          D = rotl32(C, 10);
          C = B;
          B = T;
          T = sum32(
            rotl32(
              sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)),
              sh[j]),
            Eh);
          Ah = Eh;
          Eh = Dh;
          Dh = rotl32(Ch, 10);
          Ch = Bh;
          Bh = T;
        }
        T = sum32_3(this.h[1], C, Dh);
        this.h[1] = sum32_3(this.h[2], D, Eh);
        this.h[2] = sum32_3(this.h[3], E, Ah);
        this.h[3] = sum32_3(this.h[4], A, Bh);
        this.h[4] = sum32_3(this.h[0], B, Ch);
        this.h[0] = T;
      };

      RIPEMD160.prototype._digest = function digest(enc) {
        if (enc === 'hex')
          return utils.toHex32(this.h, 'little');
        else
          return utils.split32(this.h, 'little');
      };

      function f(j, x, y, z) {
        if (j <= 15)
          return x ^ y ^ z;
        else if (j <= 31)
          return (x & y) | ((~x) & z);
        else if (j <= 47)
          return (x | (~y)) ^ z;
        else if (j <= 63)
          return (x & z) | (y & (~z));
        else
          return x ^ (y | (~z));
      }

      function K(j) {
        if (j <= 15)
          return 0x00000000;
        else if (j <= 31)
          return 0x5a827999;
        else if (j <= 47)
          return 0x6ed9eba1;
        else if (j <= 63)
          return 0x8f1bbcdc;
        else
          return 0xa953fd4e;
      }

      function Kh(j) {
        if (j <= 15)
          return 0x50a28be6;
        else if (j <= 31)
          return 0x5c4dd124;
        else if (j <= 47)
          return 0x6d703ef3;
        else if (j <= 63)
          return 0x7a6d76e9;
        else
          return 0x00000000;
      }

      var r = [
        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
        7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,
        3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,
        1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,
        4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13
      ];

      var rh = [
        5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,
        6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,
        15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,
        8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,
        12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11
      ];

      var s = [
        11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,
        7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,
        11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,
        11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,
        9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6
      ];

      var sh = [
        8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,
        9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,
        9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,
        15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,
        8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11
      ];


      /***/
    }),

/***/ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/hash.js/lib/hash/sha.js":
/*!******************************************************!*\
  !*** (webpack)/node_modules/hash.js/lib/hash/sha.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

      "use strict";


      exports.sha1 = __webpack_require__(/*! ./sha/1 */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/hash.js/lib/hash/sha/1.js");
      exports.sha224 = __webpack_require__(/*! ./sha/224 */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/hash.js/lib/hash/sha/224.js");
      exports.sha256 = __webpack_require__(/*! ./sha/256 */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/hash.js/lib/hash/sha/256.js");
      exports.sha384 = __webpack_require__(/*! ./sha/384 */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/hash.js/lib/hash/sha/384.js");
      exports.sha512 = __webpack_require__(/*! ./sha/512 */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/hash.js/lib/hash/sha/512.js");


      /***/
    }),

/***/ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/hash.js/lib/hash/sha/1.js":
/*!********************************************************!*\
  !*** (webpack)/node_modules/hash.js/lib/hash/sha/1.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

      "use strict";


      var utils = __webpack_require__(/*! ../utils */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/hash.js/lib/hash/utils.js");
      var common = __webpack_require__(/*! ../common */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/hash.js/lib/hash/common.js");
      var shaCommon = __webpack_require__(/*! ./common */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/hash.js/lib/hash/sha/common.js");

      var rotl32 = utils.rotl32;
      var sum32 = utils.sum32;
      var sum32_5 = utils.sum32_5;
      var ft_1 = shaCommon.ft_1;
      var BlockHash = common.BlockHash;

      var sha1_K = [
        0x5A827999, 0x6ED9EBA1,
        0x8F1BBCDC, 0xCA62C1D6
      ];

      function SHA1() {
        if (!(this instanceof SHA1))
          return new SHA1();

        BlockHash.call(this);
        this.h = [
          0x67452301, 0xefcdab89, 0x98badcfe,
          0x10325476, 0xc3d2e1f0];
        this.W = new Array(80);
      }

      utils.inherits(SHA1, BlockHash);
      module.exports = SHA1;

      SHA1.blockSize = 512;
      SHA1.outSize = 160;
      SHA1.hmacStrength = 80;
      SHA1.padLength = 64;

      SHA1.prototype._update = function _update(msg, start) {
        var W = this.W;

        for (var i = 0; i < 16; i++)
          W[i] = msg[start + i];

        for (; i < W.length; i++)
          W[i] = rotl32(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);

        var a = this.h[0];
        var b = this.h[1];
        var c = this.h[2];
        var d = this.h[3];
        var e = this.h[4];

        for (i = 0; i < W.length; i++) {
          var s = ~~(i / 20);
          var t = sum32_5(rotl32(a, 5), ft_1(s, b, c, d), e, W[i], sha1_K[s]);
          e = d;
          d = c;
          c = rotl32(b, 30);
          b = a;
          a = t;
        }

        this.h[0] = sum32(this.h[0], a);
        this.h[1] = sum32(this.h[1], b);
        this.h[2] = sum32(this.h[2], c);
        this.h[3] = sum32(this.h[3], d);
        this.h[4] = sum32(this.h[4], e);
      };

      SHA1.prototype._digest = function digest(enc) {
        if (enc === 'hex')
          return utils.toHex32(this.h, 'big');
        else
          return utils.split32(this.h, 'big');
      };


      /***/
    }),

/***/ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/hash.js/lib/hash/sha/224.js":
/*!**********************************************************!*\
  !*** (webpack)/node_modules/hash.js/lib/hash/sha/224.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

      "use strict";


      var utils = __webpack_require__(/*! ../utils */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/hash.js/lib/hash/utils.js");
      var SHA256 = __webpack_require__(/*! ./256 */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/hash.js/lib/hash/sha/256.js");

      function SHA224() {
        if (!(this instanceof SHA224))
          return new SHA224();

        SHA256.call(this);
        this.h = [
          0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,
          0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4];
      }
      utils.inherits(SHA224, SHA256);
      module.exports = SHA224;

      SHA224.blockSize = 512;
      SHA224.outSize = 224;
      SHA224.hmacStrength = 192;
      SHA224.padLength = 64;

      SHA224.prototype._digest = function digest(enc) {
        // Just truncate output
        if (enc === 'hex')
          return utils.toHex32(this.h.slice(0, 7), 'big');
        else
          return utils.split32(this.h.slice(0, 7), 'big');
      };



      /***/
    }),

/***/ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/hash.js/lib/hash/sha/256.js":
/*!**********************************************************!*\
  !*** (webpack)/node_modules/hash.js/lib/hash/sha/256.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

      "use strict";


      var utils = __webpack_require__(/*! ../utils */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/hash.js/lib/hash/utils.js");
      var common = __webpack_require__(/*! ../common */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/hash.js/lib/hash/common.js");
      var shaCommon = __webpack_require__(/*! ./common */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/hash.js/lib/hash/sha/common.js");
      var assert = __webpack_require__(/*! minimalistic-assert */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/minimalistic-assert/index.js");

      var sum32 = utils.sum32;
      var sum32_4 = utils.sum32_4;
      var sum32_5 = utils.sum32_5;
      var ch32 = shaCommon.ch32;
      var maj32 = shaCommon.maj32;
      var s0_256 = shaCommon.s0_256;
      var s1_256 = shaCommon.s1_256;
      var g0_256 = shaCommon.g0_256;
      var g1_256 = shaCommon.g1_256;

      var BlockHash = common.BlockHash;

      var sha256_K = [
        0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,
        0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,
        0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,
        0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,
        0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,
        0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,
        0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,
        0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
        0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
      ];

      function SHA256() {
        if (!(this instanceof SHA256))
          return new SHA256();

        BlockHash.call(this);
        this.h = [
          0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,
          0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19
        ];
        this.k = sha256_K;
        this.W = new Array(64);
      }
      utils.inherits(SHA256, BlockHash);
      module.exports = SHA256;

      SHA256.blockSize = 512;
      SHA256.outSize = 256;
      SHA256.hmacStrength = 192;
      SHA256.padLength = 64;

      SHA256.prototype._update = function _update(msg, start) {
        var W = this.W;

        for (var i = 0; i < 16; i++)
          W[i] = msg[start + i];
        for (; i < W.length; i++)
          W[i] = sum32_4(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);

        var a = this.h[0];
        var b = this.h[1];
        var c = this.h[2];
        var d = this.h[3];
        var e = this.h[4];
        var f = this.h[5];
        var g = this.h[6];
        var h = this.h[7];

        assert(this.k.length === W.length);
        for (i = 0; i < W.length; i++) {
          var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);
          var T2 = sum32(s0_256(a), maj32(a, b, c));
          h = g;
          g = f;
          f = e;
          e = sum32(d, T1);
          d = c;
          c = b;
          b = a;
          a = sum32(T1, T2);
        }

        this.h[0] = sum32(this.h[0], a);
        this.h[1] = sum32(this.h[1], b);
        this.h[2] = sum32(this.h[2], c);
        this.h[3] = sum32(this.h[3], d);
        this.h[4] = sum32(this.h[4], e);
        this.h[5] = sum32(this.h[5], f);
        this.h[6] = sum32(this.h[6], g);
        this.h[7] = sum32(this.h[7], h);
      };

      SHA256.prototype._digest = function digest(enc) {
        if (enc === 'hex')
          return utils.toHex32(this.h, 'big');
        else
          return utils.split32(this.h, 'big');
      };


      /***/
    }),

/***/ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/hash.js/lib/hash/sha/384.js":
/*!**********************************************************!*\
  !*** (webpack)/node_modules/hash.js/lib/hash/sha/384.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

      "use strict";


      var utils = __webpack_require__(/*! ../utils */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/hash.js/lib/hash/utils.js");

      var SHA512 = __webpack_require__(/*! ./512 */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/hash.js/lib/hash/sha/512.js");

      function SHA384() {
        if (!(this instanceof SHA384))
          return new SHA384();

        SHA512.call(this);
        this.h = [
          0xcbbb9d5d, 0xc1059ed8,
          0x629a292a, 0x367cd507,
          0x9159015a, 0x3070dd17,
          0x152fecd8, 0xf70e5939,
          0x67332667, 0xffc00b31,
          0x8eb44a87, 0x68581511,
          0xdb0c2e0d, 0x64f98fa7,
          0x47b5481d, 0xbefa4fa4];
      }
      utils.inherits(SHA384, SHA512);
      module.exports = SHA384;

      SHA384.blockSize = 1024;
      SHA384.outSize = 384;
      SHA384.hmacStrength = 192;
      SHA384.padLength = 128;

      SHA384.prototype._digest = function digest(enc) {
        if (enc === 'hex')
          return utils.toHex32(this.h.slice(0, 12), 'big');
        else
          return utils.split32(this.h.slice(0, 12), 'big');
      };


      /***/
    }),

/***/ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/hash.js/lib/hash/sha/512.js":
/*!**********************************************************!*\
  !*** (webpack)/node_modules/hash.js/lib/hash/sha/512.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

      "use strict";


      var utils = __webpack_require__(/*! ../utils */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/hash.js/lib/hash/utils.js");
      var common = __webpack_require__(/*! ../common */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/hash.js/lib/hash/common.js");
      var assert = __webpack_require__(/*! minimalistic-assert */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/minimalistic-assert/index.js");

      var rotr64_hi = utils.rotr64_hi;
      var rotr64_lo = utils.rotr64_lo;
      var shr64_hi = utils.shr64_hi;
      var shr64_lo = utils.shr64_lo;
      var sum64 = utils.sum64;
      var sum64_hi = utils.sum64_hi;
      var sum64_lo = utils.sum64_lo;
      var sum64_4_hi = utils.sum64_4_hi;
      var sum64_4_lo = utils.sum64_4_lo;
      var sum64_5_hi = utils.sum64_5_hi;
      var sum64_5_lo = utils.sum64_5_lo;

      var BlockHash = common.BlockHash;

      var sha512_K = [
        0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
        0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
        0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
        0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
        0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
        0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
        0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
        0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
        0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
        0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
        0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
        0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
        0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
        0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
        0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
        0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
        0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
        0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
        0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
        0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
        0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
        0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
        0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
        0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
        0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
        0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
        0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
        0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
        0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
        0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
        0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
        0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
        0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
        0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
        0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
        0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
        0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
        0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
        0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
        0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
      ];

      function SHA512() {
        if (!(this instanceof SHA512))
          return new SHA512();

        BlockHash.call(this);
        this.h = [
          0x6a09e667, 0xf3bcc908,
          0xbb67ae85, 0x84caa73b,
          0x3c6ef372, 0xfe94f82b,
          0xa54ff53a, 0x5f1d36f1,
          0x510e527f, 0xade682d1,
          0x9b05688c, 0x2b3e6c1f,
          0x1f83d9ab, 0xfb41bd6b,
          0x5be0cd19, 0x137e2179];
        this.k = sha512_K;
        this.W = new Array(160);
      }
      utils.inherits(SHA512, BlockHash);
      module.exports = SHA512;

      SHA512.blockSize = 1024;
      SHA512.outSize = 512;
      SHA512.hmacStrength = 192;
      SHA512.padLength = 128;

      SHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {
        var W = this.W;

        // 32 x 32bit words
        for (var i = 0; i < 32; i++)
          W[i] = msg[start + i];
        for (; i < W.length; i += 2) {
          var c0_hi = g1_512_hi(W[i - 4], W[i - 3]);  // i - 2
          var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);
          var c1_hi = W[i - 14];  // i - 7
          var c1_lo = W[i - 13];
          var c2_hi = g0_512_hi(W[i - 30], W[i - 29]);  // i - 15
          var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);
          var c3_hi = W[i - 32];  // i - 16
          var c3_lo = W[i - 31];

          W[i] = sum64_4_hi(
            c0_hi, c0_lo,
            c1_hi, c1_lo,
            c2_hi, c2_lo,
            c3_hi, c3_lo);
          W[i + 1] = sum64_4_lo(
            c0_hi, c0_lo,
            c1_hi, c1_lo,
            c2_hi, c2_lo,
            c3_hi, c3_lo);
        }
      };

      SHA512.prototype._update = function _update(msg, start) {
        this._prepareBlock(msg, start);

        var W = this.W;

        var ah = this.h[0];
        var al = this.h[1];
        var bh = this.h[2];
        var bl = this.h[3];
        var ch = this.h[4];
        var cl = this.h[5];
        var dh = this.h[6];
        var dl = this.h[7];
        var eh = this.h[8];
        var el = this.h[9];
        var fh = this.h[10];
        var fl = this.h[11];
        var gh = this.h[12];
        var gl = this.h[13];
        var hh = this.h[14];
        var hl = this.h[15];

        assert(this.k.length === W.length);
        for (var i = 0; i < W.length; i += 2) {
          var c0_hi = hh;
          var c0_lo = hl;
          var c1_hi = s1_512_hi(eh, el);
          var c1_lo = s1_512_lo(eh, el);
          var c2_hi = ch64_hi(eh, el, fh, fl, gh, gl);
          var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);
          var c3_hi = this.k[i];
          var c3_lo = this.k[i + 1];
          var c4_hi = W[i];
          var c4_lo = W[i + 1];

          var T1_hi = sum64_5_hi(
            c0_hi, c0_lo,
            c1_hi, c1_lo,
            c2_hi, c2_lo,
            c3_hi, c3_lo,
            c4_hi, c4_lo);
          var T1_lo = sum64_5_lo(
            c0_hi, c0_lo,
            c1_hi, c1_lo,
            c2_hi, c2_lo,
            c3_hi, c3_lo,
            c4_hi, c4_lo);

          c0_hi = s0_512_hi(ah, al);
          c0_lo = s0_512_lo(ah, al);
          c1_hi = maj64_hi(ah, al, bh, bl, ch, cl);
          c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);

          var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);
          var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);

          hh = gh;
          hl = gl;

          gh = fh;
          gl = fl;

          fh = eh;
          fl = el;

          eh = sum64_hi(dh, dl, T1_hi, T1_lo);
          el = sum64_lo(dl, dl, T1_hi, T1_lo);

          dh = ch;
          dl = cl;

          ch = bh;
          cl = bl;

          bh = ah;
          bl = al;

          ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);
          al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);
        }

        sum64(this.h, 0, ah, al);
        sum64(this.h, 2, bh, bl);
        sum64(this.h, 4, ch, cl);
        sum64(this.h, 6, dh, dl);
        sum64(this.h, 8, eh, el);
        sum64(this.h, 10, fh, fl);
        sum64(this.h, 12, gh, gl);
        sum64(this.h, 14, hh, hl);
      };

      SHA512.prototype._digest = function digest(enc) {
        if (enc === 'hex')
          return utils.toHex32(this.h, 'big');
        else
          return utils.split32(this.h, 'big');
      };

      function ch64_hi(xh, xl, yh, yl, zh) {
        var r = (xh & yh) ^ ((~xh) & zh);
        if (r < 0)
          r += 0x100000000;
        return r;
      }

      function ch64_lo(xh, xl, yh, yl, zh, zl) {
        var r = (xl & yl) ^ ((~xl) & zl);
        if (r < 0)
          r += 0x100000000;
        return r;
      }

      function maj64_hi(xh, xl, yh, yl, zh) {
        var r = (xh & yh) ^ (xh & zh) ^ (yh & zh);
        if (r < 0)
          r += 0x100000000;
        return r;
      }

      function maj64_lo(xh, xl, yh, yl, zh, zl) {
        var r = (xl & yl) ^ (xl & zl) ^ (yl & zl);
        if (r < 0)
          r += 0x100000000;
        return r;
      }

      function s0_512_hi(xh, xl) {
        var c0_hi = rotr64_hi(xh, xl, 28);
        var c1_hi = rotr64_hi(xl, xh, 2);  // 34
        var c2_hi = rotr64_hi(xl, xh, 7);  // 39

        var r = c0_hi ^ c1_hi ^ c2_hi;
        if (r < 0)
          r += 0x100000000;
        return r;
      }

      function s0_512_lo(xh, xl) {
        var c0_lo = rotr64_lo(xh, xl, 28);
        var c1_lo = rotr64_lo(xl, xh, 2);  // 34
        var c2_lo = rotr64_lo(xl, xh, 7);  // 39

        var r = c0_lo ^ c1_lo ^ c2_lo;
        if (r < 0)
          r += 0x100000000;
        return r;
      }

      function s1_512_hi(xh, xl) {
        var c0_hi = rotr64_hi(xh, xl, 14);
        var c1_hi = rotr64_hi(xh, xl, 18);
        var c2_hi = rotr64_hi(xl, xh, 9);  // 41

        var r = c0_hi ^ c1_hi ^ c2_hi;
        if (r < 0)
          r += 0x100000000;
        return r;
      }

      function s1_512_lo(xh, xl) {
        var c0_lo = rotr64_lo(xh, xl, 14);
        var c1_lo = rotr64_lo(xh, xl, 18);
        var c2_lo = rotr64_lo(xl, xh, 9);  // 41

        var r = c0_lo ^ c1_lo ^ c2_lo;
        if (r < 0)
          r += 0x100000000;
        return r;
      }

      function g0_512_hi(xh, xl) {
        var c0_hi = rotr64_hi(xh, xl, 1);
        var c1_hi = rotr64_hi(xh, xl, 8);
        var c2_hi = shr64_hi(xh, xl, 7);

        var r = c0_hi ^ c1_hi ^ c2_hi;
        if (r < 0)
          r += 0x100000000;
        return r;
      }

      function g0_512_lo(xh, xl) {
        var c0_lo = rotr64_lo(xh, xl, 1);
        var c1_lo = rotr64_lo(xh, xl, 8);
        var c2_lo = shr64_lo(xh, xl, 7);

        var r = c0_lo ^ c1_lo ^ c2_lo;
        if (r < 0)
          r += 0x100000000;
        return r;
      }

      function g1_512_hi(xh, xl) {
        var c0_hi = rotr64_hi(xh, xl, 19);
        var c1_hi = rotr64_hi(xl, xh, 29);  // 61
        var c2_hi = shr64_hi(xh, xl, 6);

        var r = c0_hi ^ c1_hi ^ c2_hi;
        if (r < 0)
          r += 0x100000000;
        return r;
      }

      function g1_512_lo(xh, xl) {
        var c0_lo = rotr64_lo(xh, xl, 19);
        var c1_lo = rotr64_lo(xl, xh, 29);  // 61
        var c2_lo = shr64_lo(xh, xl, 6);

        var r = c0_lo ^ c1_lo ^ c2_lo;
        if (r < 0)
          r += 0x100000000;
        return r;
      }


      /***/
    }),

/***/ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/hash.js/lib/hash/sha/common.js":
/*!*************************************************************!*\
  !*** (webpack)/node_modules/hash.js/lib/hash/sha/common.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

      "use strict";


      var utils = __webpack_require__(/*! ../utils */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/hash.js/lib/hash/utils.js");
      var rotr32 = utils.rotr32;

      function ft_1(s, x, y, z) {
        if (s === 0)
          return ch32(x, y, z);
        if (s === 1 || s === 3)
          return p32(x, y, z);
        if (s === 2)
          return maj32(x, y, z);
      }
      exports.ft_1 = ft_1;

      function ch32(x, y, z) {
        return (x & y) ^ ((~x) & z);
      }
      exports.ch32 = ch32;

      function maj32(x, y, z) {
        return (x & y) ^ (x & z) ^ (y & z);
      }
      exports.maj32 = maj32;

      function p32(x, y, z) {
        return x ^ y ^ z;
      }
      exports.p32 = p32;

      function s0_256(x) {
        return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);
      }
      exports.s0_256 = s0_256;

      function s1_256(x) {
        return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);
      }
      exports.s1_256 = s1_256;

      function g0_256(x) {
        return rotr32(x, 7) ^ rotr32(x, 18) ^ (x >>> 3);
      }
      exports.g0_256 = g0_256;

      function g1_256(x) {
        return rotr32(x, 17) ^ rotr32(x, 19) ^ (x >>> 10);
      }
      exports.g1_256 = g1_256;


      /***/
    }),

/***/ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/hash.js/lib/hash/utils.js":
/*!********************************************************!*\
  !*** (webpack)/node_modules/hash.js/lib/hash/utils.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

      "use strict";


      var assert = __webpack_require__(/*! minimalistic-assert */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/minimalistic-assert/index.js");
      var inherits = __webpack_require__(/*! inherits */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/inherits/inherits_browser.js");

      exports.inherits = inherits;

      function toArray(msg, enc) {
        if (Array.isArray(msg))
          return msg.slice();
        if (!msg)
          return [];
        var res = [];
        if (typeof msg === 'string') {
          if (!enc) {
            for (var i = 0; i < msg.length; i++) {
              var c = msg.charCodeAt(i);
              var hi = c >> 8;
              var lo = c & 0xff;
              if (hi)
                res.push(hi, lo);
              else
                res.push(lo);
            }
          } else if (enc === 'hex') {
            msg = msg.replace(/[^a-z0-9]+/ig, '');
            if (msg.length % 2 !== 0)
              msg = '0' + msg;
            for (i = 0; i < msg.length; i += 2)
              res.push(parseInt(msg[i] + msg[i + 1], 16));
          }
        } else {
          for (i = 0; i < msg.length; i++)
            res[i] = msg[i] | 0;
        }
        return res;
      }
      exports.toArray = toArray;

      function toHex(msg) {
        var res = '';
        for (var i = 0; i < msg.length; i++)
          res += zero2(msg[i].toString(16));
        return res;
      }
      exports.toHex = toHex;

      function htonl(w) {
        var res = (w >>> 24) |
          ((w >>> 8) & 0xff00) |
          ((w << 8) & 0xff0000) |
          ((w & 0xff) << 24);
        return res >>> 0;
      }
      exports.htonl = htonl;

      function toHex32(msg, endian) {
        var res = '';
        for (var i = 0; i < msg.length; i++) {
          var w = msg[i];
          if (endian === 'little')
            w = htonl(w);
          res += zero8(w.toString(16));
        }
        return res;
      }
      exports.toHex32 = toHex32;

      function zero2(word) {
        if (word.length === 1)
          return '0' + word;
        else
          return word;
      }
      exports.zero2 = zero2;

      function zero8(word) {
        if (word.length === 7)
          return '0' + word;
        else if (word.length === 6)
          return '00' + word;
        else if (word.length === 5)
          return '000' + word;
        else if (word.length === 4)
          return '0000' + word;
        else if (word.length === 3)
          return '00000' + word;
        else if (word.length === 2)
          return '000000' + word;
        else if (word.length === 1)
          return '0000000' + word;
        else
          return word;
      }
      exports.zero8 = zero8;

      function join32(msg, start, end, endian) {
        var len = end - start;
        assert(len % 4 === 0);
        var res = new Array(len / 4);
        for (var i = 0, k = start; i < res.length; i++ , k += 4) {
          var w;
          if (endian === 'big')
            w = (msg[k] << 24) | (msg[k + 1] << 16) | (msg[k + 2] << 8) | msg[k + 3];
          else
            w = (msg[k + 3] << 24) | (msg[k + 2] << 16) | (msg[k + 1] << 8) | msg[k];
          res[i] = w >>> 0;
        }
        return res;
      }
      exports.join32 = join32;

      function split32(msg, endian) {
        var res = new Array(msg.length * 4);
        for (var i = 0, k = 0; i < msg.length; i++ , k += 4) {
          var m = msg[i];
          if (endian === 'big') {
            res[k] = m >>> 24;
            res[k + 1] = (m >>> 16) & 0xff;
            res[k + 2] = (m >>> 8) & 0xff;
            res[k + 3] = m & 0xff;
          } else {
            res[k + 3] = m >>> 24;
            res[k + 2] = (m >>> 16) & 0xff;
            res[k + 1] = (m >>> 8) & 0xff;
            res[k] = m & 0xff;
          }
        }
        return res;
      }
      exports.split32 = split32;

      function rotr32(w, b) {
        return (w >>> b) | (w << (32 - b));
      }
      exports.rotr32 = rotr32;

      function rotl32(w, b) {
        return (w << b) | (w >>> (32 - b));
      }
      exports.rotl32 = rotl32;

      function sum32(a, b) {
        return (a + b) >>> 0;
      }
      exports.sum32 = sum32;

      function sum32_3(a, b, c) {
        return (a + b + c) >>> 0;
      }
      exports.sum32_3 = sum32_3;

      function sum32_4(a, b, c, d) {
        return (a + b + c + d) >>> 0;
      }
      exports.sum32_4 = sum32_4;

      function sum32_5(a, b, c, d, e) {
        return (a + b + c + d + e) >>> 0;
      }
      exports.sum32_5 = sum32_5;

      function sum64(buf, pos, ah, al) {
        var bh = buf[pos];
        var bl = buf[pos + 1];

        var lo = (al + bl) >>> 0;
        var hi = (lo < al ? 1 : 0) + ah + bh;
        buf[pos] = hi >>> 0;
        buf[pos + 1] = lo;
      }
      exports.sum64 = sum64;

      function sum64_hi(ah, al, bh, bl) {
        var lo = (al + bl) >>> 0;
        var hi = (lo < al ? 1 : 0) + ah + bh;
        return hi >>> 0;
      }
      exports.sum64_hi = sum64_hi;

      function sum64_lo(ah, al, bh, bl) {
        var lo = al + bl;
        return lo >>> 0;
      }
      exports.sum64_lo = sum64_lo;

      function sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {
        var carry = 0;
        var lo = al;
        lo = (lo + bl) >>> 0;
        carry += lo < al ? 1 : 0;
        lo = (lo + cl) >>> 0;
        carry += lo < cl ? 1 : 0;
        lo = (lo + dl) >>> 0;
        carry += lo < dl ? 1 : 0;

        var hi = ah + bh + ch + dh + carry;
        return hi >>> 0;
      }
      exports.sum64_4_hi = sum64_4_hi;

      function sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {
        var lo = al + bl + cl + dl;
        return lo >>> 0;
      }
      exports.sum64_4_lo = sum64_4_lo;

      function sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
        var carry = 0;
        var lo = al;
        lo = (lo + bl) >>> 0;
        carry += lo < al ? 1 : 0;
        lo = (lo + cl) >>> 0;
        carry += lo < cl ? 1 : 0;
        lo = (lo + dl) >>> 0;
        carry += lo < dl ? 1 : 0;
        lo = (lo + el) >>> 0;
        carry += lo < el ? 1 : 0;

        var hi = ah + bh + ch + dh + eh + carry;
        return hi >>> 0;
      }
      exports.sum64_5_hi = sum64_5_hi;

      function sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
        var lo = al + bl + cl + dl + el;

        return lo >>> 0;
      }
      exports.sum64_5_lo = sum64_5_lo;

      function rotr64_hi(ah, al, num) {
        var r = (al << (32 - num)) | (ah >>> num);
        return r >>> 0;
      }
      exports.rotr64_hi = rotr64_hi;

      function rotr64_lo(ah, al, num) {
        var r = (ah << (32 - num)) | (al >>> num);
        return r >>> 0;
      }
      exports.rotr64_lo = rotr64_lo;

      function shr64_hi(ah, al, num) {
        return ah >>> num;
      }
      exports.shr64_hi = shr64_hi;

      function shr64_lo(ah, al, num) {
        var r = (ah << (32 - num)) | (al >>> num);
        return r >>> 0;
      }
      exports.shr64_lo = shr64_lo;


      /***/
    }),

/***/ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/hmac-drbg/lib/hmac-drbg.js":
/*!*********************************************************!*\
  !*** (webpack)/node_modules/hmac-drbg/lib/hmac-drbg.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

      "use strict";


      var hash = __webpack_require__(/*! hash.js */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/hash.js/lib/hash.js");
      var utils = __webpack_require__(/*! minimalistic-crypto-utils */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/minimalistic-crypto-utils/lib/utils.js");
      var assert = __webpack_require__(/*! minimalistic-assert */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/minimalistic-assert/index.js");

      function HmacDRBG(options) {
        if (!(this instanceof HmacDRBG))
          return new HmacDRBG(options);
        this.hash = options.hash;
        this.predResist = !!options.predResist;

        this.outLen = this.hash.outSize;
        this.minEntropy = options.minEntropy || this.hash.hmacStrength;

        this._reseed = null;
        this.reseedInterval = null;
        this.K = null;
        this.V = null;

        var entropy = utils.toArray(options.entropy, options.entropyEnc || 'hex');
        var nonce = utils.toArray(options.nonce, options.nonceEnc || 'hex');
        var pers = utils.toArray(options.pers, options.persEnc || 'hex');
        assert(entropy.length >= (this.minEntropy / 8),
          'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');
        this._init(entropy, nonce, pers);
      }
      module.exports = HmacDRBG;

      HmacDRBG.prototype._init = function init(entropy, nonce, pers) {
        var seed = entropy.concat(nonce).concat(pers);

        this.K = new Array(this.outLen / 8);
        this.V = new Array(this.outLen / 8);
        for (var i = 0; i < this.V.length; i++) {
          this.K[i] = 0x00;
          this.V[i] = 0x01;
        }

        this._update(seed);
        this._reseed = 1;
        this.reseedInterval = 0x1000000000000;  // 2^48
      };

      HmacDRBG.prototype._hmac = function hmac() {
        return new hash.hmac(this.hash, this.K);
      };

      HmacDRBG.prototype._update = function update(seed) {
        var kmac = this._hmac()
          .update(this.V)
          .update([0x00]);
        if (seed)
          kmac = kmac.update(seed);
        this.K = kmac.digest();
        this.V = this._hmac().update(this.V).digest();
        if (!seed)
          return;

        this.K = this._hmac()
          .update(this.V)
          .update([0x01])
          .update(seed)
          .digest();
        this.V = this._hmac().update(this.V).digest();
      };

      HmacDRBG.prototype.reseed = function reseed(entropy, entropyEnc, add, addEnc) {
        // Optional entropy enc
        if (typeof entropyEnc !== 'string') {
          addEnc = add;
          add = entropyEnc;
          entropyEnc = null;
        }

        entropy = utils.toArray(entropy, entropyEnc);
        add = utils.toArray(add, addEnc);

        assert(entropy.length >= (this.minEntropy / 8),
          'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');

        this._update(entropy.concat(add || []));
        this._reseed = 1;
      };

      HmacDRBG.prototype.generate = function generate(len, enc, add, addEnc) {
        if (this._reseed > this.reseedInterval)
          throw new Error('Reseed is required');

        // Optional encoding
        if (typeof enc !== 'string') {
          addEnc = add;
          add = enc;
          enc = null;
        }

        // Optional additional data
        if (add) {
          add = utils.toArray(add, addEnc || 'hex');
          this._update(add);
        }

        var temp = [];
        while (temp.length < len) {
          this.V = this._hmac().update(this.V).digest();
          temp = temp.concat(this.V);
        }

        var res = temp.slice(0, len);
        this._update(add);
        this._reseed++;
        return utils.encode(res, enc);
      };


      /***/
    }),

/***/ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/ieee754/index.js":
/*!***********************************************!*\
  !*** (webpack)/node_modules/ieee754/index.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function (module, exports) {

      exports.read = function (buffer, offset, isLE, mLen, nBytes) {
        var e, m
        var eLen = (nBytes * 8) - mLen - 1
        var eMax = (1 << eLen) - 1
        var eBias = eMax >> 1
        var nBits = -7
        var i = isLE ? (nBytes - 1) : 0
        var d = isLE ? -1 : 1
        var s = buffer[offset + i]

        i += d

        e = s & ((1 << (-nBits)) - 1)
        s >>= (-nBits)
        nBits += eLen
        for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) { }

        m = e & ((1 << (-nBits)) - 1)
        e >>= (-nBits)
        nBits += mLen
        for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) { }

        if (e === 0) {
          e = 1 - eBias
        } else if (e === eMax) {
          return m ? NaN : ((s ? -1 : 1) * Infinity)
        } else {
          m = m + Math.pow(2, mLen)
          e = e - eBias
        }
        return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
      }

      exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
        var e, m, c
        var eLen = (nBytes * 8) - mLen - 1
        var eMax = (1 << eLen) - 1
        var eBias = eMax >> 1
        var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
        var i = isLE ? 0 : (nBytes - 1)
        var d = isLE ? 1 : -1
        var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

        value = Math.abs(value)

        if (isNaN(value) || value === Infinity) {
          m = isNaN(value) ? 1 : 0
          e = eMax
        } else {
          e = Math.floor(Math.log(value) / Math.LN2)
          if (value * (c = Math.pow(2, -e)) < 1) {
            e--
            c *= 2
          }
          if (e + eBias >= 1) {
            value += rt / c
          } else {
            value += rt * Math.pow(2, 1 - eBias)
          }
          if (value * c >= 2) {
            e++
            c /= 2
          }

          if (e + eBias >= eMax) {
            m = 0
            e = eMax
          } else if (e + eBias >= 1) {
            m = ((value * c) - 1) * Math.pow(2, mLen)
            e = e + eBias
          } else {
            m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
            e = 0
          }
        }

        for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) { }

        e = (e << mLen) | m
        eLen += mLen
        for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) { }

        buffer[offset + i - d] |= s * 128
      }


      /***/
    }),

/***/ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/indexof/index.js":
/*!***********************************************!*\
  !*** (webpack)/node_modules/indexof/index.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function (module, exports) {


      var indexOf = [].indexOf;

      module.exports = function (arr, obj) {
        if (indexOf) return arr.indexOf(obj);
        for (var i = 0; i < arr.length; ++i) {
          if (arr[i] === obj) return i;
        }
        return -1;
      };

      /***/
    }),

/***/ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/inherits/inherits_browser.js":
/*!***********************************************************!*\
  !*** (webpack)/node_modules/inherits/inherits_browser.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function (module, exports) {

      if (typeof Object.create === 'function') {
        // implementation from standard node.js 'util' module
        module.exports = function inherits(ctor, superCtor) {
          ctor.super_ = superCtor
          ctor.prototype = Object.create(superCtor.prototype, {
            constructor: {
              value: ctor,
              enumerable: false,
              writable: true,
              configurable: true
            }
          });
        };
      } else {
        // old school shim for old browsers
        module.exports = function inherits(ctor, superCtor) {
          ctor.super_ = superCtor
          var TempCtor = function () { }
          TempCtor.prototype = superCtor.prototype
          ctor.prototype = new TempCtor()
          ctor.prototype.constructor = ctor
        }
      }


      /***/
    }),

/***/ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/isarray/index.js":
/*!***********************************************!*\
  !*** (webpack)/node_modules/isarray/index.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function (module, exports) {

      var toString = {}.toString;

      module.exports = Array.isArray || function (arr) {
        return toString.call(arr) == '[object Array]';
      };


      /***/
    }),

/***/ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/md5.js/index.js":
/*!**********************************************!*\
  !*** (webpack)/node_modules/md5.js/index.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

      "use strict";
/* WEBPACK VAR INJECTION */(function (Buffer) {
        var inherits = __webpack_require__(/*! inherits */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/inherits/inherits_browser.js")
        var HashBase = __webpack_require__(/*! hash-base */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/hash-base/index.js")

        var ARRAY16 = new Array(16)

        function MD5() {
          HashBase.call(this, 64)

          // state
          this._a = 0x67452301
          this._b = 0xefcdab89
          this._c = 0x98badcfe
          this._d = 0x10325476
        }

        inherits(MD5, HashBase)

        MD5.prototype._update = function () {
          var M = ARRAY16
          for (var i = 0; i < 16; ++i) M[i] = this._block.readInt32LE(i * 4)

          var a = this._a
          var b = this._b
          var c = this._c
          var d = this._d

          a = fnF(a, b, c, d, M[0], 0xd76aa478, 7)
          d = fnF(d, a, b, c, M[1], 0xe8c7b756, 12)
          c = fnF(c, d, a, b, M[2], 0x242070db, 17)
          b = fnF(b, c, d, a, M[3], 0xc1bdceee, 22)
          a = fnF(a, b, c, d, M[4], 0xf57c0faf, 7)
          d = fnF(d, a, b, c, M[5], 0x4787c62a, 12)
          c = fnF(c, d, a, b, M[6], 0xa8304613, 17)
          b = fnF(b, c, d, a, M[7], 0xfd469501, 22)
          a = fnF(a, b, c, d, M[8], 0x698098d8, 7)
          d = fnF(d, a, b, c, M[9], 0x8b44f7af, 12)
          c = fnF(c, d, a, b, M[10], 0xffff5bb1, 17)
          b = fnF(b, c, d, a, M[11], 0x895cd7be, 22)
          a = fnF(a, b, c, d, M[12], 0x6b901122, 7)
          d = fnF(d, a, b, c, M[13], 0xfd987193, 12)
          c = fnF(c, d, a, b, M[14], 0xa679438e, 17)
          b = fnF(b, c, d, a, M[15], 0x49b40821, 22)

          a = fnG(a, b, c, d, M[1], 0xf61e2562, 5)
          d = fnG(d, a, b, c, M[6], 0xc040b340, 9)
          c = fnG(c, d, a, b, M[11], 0x265e5a51, 14)
          b = fnG(b, c, d, a, M[0], 0xe9b6c7aa, 20)
          a = fnG(a, b, c, d, M[5], 0xd62f105d, 5)
          d = fnG(d, a, b, c, M[10], 0x02441453, 9)
          c = fnG(c, d, a, b, M[15], 0xd8a1e681, 14)
          b = fnG(b, c, d, a, M[4], 0xe7d3fbc8, 20)
          a = fnG(a, b, c, d, M[9], 0x21e1cde6, 5)
          d = fnG(d, a, b, c, M[14], 0xc33707d6, 9)
          c = fnG(c, d, a, b, M[3], 0xf4d50d87, 14)
          b = fnG(b, c, d, a, M[8], 0x455a14ed, 20)
          a = fnG(a, b, c, d, M[13], 0xa9e3e905, 5)
          d = fnG(d, a, b, c, M[2], 0xfcefa3f8, 9)
          c = fnG(c, d, a, b, M[7], 0x676f02d9, 14)
          b = fnG(b, c, d, a, M[12], 0x8d2a4c8a, 20)

          a = fnH(a, b, c, d, M[5], 0xfffa3942, 4)
          d = fnH(d, a, b, c, M[8], 0x8771f681, 11)
          c = fnH(c, d, a, b, M[11], 0x6d9d6122, 16)
          b = fnH(b, c, d, a, M[14], 0xfde5380c, 23)
          a = fnH(a, b, c, d, M[1], 0xa4beea44, 4)
          d = fnH(d, a, b, c, M[4], 0x4bdecfa9, 11)
          c = fnH(c, d, a, b, M[7], 0xf6bb4b60, 16)
          b = fnH(b, c, d, a, M[10], 0xbebfbc70, 23)
          a = fnH(a, b, c, d, M[13], 0x289b7ec6, 4)
          d = fnH(d, a, b, c, M[0], 0xeaa127fa, 11)
          c = fnH(c, d, a, b, M[3], 0xd4ef3085, 16)
          b = fnH(b, c, d, a, M[6], 0x04881d05, 23)
          a = fnH(a, b, c, d, M[9], 0xd9d4d039, 4)
          d = fnH(d, a, b, c, M[12], 0xe6db99e5, 11)
          c = fnH(c, d, a, b, M[15], 0x1fa27cf8, 16)
          b = fnH(b, c, d, a, M[2], 0xc4ac5665, 23)

          a = fnI(a, b, c, d, M[0], 0xf4292244, 6)
          d = fnI(d, a, b, c, M[7], 0x432aff97, 10)
          c = fnI(c, d, a, b, M[14], 0xab9423a7, 15)
          b = fnI(b, c, d, a, M[5], 0xfc93a039, 21)
          a = fnI(a, b, c, d, M[12], 0x655b59c3, 6)
          d = fnI(d, a, b, c, M[3], 0x8f0ccc92, 10)
          c = fnI(c, d, a, b, M[10], 0xffeff47d, 15)
          b = fnI(b, c, d, a, M[1], 0x85845dd1, 21)
          a = fnI(a, b, c, d, M[8], 0x6fa87e4f, 6)
          d = fnI(d, a, b, c, M[15], 0xfe2ce6e0, 10)
          c = fnI(c, d, a, b, M[6], 0xa3014314, 15)
          b = fnI(b, c, d, a, M[13], 0x4e0811a1, 21)
          a = fnI(a, b, c, d, M[4], 0xf7537e82, 6)
          d = fnI(d, a, b, c, M[11], 0xbd3af235, 10)
          c = fnI(c, d, a, b, M[2], 0x2ad7d2bb, 15)
          b = fnI(b, c, d, a, M[9], 0xeb86d391, 21)

          this._a = (this._a + a) | 0
          this._b = (this._b + b) | 0
          this._c = (this._c + c) | 0
          this._d = (this._d + d) | 0
        }

        MD5.prototype._digest = function () {
          // create padding and handle blocks
          this._block[this._blockOffset++] = 0x80
          if (this._blockOffset > 56) {
            this._block.fill(0, this._blockOffset, 64)
            this._update()
            this._blockOffset = 0
          }

          this._block.fill(0, this._blockOffset, 56)
          this._block.writeUInt32LE(this._length[0], 56)
          this._block.writeUInt32LE(this._length[1], 60)
          this._update()

          // produce result
          var buffer = new Buffer(16)
          buffer.writeInt32LE(this._a, 0)
          buffer.writeInt32LE(this._b, 4)
          buffer.writeInt32LE(this._c, 8)
          buffer.writeInt32LE(this._d, 12)
          return buffer
        }

        function rotl(x, n) {
          return (x << n) | (x >>> (32 - n))
        }

        function fnF(a, b, c, d, m, k, s) {
          return (rotl((a + ((b & c) | ((~b) & d)) + m + k) | 0, s) + b) | 0
        }

        function fnG(a, b, c, d, m, k, s) {
          return (rotl((a + ((b & d) | (c & (~d))) + m + k) | 0, s) + b) | 0
        }

        function fnH(a, b, c, d, m, k, s) {
          return (rotl((a + (b ^ c ^ d) + m + k) | 0, s) + b) | 0
        }

        function fnI(a, b, c, d, m, k, s) {
          return (rotl((a + ((c ^ (b | (~d)))) + m + k) | 0, s) + b) | 0
        }

        module.exports = MD5

        /* WEBPACK VAR INJECTION */
      }.call(this, __webpack_require__(/*! ./../buffer/index.js */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/buffer/index.js").Buffer))

      /***/
    }),

/***/ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/miller-rabin/lib/mr.js":
/*!*****************************************************!*\
  !*** (webpack)/node_modules/miller-rabin/lib/mr.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

      var bn = __webpack_require__(/*! bn.js */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/bn.js/lib/bn.js");
      var brorand = __webpack_require__(/*! brorand */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/brorand/index.js");

      function MillerRabin(rand) {
        this.rand = rand || new brorand.Rand();
      }
      module.exports = MillerRabin;

      MillerRabin.create = function create(rand) {
        return new MillerRabin(rand);
      };

      MillerRabin.prototype._randbelow = function _randbelow(n) {
        var len = n.bitLength();
        var min_bytes = Math.ceil(len / 8);

        // Generage random bytes until a number less than n is found.
        // This ensures that 0..n-1 have an equal probability of being selected.
        do
          var a = new bn(this.rand.generate(min_bytes));
        while (a.cmp(n) >= 0);

        return a;
      };

      MillerRabin.prototype._randrange = function _randrange(start, stop) {
        // Generate a random number greater than or equal to start and less than stop.
        var size = stop.sub(start);
        return start.add(this._randbelow(size));
      };

      MillerRabin.prototype.test = function test(n, k, cb) {
        var len = n.bitLength();
        var red = bn.mont(n);
        var rone = new bn(1).toRed(red);

        if (!k)
          k = Math.max(1, (len / 48) | 0);

        // Find d and s, (n - 1) = (2 ^ s) * d;
        var n1 = n.subn(1);
        for (var s = 0; !n1.testn(s); s++) { }
        var d = n.shrn(s);

        var rn1 = n1.toRed(red);

        var prime = true;
        for (; k > 0; k--) {
          var a = this._randrange(new bn(2), n1);
          if (cb)
            cb(a);

          var x = a.toRed(red).redPow(d);
          if (x.cmp(rone) === 0 || x.cmp(rn1) === 0)
            continue;

          for (var i = 1; i < s; i++) {
            x = x.redSqr();

            if (x.cmp(rone) === 0)
              return false;
            if (x.cmp(rn1) === 0)
              break;
          }

          if (i === s)
            return false;
        }

        return prime;
      };

      MillerRabin.prototype.getDivisor = function getDivisor(n, k) {
        var len = n.bitLength();
        var red = bn.mont(n);
        var rone = new bn(1).toRed(red);

        if (!k)
          k = Math.max(1, (len / 48) | 0);

        // Find d and s, (n - 1) = (2 ^ s) * d;
        var n1 = n.subn(1);
        for (var s = 0; !n1.testn(s); s++) { }
        var d = n.shrn(s);

        var rn1 = n1.toRed(red);

        for (; k > 0; k--) {
          var a = this._randrange(new bn(2), n1);

          var g = n.gcd(a);
          if (g.cmpn(1) !== 0)
            return g;

          var x = a.toRed(red).redPow(d);
          if (x.cmp(rone) === 0 || x.cmp(rn1) === 0)
            continue;

          for (var i = 1; i < s; i++) {
            x = x.redSqr();

            if (x.cmp(rone) === 0)
              return x.fromRed().subn(1).gcd(n);
            if (x.cmp(rn1) === 0)
              break;
          }

          if (i === s) {
            x = x.redSqr();
            return x.fromRed().subn(1).gcd(n);
          }
        }

        return false;
      };


      /***/
    }),

/***/ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/minimalistic-assert/index.js":
/*!***********************************************************!*\
  !*** (webpack)/node_modules/minimalistic-assert/index.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function (module, exports) {

      module.exports = assert;

      function assert(val, msg) {
        if (!val)
          throw new Error(msg || 'Assertion failed');
      }

      assert.equal = function assertEqual(l, r, msg) {
        if (l != r)
          throw new Error(msg || ('Assertion failed: ' + l + ' != ' + r));
      };


      /***/
    }),

/***/ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/minimalistic-crypto-utils/lib/utils.js":
/*!*********************************************************************!*\
  !*** (webpack)/node_modules/minimalistic-crypto-utils/lib/utils.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

      "use strict";


      var utils = exports;

      function toArray(msg, enc) {
        if (Array.isArray(msg))
          return msg.slice();
        if (!msg)
          return [];
        var res = [];
        if (typeof msg !== 'string') {
          for (var i = 0; i < msg.length; i++)
            res[i] = msg[i] | 0;
          return res;
        }
        if (enc === 'hex') {
          msg = msg.replace(/[^a-z0-9]+/ig, '');
          if (msg.length % 2 !== 0)
            msg = '0' + msg;
          for (var i = 0; i < msg.length; i += 2)
            res.push(parseInt(msg[i] + msg[i + 1], 16));
        } else {
          for (var i = 0; i < msg.length; i++) {
            var c = msg.charCodeAt(i);
            var hi = c >> 8;
            var lo = c & 0xff;
            if (hi)
              res.push(hi, lo);
            else
              res.push(lo);
          }
        }
        return res;
      }
      utils.toArray = toArray;

      function zero2(word) {
        if (word.length === 1)
          return '0' + word;
        else
          return word;
      }
      utils.zero2 = zero2;

      function toHex(msg) {
        var res = '';
        for (var i = 0; i < msg.length; i++)
          res += zero2(msg[i].toString(16));
        return res;
      }
      utils.toHex = toHex;

      utils.encode = function encode(arr, enc) {
        if (enc === 'hex')
          return toHex(arr);
        else
          return arr;
      };


      /***/
    }),

/***/ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/node-libs-browser/node_modules/punycode/punycode.js":
/*!**********************************************************************************!*\
  !*** (webpack)/node_modules/node-libs-browser/node_modules/punycode/punycode.js ***!
  \**********************************************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function (module, global) {
        var __WEBPACK_AMD_DEFINE_RESULT__;/*! https://mths.be/punycode v1.4.1 by @mathias */
        ; (function (root) {

          /** Detect free variables */
          var freeExports = typeof exports == 'object' && exports &&
            !exports.nodeType && exports;
          var freeModule = typeof module == 'object' && module &&
            !module.nodeType && module;
          var freeGlobal = typeof global == 'object' && global;
          if (
            freeGlobal.global === freeGlobal ||
            freeGlobal.window === freeGlobal ||
            freeGlobal.self === freeGlobal
          ) {
            root = freeGlobal;
          }

          /**
           * The `punycode` object.
           * @name punycode
           * @type Object
           */
          var punycode,

            /** Highest positive signed 32-bit float value */
            maxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1

            /** Bootstring parameters */
            base = 36,
            tMin = 1,
            tMax = 26,
            skew = 38,
            damp = 700,
            initialBias = 72,
            initialN = 128, // 0x80
            delimiter = '-', // '\x2D'

            /** Regular expressions */
            regexPunycode = /^xn--/,
            regexNonASCII = /[^\x20-\x7E]/, // unprintable ASCII chars + non-ASCII chars
            regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g, // RFC 3490 separators

            /** Error messages */
            errors = {
              'overflow': 'Overflow: input needs wider integers to process',
              'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
              'invalid-input': 'Invalid input'
            },

            /** Convenience shortcuts */
            baseMinusTMin = base - tMin,
            floor = Math.floor,
            stringFromCharCode = String.fromCharCode,

            /** Temporary variable */
            key;

          /*--------------------------------------------------------------------------*/

          /**
           * A generic error utility function.
           * @private
           * @param {String} type The error type.
           * @returns {Error} Throws a `RangeError` with the applicable error message.
           */
          function error(type) {
            throw new RangeError(errors[type]);
          }

          /**
           * A generic `Array#map` utility function.
           * @private
           * @param {Array} array The array to iterate over.
           * @param {Function} callback The function that gets called for every array
           * item.
           * @returns {Array} A new array of values returned by the callback function.
           */
          function map(array, fn) {
            var length = array.length;
            var result = [];
            while (length--) {
              result[length] = fn(array[length]);
            }
            return result;
          }

          /**
           * A simple `Array#map`-like wrapper to work with domain name strings or email
           * addresses.
           * @private
           * @param {String} domain The domain name or email address.
           * @param {Function} callback The function that gets called for every
           * character.
           * @returns {Array} A new string of characters returned by the callback
           * function.
           */
          function mapDomain(string, fn) {
            var parts = string.split('@');
            var result = '';
            if (parts.length > 1) {
              // In email addresses, only the domain name should be punycoded. Leave
              // the local part (i.e. everything up to `@`) intact.
              result = parts[0] + '@';
              string = parts[1];
            }
            // Avoid `split(regex)` for IE8 compatibility. See #17.
            string = string.replace(regexSeparators, '\x2E');
            var labels = string.split('.');
            var encoded = map(labels, fn).join('.');
            return result + encoded;
          }

          /**
           * Creates an array containing the numeric code points of each Unicode
           * character in the string. While JavaScript uses UCS-2 internally,
           * this function will convert a pair of surrogate halves (each of which
           * UCS-2 exposes as separate characters) into a single code point,
           * matching UTF-16.
           * @see `punycode.ucs2.encode`
           * @see <https://mathiasbynens.be/notes/javascript-encoding>
           * @memberOf punycode.ucs2
           * @name decode
           * @param {String} string The Unicode input string (UCS-2).
           * @returns {Array} The new array of code points.
           */
          function ucs2decode(string) {
            var output = [],
              counter = 0,
              length = string.length,
              value,
              extra;
            while (counter < length) {
              value = string.charCodeAt(counter++);
              if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
                // high surrogate, and there is a next character
                extra = string.charCodeAt(counter++);
                if ((extra & 0xFC00) == 0xDC00) { // low surrogate
                  output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
                } else {
                  // unmatched surrogate; only append this code unit, in case the next
                  // code unit is the high surrogate of a surrogate pair
                  output.push(value);
                  counter--;
                }
              } else {
                output.push(value);
              }
            }
            return output;
          }

          /**
           * Creates a string based on an array of numeric code points.
           * @see `punycode.ucs2.decode`
           * @memberOf punycode.ucs2
           * @name encode
           * @param {Array} codePoints The array of numeric code points.
           * @returns {String} The new Unicode string (UCS-2).
           */
          function ucs2encode(array) {
            return map(array, function (value) {
              var output = '';
              if (value > 0xFFFF) {
                value -= 0x10000;
                output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
                value = 0xDC00 | value & 0x3FF;
              }
              output += stringFromCharCode(value);
              return output;
            }).join('');
          }

          /**
           * Converts a basic code point into a digit/integer.
           * @see `digitToBasic()`
           * @private
           * @param {Number} codePoint The basic numeric code point value.
           * @returns {Number} The numeric value of a basic code point (for use in
           * representing integers) in the range `0` to `base - 1`, or `base` if
           * the code point does not represent a value.
           */
          function basicToDigit(codePoint) {
            if (codePoint - 48 < 10) {
              return codePoint - 22;
            }
            if (codePoint - 65 < 26) {
              return codePoint - 65;
            }
            if (codePoint - 97 < 26) {
              return codePoint - 97;
            }
            return base;
          }

          /**
           * Converts a digit/integer into a basic code point.
           * @see `basicToDigit()`
           * @private
           * @param {Number} digit The numeric value of a basic code point.
           * @returns {Number} The basic code point whose value (when used for
           * representing integers) is `digit`, which needs to be in the range
           * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
           * used; else, the lowercase form is used. The behavior is undefined
           * if `flag` is non-zero and `digit` has no uppercase form.
           */
          function digitToBasic(digit, flag) {
            //  0..25 map to ASCII a..z or A..Z
            // 26..35 map to ASCII 0..9
            return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
          }

          /**
           * Bias adaptation function as per section 3.4 of RFC 3492.
           * https://tools.ietf.org/html/rfc3492#section-3.4
           * @private
           */
          function adapt(delta, numPoints, firstTime) {
            var k = 0;
            delta = firstTime ? floor(delta / damp) : delta >> 1;
            delta += floor(delta / numPoints);
            for (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {
              delta = floor(delta / baseMinusTMin);
            }
            return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
          }

          /**
           * Converts a Punycode string of ASCII-only symbols to a string of Unicode
           * symbols.
           * @memberOf punycode
           * @param {String} input The Punycode string of ASCII-only symbols.
           * @returns {String} The resulting string of Unicode symbols.
           */
          function decode(input) {
            // Don't use UCS-2
            var output = [],
              inputLength = input.length,
              out,
              i = 0,
              n = initialN,
              bias = initialBias,
              basic,
              j,
              index,
              oldi,
              w,
              k,
              digit,
              t,
              /** Cached calculation results */
              baseMinusT;

            // Handle the basic code points: let `basic` be the number of input code
            // points before the last delimiter, or `0` if there is none, then copy
            // the first basic code points to the output.

            basic = input.lastIndexOf(delimiter);
            if (basic < 0) {
              basic = 0;
            }

            for (j = 0; j < basic; ++j) {
              // if it's not a basic code point
              if (input.charCodeAt(j) >= 0x80) {
                error('not-basic');
              }
              output.push(input.charCodeAt(j));
            }

            // Main decoding loop: start just after the last delimiter if any basic code
            // points were copied; start at the beginning otherwise.

            for (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {

              // `index` is the index of the next character to be consumed.
              // Decode a generalized variable-length integer into `delta`,
              // which gets added to `i`. The overflow checking is easier
              // if we increase `i` as we go, then subtract off its starting
              // value at the end to obtain `delta`.
              for (oldi = i, w = 1, k = base; /* no condition */; k += base) {

                if (index >= inputLength) {
                  error('invalid-input');
                }

                digit = basicToDigit(input.charCodeAt(index++));

                if (digit >= base || digit > floor((maxInt - i) / w)) {
                  error('overflow');
                }

                i += digit * w;
                t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);

                if (digit < t) {
                  break;
                }

                baseMinusT = base - t;
                if (w > floor(maxInt / baseMinusT)) {
                  error('overflow');
                }

                w *= baseMinusT;

              }

              out = output.length + 1;
              bias = adapt(i - oldi, out, oldi == 0);

              // `i` was supposed to wrap around from `out` to `0`,
              // incrementing `n` each time, so we'll fix that now:
              if (floor(i / out) > maxInt - n) {
                error('overflow');
              }

              n += floor(i / out);
              i %= out;

              // Insert `n` at position `i` of the output
              output.splice(i++, 0, n);

            }

            return ucs2encode(output);
          }

          /**
           * Converts a string of Unicode symbols (e.g. a domain name label) to a
           * Punycode string of ASCII-only symbols.
           * @memberOf punycode
           * @param {String} input The string of Unicode symbols.
           * @returns {String} The resulting Punycode string of ASCII-only symbols.
           */
          function encode(input) {
            var n,
              delta,
              handledCPCount,
              basicLength,
              bias,
              j,
              m,
              q,
              k,
              t,
              currentValue,
              output = [],
              /** `inputLength` will hold the number of code points in `input`. */
              inputLength,
              /** Cached calculation results */
              handledCPCountPlusOne,
              baseMinusT,
              qMinusT;

            // Convert the input in UCS-2 to Unicode
            input = ucs2decode(input);

            // Cache the length
            inputLength = input.length;

            // Initialize the state
            n = initialN;
            delta = 0;
            bias = initialBias;

            // Handle the basic code points
            for (j = 0; j < inputLength; ++j) {
              currentValue = input[j];
              if (currentValue < 0x80) {
                output.push(stringFromCharCode(currentValue));
              }
            }

            handledCPCount = basicLength = output.length;

            // `handledCPCount` is the number of code points that have been handled;
            // `basicLength` is the number of basic code points.

            // Finish the basic string - if it is not empty - with a delimiter
            if (basicLength) {
              output.push(delimiter);
            }

            // Main encoding loop:
            while (handledCPCount < inputLength) {

              // All non-basic code points < n have been handled already. Find the next
              // larger one:
              for (m = maxInt, j = 0; j < inputLength; ++j) {
                currentValue = input[j];
                if (currentValue >= n && currentValue < m) {
                  m = currentValue;
                }
              }

              // Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
              // but guard against overflow
              handledCPCountPlusOne = handledCPCount + 1;
              if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
                error('overflow');
              }

              delta += (m - n) * handledCPCountPlusOne;
              n = m;

              for (j = 0; j < inputLength; ++j) {
                currentValue = input[j];

                if (currentValue < n && ++delta > maxInt) {
                  error('overflow');
                }

                if (currentValue == n) {
                  // Represent delta as a generalized variable-length integer
                  for (q = delta, k = base; /* no condition */; k += base) {
                    t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);
                    if (q < t) {
                      break;
                    }
                    qMinusT = q - t;
                    baseMinusT = base - t;
                    output.push(
                      stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))
                    );
                    q = floor(qMinusT / baseMinusT);
                  }

                  output.push(stringFromCharCode(digitToBasic(q, 0)));
                  bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
                  delta = 0;
                  ++handledCPCount;
                }
              }

              ++delta;
              ++n;

            }
            return output.join('');
          }

          /**
           * Converts a Punycode string representing a domain name or an email address
           * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
           * it doesn't matter if you call it on a string that has already been
           * converted to Unicode.
           * @memberOf punycode
           * @param {String} input The Punycoded domain name or email address to
           * convert to Unicode.
           * @returns {String} The Unicode representation of the given Punycode
           * string.
           */
          function toUnicode(input) {
            return mapDomain(input, function (string) {
              return regexPunycode.test(string)
                ? decode(string.slice(4).toLowerCase())
                : string;
            });
          }

          /**
           * Converts a Unicode string representing a domain name or an email address to
           * Punycode. Only the non-ASCII parts of the domain name will be converted,
           * i.e. it doesn't matter if you call it with a domain that's already in
           * ASCII.
           * @memberOf punycode
           * @param {String} input The domain name or email address to convert, as a
           * Unicode string.
           * @returns {String} The Punycode representation of the given domain name or
           * email address.
           */
          function toASCII(input) {
            return mapDomain(input, function (string) {
              return regexNonASCII.test(string)
                ? 'xn--' + encode(string)
                : string;
            });
          }

          /*--------------------------------------------------------------------------*/

          /** Define the public API */
          punycode = {
            /**
             * A string representing the current Punycode.js version number.
             * @memberOf punycode
             * @type String
             */
            'version': '1.4.1',
            /**
             * An object of methods to convert from JavaScript's internal character
             * representation (UCS-2) to Unicode code points, and back.
             * @see <https://mathiasbynens.be/notes/javascript-encoding>
             * @memberOf punycode
             * @type Object
             */
            'ucs2': {
              'decode': ucs2decode,
              'encode': ucs2encode
            },
            'decode': decode,
            'encode': encode,
            'toASCII': toASCII,
            'toUnicode': toUnicode
          };

          /** Expose `punycode` */
          // Some AMD build optimizers, like r.js, check for specific condition patterns
          // like the following:
          if (
            true
          ) {
            !(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
              return punycode;
            }).call(exports, __webpack_require__, exports, module),
              __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
          } else { }

        } (this));

        /* WEBPACK VAR INJECTION */
      }.call(this, __webpack_require__(/*! ./../../../../buildin/module.js */ "../../../../../AppData/Roaming/npm/node_modules/webpack/buildin/module.js")(module), __webpack_require__(/*! ./../../../../buildin/global.js */ "../../../../../AppData/Roaming/npm/node_modules/webpack/buildin/global.js")))

      /***/
    }),

/***/ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/parse-asn1/aesid.json":
/*!****************************************************!*\
  !*** (webpack)/node_modules/parse-asn1/aesid.json ***!
  \****************************************************/
/*! exports provided: 2.16.840.1.101.3.4.1.1, 2.16.840.1.101.3.4.1.2, 2.16.840.1.101.3.4.1.3, 2.16.840.1.101.3.4.1.4, 2.16.840.1.101.3.4.1.21, 2.16.840.1.101.3.4.1.22, 2.16.840.1.101.3.4.1.23, 2.16.840.1.101.3.4.1.24, 2.16.840.1.101.3.4.1.41, 2.16.840.1.101.3.4.1.42, 2.16.840.1.101.3.4.1.43, 2.16.840.1.101.3.4.1.44, default */
/***/ (function (module) {

      module.exports = { "2.16.840.1.101.3.4.1.1": "aes-128-ecb", "2.16.840.1.101.3.4.1.2": "aes-128-cbc", "2.16.840.1.101.3.4.1.3": "aes-128-ofb", "2.16.840.1.101.3.4.1.4": "aes-128-cfb", "2.16.840.1.101.3.4.1.21": "aes-192-ecb", "2.16.840.1.101.3.4.1.22": "aes-192-cbc", "2.16.840.1.101.3.4.1.23": "aes-192-ofb", "2.16.840.1.101.3.4.1.24": "aes-192-cfb", "2.16.840.1.101.3.4.1.41": "aes-256-ecb", "2.16.840.1.101.3.4.1.42": "aes-256-cbc", "2.16.840.1.101.3.4.1.43": "aes-256-ofb", "2.16.840.1.101.3.4.1.44": "aes-256-cfb" };

      /***/
    }),

/***/ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/parse-asn1/asn1.js":
/*!*************************************************!*\
  !*** (webpack)/node_modules/parse-asn1/asn1.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

      "use strict";
      // from https://github.com/indutny/self-signed/blob/gh-pages/lib/asn1.js
      // Fedor, you are amazing.


      var asn1 = __webpack_require__(/*! asn1.js */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/asn1.js/lib/asn1.js")

      exports.certificate = __webpack_require__(/*! ./certificate */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/parse-asn1/certificate.js")

      var RSAPrivateKey = asn1.define('RSAPrivateKey', function () {
        this.seq().obj(
          this.key('version').int(),
          this.key('modulus').int(),
          this.key('publicExponent').int(),
          this.key('privateExponent').int(),
          this.key('prime1').int(),
          this.key('prime2').int(),
          this.key('exponent1').int(),
          this.key('exponent2').int(),
          this.key('coefficient').int()
        )
      })
      exports.RSAPrivateKey = RSAPrivateKey

      var RSAPublicKey = asn1.define('RSAPublicKey', function () {
        this.seq().obj(
          this.key('modulus').int(),
          this.key('publicExponent').int()
        )
      })
      exports.RSAPublicKey = RSAPublicKey

      var PublicKey = asn1.define('SubjectPublicKeyInfo', function () {
        this.seq().obj(
          this.key('algorithm').use(AlgorithmIdentifier),
          this.key('subjectPublicKey').bitstr()
        )
      })
      exports.PublicKey = PublicKey

      var AlgorithmIdentifier = asn1.define('AlgorithmIdentifier', function () {
        this.seq().obj(
          this.key('algorithm').objid(),
          this.key('none').null_().optional(),
          this.key('curve').objid().optional(),
          this.key('params').seq().obj(
            this.key('p').int(),
            this.key('q').int(),
            this.key('g').int()
          ).optional()
        )
      })

      var PrivateKeyInfo = asn1.define('PrivateKeyInfo', function () {
        this.seq().obj(
          this.key('version').int(),
          this.key('algorithm').use(AlgorithmIdentifier),
          this.key('subjectPrivateKey').octstr()
        )
      })
      exports.PrivateKey = PrivateKeyInfo
      var EncryptedPrivateKeyInfo = asn1.define('EncryptedPrivateKeyInfo', function () {
        this.seq().obj(
          this.key('algorithm').seq().obj(
            this.key('id').objid(),
            this.key('decrypt').seq().obj(
              this.key('kde').seq().obj(
                this.key('id').objid(),
                this.key('kdeparams').seq().obj(
                  this.key('salt').octstr(),
                  this.key('iters').int()
                )
              ),
              this.key('cipher').seq().obj(
                this.key('algo').objid(),
                this.key('iv').octstr()
              )
            )
          ),
          this.key('subjectPrivateKey').octstr()
        )
      })

      exports.EncryptedPrivateKey = EncryptedPrivateKeyInfo

      var DSAPrivateKey = asn1.define('DSAPrivateKey', function () {
        this.seq().obj(
          this.key('version').int(),
          this.key('p').int(),
          this.key('q').int(),
          this.key('g').int(),
          this.key('pub_key').int(),
          this.key('priv_key').int()
        )
      })
      exports.DSAPrivateKey = DSAPrivateKey

      exports.DSAparam = asn1.define('DSAparam', function () {
        this.int()
      })

      var ECPrivateKey = asn1.define('ECPrivateKey', function () {
        this.seq().obj(
          this.key('version').int(),
          this.key('privateKey').octstr(),
          this.key('parameters').optional().explicit(0).use(ECParameters),
          this.key('publicKey').optional().explicit(1).bitstr()
        )
      })
      exports.ECPrivateKey = ECPrivateKey

      var ECParameters = asn1.define('ECParameters', function () {
        this.choice({
          namedCurve: this.objid()
        })
      })

      exports.signature = asn1.define('signature', function () {
        this.seq().obj(
          this.key('r').int(),
          this.key('s').int()
        )
      })


      /***/
    }),

/***/ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/parse-asn1/certificate.js":
/*!********************************************************!*\
  !*** (webpack)/node_modules/parse-asn1/certificate.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

      "use strict";
      // from https://github.com/Rantanen/node-dtls/blob/25a7dc861bda38cfeac93a723500eea4f0ac2e86/Certificate.js
      // thanks to @Rantanen



      var asn = __webpack_require__(/*! asn1.js */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/asn1.js/lib/asn1.js")

      var Time = asn.define('Time', function () {
        this.choice({
          utcTime: this.utctime(),
          generalTime: this.gentime()
        })
      })

      var AttributeTypeValue = asn.define('AttributeTypeValue', function () {
        this.seq().obj(
          this.key('type').objid(),
          this.key('value').any()
        )
      })

      var AlgorithmIdentifier = asn.define('AlgorithmIdentifier', function () {
        this.seq().obj(
          this.key('algorithm').objid(),
          this.key('parameters').optional()
        )
      })

      var SubjectPublicKeyInfo = asn.define('SubjectPublicKeyInfo', function () {
        this.seq().obj(
          this.key('algorithm').use(AlgorithmIdentifier),
          this.key('subjectPublicKey').bitstr()
        )
      })

      var RelativeDistinguishedName = asn.define('RelativeDistinguishedName', function () {
        this.setof(AttributeTypeValue)
      })

      var RDNSequence = asn.define('RDNSequence', function () {
        this.seqof(RelativeDistinguishedName)
      })

      var Name = asn.define('Name', function () {
        this.choice({
          rdnSequence: this.use(RDNSequence)
        })
      })

      var Validity = asn.define('Validity', function () {
        this.seq().obj(
          this.key('notBefore').use(Time),
          this.key('notAfter').use(Time)
        )
      })

      var Extension = asn.define('Extension', function () {
        this.seq().obj(
          this.key('extnID').objid(),
          this.key('critical').bool().def(false),
          this.key('extnValue').octstr()
        )
      })

      var TBSCertificate = asn.define('TBSCertificate', function () {
        this.seq().obj(
          this.key('version').explicit(0).int(),
          this.key('serialNumber').int(),
          this.key('signature').use(AlgorithmIdentifier),
          this.key('issuer').use(Name),
          this.key('validity').use(Validity),
          this.key('subject').use(Name),
          this.key('subjectPublicKeyInfo').use(SubjectPublicKeyInfo),
          this.key('issuerUniqueID').implicit(1).bitstr().optional(),
          this.key('subjectUniqueID').implicit(2).bitstr().optional(),
          this.key('extensions').explicit(3).seqof(Extension).optional()
        )
      })

      var X509Certificate = asn.define('X509Certificate', function () {
        this.seq().obj(
          this.key('tbsCertificate').use(TBSCertificate),
          this.key('signatureAlgorithm').use(AlgorithmIdentifier),
          this.key('signatureValue').bitstr()
        )
      })

      module.exports = X509Certificate


      /***/
    }),

/***/ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/parse-asn1/fixProc.js":
/*!****************************************************!*\
  !*** (webpack)/node_modules/parse-asn1/fixProc.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function (Buffer) {// adapted from https://github.com/apatil/pemstrip
        var findProc = /Proc-Type: 4,ENCRYPTED[\n\r]+DEK-Info: AES-((?:128)|(?:192)|(?:256))-CBC,([0-9A-H]+)[\n\r]+([0-9A-z\n\r\+\/\=]+)[\n\r]+/m
        var startRegex = /^-----BEGIN ((?:.* KEY)|CERTIFICATE)-----/m
        var fullRegex = /^-----BEGIN ((?:.* KEY)|CERTIFICATE)-----([0-9A-z\n\r\+\/\=]+)-----END \1-----$/m
        var evp = __webpack_require__(/*! evp_bytestokey */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/evp_bytestokey/index.js")
        var ciphers = __webpack_require__(/*! browserify-aes */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/browserify-aes/browser.js")
        module.exports = function (okey, password) {
          var key = okey.toString()
          var match = key.match(findProc)
          var decrypted
          if (!match) {
            var match2 = key.match(fullRegex)
            decrypted = new Buffer(match2[2].replace(/[\r\n]/g, ''), 'base64')
          } else {
            var suite = 'aes' + match[1]
            var iv = new Buffer(match[2], 'hex')
            var cipherText = new Buffer(match[3].replace(/[\r\n]/g, ''), 'base64')
            var cipherKey = evp(password, iv.slice(0, 8), parseInt(match[1], 10)).key
            var out = []
            var cipher = ciphers.createDecipheriv(suite, cipherKey, iv)
            out.push(cipher.update(cipherText))
            out.push(cipher.final())
            decrypted = Buffer.concat(out)
          }
          var tag = key.match(startRegex)[1]
          return {
            tag: tag,
            data: decrypted
          }
        }

        /* WEBPACK VAR INJECTION */
      }.call(this, __webpack_require__(/*! ./../buffer/index.js */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/buffer/index.js").Buffer))

      /***/
    }),

/***/ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/parse-asn1/index.js":
/*!**************************************************!*\
  !*** (webpack)/node_modules/parse-asn1/index.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function (Buffer) {
        var asn1 = __webpack_require__(/*! ./asn1 */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/parse-asn1/asn1.js")
        var aesid = __webpack_require__(/*! ./aesid.json */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/parse-asn1/aesid.json")
        var fixProc = __webpack_require__(/*! ./fixProc */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/parse-asn1/fixProc.js")
        var ciphers = __webpack_require__(/*! browserify-aes */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/browserify-aes/browser.js")
        var compat = __webpack_require__(/*! pbkdf2 */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/pbkdf2/browser.js")
        module.exports = parseKeys

        function parseKeys(buffer) {
          var password
          if (typeof buffer === 'object' && !Buffer.isBuffer(buffer)) {
            password = buffer.passphrase
            buffer = buffer.key
          }
          if (typeof buffer === 'string') {
            buffer = new Buffer(buffer)
          }

          var stripped = fixProc(buffer, password)

          var type = stripped.tag
          var data = stripped.data
          var subtype, ndata
          switch (type) {
            case 'CERTIFICATE':
              ndata = asn1.certificate.decode(data, 'der').tbsCertificate.subjectPublicKeyInfo
            // falls through
            case 'PUBLIC KEY':
              if (!ndata) {
                ndata = asn1.PublicKey.decode(data, 'der')
              }
              subtype = ndata.algorithm.algorithm.join('.')
              switch (subtype) {
                case '1.2.840.113549.1.1.1':
                  return asn1.RSAPublicKey.decode(ndata.subjectPublicKey.data, 'der')
                case '1.2.840.10045.2.1':
                  ndata.subjectPrivateKey = ndata.subjectPublicKey
                  return {
                    type: 'ec',
                    data: ndata
                  }
                case '1.2.840.10040.4.1':
                  ndata.algorithm.params.pub_key = asn1.DSAparam.decode(ndata.subjectPublicKey.data, 'der')
                  return {
                    type: 'dsa',
                    data: ndata.algorithm.params
                  }
                default: throw new Error('unknown key id ' + subtype)
              }
              throw new Error('unknown key type ' + type)
            case 'ENCRYPTED PRIVATE KEY':
              data = asn1.EncryptedPrivateKey.decode(data, 'der')
              data = decrypt(data, password)
            // falls through
            case 'PRIVATE KEY':
              ndata = asn1.PrivateKey.decode(data, 'der')
              subtype = ndata.algorithm.algorithm.join('.')
              switch (subtype) {
                case '1.2.840.113549.1.1.1':
                  return asn1.RSAPrivateKey.decode(ndata.subjectPrivateKey, 'der')
                case '1.2.840.10045.2.1':
                  return {
                    curve: ndata.algorithm.curve,
                    privateKey: asn1.ECPrivateKey.decode(ndata.subjectPrivateKey, 'der').privateKey
                  }
                case '1.2.840.10040.4.1':
                  ndata.algorithm.params.priv_key = asn1.DSAparam.decode(ndata.subjectPrivateKey, 'der')
                  return {
                    type: 'dsa',
                    params: ndata.algorithm.params
                  }
                default: throw new Error('unknown key id ' + subtype)
              }
              throw new Error('unknown key type ' + type)
            case 'RSA PUBLIC KEY':
              return asn1.RSAPublicKey.decode(data, 'der')
            case 'RSA PRIVATE KEY':
              return asn1.RSAPrivateKey.decode(data, 'der')
            case 'DSA PRIVATE KEY':
              return {
                type: 'dsa',
                params: asn1.DSAPrivateKey.decode(data, 'der')
              }
            case 'EC PRIVATE KEY':
              data = asn1.ECPrivateKey.decode(data, 'der')
              return {
                curve: data.parameters.value,
                privateKey: data.privateKey
              }
            default: throw new Error('unknown key type ' + type)
          }
        }
        parseKeys.signature = asn1.signature
        function decrypt(data, password) {
          var salt = data.algorithm.decrypt.kde.kdeparams.salt
          var iters = parseInt(data.algorithm.decrypt.kde.kdeparams.iters.toString(), 10)
          var algo = aesid[data.algorithm.decrypt.cipher.algo.join('.')]
          var iv = data.algorithm.decrypt.cipher.iv
          var cipherText = data.subjectPrivateKey
          var keylen = parseInt(algo.split('-')[1], 10) / 8
          var key = compat.pbkdf2Sync(password, salt, iters, keylen)
          var cipher = ciphers.createDecipheriv(algo, key, iv)
          var out = []
          out.push(cipher.update(cipherText))
          out.push(cipher.final())
          return Buffer.concat(out)
        }

        /* WEBPACK VAR INJECTION */
      }.call(this, __webpack_require__(/*! ./../buffer/index.js */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/buffer/index.js").Buffer))

      /***/
    }),

/***/ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/pbkdf2/browser.js":
/*!************************************************!*\
  !*** (webpack)/node_modules/pbkdf2/browser.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

      exports.pbkdf2 = __webpack_require__(/*! ./lib/async */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/pbkdf2/lib/async.js")
      exports.pbkdf2Sync = __webpack_require__(/*! ./lib/sync */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/pbkdf2/lib/sync-browser.js")


      /***/
    }),

/***/ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/pbkdf2/lib/async.js":
/*!**************************************************!*\
  !*** (webpack)/node_modules/pbkdf2/lib/async.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function (global, process) {
        var checkParameters = __webpack_require__(/*! ./precondition */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/pbkdf2/lib/precondition.js")
        var defaultEncoding = __webpack_require__(/*! ./default-encoding */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/pbkdf2/lib/default-encoding.js")
        var sync = __webpack_require__(/*! ./sync */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/pbkdf2/lib/sync-browser.js")
        var Buffer = __webpack_require__(/*! safe-buffer */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/safe-buffer/index.js").Buffer

        var ZERO_BUF
        var subtle = global.crypto && global.crypto.subtle
        var toBrowser = {
          'sha': 'SHA-1',
          'sha-1': 'SHA-1',
          'sha1': 'SHA-1',
          'sha256': 'SHA-256',
          'sha-256': 'SHA-256',
          'sha384': 'SHA-384',
          'sha-384': 'SHA-384',
          'sha-512': 'SHA-512',
          'sha512': 'SHA-512'
        }
        var checks = []
        function checkNative(algo) {
          if (global.process && !global.process.browser) {
            return Promise.resolve(false)
          }
          if (!subtle || !subtle.importKey || !subtle.deriveBits) {
            return Promise.resolve(false)
          }
          if (checks[algo] !== undefined) {
            return checks[algo]
          }
          ZERO_BUF = ZERO_BUF || Buffer.alloc(8)
          var prom = browserPbkdf2(ZERO_BUF, ZERO_BUF, 10, 128, algo)
            .then(function () {
              return true
            }).catch(function () {
              return false
            })
          checks[algo] = prom
          return prom
        }

        function browserPbkdf2(password, salt, iterations, length, algo) {
          return subtle.importKey(
            'raw', password, { name: 'PBKDF2' }, false, ['deriveBits']
          ).then(function (key) {
            return subtle.deriveBits({
              name: 'PBKDF2',
              salt: salt,
              iterations: iterations,
              hash: {
                name: algo
              }
            }, key, length << 3)
          }).then(function (res) {
            return Buffer.from(res)
          })
        }

        function resolvePromise(promise, callback) {
          promise.then(function (out) {
            process.nextTick(function () {
              callback(null, out)
            })
          }, function (e) {
            process.nextTick(function () {
              callback(e)
            })
          })
        }
        module.exports = function (password, salt, iterations, keylen, digest, callback) {
          if (typeof digest === 'function') {
            callback = digest
            digest = undefined
          }

          digest = digest || 'sha1'
          var algo = toBrowser[digest.toLowerCase()]

          if (!algo || typeof global.Promise !== 'function') {
            return process.nextTick(function () {
              var out
              try {
                out = sync(password, salt, iterations, keylen, digest)
              } catch (e) {
                return callback(e)
              }
              callback(null, out)
            })
          }

          checkParameters(password, salt, iterations, keylen)
          if (typeof callback !== 'function') throw new Error('No callback provided to pbkdf2')
          if (!Buffer.isBuffer(password)) password = Buffer.from(password, defaultEncoding)
          if (!Buffer.isBuffer(salt)) salt = Buffer.from(salt, defaultEncoding)

          resolvePromise(checkNative(algo).then(function (resp) {
            if (resp) return browserPbkdf2(password, salt, iterations, keylen, algo)

            return sync(password, salt, iterations, keylen, digest)
          }), callback)
        }

        /* WEBPACK VAR INJECTION */
      }.call(this, __webpack_require__(/*! ./../../../buildin/global.js */ "../../../../../AppData/Roaming/npm/node_modules/webpack/buildin/global.js"), __webpack_require__(/*! ./../../process/browser.js */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/process/browser.js")))

      /***/
    }),

/***/ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/pbkdf2/lib/default-encoding.js":
/*!*************************************************************!*\
  !*** (webpack)/node_modules/pbkdf2/lib/default-encoding.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function (process) {
        var defaultEncoding
        /* istanbul ignore next */
        if (process.browser) {
          defaultEncoding = 'utf-8'
        } else {
          var pVersionMajor = parseInt(process.version.split('.')[0].slice(1), 10)

          defaultEncoding = pVersionMajor >= 6 ? 'utf-8' : 'binary'
        }
        module.exports = defaultEncoding

        /* WEBPACK VAR INJECTION */
      }.call(this, __webpack_require__(/*! ./../../process/browser.js */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/process/browser.js")))

      /***/
    }),

/***/ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/pbkdf2/lib/precondition.js":
/*!*********************************************************!*\
  !*** (webpack)/node_modules/pbkdf2/lib/precondition.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function (Buffer) {
        var MAX_ALLOC = Math.pow(2, 30) - 1 // default in iojs

        function checkBuffer(buf, name) {
          if (typeof buf !== 'string' && !Buffer.isBuffer(buf)) {
            throw new TypeError(name + ' must be a buffer or string')
          }
        }

        module.exports = function (password, salt, iterations, keylen) {
          checkBuffer(password, 'Password')
          checkBuffer(salt, 'Salt')

          if (typeof iterations !== 'number') {
            throw new TypeError('Iterations not a number')
          }

          if (iterations < 0) {
            throw new TypeError('Bad iterations')
          }

          if (typeof keylen !== 'number') {
            throw new TypeError('Key length not a number')
          }

          if (keylen < 0 || keylen > MAX_ALLOC || keylen !== keylen) { /* eslint no-self-compare: 0 */
            throw new TypeError('Bad key length')
          }
        }

        /* WEBPACK VAR INJECTION */
      }.call(this, __webpack_require__(/*! ./../../buffer/index.js */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/buffer/index.js").Buffer))

      /***/
    }),

/***/ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/pbkdf2/lib/sync-browser.js":
/*!*********************************************************!*\
  !*** (webpack)/node_modules/pbkdf2/lib/sync-browser.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

      var md5 = __webpack_require__(/*! create-hash/md5 */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/create-hash/md5.js")
      var rmd160 = __webpack_require__(/*! ripemd160 */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/ripemd160/index.js")
      var sha = __webpack_require__(/*! sha.js */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/sha.js/index.js")

      var checkParameters = __webpack_require__(/*! ./precondition */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/pbkdf2/lib/precondition.js")
      var defaultEncoding = __webpack_require__(/*! ./default-encoding */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/pbkdf2/lib/default-encoding.js")
      var Buffer = __webpack_require__(/*! safe-buffer */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/safe-buffer/index.js").Buffer
      var ZEROS = Buffer.alloc(128)
      var sizes = {
        md5: 16,
        sha1: 20,
        sha224: 28,
        sha256: 32,
        sha384: 48,
        sha512: 64,
        rmd160: 20,
        ripemd160: 20
      }

      function Hmac(alg, key, saltLen) {
        var hash = getDigest(alg)
        var blocksize = (alg === 'sha512' || alg === 'sha384') ? 128 : 64

        if (key.length > blocksize) {
          key = hash(key)
        } else if (key.length < blocksize) {
          key = Buffer.concat([key, ZEROS], blocksize)
        }

        var ipad = Buffer.allocUnsafe(blocksize + sizes[alg])
        var opad = Buffer.allocUnsafe(blocksize + sizes[alg])
        for (var i = 0; i < blocksize; i++) {
          ipad[i] = key[i] ^ 0x36
          opad[i] = key[i] ^ 0x5C
        }

        var ipad1 = Buffer.allocUnsafe(blocksize + saltLen + 4)
        ipad.copy(ipad1, 0, 0, blocksize)
        this.ipad1 = ipad1
        this.ipad2 = ipad
        this.opad = opad
        this.alg = alg
        this.blocksize = blocksize
        this.hash = hash
        this.size = sizes[alg]
      }

      Hmac.prototype.run = function (data, ipad) {
        data.copy(ipad, this.blocksize)
        var h = this.hash(ipad)
        h.copy(this.opad, this.blocksize)
        return this.hash(this.opad)
      }

      function getDigest(alg) {
        function shaFunc(data) {
          return sha(alg).update(data).digest()
        }

        if (alg === 'rmd160' || alg === 'ripemd160') return rmd160
        if (alg === 'md5') return md5
        return shaFunc
      }

      function pbkdf2(password, salt, iterations, keylen, digest) {
        checkParameters(password, salt, iterations, keylen)

        if (!Buffer.isBuffer(password)) password = Buffer.from(password, defaultEncoding)
        if (!Buffer.isBuffer(salt)) salt = Buffer.from(salt, defaultEncoding)

        digest = digest || 'sha1'

        var hmac = new Hmac(digest, password, salt.length)

        var DK = Buffer.allocUnsafe(keylen)
        var block1 = Buffer.allocUnsafe(salt.length + 4)
        salt.copy(block1, 0, 0, salt.length)

        var destPos = 0
        var hLen = sizes[digest]
        var l = Math.ceil(keylen / hLen)

        for (var i = 1; i <= l; i++) {
          block1.writeUInt32BE(i, salt.length)

          var T = hmac.run(block1, hmac.ipad1)
          var U = T

          for (var j = 1; j < iterations; j++) {
            U = hmac.run(U, hmac.ipad2)
            for (var k = 0; k < hLen; k++) T[k] ^= U[k]
          }

          T.copy(DK, destPos)
          destPos += hLen
        }

        return DK
      }

      module.exports = pbkdf2


      /***/
    }),

/***/ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/process-nextick-args/index.js":
/*!************************************************************!*\
  !*** (webpack)/node_modules/process-nextick-args/index.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

      "use strict";
/* WEBPACK VAR INJECTION */(function (process) {

        if (!process.version ||
          process.version.indexOf('v0.') === 0 ||
          process.version.indexOf('v1.') === 0 && process.version.indexOf('v1.8.') !== 0) {
          module.exports = { nextTick: nextTick };
        } else {
          module.exports = process
        }

        function nextTick(fn, arg1, arg2, arg3) {
          if (typeof fn !== 'function') {
            throw new TypeError('"callback" argument must be a function');
          }
          var len = arguments.length;
          var args, i;
          switch (len) {
            case 0:
            case 1:
              return process.nextTick(fn);
            case 2:
              return process.nextTick(function afterTickOne() {
                fn.call(null, arg1);
              });
            case 3:
              return process.nextTick(function afterTickTwo() {
                fn.call(null, arg1, arg2);
              });
            case 4:
              return process.nextTick(function afterTickThree() {
                fn.call(null, arg1, arg2, arg3);
              });
            default:
              args = new Array(len - 1);
              i = 0;
              while (i < args.length) {
                args[i++] = arguments[i];
              }
              return process.nextTick(function afterTick() {
                fn.apply(null, args);
              });
          }
        }


        /* WEBPACK VAR INJECTION */
      }.call(this, __webpack_require__(/*! ./../process/browser.js */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/process/browser.js")))

      /***/
    }),

/***/ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/process/browser.js":
/*!*************************************************!*\
  !*** (webpack)/node_modules/process/browser.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function (module, exports) {

      // shim for using process in browser
      var process = module.exports = {};

      // cached from whatever global is present so that test runners that stub it
      // don't break things.  But we need to wrap it in a try catch in case it is
      // wrapped in strict mode code which doesn't define any globals.  It's inside a
      // function because try/catches deoptimize in certain engines.

      var cachedSetTimeout;
      var cachedClearTimeout;

      function defaultSetTimout() {
        throw new Error('setTimeout has not been defined');
      }
      function defaultClearTimeout() {
        throw new Error('clearTimeout has not been defined');
      }
      (function () {
        try {
          if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
          } else {
            cachedSetTimeout = defaultSetTimout;
          }
        } catch (e) {
          cachedSetTimeout = defaultSetTimout;
        }
        try {
          if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
          } else {
            cachedClearTimeout = defaultClearTimeout;
          }
        } catch (e) {
          cachedClearTimeout = defaultClearTimeout;
        }
      } ())
      function runTimeout(fun) {
        if (cachedSetTimeout === setTimeout) {
          //normal enviroments in sane situations
          return setTimeout(fun, 0);
        }
        // if setTimeout wasn't available but was latter defined
        if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
          cachedSetTimeout = setTimeout;
          return setTimeout(fun, 0);
        }
        try {
          // when when somebody has screwed with setTimeout but no I.E. maddness
          return cachedSetTimeout(fun, 0);
        } catch (e) {
          try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
          } catch (e) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
          }
        }


      }
      function runClearTimeout(marker) {
        if (cachedClearTimeout === clearTimeout) {
          //normal enviroments in sane situations
          return clearTimeout(marker);
        }
        // if clearTimeout wasn't available but was latter defined
        if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
          cachedClearTimeout = clearTimeout;
          return clearTimeout(marker);
        }
        try {
          // when when somebody has screwed with setTimeout but no I.E. maddness
          return cachedClearTimeout(marker);
        } catch (e) {
          try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
          } catch (e) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
          }
        }



      }
      var queue = [];
      var draining = false;
      var currentQueue;
      var queueIndex = -1;

      function cleanUpNextTick() {
        if (!draining || !currentQueue) {
          return;
        }
        draining = false;
        if (currentQueue.length) {
          queue = currentQueue.concat(queue);
        } else {
          queueIndex = -1;
        }
        if (queue.length) {
          drainQueue();
        }
      }

      function drainQueue() {
        if (draining) {
          return;
        }
        var timeout = runTimeout(cleanUpNextTick);
        draining = true;

        var len = queue.length;
        while (len) {
          currentQueue = queue;
          queue = [];
          while (++queueIndex < len) {
            if (currentQueue) {
              currentQueue[queueIndex].run();
            }
          }
          queueIndex = -1;
          len = queue.length;
        }
        currentQueue = null;
        draining = false;
        runClearTimeout(timeout);
      }

      process.nextTick = function (fun) {
        var args = new Array(arguments.length - 1);
        if (arguments.length > 1) {
          for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
          }
        }
        queue.push(new Item(fun, args));
        if (queue.length === 1 && !draining) {
          runTimeout(drainQueue);
        }
      };

      // v8 likes predictible objects
      function Item(fun, array) {
        this.fun = fun;
        this.array = array;
      }
      Item.prototype.run = function () {
        this.fun.apply(null, this.array);
      };
      process.title = 'browser';
      process.browser = true;
      process.env = {};
      process.argv = [];
      process.version = ''; // empty string to avoid regexp issues
      process.versions = {};

      function noop() { }

      process.on = noop;
      process.addListener = noop;
      process.once = noop;
      process.off = noop;
      process.removeListener = noop;
      process.removeAllListeners = noop;
      process.emit = noop;
      process.prependListener = noop;
      process.prependOnceListener = noop;

      process.listeners = function (name) { return [] }

      process.binding = function (name) {
        throw new Error('process.binding is not supported');
      };

      process.cwd = function () { return '/' };
      process.chdir = function (dir) {
        throw new Error('process.chdir is not supported');
      };
      process.umask = function () { return 0; };


      /***/
    }),

/***/ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/public-encrypt/browser.js":
/*!********************************************************!*\
  !*** (webpack)/node_modules/public-encrypt/browser.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

      exports.publicEncrypt = __webpack_require__(/*! ./publicEncrypt */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/public-encrypt/publicEncrypt.js");
      exports.privateDecrypt = __webpack_require__(/*! ./privateDecrypt */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/public-encrypt/privateDecrypt.js");

      exports.privateEncrypt = function privateEncrypt(key, buf) {
        return exports.publicEncrypt(key, buf, true);
      };

      exports.publicDecrypt = function publicDecrypt(key, buf) {
        return exports.privateDecrypt(key, buf, true);
      };

      /***/
    }),

/***/ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/public-encrypt/mgf.js":
/*!****************************************************!*\
  !*** (webpack)/node_modules/public-encrypt/mgf.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function (Buffer) {
        var createHash = __webpack_require__(/*! create-hash */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/create-hash/browser.js");
        module.exports = function (seed, len) {
          var t = new Buffer('');
          var i = 0, c;
          while (t.length < len) {
            c = i2ops(i++);
            t = Buffer.concat([t, createHash('sha1').update(seed).update(c).digest()]);
          }
          return t.slice(0, len);
        };

        function i2ops(c) {
          var out = new Buffer(4);
          out.writeUInt32BE(c, 0);
          return out;
        }
        /* WEBPACK VAR INJECTION */
      }.call(this, __webpack_require__(/*! ./../buffer/index.js */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/buffer/index.js").Buffer))

      /***/
    }),

/***/ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/public-encrypt/privateDecrypt.js":
/*!***************************************************************!*\
  !*** (webpack)/node_modules/public-encrypt/privateDecrypt.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function (Buffer) {
        var parseKeys = __webpack_require__(/*! parse-asn1 */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/parse-asn1/index.js");
        var mgf = __webpack_require__(/*! ./mgf */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/public-encrypt/mgf.js");
        var xor = __webpack_require__(/*! ./xor */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/public-encrypt/xor.js");
        var bn = __webpack_require__(/*! bn.js */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/bn.js/lib/bn.js");
        var crt = __webpack_require__(/*! browserify-rsa */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/browserify-rsa/index.js");
        var createHash = __webpack_require__(/*! create-hash */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/create-hash/browser.js");
        var withPublic = __webpack_require__(/*! ./withPublic */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/public-encrypt/withPublic.js");
        module.exports = function privateDecrypt(private_key, enc, reverse) {
          var padding;
          if (private_key.padding) {
            padding = private_key.padding;
          } else if (reverse) {
            padding = 1;
          } else {
            padding = 4;
          }

          var key = parseKeys(private_key);
          var k = key.modulus.byteLength();
          if (enc.length > k || new bn(enc).cmp(key.modulus) >= 0) {
            throw new Error('decryption error');
          }
          var msg;
          if (reverse) {
            msg = withPublic(new bn(enc), key);
          } else {
            msg = crt(enc, key);
          }
          var zBuffer = new Buffer(k - msg.length);
          zBuffer.fill(0);
          msg = Buffer.concat([zBuffer, msg], k);
          if (padding === 4) {
            return oaep(key, msg);
          } else if (padding === 1) {
            return pkcs1(key, msg, reverse);
          } else if (padding === 3) {
            return msg;
          } else {
            throw new Error('unknown padding');
          }
        };

        function oaep(key, msg) {
          var n = key.modulus;
          var k = key.modulus.byteLength();
          var mLen = msg.length;
          var iHash = createHash('sha1').update(new Buffer('')).digest();
          var hLen = iHash.length;
          var hLen2 = 2 * hLen;
          if (msg[0] !== 0) {
            throw new Error('decryption error');
          }
          var maskedSeed = msg.slice(1, hLen + 1);
          var maskedDb = msg.slice(hLen + 1);
          var seed = xor(maskedSeed, mgf(maskedDb, hLen));
          var db = xor(maskedDb, mgf(seed, k - hLen - 1));
          if (compare(iHash, db.slice(0, hLen))) {
            throw new Error('decryption error');
          }
          var i = hLen;
          while (db[i] === 0) {
            i++;
          }
          if (db[i++] !== 1) {
            throw new Error('decryption error');
          }
          return db.slice(i);
        }

        function pkcs1(key, msg, reverse) {
          var p1 = msg.slice(0, 2);
          var i = 2;
          var status = 0;
          while (msg[i++] !== 0) {
            if (i >= msg.length) {
              status++;
              break;
            }
          }
          var ps = msg.slice(2, i - 1);
          var p2 = msg.slice(i - 1, i);

          if ((p1.toString('hex') !== '0002' && !reverse) || (p1.toString('hex') !== '0001' && reverse)) {
            status++;
          }
          if (ps.length < 8) {
            status++;
          }
          if (status) {
            throw new Error('decryption error');
          }
          return msg.slice(i);
        }
        function compare(a, b) {
          a = new Buffer(a);
          b = new Buffer(b);
          var dif = 0;
          var len = a.length;
          if (a.length !== b.length) {
            dif++;
            len = Math.min(a.length, b.length);
          }
          var i = -1;
          while (++i < len) {
            dif += (a[i] ^ b[i]);
          }
          return dif;
        }
        /* WEBPACK VAR INJECTION */
      }.call(this, __webpack_require__(/*! ./../buffer/index.js */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/buffer/index.js").Buffer))

      /***/
    }),

/***/ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/public-encrypt/publicEncrypt.js":
/*!**************************************************************!*\
  !*** (webpack)/node_modules/public-encrypt/publicEncrypt.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function (Buffer) {
        var parseKeys = __webpack_require__(/*! parse-asn1 */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/parse-asn1/index.js");
        var randomBytes = __webpack_require__(/*! randombytes */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/randombytes/browser.js");
        var createHash = __webpack_require__(/*! create-hash */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/create-hash/browser.js");
        var mgf = __webpack_require__(/*! ./mgf */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/public-encrypt/mgf.js");
        var xor = __webpack_require__(/*! ./xor */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/public-encrypt/xor.js");
        var bn = __webpack_require__(/*! bn.js */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/bn.js/lib/bn.js");
        var withPublic = __webpack_require__(/*! ./withPublic */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/public-encrypt/withPublic.js");
        var crt = __webpack_require__(/*! browserify-rsa */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/browserify-rsa/index.js");

        var constants = {
          RSA_PKCS1_OAEP_PADDING: 4,
          RSA_PKCS1_PADDIN: 1,
          RSA_NO_PADDING: 3
        };

        module.exports = function publicEncrypt(public_key, msg, reverse) {
          var padding;
          if (public_key.padding) {
            padding = public_key.padding;
          } else if (reverse) {
            padding = 1;
          } else {
            padding = 4;
          }
          var key = parseKeys(public_key);
          var paddedMsg;
          if (padding === 4) {
            paddedMsg = oaep(key, msg);
          } else if (padding === 1) {
            paddedMsg = pkcs1(key, msg, reverse);
          } else if (padding === 3) {
            paddedMsg = new bn(msg);
            if (paddedMsg.cmp(key.modulus) >= 0) {
              throw new Error('data too long for modulus');
            }
          } else {
            throw new Error('unknown padding');
          }
          if (reverse) {
            return crt(paddedMsg, key);
          } else {
            return withPublic(paddedMsg, key);
          }
        };

        function oaep(key, msg) {
          var k = key.modulus.byteLength();
          var mLen = msg.length;
          var iHash = createHash('sha1').update(new Buffer('')).digest();
          var hLen = iHash.length;
          var hLen2 = 2 * hLen;
          if (mLen > k - hLen2 - 2) {
            throw new Error('message too long');
          }
          var ps = new Buffer(k - mLen - hLen2 - 2);
          ps.fill(0);
          var dblen = k - hLen - 1;
          var seed = randomBytes(hLen);
          var maskedDb = xor(Buffer.concat([iHash, ps, new Buffer([1]), msg], dblen), mgf(seed, dblen));
          var maskedSeed = xor(seed, mgf(maskedDb, hLen));
          return new bn(Buffer.concat([new Buffer([0]), maskedSeed, maskedDb], k));
        }
        function pkcs1(key, msg, reverse) {
          var mLen = msg.length;
          var k = key.modulus.byteLength();
          if (mLen > k - 11) {
            throw new Error('message too long');
          }
          var ps;
          if (reverse) {
            ps = new Buffer(k - mLen - 3);
            ps.fill(0xff);
          } else {
            ps = nonZero(k - mLen - 3);
          }
          return new bn(Buffer.concat([new Buffer([0, reverse ? 1 : 2]), ps, new Buffer([0]), msg], k));
        }
        function nonZero(len, crypto) {
          var out = new Buffer(len);
          var i = 0;
          var cache = randomBytes(len * 2);
          var cur = 0;
          var num;
          while (i < len) {
            if (cur === cache.length) {
              cache = randomBytes(len * 2);
              cur = 0;
            }
            num = cache[cur++];
            if (num) {
              out[i++] = num;
            }
          }
          return out;
        }
        /* WEBPACK VAR INJECTION */
      }.call(this, __webpack_require__(/*! ./../buffer/index.js */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/buffer/index.js").Buffer))

      /***/
    }),

/***/ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/public-encrypt/withPublic.js":
/*!***********************************************************!*\
  !*** (webpack)/node_modules/public-encrypt/withPublic.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function (Buffer) {
        var bn = __webpack_require__(/*! bn.js */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/bn.js/lib/bn.js");
        function withPublic(paddedMsg, key) {
          return new Buffer(paddedMsg
            .toRed(bn.mont(key.modulus))
            .redPow(new bn(key.publicExponent))
            .fromRed()
            .toArray());
        }

        module.exports = withPublic;
        /* WEBPACK VAR INJECTION */
      }.call(this, __webpack_require__(/*! ./../buffer/index.js */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/buffer/index.js").Buffer))

      /***/
    }),

/***/ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/public-encrypt/xor.js":
/*!****************************************************!*\
  !*** (webpack)/node_modules/public-encrypt/xor.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function (module, exports) {

      module.exports = function xor(a, b) {
        var len = a.length;
        var i = -1;
        while (++i < len) {
          a[i] ^= b[i];
        }
        return a
      };

      /***/
    }),

/***/ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/querystring-es3/decode.js":
/*!********************************************************!*\
  !*** (webpack)/node_modules/querystring-es3/decode.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

      "use strict";
      // Copyright Joyent, Inc. and other Node contributors.
      //
      // Permission is hereby granted, free of charge, to any person obtaining a
      // copy of this software and associated documentation files (the
      // "Software"), to deal in the Software without restriction, including
      // without limitation the rights to use, copy, modify, merge, publish,
      // distribute, sublicense, and/or sell copies of the Software, and to permit
      // persons to whom the Software is furnished to do so, subject to the
      // following conditions:
      //
      // The above copyright notice and this permission notice shall be included
      // in all copies or substantial portions of the Software.
      //
      // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
      // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
      // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
      // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
      // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
      // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
      // USE OR OTHER DEALINGS IN THE SOFTWARE.



      // If obj.hasOwnProperty has been overridden, then calling
      // obj.hasOwnProperty(prop) will break.
      // See: https://github.com/joyent/node/issues/1707
      function hasOwnProperty(obj, prop) {
        return Object.prototype.hasOwnProperty.call(obj, prop);
      }

      module.exports = function (qs, sep, eq, options) {
        sep = sep || '&';
        eq = eq || '=';
        var obj = {};

        if (typeof qs !== 'string' || qs.length === 0) {
          return obj;
        }

        var regexp = /\+/g;
        qs = qs.split(sep);

        var maxKeys = 1000;
        if (options && typeof options.maxKeys === 'number') {
          maxKeys = options.maxKeys;
        }

        var len = qs.length;
        // maxKeys <= 0 means that we should not limit keys count
        if (maxKeys > 0 && len > maxKeys) {
          len = maxKeys;
        }

        for (var i = 0; i < len; ++i) {
          var x = qs[i].replace(regexp, '%20'),
            idx = x.indexOf(eq),
            kstr, vstr, k, v;

          if (idx >= 0) {
            kstr = x.substr(0, idx);
            vstr = x.substr(idx + 1);
          } else {
            kstr = x;
            vstr = '';
          }

          k = decodeURIComponent(kstr);
          v = decodeURIComponent(vstr);

          if (!hasOwnProperty(obj, k)) {
            obj[k] = v;
          } else if (isArray(obj[k])) {
            obj[k].push(v);
          } else {
            obj[k] = [obj[k], v];
          }
        }

        return obj;
      };

      var isArray = Array.isArray || function (xs) {
        return Object.prototype.toString.call(xs) === '[object Array]';
      };


      /***/
    }),

/***/ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/querystring-es3/encode.js":
/*!********************************************************!*\
  !*** (webpack)/node_modules/querystring-es3/encode.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

      "use strict";
      // Copyright Joyent, Inc. and other Node contributors.
      //
      // Permission is hereby granted, free of charge, to any person obtaining a
      // copy of this software and associated documentation files (the
      // "Software"), to deal in the Software without restriction, including
      // without limitation the rights to use, copy, modify, merge, publish,
      // distribute, sublicense, and/or sell copies of the Software, and to permit
      // persons to whom the Software is furnished to do so, subject to the
      // following conditions:
      //
      // The above copyright notice and this permission notice shall be included
      // in all copies or substantial portions of the Software.
      //
      // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
      // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
      // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
      // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
      // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
      // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
      // USE OR OTHER DEALINGS IN THE SOFTWARE.



      var stringifyPrimitive = function (v) {
        switch (typeof v) {
          case 'string':
            return v;

          case 'boolean':
            return v ? 'true' : 'false';

          case 'number':
            return isFinite(v) ? v : '';

          default:
            return '';
        }
      };

      module.exports = function (obj, sep, eq, name) {
        sep = sep || '&';
        eq = eq || '=';
        if (obj === null) {
          obj = undefined;
        }

        if (typeof obj === 'object') {
          return map(objectKeys(obj), function (k) {
            var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;
            if (isArray(obj[k])) {
              return map(obj[k], function (v) {
                return ks + encodeURIComponent(stringifyPrimitive(v));
              }).join(sep);
            } else {
              return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
            }
          }).join(sep);

        }

        if (!name) return '';
        return encodeURIComponent(stringifyPrimitive(name)) + eq +
          encodeURIComponent(stringifyPrimitive(obj));
      };

      var isArray = Array.isArray || function (xs) {
        return Object.prototype.toString.call(xs) === '[object Array]';
      };

      function map(xs, f) {
        if (xs.map) return xs.map(f);
        var res = [];
        for (var i = 0; i < xs.length; i++) {
          res.push(f(xs[i], i));
        }
        return res;
      }

      var objectKeys = Object.keys || function (obj) {
        var res = [];
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) res.push(key);
        }
        return res;
      };


      /***/
    }),

/***/ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/querystring-es3/index.js":
/*!*******************************************************!*\
  !*** (webpack)/node_modules/querystring-es3/index.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

      "use strict";


      exports.decode = exports.parse = __webpack_require__(/*! ./decode */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/querystring-es3/decode.js");
      exports.encode = exports.stringify = __webpack_require__(/*! ./encode */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/querystring-es3/encode.js");


      /***/
    }),

/***/ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/randombytes/browser.js":
/*!*****************************************************!*\
  !*** (webpack)/node_modules/randombytes/browser.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

      "use strict";
/* WEBPACK VAR INJECTION */(function (global, process) {

        function oldBrowser() {
          throw new Error('Secure random number generation is not supported by this browser.\nUse Chrome, Firefox or Internet Explorer 11')
        }

        var Buffer = __webpack_require__(/*! safe-buffer */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/safe-buffer/index.js").Buffer
        var crypto = global.crypto || global.msCrypto

        if (crypto && crypto.getRandomValues) {
          module.exports = randomBytes
        } else {
          module.exports = oldBrowser
        }

        function randomBytes(size, cb) {
          // phantomjs needs to throw
          if (size > 65536) throw new Error('requested too many random bytes')
          // in case browserify  isn't using the Uint8Array version
          var rawBytes = new global.Uint8Array(size)

          // This will not work in older browsers.
          // See https://developer.mozilla.org/en-US/docs/Web/API/window.crypto.getRandomValues
          if (size > 0) {  // getRandomValues fails on IE if size == 0
            crypto.getRandomValues(rawBytes)
          }

          // XXX: phantomjs doesn't like a buffer being passed here
          var bytes = Buffer.from(rawBytes.buffer)

          if (typeof cb === 'function') {
            return process.nextTick(function () {
              cb(null, bytes)
            })
          }

          return bytes
        }

        /* WEBPACK VAR INJECTION */
      }.call(this, __webpack_require__(/*! ./../../buildin/global.js */ "../../../../../AppData/Roaming/npm/node_modules/webpack/buildin/global.js"), __webpack_require__(/*! ./../process/browser.js */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/process/browser.js")))

      /***/
    }),

/***/ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/randomfill/browser.js":
/*!****************************************************!*\
  !*** (webpack)/node_modules/randomfill/browser.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

      "use strict";
/* WEBPACK VAR INJECTION */(function (global, process) {

        function oldBrowser() {
          throw new Error('secure random number generation not supported by this browser\nuse chrome, FireFox or Internet Explorer 11')
        }
        var safeBuffer = __webpack_require__(/*! safe-buffer */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/safe-buffer/index.js")
        var randombytes = __webpack_require__(/*! randombytes */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/randombytes/browser.js")
        var Buffer = safeBuffer.Buffer
        var kBufferMaxLength = safeBuffer.kMaxLength
        var crypto = global.crypto || global.msCrypto
        var kMaxUint32 = Math.pow(2, 32) - 1
        function assertOffset(offset, length) {
          if (typeof offset !== 'number' || offset !== offset) { // eslint-disable-line no-self-compare
            throw new TypeError('offset must be a number')
          }

          if (offset > kMaxUint32 || offset < 0) {
            throw new TypeError('offset must be a uint32')
          }

          if (offset > kBufferMaxLength || offset > length) {
            throw new RangeError('offset out of range')
          }
        }

        function assertSize(size, offset, length) {
          if (typeof size !== 'number' || size !== size) { // eslint-disable-line no-self-compare
            throw new TypeError('size must be a number')
          }

          if (size > kMaxUint32 || size < 0) {
            throw new TypeError('size must be a uint32')
          }

          if (size + offset > length || size > kBufferMaxLength) {
            throw new RangeError('buffer too small')
          }
        }
        if ((crypto && crypto.getRandomValues) || !process.browser) {
          exports.randomFill = randomFill
          exports.randomFillSync = randomFillSync
        } else {
          exports.randomFill = oldBrowser
          exports.randomFillSync = oldBrowser
        }
        function randomFill(buf, offset, size, cb) {
          if (!Buffer.isBuffer(buf) && !(buf instanceof global.Uint8Array)) {
            throw new TypeError('"buf" argument must be a Buffer or Uint8Array')
          }

          if (typeof offset === 'function') {
            cb = offset
            offset = 0
            size = buf.length
          } else if (typeof size === 'function') {
            cb = size
            size = buf.length - offset
          } else if (typeof cb !== 'function') {
            throw new TypeError('"cb" argument must be a function')
          }
          assertOffset(offset, buf.length)
          assertSize(size, offset, buf.length)
          return actualFill(buf, offset, size, cb)
        }

        function actualFill(buf, offset, size, cb) {
          if (process.browser) {
            var ourBuf = buf.buffer
            var uint = new Uint8Array(ourBuf, offset, size)
            crypto.getRandomValues(uint)
            if (cb) {
              process.nextTick(function () {
                cb(null, buf)
              })
              return
            }
            return buf
          }
          if (cb) {
            randombytes(size, function (err, bytes) {
              if (err) {
                return cb(err)
              }
              bytes.copy(buf, offset)
              cb(null, buf)
            })
            return
          }
          var bytes = randombytes(size)
          bytes.copy(buf, offset)
          return buf
        }
        function randomFillSync(buf, offset, size) {
          if (typeof offset === 'undefined') {
            offset = 0
          }
          if (!Buffer.isBuffer(buf) && !(buf instanceof global.Uint8Array)) {
            throw new TypeError('"buf" argument must be a Buffer or Uint8Array')
          }

          assertOffset(offset, buf.length)

          if (size === undefined) size = buf.length - offset

          assertSize(size, offset, buf.length)

          return actualFill(buf, offset, size)
        }

        /* WEBPACK VAR INJECTION */
      }.call(this, __webpack_require__(/*! ./../../buildin/global.js */ "../../../../../AppData/Roaming/npm/node_modules/webpack/buildin/global.js"), __webpack_require__(/*! ./../process/browser.js */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/process/browser.js")))

      /***/
    }),

/***/ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/readable-stream/duplex-browser.js":
/*!****************************************************************!*\
  !*** (webpack)/node_modules/readable-stream/duplex-browser.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

      module.exports = __webpack_require__(/*! ./lib/_stream_duplex.js */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/readable-stream/lib/_stream_duplex.js");


      /***/
    }),

/***/ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/readable-stream/lib/_stream_duplex.js":
/*!********************************************************************!*\
  !*** (webpack)/node_modules/readable-stream/lib/_stream_duplex.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

      "use strict";
      // Copyright Joyent, Inc. and other Node contributors.
      //
      // Permission is hereby granted, free of charge, to any person obtaining a
      // copy of this software and associated documentation files (the
      // "Software"), to deal in the Software without restriction, including
      // without limitation the rights to use, copy, modify, merge, publish,
      // distribute, sublicense, and/or sell copies of the Software, and to permit
      // persons to whom the Software is furnished to do so, subject to the
      // following conditions:
      //
      // The above copyright notice and this permission notice shall be included
      // in all copies or substantial portions of the Software.
      //
      // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
      // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
      // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
      // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
      // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
      // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
      // USE OR OTHER DEALINGS IN THE SOFTWARE.

      // a duplex stream is just a stream that is both readable and writable.
      // Since JS doesn't have multiple prototypal inheritance, this class
      // prototypally inherits from Readable, and then parasitically from
      // Writable.



      /*<replacement>*/

      var pna = __webpack_require__(/*! process-nextick-args */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/process-nextick-args/index.js");
      /*</replacement>*/

      /*<replacement>*/
      var objectKeys = Object.keys || function (obj) {
        var keys = [];
        for (var key in obj) {
          keys.push(key);
        } return keys;
      };
      /*</replacement>*/

      module.exports = Duplex;

      /*<replacement>*/
      var util = __webpack_require__(/*! core-util-is */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/core-util-is/lib/util.js");
      util.inherits = __webpack_require__(/*! inherits */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/inherits/inherits_browser.js");
      /*</replacement>*/

      var Readable = __webpack_require__(/*! ./_stream_readable */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/readable-stream/lib/_stream_readable.js");
      var Writable = __webpack_require__(/*! ./_stream_writable */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/readable-stream/lib/_stream_writable.js");

      util.inherits(Duplex, Readable);

      {
        // avoid scope creep, the keys array can then be collected
        var keys = objectKeys(Writable.prototype);
        for (var v = 0; v < keys.length; v++) {
          var method = keys[v];
          if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
        }
      }

      function Duplex(options) {
        if (!(this instanceof Duplex)) return new Duplex(options);

        Readable.call(this, options);
        Writable.call(this, options);

        if (options && options.readable === false) this.readable = false;

        if (options && options.writable === false) this.writable = false;

        this.allowHalfOpen = true;
        if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;

        this.once('end', onend);
      }

      Object.defineProperty(Duplex.prototype, 'writableHighWaterMark', {
        // making it explicit this property is not enumerable
        // because otherwise some prototype manipulation in
        // userland will fail
        enumerable: false,
        get: function () {
          return this._writableState.highWaterMark;
        }
      });

      // the no-half-open enforcer
      function onend() {
        // if we allow half-open state, or if the writable side ended,
        // then we're ok.
        if (this.allowHalfOpen || this._writableState.ended) return;

        // no more data can be written.
        // But allow more writes to happen in this tick.
        pna.nextTick(onEndNT, this);
      }

      function onEndNT(self) {
        self.end();
      }

      Object.defineProperty(Duplex.prototype, 'destroyed', {
        get: function () {
          if (this._readableState === undefined || this._writableState === undefined) {
            return false;
          }
          return this._readableState.destroyed && this._writableState.destroyed;
        },
        set: function (value) {
          // we ignore the value if the stream
          // has not been initialized yet
          if (this._readableState === undefined || this._writableState === undefined) {
            return;
          }

          // backward compatibility, the user is explicitly
          // managing destroyed
          this._readableState.destroyed = value;
          this._writableState.destroyed = value;
        }
      });

      Duplex.prototype._destroy = function (err, cb) {
        this.push(null);
        this.end();

        pna.nextTick(cb, err);
      };

      /***/
    }),

/***/ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/readable-stream/lib/_stream_passthrough.js":
/*!*************************************************************************!*\
  !*** (webpack)/node_modules/readable-stream/lib/_stream_passthrough.js ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

      "use strict";
      // Copyright Joyent, Inc. and other Node contributors.
      //
      // Permission is hereby granted, free of charge, to any person obtaining a
      // copy of this software and associated documentation files (the
      // "Software"), to deal in the Software without restriction, including
      // without limitation the rights to use, copy, modify, merge, publish,
      // distribute, sublicense, and/or sell copies of the Software, and to permit
      // persons to whom the Software is furnished to do so, subject to the
      // following conditions:
      //
      // The above copyright notice and this permission notice shall be included
      // in all copies or substantial portions of the Software.
      //
      // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
      // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
      // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
      // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
      // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
      // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
      // USE OR OTHER DEALINGS IN THE SOFTWARE.

      // a passthrough stream.
      // basically just the most minimal sort of Transform stream.
      // Every written chunk gets output as-is.



      module.exports = PassThrough;

      var Transform = __webpack_require__(/*! ./_stream_transform */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/readable-stream/lib/_stream_transform.js");

      /*<replacement>*/
      var util = __webpack_require__(/*! core-util-is */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/core-util-is/lib/util.js");
      util.inherits = __webpack_require__(/*! inherits */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/inherits/inherits_browser.js");
      /*</replacement>*/

      util.inherits(PassThrough, Transform);

      function PassThrough(options) {
        if (!(this instanceof PassThrough)) return new PassThrough(options);

        Transform.call(this, options);
      }

      PassThrough.prototype._transform = function (chunk, encoding, cb) {
        cb(null, chunk);
      };

      /***/
    }),

/***/ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/readable-stream/lib/_stream_readable.js":
/*!**********************************************************************!*\
  !*** (webpack)/node_modules/readable-stream/lib/_stream_readable.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

      "use strict";
/* WEBPACK VAR INJECTION */(function (global, process) {// Copyright Joyent, Inc. and other Node contributors.
        //
        // Permission is hereby granted, free of charge, to any person obtaining a
        // copy of this software and associated documentation files (the
        // "Software"), to deal in the Software without restriction, including
        // without limitation the rights to use, copy, modify, merge, publish,
        // distribute, sublicense, and/or sell copies of the Software, and to permit
        // persons to whom the Software is furnished to do so, subject to the
        // following conditions:
        //
        // The above copyright notice and this permission notice shall be included
        // in all copies or substantial portions of the Software.
        //
        // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
        // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
        // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
        // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
        // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
        // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
        // USE OR OTHER DEALINGS IN THE SOFTWARE.



        /*<replacement>*/

        var pna = __webpack_require__(/*! process-nextick-args */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/process-nextick-args/index.js");
        /*</replacement>*/

        module.exports = Readable;

        /*<replacement>*/
        var isArray = __webpack_require__(/*! isarray */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/isarray/index.js");
        /*</replacement>*/

        /*<replacement>*/
        var Duplex;
        /*</replacement>*/

        Readable.ReadableState = ReadableState;

        /*<replacement>*/
        var EE = __webpack_require__(/*! events */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/events/events.js").EventEmitter;

        var EElistenerCount = function (emitter, type) {
          return emitter.listeners(type).length;
        };
        /*</replacement>*/

        /*<replacement>*/
        var Stream = __webpack_require__(/*! ./internal/streams/stream */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/readable-stream/lib/internal/streams/stream-browser.js");
        /*</replacement>*/

        /*<replacement>*/

        var Buffer = __webpack_require__(/*! safe-buffer */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/safe-buffer/index.js").Buffer;
        var OurUint8Array = global.Uint8Array || function () { };
        function _uint8ArrayToBuffer(chunk) {
          return Buffer.from(chunk);
        }
        function _isUint8Array(obj) {
          return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
        }

        /*</replacement>*/

        /*<replacement>*/
        var util = __webpack_require__(/*! core-util-is */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/core-util-is/lib/util.js");
        util.inherits = __webpack_require__(/*! inherits */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/inherits/inherits_browser.js");
        /*</replacement>*/

        /*<replacement>*/
        var debugUtil = __webpack_require__(/*! util */ 0);
        var debug = void 0;
        if (debugUtil && debugUtil.debuglog) {
          debug = debugUtil.debuglog('stream');
        } else {
          debug = function () { };
        }
        /*</replacement>*/

        var BufferList = __webpack_require__(/*! ./internal/streams/BufferList */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/readable-stream/lib/internal/streams/BufferList.js");
        var destroyImpl = __webpack_require__(/*! ./internal/streams/destroy */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/readable-stream/lib/internal/streams/destroy.js");
        var StringDecoder;

        util.inherits(Readable, Stream);

        var kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];

        function prependListener(emitter, event, fn) {
          // Sadly this is not cacheable as some libraries bundle their own
          // event emitter implementation with them.
          if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn);

          // This is a hack to make sure that our error handler is attached before any
          // userland ones.  NEVER DO THIS. This is here only because this code needs
          // to continue to work with older versions of Node.js that do not include
          // the prependListener() method. The goal is to eventually remove this hack.
          if (!emitter._events || !emitter._events[event]) emitter.on(event, fn); else if (isArray(emitter._events[event])) emitter._events[event].unshift(fn); else emitter._events[event] = [fn, emitter._events[event]];
        }

        function ReadableState(options, stream) {
          Duplex = Duplex || __webpack_require__(/*! ./_stream_duplex */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/readable-stream/lib/_stream_duplex.js");

          options = options || {};

          // Duplex streams are both readable and writable, but share
          // the same options object.
          // However, some cases require setting options to different
          // values for the readable and the writable sides of the duplex stream.
          // These options can be provided separately as readableXXX and writableXXX.
          var isDuplex = stream instanceof Duplex;

          // object stream flag. Used to make read(n) ignore n and to
          // make all the buffer merging and length checks go away
          this.objectMode = !!options.objectMode;

          if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode;

          // the point at which it stops calling _read() to fill the buffer
          // Note: 0 is a valid value, means "don't call _read preemptively ever"
          var hwm = options.highWaterMark;
          var readableHwm = options.readableHighWaterMark;
          var defaultHwm = this.objectMode ? 16 : 16 * 1024;

          if (hwm || hwm === 0) this.highWaterMark = hwm; else if (isDuplex && (readableHwm || readableHwm === 0)) this.highWaterMark = readableHwm; else this.highWaterMark = defaultHwm;

          // cast to ints.
          this.highWaterMark = Math.floor(this.highWaterMark);

          // A linked list is used to store data chunks instead of an array because the
          // linked list can remove elements from the beginning faster than
          // array.shift()
          this.buffer = new BufferList();
          this.length = 0;
          this.pipes = null;
          this.pipesCount = 0;
          this.flowing = null;
          this.ended = false;
          this.endEmitted = false;
          this.reading = false;

          // a flag to be able to tell if the event 'readable'/'data' is emitted
          // immediately, or on a later tick.  We set this to true at first, because
          // any actions that shouldn't happen until "later" should generally also
          // not happen before the first read call.
          this.sync = true;

          // whenever we return null, then we set a flag to say
          // that we're awaiting a 'readable' event emission.
          this.needReadable = false;
          this.emittedReadable = false;
          this.readableListening = false;
          this.resumeScheduled = false;

          // has it been destroyed
          this.destroyed = false;

          // Crypto is kind of old and crusty.  Historically, its default string
          // encoding is 'binary' so we have to make this configurable.
          // Everything else in the universe uses 'utf8', though.
          this.defaultEncoding = options.defaultEncoding || 'utf8';

          // the number of writers that are awaiting a drain event in .pipe()s
          this.awaitDrain = 0;

          // if true, a maybeReadMore has been scheduled
          this.readingMore = false;

          this.decoder = null;
          this.encoding = null;
          if (options.encoding) {
            if (!StringDecoder) StringDecoder = __webpack_require__(/*! string_decoder/ */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/string_decoder/lib/string_decoder.js").StringDecoder;
            this.decoder = new StringDecoder(options.encoding);
            this.encoding = options.encoding;
          }
        }

        function Readable(options) {
          Duplex = Duplex || __webpack_require__(/*! ./_stream_duplex */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/readable-stream/lib/_stream_duplex.js");

          if (!(this instanceof Readable)) return new Readable(options);

          this._readableState = new ReadableState(options, this);

          // legacy
          this.readable = true;

          if (options) {
            if (typeof options.read === 'function') this._read = options.read;

            if (typeof options.destroy === 'function') this._destroy = options.destroy;
          }

          Stream.call(this);
        }

        Object.defineProperty(Readable.prototype, 'destroyed', {
          get: function () {
            if (this._readableState === undefined) {
              return false;
            }
            return this._readableState.destroyed;
          },
          set: function (value) {
            // we ignore the value if the stream
            // has not been initialized yet
            if (!this._readableState) {
              return;
            }

            // backward compatibility, the user is explicitly
            // managing destroyed
            this._readableState.destroyed = value;
          }
        });

        Readable.prototype.destroy = destroyImpl.destroy;
        Readable.prototype._undestroy = destroyImpl.undestroy;
        Readable.prototype._destroy = function (err, cb) {
          this.push(null);
          cb(err);
        };

        // Manually shove something into the read() buffer.
        // This returns true if the highWaterMark has not been hit yet,
        // similar to how Writable.write() returns true if you should
        // write() some more.
        Readable.prototype.push = function (chunk, encoding) {
          var state = this._readableState;
          var skipChunkCheck;

          if (!state.objectMode) {
            if (typeof chunk === 'string') {
              encoding = encoding || state.defaultEncoding;
              if (encoding !== state.encoding) {
                chunk = Buffer.from(chunk, encoding);
                encoding = '';
              }
              skipChunkCheck = true;
            }
          } else {
            skipChunkCheck = true;
          }

          return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
        };

        // Unshift should *always* be something directly out of read()
        Readable.prototype.unshift = function (chunk) {
          return readableAddChunk(this, chunk, null, true, false);
        };

        function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
          var state = stream._readableState;
          if (chunk === null) {
            state.reading = false;
            onEofChunk(stream, state);
          } else {
            var er;
            if (!skipChunkCheck) er = chunkInvalid(state, chunk);
            if (er) {
              stream.emit('error', er);
            } else if (state.objectMode || chunk && chunk.length > 0) {
              if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {
                chunk = _uint8ArrayToBuffer(chunk);
              }

              if (addToFront) {
                if (state.endEmitted) stream.emit('error', new Error('stream.unshift() after end event')); else addChunk(stream, state, chunk, true);
              } else if (state.ended) {
                stream.emit('error', new Error('stream.push() after EOF'));
              } else {
                state.reading = false;
                if (state.decoder && !encoding) {
                  chunk = state.decoder.write(chunk);
                  if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false); else maybeReadMore(stream, state);
                } else {
                  addChunk(stream, state, chunk, false);
                }
              }
            } else if (!addToFront) {
              state.reading = false;
            }
          }

          return needMoreData(state);
        }

        function addChunk(stream, state, chunk, addToFront) {
          if (state.flowing && state.length === 0 && !state.sync) {
            stream.emit('data', chunk);
            stream.read(0);
          } else {
            // update the buffer info.
            state.length += state.objectMode ? 1 : chunk.length;
            if (addToFront) state.buffer.unshift(chunk); else state.buffer.push(chunk);

            if (state.needReadable) emitReadable(stream);
          }
          maybeReadMore(stream, state);
        }

        function chunkInvalid(state, chunk) {
          var er;
          if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
            er = new TypeError('Invalid non-string/buffer chunk');
          }
          return er;
        }

        // if it's past the high water mark, we can push in some more.
        // Also, if we have no data yet, we can stand some
        // more bytes.  This is to work around cases where hwm=0,
        // such as the repl.  Also, if the push() triggered a
        // readable event, and the user called read(largeNumber) such that
        // needReadable was set, then we ought to push more, so that another
        // 'readable' event will be triggered.
        function needMoreData(state) {
          return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);
        }

        Readable.prototype.isPaused = function () {
          return this._readableState.flowing === false;
        };

        // backwards compatibility.
        Readable.prototype.setEncoding = function (enc) {
          if (!StringDecoder) StringDecoder = __webpack_require__(/*! string_decoder/ */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/string_decoder/lib/string_decoder.js").StringDecoder;
          this._readableState.decoder = new StringDecoder(enc);
          this._readableState.encoding = enc;
          return this;
        };

        // Don't raise the hwm > 8MB
        var MAX_HWM = 0x800000;
        function computeNewHighWaterMark(n) {
          if (n >= MAX_HWM) {
            n = MAX_HWM;
          } else {
            // Get the next highest power of 2 to prevent increasing hwm excessively in
            // tiny amounts
            n--;
            n |= n >>> 1;
            n |= n >>> 2;
            n |= n >>> 4;
            n |= n >>> 8;
            n |= n >>> 16;
            n++;
          }
          return n;
        }

        // This function is designed to be inlinable, so please take care when making
        // changes to the function body.
        function howMuchToRead(n, state) {
          if (n <= 0 || state.length === 0 && state.ended) return 0;
          if (state.objectMode) return 1;
          if (n !== n) {
            // Only flow one buffer at a time
            if (state.flowing && state.length) return state.buffer.head.data.length; else return state.length;
          }
          // If we're asking for more than the current hwm, then raise the hwm.
          if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
          if (n <= state.length) return n;
          // Don't have enough
          if (!state.ended) {
            state.needReadable = true;
            return 0;
          }
          return state.length;
        }

        // you can override either this method, or the async _read(n) below.
        Readable.prototype.read = function (n) {
          debug('read', n);
          n = parseInt(n, 10);
          var state = this._readableState;
          var nOrig = n;

          if (n !== 0) state.emittedReadable = false;

          // if we're doing read(0) to trigger a readable event, but we
          // already have a bunch of data in the buffer, then just trigger
          // the 'readable' event and move on.
          if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
            debug('read: emitReadable', state.length, state.ended);
            if (state.length === 0 && state.ended) endReadable(this); else emitReadable(this);
            return null;
          }

          n = howMuchToRead(n, state);

          // if we've ended, and we're now clear, then finish it up.
          if (n === 0 && state.ended) {
            if (state.length === 0) endReadable(this);
            return null;
          }

          // All the actual chunk generation logic needs to be
          // *below* the call to _read.  The reason is that in certain
          // synthetic stream cases, such as passthrough streams, _read
          // may be a completely synchronous operation which may change
          // the state of the read buffer, providing enough data when
          // before there was *not* enough.
          //
          // So, the steps are:
          // 1. Figure out what the state of things will be after we do
          // a read from the buffer.
          //
          // 2. If that resulting state will trigger a _read, then call _read.
          // Note that this may be asynchronous, or synchronous.  Yes, it is
          // deeply ugly to write APIs this way, but that still doesn't mean
          // that the Readable class should behave improperly, as streams are
          // designed to be sync/async agnostic.
          // Take note if the _read call is sync or async (ie, if the read call
          // has returned yet), so that we know whether or not it's safe to emit
          // 'readable' etc.
          //
          // 3. Actually pull the requested chunks out of the buffer and return.

          // if we need a readable event, then we need to do some reading.
          var doRead = state.needReadable;
          debug('need readable', doRead);

          // if we currently have less than the highWaterMark, then also read some
          if (state.length === 0 || state.length - n < state.highWaterMark) {
            doRead = true;
            debug('length less than watermark', doRead);
          }

          // however, if we've ended, then there's no point, and if we're already
          // reading, then it's unnecessary.
          if (state.ended || state.reading) {
            doRead = false;
            debug('reading or ended', doRead);
          } else if (doRead) {
            debug('do read');
            state.reading = true;
            state.sync = true;
            // if the length is currently zero, then we *need* a readable event.
            if (state.length === 0) state.needReadable = true;
            // call internal read method
            this._read(state.highWaterMark);
            state.sync = false;
            // If _read pushed data synchronously, then `reading` will be false,
            // and we need to re-evaluate how much data we can return to the user.
            if (!state.reading) n = howMuchToRead(nOrig, state);
          }

          var ret;
          if (n > 0) ret = fromList(n, state); else ret = null;

          if (ret === null) {
            state.needReadable = true;
            n = 0;
          } else {
            state.length -= n;
          }

          if (state.length === 0) {
            // If we have nothing in the buffer, then we want to know
            // as soon as we *do* get something into the buffer.
            if (!state.ended) state.needReadable = true;

            // If we tried to read() past the EOF, then emit end on the next tick.
            if (nOrig !== n && state.ended) endReadable(this);
          }

          if (ret !== null) this.emit('data', ret);

          return ret;
        };

        function onEofChunk(stream, state) {
          if (state.ended) return;
          if (state.decoder) {
            var chunk = state.decoder.end();
            if (chunk && chunk.length) {
              state.buffer.push(chunk);
              state.length += state.objectMode ? 1 : chunk.length;
            }
          }
          state.ended = true;

          // emit 'readable' now to make sure it gets picked up.
          emitReadable(stream);
        }

        // Don't emit readable right away in sync mode, because this can trigger
        // another read() call => stack overflow.  This way, it might trigger
        // a nextTick recursion warning, but that's not so bad.
        function emitReadable(stream) {
          var state = stream._readableState;
          state.needReadable = false;
          if (!state.emittedReadable) {
            debug('emitReadable', state.flowing);
            state.emittedReadable = true;
            if (state.sync) pna.nextTick(emitReadable_, stream); else emitReadable_(stream);
          }
        }

        function emitReadable_(stream) {
          debug('emit readable');
          stream.emit('readable');
          flow(stream);
        }

        // at this point, the user has presumably seen the 'readable' event,
        // and called read() to consume some data.  that may have triggered
        // in turn another _read(n) call, in which case reading = true if
        // it's in progress.
        // However, if we're not ended, or reading, and the length < hwm,
        // then go ahead and try to read some more preemptively.
        function maybeReadMore(stream, state) {
          if (!state.readingMore) {
            state.readingMore = true;
            pna.nextTick(maybeReadMore_, stream, state);
          }
        }

        function maybeReadMore_(stream, state) {
          var len = state.length;
          while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {
            debug('maybeReadMore read 0');
            stream.read(0);
            if (len === state.length)
              // didn't get any data, stop spinning.
              break; else len = state.length;
          }
          state.readingMore = false;
        }

        // abstract method.  to be overridden in specific implementation classes.
        // call cb(er, data) where data is <= n in length.
        // for virtual (non-string, non-buffer) streams, "length" is somewhat
        // arbitrary, and perhaps not very meaningful.
        Readable.prototype._read = function (n) {
          this.emit('error', new Error('_read() is not implemented'));
        };

        Readable.prototype.pipe = function (dest, pipeOpts) {
          var src = this;
          var state = this._readableState;

          switch (state.pipesCount) {
            case 0:
              state.pipes = dest;
              break;
            case 1:
              state.pipes = [state.pipes, dest];
              break;
            default:
              state.pipes.push(dest);
              break;
          }
          state.pipesCount += 1;
          debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);

          var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;

          var endFn = doEnd ? onend : unpipe;
          if (state.endEmitted) pna.nextTick(endFn); else src.once('end', endFn);

          dest.on('unpipe', onunpipe);
          function onunpipe(readable, unpipeInfo) {
            debug('onunpipe');
            if (readable === src) {
              if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
                unpipeInfo.hasUnpiped = true;
                cleanup();
              }
            }
          }

          function onend() {
            debug('onend');
            dest.end();
          }

          // when the dest drains, it reduces the awaitDrain counter
          // on the source.  This would be more elegant with a .once()
          // handler in flow(), but adding and removing repeatedly is
          // too slow.
          var ondrain = pipeOnDrain(src);
          dest.on('drain', ondrain);

          var cleanedUp = false;
          function cleanup() {
            debug('cleanup');
            // cleanup event handlers once the pipe is broken
            dest.removeListener('close', onclose);
            dest.removeListener('finish', onfinish);
            dest.removeListener('drain', ondrain);
            dest.removeListener('error', onerror);
            dest.removeListener('unpipe', onunpipe);
            src.removeListener('end', onend);
            src.removeListener('end', unpipe);
            src.removeListener('data', ondata);

            cleanedUp = true;

            // if the reader is waiting for a drain event from this
            // specific writer, then it would cause it to never start
            // flowing again.
            // So, if this is awaiting a drain, then we just call it now.
            // If we don't know, then assume that we are waiting for one.
            if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
          }

          // If the user pushes more data while we're writing to dest then we'll end up
          // in ondata again. However, we only want to increase awaitDrain once because
          // dest will only emit one 'drain' event for the multiple writes.
          // => Introduce a guard on increasing awaitDrain.
          var increasedAwaitDrain = false;
          src.on('data', ondata);
          function ondata(chunk) {
            debug('ondata');
            increasedAwaitDrain = false;
            var ret = dest.write(chunk);
            if (false === ret && !increasedAwaitDrain) {
              // If the user unpiped during `dest.write()`, it is possible
              // to get stuck in a permanently paused state if that write
              // also returned false.
              // => Check whether `dest` is still a piping destination.
              if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
                debug('false write response, pause', src._readableState.awaitDrain);
                src._readableState.awaitDrain++;
                increasedAwaitDrain = true;
              }
              src.pause();
            }
          }

          // if the dest has an error, then stop piping into it.
          // however, don't suppress the throwing behavior for this.
          function onerror(er) {
            debug('onerror', er);
            unpipe();
            dest.removeListener('error', onerror);
            if (EElistenerCount(dest, 'error') === 0) dest.emit('error', er);
          }

          // Make sure our error handler is attached before userland ones.
          prependListener(dest, 'error', onerror);

          // Both close and finish should trigger unpipe, but only once.
          function onclose() {
            dest.removeListener('finish', onfinish);
            unpipe();
          }
          dest.once('close', onclose);
          function onfinish() {
            debug('onfinish');
            dest.removeListener('close', onclose);
            unpipe();
          }
          dest.once('finish', onfinish);

          function unpipe() {
            debug('unpipe');
            src.unpipe(dest);
          }

          // tell the dest that it's being piped to
          dest.emit('pipe', src);

          // start the flow if it hasn't been started already.
          if (!state.flowing) {
            debug('pipe resume');
            src.resume();
          }

          return dest;
        };

        function pipeOnDrain(src) {
          return function () {
            var state = src._readableState;
            debug('pipeOnDrain', state.awaitDrain);
            if (state.awaitDrain) state.awaitDrain--;
            if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
              state.flowing = true;
              flow(src);
            }
          };
        }

        Readable.prototype.unpipe = function (dest) {
          var state = this._readableState;
          var unpipeInfo = { hasUnpiped: false };

          // if we're not piping anywhere, then do nothing.
          if (state.pipesCount === 0) return this;

          // just one destination.  most common case.
          if (state.pipesCount === 1) {
            // passed in one, but it's not the right one.
            if (dest && dest !== state.pipes) return this;

            if (!dest) dest = state.pipes;

            // got a match.
            state.pipes = null;
            state.pipesCount = 0;
            state.flowing = false;
            if (dest) dest.emit('unpipe', this, unpipeInfo);
            return this;
          }

          // slow case. multiple pipe destinations.

          if (!dest) {
            // remove all.
            var dests = state.pipes;
            var len = state.pipesCount;
            state.pipes = null;
            state.pipesCount = 0;
            state.flowing = false;

            for (var i = 0; i < len; i++) {
              dests[i].emit('unpipe', this, unpipeInfo);
            } return this;
          }

          // try to find the right one.
          var index = indexOf(state.pipes, dest);
          if (index === -1) return this;

          state.pipes.splice(index, 1);
          state.pipesCount -= 1;
          if (state.pipesCount === 1) state.pipes = state.pipes[0];

          dest.emit('unpipe', this, unpipeInfo);

          return this;
        };

        // set up data events if they are asked for
        // Ensure readable listeners eventually get something
        Readable.prototype.on = function (ev, fn) {
          var res = Stream.prototype.on.call(this, ev, fn);

          if (ev === 'data') {
            // Start flowing on next tick if stream isn't explicitly paused
            if (this._readableState.flowing !== false) this.resume();
          } else if (ev === 'readable') {
            var state = this._readableState;
            if (!state.endEmitted && !state.readableListening) {
              state.readableListening = state.needReadable = true;
              state.emittedReadable = false;
              if (!state.reading) {
                pna.nextTick(nReadingNextTick, this);
              } else if (state.length) {
                emitReadable(this);
              }
            }
          }

          return res;
        };
        Readable.prototype.addListener = Readable.prototype.on;

        function nReadingNextTick(self) {
          debug('readable nexttick read 0');
          self.read(0);
        }

        // pause() and resume() are remnants of the legacy readable stream API
        // If the user uses them, then switch into old mode.
        Readable.prototype.resume = function () {
          var state = this._readableState;
          if (!state.flowing) {
            debug('resume');
            state.flowing = true;
            resume(this, state);
          }
          return this;
        };

        function resume(stream, state) {
          if (!state.resumeScheduled) {
            state.resumeScheduled = true;
            pna.nextTick(resume_, stream, state);
          }
        }

        function resume_(stream, state) {
          if (!state.reading) {
            debug('resume read 0');
            stream.read(0);
          }

          state.resumeScheduled = false;
          state.awaitDrain = 0;
          stream.emit('resume');
          flow(stream);
          if (state.flowing && !state.reading) stream.read(0);
        }

        Readable.prototype.pause = function () {
          debug('call pause flowing=%j', this._readableState.flowing);
          if (false !== this._readableState.flowing) {
            debug('pause');
            this._readableState.flowing = false;
            this.emit('pause');
          }
          return this;
        };

        function flow(stream) {
          var state = stream._readableState;
          debug('flow', state.flowing);
          while (state.flowing && stream.read() !== null) { }
        }

        // wrap an old-style stream as the async data source.
        // This is *not* part of the readable stream interface.
        // It is an ugly unfortunate mess of history.
        Readable.prototype.wrap = function (stream) {
          var _this = this;

          var state = this._readableState;
          var paused = false;

          stream.on('end', function () {
            debug('wrapped end');
            if (state.decoder && !state.ended) {
              var chunk = state.decoder.end();
              if (chunk && chunk.length) _this.push(chunk);
            }

            _this.push(null);
          });

          stream.on('data', function (chunk) {
            debug('wrapped data');
            if (state.decoder) chunk = state.decoder.write(chunk);

            // don't skip over falsy values in objectMode
            if (state.objectMode && (chunk === null || chunk === undefined)) return; else if (!state.objectMode && (!chunk || !chunk.length)) return;

            var ret = _this.push(chunk);
            if (!ret) {
              paused = true;
              stream.pause();
            }
          });

          // proxy all the other methods.
          // important when wrapping filters and duplexes.
          for (var i in stream) {
            if (this[i] === undefined && typeof stream[i] === 'function') {
              this[i] = function (method) {
                return function () {
                  return stream[method].apply(stream, arguments);
                };
              } (i);
            }
          }

          // proxy certain important events.
          for (var n = 0; n < kProxyEvents.length; n++) {
            stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
          }

          // when we try to consume some more bytes, simply unpause the
          // underlying stream.
          this._read = function (n) {
            debug('wrapped _read', n);
            if (paused) {
              paused = false;
              stream.resume();
            }
          };

          return this;
        };

        Object.defineProperty(Readable.prototype, 'readableHighWaterMark', {
          // making it explicit this property is not enumerable
          // because otherwise some prototype manipulation in
          // userland will fail
          enumerable: false,
          get: function () {
            return this._readableState.highWaterMark;
          }
        });

        // exposed for testing purposes only.
        Readable._fromList = fromList;

        // Pluck off n bytes from an array of buffers.
        // Length is the combined lengths of all the buffers in the list.
        // This function is designed to be inlinable, so please take care when making
        // changes to the function body.
        function fromList(n, state) {
          // nothing buffered
          if (state.length === 0) return null;

          var ret;
          if (state.objectMode) ret = state.buffer.shift(); else if (!n || n >= state.length) {
            // read it all, truncate the list
            if (state.decoder) ret = state.buffer.join(''); else if (state.buffer.length === 1) ret = state.buffer.head.data; else ret = state.buffer.concat(state.length);
            state.buffer.clear();
          } else {
            // read part of list
            ret = fromListPartial(n, state.buffer, state.decoder);
          }

          return ret;
        }

        // Extracts only enough buffered data to satisfy the amount requested.
        // This function is designed to be inlinable, so please take care when making
        // changes to the function body.
        function fromListPartial(n, list, hasStrings) {
          var ret;
          if (n < list.head.data.length) {
            // slice is the same for buffers and strings
            ret = list.head.data.slice(0, n);
            list.head.data = list.head.data.slice(n);
          } else if (n === list.head.data.length) {
            // first chunk is a perfect match
            ret = list.shift();
          } else {
            // result spans more than one buffer
            ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);
          }
          return ret;
        }

        // Copies a specified amount of characters from the list of buffered data
        // chunks.
        // This function is designed to be inlinable, so please take care when making
        // changes to the function body.
        function copyFromBufferString(n, list) {
          var p = list.head;
          var c = 1;
          var ret = p.data;
          n -= ret.length;
          while (p = p.next) {
            var str = p.data;
            var nb = n > str.length ? str.length : n;
            if (nb === str.length) ret += str; else ret += str.slice(0, n);
            n -= nb;
            if (n === 0) {
              if (nb === str.length) {
                ++c;
                if (p.next) list.head = p.next; else list.head = list.tail = null;
              } else {
                list.head = p;
                p.data = str.slice(nb);
              }
              break;
            }
            ++c;
          }
          list.length -= c;
          return ret;
        }

        // Copies a specified amount of bytes from the list of buffered data chunks.
        // This function is designed to be inlinable, so please take care when making
        // changes to the function body.
        function copyFromBuffer(n, list) {
          var ret = Buffer.allocUnsafe(n);
          var p = list.head;
          var c = 1;
          p.data.copy(ret);
          n -= p.data.length;
          while (p = p.next) {
            var buf = p.data;
            var nb = n > buf.length ? buf.length : n;
            buf.copy(ret, ret.length - n, 0, nb);
            n -= nb;
            if (n === 0) {
              if (nb === buf.length) {
                ++c;
                if (p.next) list.head = p.next; else list.head = list.tail = null;
              } else {
                list.head = p;
                p.data = buf.slice(nb);
              }
              break;
            }
            ++c;
          }
          list.length -= c;
          return ret;
        }

        function endReadable(stream) {
          var state = stream._readableState;

          // If we get here before consuming all the bytes, then that is a
          // bug in node.  Should never happen.
          if (state.length > 0) throw new Error('"endReadable()" called on non-empty stream');

          if (!state.endEmitted) {
            state.ended = true;
            pna.nextTick(endReadableNT, state, stream);
          }
        }

        function endReadableNT(state, stream) {
          // Check that we didn't get one last unshift.
          if (!state.endEmitted && state.length === 0) {
            state.endEmitted = true;
            stream.readable = false;
            stream.emit('end');
          }
        }

        function indexOf(xs, x) {
          for (var i = 0, l = xs.length; i < l; i++) {
            if (xs[i] === x) return i;
          }
          return -1;
        }
        /* WEBPACK VAR INJECTION */
      }.call(this, __webpack_require__(/*! ./../../../buildin/global.js */ "../../../../../AppData/Roaming/npm/node_modules/webpack/buildin/global.js"), __webpack_require__(/*! ./../../process/browser.js */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/process/browser.js")))

      /***/
    }),

/***/ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/readable-stream/lib/_stream_transform.js":
/*!***********************************************************************!*\
  !*** (webpack)/node_modules/readable-stream/lib/_stream_transform.js ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

      "use strict";
      // Copyright Joyent, Inc. and other Node contributors.
      //
      // Permission is hereby granted, free of charge, to any person obtaining a
      // copy of this software and associated documentation files (the
      // "Software"), to deal in the Software without restriction, including
      // without limitation the rights to use, copy, modify, merge, publish,
      // distribute, sublicense, and/or sell copies of the Software, and to permit
      // persons to whom the Software is furnished to do so, subject to the
      // following conditions:
      //
      // The above copyright notice and this permission notice shall be included
      // in all copies or substantial portions of the Software.
      //
      // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
      // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
      // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
      // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
      // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
      // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
      // USE OR OTHER DEALINGS IN THE SOFTWARE.

      // a transform stream is a readable/writable stream where you do
      // something with the data.  Sometimes it's called a "filter",
      // but that's not a great name for it, since that implies a thing where
      // some bits pass through, and others are simply ignored.  (That would
      // be a valid example of a transform, of course.)
      //
      // While the output is causally related to the input, it's not a
      // necessarily symmetric or synchronous transformation.  For example,
      // a zlib stream might take multiple plain-text writes(), and then
      // emit a single compressed chunk some time in the future.
      //
      // Here's how this works:
      //
      // The Transform stream has all the aspects of the readable and writable
      // stream classes.  When you write(chunk), that calls _write(chunk,cb)
      // internally, and returns false if there's a lot of pending writes
      // buffered up.  When you call read(), that calls _read(n) until
      // there's enough pending readable data buffered up.
      //
      // In a transform stream, the written data is placed in a buffer.  When
      // _read(n) is called, it transforms the queued up data, calling the
      // buffered _write cb's as it consumes chunks.  If consuming a single
      // written chunk would result in multiple output chunks, then the first
      // outputted bit calls the readcb, and subsequent chunks just go into
      // the read buffer, and will cause it to emit 'readable' if necessary.
      //
      // This way, back-pressure is actually determined by the reading side,
      // since _read has to be called to start processing a new chunk.  However,
      // a pathological inflate type of transform can cause excessive buffering
      // here.  For example, imagine a stream where every byte of input is
      // interpreted as an integer from 0-255, and then results in that many
      // bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
      // 1kb of data being output.  In this case, you could write a very small
      // amount of input, and end up with a very large amount of output.  In
      // such a pathological inflating mechanism, there'd be no way to tell
      // the system to stop doing the transform.  A single 4MB write could
      // cause the system to run out of memory.
      //
      // However, even in such a pathological case, only a single written chunk
      // would be consumed, and then the rest would wait (un-transformed) until
      // the results of the previous transformed chunk were consumed.



      module.exports = Transform;

      var Duplex = __webpack_require__(/*! ./_stream_duplex */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/readable-stream/lib/_stream_duplex.js");

      /*<replacement>*/
      var util = __webpack_require__(/*! core-util-is */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/core-util-is/lib/util.js");
      util.inherits = __webpack_require__(/*! inherits */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/inherits/inherits_browser.js");
      /*</replacement>*/

      util.inherits(Transform, Duplex);

      function afterTransform(er, data) {
        var ts = this._transformState;
        ts.transforming = false;

        var cb = ts.writecb;

        if (!cb) {
          return this.emit('error', new Error('write callback called multiple times'));
        }

        ts.writechunk = null;
        ts.writecb = null;

        if (data != null) // single equals check for both `null` and `undefined`
          this.push(data);

        cb(er);

        var rs = this._readableState;
        rs.reading = false;
        if (rs.needReadable || rs.length < rs.highWaterMark) {
          this._read(rs.highWaterMark);
        }
      }

      function Transform(options) {
        if (!(this instanceof Transform)) return new Transform(options);

        Duplex.call(this, options);

        this._transformState = {
          afterTransform: afterTransform.bind(this),
          needTransform: false,
          transforming: false,
          writecb: null,
          writechunk: null,
          writeencoding: null
        };

        // start out asking for a readable event once data is transformed.
        this._readableState.needReadable = true;

        // we have implemented the _read method, and done the other things
        // that Readable wants before the first _read call, so unset the
        // sync guard flag.
        this._readableState.sync = false;

        if (options) {
          if (typeof options.transform === 'function') this._transform = options.transform;

          if (typeof options.flush === 'function') this._flush = options.flush;
        }

        // When the writable side finishes, then flush out anything remaining.
        this.on('prefinish', prefinish);
      }

      function prefinish() {
        var _this = this;

        if (typeof this._flush === 'function') {
          this._flush(function (er, data) {
            done(_this, er, data);
          });
        } else {
          done(this, null, null);
        }
      }

      Transform.prototype.push = function (chunk, encoding) {
        this._transformState.needTransform = false;
        return Duplex.prototype.push.call(this, chunk, encoding);
      };

      // This is the part where you do stuff!
      // override this function in implementation classes.
      // 'chunk' is an input chunk.
      //
      // Call `push(newChunk)` to pass along transformed output
      // to the readable side.  You may call 'push' zero or more times.
      //
      // Call `cb(err)` when you are done with this chunk.  If you pass
      // an error, then that'll put the hurt on the whole operation.  If you
      // never call cb(), then you'll never get another chunk.
      Transform.prototype._transform = function (chunk, encoding, cb) {
        throw new Error('_transform() is not implemented');
      };

      Transform.prototype._write = function (chunk, encoding, cb) {
        var ts = this._transformState;
        ts.writecb = cb;
        ts.writechunk = chunk;
        ts.writeencoding = encoding;
        if (!ts.transforming) {
          var rs = this._readableState;
          if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
        }
      };

      // Doesn't matter what the args are here.
      // _transform does all the work.
      // That we got here means that the readable side wants more data.
      Transform.prototype._read = function (n) {
        var ts = this._transformState;

        if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
          ts.transforming = true;
          this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
        } else {
          // mark that we need a transform, so that any data that comes in
          // will get processed, now that we've asked for it.
          ts.needTransform = true;
        }
      };

      Transform.prototype._destroy = function (err, cb) {
        var _this2 = this;

        Duplex.prototype._destroy.call(this, err, function (err2) {
          cb(err2);
          _this2.emit('close');
        });
      };

      function done(stream, er, data) {
        if (er) return stream.emit('error', er);

        if (data != null) // single equals check for both `null` and `undefined`
          stream.push(data);

        // if there's nothing in the write buffer, then that means
        // that nothing more will ever be provided
        if (stream._writableState.length) throw new Error('Calling transform done when ws.length != 0');

        if (stream._transformState.transforming) throw new Error('Calling transform done when still transforming');

        return stream.push(null);
      }

      /***/
    }),

/***/ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/readable-stream/lib/_stream_writable.js":
/*!**********************************************************************!*\
  !*** (webpack)/node_modules/readable-stream/lib/_stream_writable.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

      "use strict";
/* WEBPACK VAR INJECTION */(function (process, setImmediate, global) {// Copyright Joyent, Inc. and other Node contributors.
        //
        // Permission is hereby granted, free of charge, to any person obtaining a
        // copy of this software and associated documentation files (the
        // "Software"), to deal in the Software without restriction, including
        // without limitation the rights to use, copy, modify, merge, publish,
        // distribute, sublicense, and/or sell copies of the Software, and to permit
        // persons to whom the Software is furnished to do so, subject to the
        // following conditions:
        //
        // The above copyright notice and this permission notice shall be included
        // in all copies or substantial portions of the Software.
        //
        // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
        // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
        // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
        // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
        // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
        // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
        // USE OR OTHER DEALINGS IN THE SOFTWARE.

        // A bit simpler than readable streams.
        // Implement an async ._write(chunk, encoding, cb), and it'll handle all
        // the drain event emission and buffering.



        /*<replacement>*/

        var pna = __webpack_require__(/*! process-nextick-args */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/process-nextick-args/index.js");
        /*</replacement>*/

        module.exports = Writable;

        /* <replacement> */
        function WriteReq(chunk, encoding, cb) {
          this.chunk = chunk;
          this.encoding = encoding;
          this.callback = cb;
          this.next = null;
        }

        // It seems a linked list but it is not
        // there will be only 2 of these for each stream
        function CorkedRequest(state) {
          var _this = this;

          this.next = null;
          this.entry = null;
          this.finish = function () {
            onCorkedFinish(_this, state);
          };
        }
        /* </replacement> */

        /*<replacement>*/
        var asyncWrite = !process.browser && ['v0.10', 'v0.9.'].indexOf(process.version.slice(0, 5)) > -1 ? setImmediate : pna.nextTick;
        /*</replacement>*/

        /*<replacement>*/
        var Duplex;
        /*</replacement>*/

        Writable.WritableState = WritableState;

        /*<replacement>*/
        var util = __webpack_require__(/*! core-util-is */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/core-util-is/lib/util.js");
        util.inherits = __webpack_require__(/*! inherits */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/inherits/inherits_browser.js");
        /*</replacement>*/

        /*<replacement>*/
        var internalUtil = {
          deprecate: __webpack_require__(/*! util-deprecate */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/util-deprecate/browser.js")
        };
        /*</replacement>*/

        /*<replacement>*/
        var Stream = __webpack_require__(/*! ./internal/streams/stream */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/readable-stream/lib/internal/streams/stream-browser.js");
        /*</replacement>*/

        /*<replacement>*/

        var Buffer = __webpack_require__(/*! safe-buffer */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/safe-buffer/index.js").Buffer;
        var OurUint8Array = global.Uint8Array || function () { };
        function _uint8ArrayToBuffer(chunk) {
          return Buffer.from(chunk);
        }
        function _isUint8Array(obj) {
          return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
        }

        /*</replacement>*/

        var destroyImpl = __webpack_require__(/*! ./internal/streams/destroy */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/readable-stream/lib/internal/streams/destroy.js");

        util.inherits(Writable, Stream);

        function nop() { }

        function WritableState(options, stream) {
          Duplex = Duplex || __webpack_require__(/*! ./_stream_duplex */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/readable-stream/lib/_stream_duplex.js");

          options = options || {};

          // Duplex streams are both readable and writable, but share
          // the same options object.
          // However, some cases require setting options to different
          // values for the readable and the writable sides of the duplex stream.
          // These options can be provided separately as readableXXX and writableXXX.
          var isDuplex = stream instanceof Duplex;

          // object stream flag to indicate whether or not this stream
          // contains buffers or objects.
          this.objectMode = !!options.objectMode;

          if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode;

          // the point at which write() starts returning false
          // Note: 0 is a valid value, means that we always return false if
          // the entire buffer is not flushed immediately on write()
          var hwm = options.highWaterMark;
          var writableHwm = options.writableHighWaterMark;
          var defaultHwm = this.objectMode ? 16 : 16 * 1024;

          if (hwm || hwm === 0) this.highWaterMark = hwm; else if (isDuplex && (writableHwm || writableHwm === 0)) this.highWaterMark = writableHwm; else this.highWaterMark = defaultHwm;

          // cast to ints.
          this.highWaterMark = Math.floor(this.highWaterMark);

          // if _final has been called
          this.finalCalled = false;

          // drain event flag.
          this.needDrain = false;
          // at the start of calling end()
          this.ending = false;
          // when end() has been called, and returned
          this.ended = false;
          // when 'finish' is emitted
          this.finished = false;

          // has it been destroyed
          this.destroyed = false;

          // should we decode strings into buffers before passing to _write?
          // this is here so that some node-core streams can optimize string
          // handling at a lower level.
          var noDecode = options.decodeStrings === false;
          this.decodeStrings = !noDecode;

          // Crypto is kind of old and crusty.  Historically, its default string
          // encoding is 'binary' so we have to make this configurable.
          // Everything else in the universe uses 'utf8', though.
          this.defaultEncoding = options.defaultEncoding || 'utf8';

          // not an actual buffer we keep track of, but a measurement
          // of how much we're waiting to get pushed to some underlying
          // socket or file.
          this.length = 0;

          // a flag to see when we're in the middle of a write.
          this.writing = false;

          // when true all writes will be buffered until .uncork() call
          this.corked = 0;

          // a flag to be able to tell if the onwrite cb is called immediately,
          // or on a later tick.  We set this to true at first, because any
          // actions that shouldn't happen until "later" should generally also
          // not happen before the first write call.
          this.sync = true;

          // a flag to know if we're processing previously buffered items, which
          // may call the _write() callback in the same tick, so that we don't
          // end up in an overlapped onwrite situation.
          this.bufferProcessing = false;

          // the callback that's passed to _write(chunk,cb)
          this.onwrite = function (er) {
            onwrite(stream, er);
          };

          // the callback that the user supplies to write(chunk,encoding,cb)
          this.writecb = null;

          // the amount that is being written when _write is called.
          this.writelen = 0;

          this.bufferedRequest = null;
          this.lastBufferedRequest = null;

          // number of pending user-supplied write callbacks
          // this must be 0 before 'finish' can be emitted
          this.pendingcb = 0;

          // emit prefinish if the only thing we're waiting for is _write cbs
          // This is relevant for synchronous Transform streams
          this.prefinished = false;

          // True if the error was already emitted and should not be thrown again
          this.errorEmitted = false;

          // count buffered requests
          this.bufferedRequestCount = 0;

          // allocate the first CorkedRequest, there is always
          // one allocated and free to use, and we maintain at most two
          this.corkedRequestsFree = new CorkedRequest(this);
        }

        WritableState.prototype.getBuffer = function getBuffer() {
          var current = this.bufferedRequest;
          var out = [];
          while (current) {
            out.push(current);
            current = current.next;
          }
          return out;
        };

        (function () {
          try {
            Object.defineProperty(WritableState.prototype, 'buffer', {
              get: internalUtil.deprecate(function () {
                return this.getBuffer();
              }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')
            });
          } catch (_) { }
        })();

        // Test _writableState for inheritance to account for Duplex streams,
        // whose prototype chain only points to Readable.
        var realHasInstance;
        if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
          realHasInstance = Function.prototype[Symbol.hasInstance];
          Object.defineProperty(Writable, Symbol.hasInstance, {
            value: function (object) {
              if (realHasInstance.call(this, object)) return true;
              if (this !== Writable) return false;

              return object && object._writableState instanceof WritableState;
            }
          });
        } else {
          realHasInstance = function (object) {
            return object instanceof this;
          };
        }

        function Writable(options) {
          Duplex = Duplex || __webpack_require__(/*! ./_stream_duplex */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/readable-stream/lib/_stream_duplex.js");

          // Writable ctor is applied to Duplexes, too.
          // `realHasInstance` is necessary because using plain `instanceof`
          // would return false, as no `_writableState` property is attached.

          // Trying to use the custom `instanceof` for Writable here will also break the
          // Node.js LazyTransform implementation, which has a non-trivial getter for
          // `_writableState` that would lead to infinite recursion.
          if (!realHasInstance.call(Writable, this) && !(this instanceof Duplex)) {
            return new Writable(options);
          }

          this._writableState = new WritableState(options, this);

          // legacy.
          this.writable = true;

          if (options) {
            if (typeof options.write === 'function') this._write = options.write;

            if (typeof options.writev === 'function') this._writev = options.writev;

            if (typeof options.destroy === 'function') this._destroy = options.destroy;

            if (typeof options.final === 'function') this._final = options.final;
          }

          Stream.call(this);
        }

        // Otherwise people can pipe Writable streams, which is just wrong.
        Writable.prototype.pipe = function () {
          this.emit('error', new Error('Cannot pipe, not readable'));
        };

        function writeAfterEnd(stream, cb) {
          var er = new Error('write after end');
          // TODO: defer error events consistently everywhere, not just the cb
          stream.emit('error', er);
          pna.nextTick(cb, er);
        }

        // Checks that a user-supplied chunk is valid, especially for the particular
        // mode the stream is in. Currently this means that `null` is never accepted
        // and undefined/non-string values are only allowed in object mode.
        function validChunk(stream, state, chunk, cb) {
          var valid = true;
          var er = false;

          if (chunk === null) {
            er = new TypeError('May not write null values to stream');
          } else if (typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
            er = new TypeError('Invalid non-string/buffer chunk');
          }
          if (er) {
            stream.emit('error', er);
            pna.nextTick(cb, er);
            valid = false;
          }
          return valid;
        }

        Writable.prototype.write = function (chunk, encoding, cb) {
          var state = this._writableState;
          var ret = false;
          var isBuf = !state.objectMode && _isUint8Array(chunk);

          if (isBuf && !Buffer.isBuffer(chunk)) {
            chunk = _uint8ArrayToBuffer(chunk);
          }

          if (typeof encoding === 'function') {
            cb = encoding;
            encoding = null;
          }

          if (isBuf) encoding = 'buffer'; else if (!encoding) encoding = state.defaultEncoding;

          if (typeof cb !== 'function') cb = nop;

          if (state.ended) writeAfterEnd(this, cb); else if (isBuf || validChunk(this, state, chunk, cb)) {
            state.pendingcb++;
            ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
          }

          return ret;
        };

        Writable.prototype.cork = function () {
          var state = this._writableState;

          state.corked++;
        };

        Writable.prototype.uncork = function () {
          var state = this._writableState;

          if (state.corked) {
            state.corked--;

            if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
          }
        };

        Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
          // node::ParseEncoding() requires lower case.
          if (typeof encoding === 'string') encoding = encoding.toLowerCase();
          if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);
          this._writableState.defaultEncoding = encoding;
          return this;
        };

        function decodeChunk(state, chunk, encoding) {
          if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
            chunk = Buffer.from(chunk, encoding);
          }
          return chunk;
        }

        Object.defineProperty(Writable.prototype, 'writableHighWaterMark', {
          // making it explicit this property is not enumerable
          // because otherwise some prototype manipulation in
          // userland will fail
          enumerable: false,
          get: function () {
            return this._writableState.highWaterMark;
          }
        });

        // if we're already writing something, then just put this
        // in the queue, and wait our turn.  Otherwise, call _write
        // If we return false, then we need a drain event, so set that flag.
        function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
          if (!isBuf) {
            var newChunk = decodeChunk(state, chunk, encoding);
            if (chunk !== newChunk) {
              isBuf = true;
              encoding = 'buffer';
              chunk = newChunk;
            }
          }
          var len = state.objectMode ? 1 : chunk.length;

          state.length += len;

          var ret = state.length < state.highWaterMark;
          // we must ensure that previous needDrain will not be reset to false.
          if (!ret) state.needDrain = true;

          if (state.writing || state.corked) {
            var last = state.lastBufferedRequest;
            state.lastBufferedRequest = {
              chunk: chunk,
              encoding: encoding,
              isBuf: isBuf,
              callback: cb,
              next: null
            };
            if (last) {
              last.next = state.lastBufferedRequest;
            } else {
              state.bufferedRequest = state.lastBufferedRequest;
            }
            state.bufferedRequestCount += 1;
          } else {
            doWrite(stream, state, false, len, chunk, encoding, cb);
          }

          return ret;
        }

        function doWrite(stream, state, writev, len, chunk, encoding, cb) {
          state.writelen = len;
          state.writecb = cb;
          state.writing = true;
          state.sync = true;
          if (writev) stream._writev(chunk, state.onwrite); else stream._write(chunk, encoding, state.onwrite);
          state.sync = false;
        }

        function onwriteError(stream, state, sync, er, cb) {
          --state.pendingcb;

          if (sync) {
            // defer the callback if we are being called synchronously
            // to avoid piling up things on the stack
            pna.nextTick(cb, er);
            // this can emit finish, and it will always happen
            // after error
            pna.nextTick(finishMaybe, stream, state);
            stream._writableState.errorEmitted = true;
            stream.emit('error', er);
          } else {
            // the caller expect this to happen before if
            // it is async
            cb(er);
            stream._writableState.errorEmitted = true;
            stream.emit('error', er);
            // this can emit finish, but finish must
            // always follow error
            finishMaybe(stream, state);
          }
        }

        function onwriteStateUpdate(state) {
          state.writing = false;
          state.writecb = null;
          state.length -= state.writelen;
          state.writelen = 0;
        }

        function onwrite(stream, er) {
          var state = stream._writableState;
          var sync = state.sync;
          var cb = state.writecb;

          onwriteStateUpdate(state);

          if (er) onwriteError(stream, state, sync, er, cb); else {
            // Check if we're actually ready to finish, but don't emit yet
            var finished = needFinish(state);

            if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
              clearBuffer(stream, state);
            }

            if (sync) {
              /*<replacement>*/
              asyncWrite(afterWrite, stream, state, finished, cb);
              /*</replacement>*/
            } else {
              afterWrite(stream, state, finished, cb);
            }
          }
        }

        function afterWrite(stream, state, finished, cb) {
          if (!finished) onwriteDrain(stream, state);
          state.pendingcb--;
          cb();
          finishMaybe(stream, state);
        }

        // Must force callback to be called on nextTick, so that we don't
        // emit 'drain' before the write() consumer gets the 'false' return
        // value, and has a chance to attach a 'drain' listener.
        function onwriteDrain(stream, state) {
          if (state.length === 0 && state.needDrain) {
            state.needDrain = false;
            stream.emit('drain');
          }
        }

        // if there's something in the buffer waiting, then process it
        function clearBuffer(stream, state) {
          state.bufferProcessing = true;
          var entry = state.bufferedRequest;

          if (stream._writev && entry && entry.next) {
            // Fast case, write everything using _writev()
            var l = state.bufferedRequestCount;
            var buffer = new Array(l);
            var holder = state.corkedRequestsFree;
            holder.entry = entry;

            var count = 0;
            var allBuffers = true;
            while (entry) {
              buffer[count] = entry;
              if (!entry.isBuf) allBuffers = false;
              entry = entry.next;
              count += 1;
            }
            buffer.allBuffers = allBuffers;

            doWrite(stream, state, true, state.length, buffer, '', holder.finish);

            // doWrite is almost always async, defer these to save a bit of time
            // as the hot path ends with doWrite
            state.pendingcb++;
            state.lastBufferedRequest = null;
            if (holder.next) {
              state.corkedRequestsFree = holder.next;
              holder.next = null;
            } else {
              state.corkedRequestsFree = new CorkedRequest(state);
            }
            state.bufferedRequestCount = 0;
          } else {
            // Slow case, write chunks one-by-one
            while (entry) {
              var chunk = entry.chunk;
              var encoding = entry.encoding;
              var cb = entry.callback;
              var len = state.objectMode ? 1 : chunk.length;

              doWrite(stream, state, false, len, chunk, encoding, cb);
              entry = entry.next;
              state.bufferedRequestCount--;
              // if we didn't call the onwrite immediately, then
              // it means that we need to wait until it does.
              // also, that means that the chunk and cb are currently
              // being processed, so move the buffer counter past them.
              if (state.writing) {
                break;
              }
            }

            if (entry === null) state.lastBufferedRequest = null;
          }

          state.bufferedRequest = entry;
          state.bufferProcessing = false;
        }

        Writable.prototype._write = function (chunk, encoding, cb) {
          cb(new Error('_write() is not implemented'));
        };

        Writable.prototype._writev = null;

        Writable.prototype.end = function (chunk, encoding, cb) {
          var state = this._writableState;

          if (typeof chunk === 'function') {
            cb = chunk;
            chunk = null;
            encoding = null;
          } else if (typeof encoding === 'function') {
            cb = encoding;
            encoding = null;
          }

          if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);

          // .end() fully uncorks
          if (state.corked) {
            state.corked = 1;
            this.uncork();
          }

          // ignore unnecessary end() calls.
          if (!state.ending && !state.finished) endWritable(this, state, cb);
        };

        function needFinish(state) {
          return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
        }
        function callFinal(stream, state) {
          stream._final(function (err) {
            state.pendingcb--;
            if (err) {
              stream.emit('error', err);
            }
            state.prefinished = true;
            stream.emit('prefinish');
            finishMaybe(stream, state);
          });
        }
        function prefinish(stream, state) {
          if (!state.prefinished && !state.finalCalled) {
            if (typeof stream._final === 'function') {
              state.pendingcb++;
              state.finalCalled = true;
              pna.nextTick(callFinal, stream, state);
            } else {
              state.prefinished = true;
              stream.emit('prefinish');
            }
          }
        }

        function finishMaybe(stream, state) {
          var need = needFinish(state);
          if (need) {
            prefinish(stream, state);
            if (state.pendingcb === 0) {
              state.finished = true;
              stream.emit('finish');
            }
          }
          return need;
        }

        function endWritable(stream, state, cb) {
          state.ending = true;
          finishMaybe(stream, state);
          if (cb) {
            if (state.finished) pna.nextTick(cb); else stream.once('finish', cb);
          }
          state.ended = true;
          stream.writable = false;
        }

        function onCorkedFinish(corkReq, state, err) {
          var entry = corkReq.entry;
          corkReq.entry = null;
          while (entry) {
            var cb = entry.callback;
            state.pendingcb--;
            cb(err);
            entry = entry.next;
          }
          if (state.corkedRequestsFree) {
            state.corkedRequestsFree.next = corkReq;
          } else {
            state.corkedRequestsFree = corkReq;
          }
        }

        Object.defineProperty(Writable.prototype, 'destroyed', {
          get: function () {
            if (this._writableState === undefined) {
              return false;
            }
            return this._writableState.destroyed;
          },
          set: function (value) {
            // we ignore the value if the stream
            // has not been initialized yet
            if (!this._writableState) {
              return;
            }

            // backward compatibility, the user is explicitly
            // managing destroyed
            this._writableState.destroyed = value;
          }
        });

        Writable.prototype.destroy = destroyImpl.destroy;
        Writable.prototype._undestroy = destroyImpl.undestroy;
        Writable.prototype._destroy = function (err, cb) {
          this.end();
          cb(err);
        };
        /* WEBPACK VAR INJECTION */
      }.call(this, __webpack_require__(/*! ./../../process/browser.js */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/process/browser.js"), __webpack_require__(/*! ./../../timers-browserify/main.js */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/timers-browserify/main.js").setImmediate, __webpack_require__(/*! ./../../../buildin/global.js */ "../../../../../AppData/Roaming/npm/node_modules/webpack/buildin/global.js")))

      /***/
    }),

/***/ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/readable-stream/lib/internal/streams/BufferList.js":
/*!*********************************************************************************!*\
  !*** (webpack)/node_modules/readable-stream/lib/internal/streams/BufferList.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

      "use strict";


      function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

      var Buffer = __webpack_require__(/*! safe-buffer */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/safe-buffer/index.js").Buffer;
      var util = __webpack_require__(/*! util */ 1);

      function copyBuffer(src, target, offset) {
        src.copy(target, offset);
      }

      module.exports = function () {
        function BufferList() {
          _classCallCheck(this, BufferList);

          this.head = null;
          this.tail = null;
          this.length = 0;
        }

        BufferList.prototype.push = function push(v) {
          var entry = { data: v, next: null };
          if (this.length > 0) this.tail.next = entry; else this.head = entry;
          this.tail = entry;
          ++this.length;
        };

        BufferList.prototype.unshift = function unshift(v) {
          var entry = { data: v, next: this.head };
          if (this.length === 0) this.tail = entry;
          this.head = entry;
          ++this.length;
        };

        BufferList.prototype.shift = function shift() {
          if (this.length === 0) return;
          var ret = this.head.data;
          if (this.length === 1) this.head = this.tail = null; else this.head = this.head.next;
          --this.length;
          return ret;
        };

        BufferList.prototype.clear = function clear() {
          this.head = this.tail = null;
          this.length = 0;
        };

        BufferList.prototype.join = function join(s) {
          if (this.length === 0) return '';
          var p = this.head;
          var ret = '' + p.data;
          while (p = p.next) {
            ret += s + p.data;
          } return ret;
        };

        BufferList.prototype.concat = function concat(n) {
          if (this.length === 0) return Buffer.alloc(0);
          if (this.length === 1) return this.head.data;
          var ret = Buffer.allocUnsafe(n >>> 0);
          var p = this.head;
          var i = 0;
          while (p) {
            copyBuffer(p.data, ret, i);
            i += p.data.length;
            p = p.next;
          }
          return ret;
        };

        return BufferList;
      } ();

      if (util && util.inspect && util.inspect.custom) {
        module.exports.prototype[util.inspect.custom] = function () {
          var obj = util.inspect({ length: this.length });
          return this.constructor.name + ' ' + obj;
        };
      }

      /***/
    }),

/***/ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/readable-stream/lib/internal/streams/destroy.js":
/*!******************************************************************************!*\
  !*** (webpack)/node_modules/readable-stream/lib/internal/streams/destroy.js ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

      "use strict";


      /*<replacement>*/

      var pna = __webpack_require__(/*! process-nextick-args */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/process-nextick-args/index.js");
      /*</replacement>*/

      // undocumented cb() API, needed for core, not for public API
      function destroy(err, cb) {
        var _this = this;

        var readableDestroyed = this._readableState && this._readableState.destroyed;
        var writableDestroyed = this._writableState && this._writableState.destroyed;

        if (readableDestroyed || writableDestroyed) {
          if (cb) {
            cb(err);
          } else if (err && (!this._writableState || !this._writableState.errorEmitted)) {
            pna.nextTick(emitErrorNT, this, err);
          }
          return this;
        }

        // we set destroyed to true before firing error callbacks in order
        // to make it re-entrance safe in case destroy() is called within callbacks

        if (this._readableState) {
          this._readableState.destroyed = true;
        }

        // if this is a duplex stream mark the writable part as destroyed as well
        if (this._writableState) {
          this._writableState.destroyed = true;
        }

        this._destroy(err || null, function (err) {
          if (!cb && err) {
            pna.nextTick(emitErrorNT, _this, err);
            if (_this._writableState) {
              _this._writableState.errorEmitted = true;
            }
          } else if (cb) {
            cb(err);
          }
        });

        return this;
      }

      function undestroy() {
        if (this._readableState) {
          this._readableState.destroyed = false;
          this._readableState.reading = false;
          this._readableState.ended = false;
          this._readableState.endEmitted = false;
        }

        if (this._writableState) {
          this._writableState.destroyed = false;
          this._writableState.ended = false;
          this._writableState.ending = false;
          this._writableState.finished = false;
          this._writableState.errorEmitted = false;
        }
      }

      function emitErrorNT(self, err) {
        self.emit('error', err);
      }

      module.exports = {
        destroy: destroy,
        undestroy: undestroy
      };

      /***/
    }),

/***/ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/readable-stream/lib/internal/streams/stream-browser.js":
/*!*************************************************************************************!*\
  !*** (webpack)/node_modules/readable-stream/lib/internal/streams/stream-browser.js ***!
  \*************************************************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

      module.exports = __webpack_require__(/*! events */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/events/events.js").EventEmitter;


      /***/
    }),

/***/ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/readable-stream/passthrough.js":
/*!*************************************************************!*\
  !*** (webpack)/node_modules/readable-stream/passthrough.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

      module.exports = __webpack_require__(/*! ./readable */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/readable-stream/readable-browser.js").PassThrough


      /***/
    }),

/***/ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/readable-stream/readable-browser.js":
/*!******************************************************************!*\
  !*** (webpack)/node_modules/readable-stream/readable-browser.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

      exports = module.exports = __webpack_require__(/*! ./lib/_stream_readable.js */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/readable-stream/lib/_stream_readable.js");
      exports.Stream = exports;
      exports.Readable = exports;
      exports.Writable = __webpack_require__(/*! ./lib/_stream_writable.js */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/readable-stream/lib/_stream_writable.js");
      exports.Duplex = __webpack_require__(/*! ./lib/_stream_duplex.js */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/readable-stream/lib/_stream_duplex.js");
      exports.Transform = __webpack_require__(/*! ./lib/_stream_transform.js */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/readable-stream/lib/_stream_transform.js");
      exports.PassThrough = __webpack_require__(/*! ./lib/_stream_passthrough.js */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/readable-stream/lib/_stream_passthrough.js");


      /***/
    }),

/***/ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/readable-stream/transform.js":
/*!***********************************************************!*\
  !*** (webpack)/node_modules/readable-stream/transform.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

      module.exports = __webpack_require__(/*! ./readable */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/readable-stream/readable-browser.js").Transform


      /***/
    }),

/***/ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/readable-stream/writable-browser.js":
/*!******************************************************************!*\
  !*** (webpack)/node_modules/readable-stream/writable-browser.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

      module.exports = __webpack_require__(/*! ./lib/_stream_writable.js */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/readable-stream/lib/_stream_writable.js");


      /***/
    }),

/***/ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/ripemd160/index.js":
/*!*************************************************!*\
  !*** (webpack)/node_modules/ripemd160/index.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

      "use strict";

      var Buffer = __webpack_require__(/*! buffer */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/buffer/index.js").Buffer
      var inherits = __webpack_require__(/*! inherits */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/inherits/inherits_browser.js")
      var HashBase = __webpack_require__(/*! hash-base */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/hash-base/index.js")

      var ARRAY16 = new Array(16)

      var zl = [
        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
        7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,
        3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,
        1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,
        4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13
      ]

      var zr = [
        5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,
        6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,
        15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,
        8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,
        12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11
      ]

      var sl = [
        11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,
        7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,
        11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,
        11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,
        9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6
      ]

      var sr = [
        8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,
        9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,
        9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,
        15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,
        8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11
      ]

      var hl = [0x00000000, 0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xa953fd4e]
      var hr = [0x50a28be6, 0x5c4dd124, 0x6d703ef3, 0x7a6d76e9, 0x00000000]

      function RIPEMD160() {
        HashBase.call(this, 64)

        // state
        this._a = 0x67452301
        this._b = 0xefcdab89
        this._c = 0x98badcfe
        this._d = 0x10325476
        this._e = 0xc3d2e1f0
      }

      inherits(RIPEMD160, HashBase)

      RIPEMD160.prototype._update = function () {
        var words = ARRAY16
        for (var j = 0; j < 16; ++j) words[j] = this._block.readInt32LE(j * 4)

        var al = this._a | 0
        var bl = this._b | 0
        var cl = this._c | 0
        var dl = this._d | 0
        var el = this._e | 0

        var ar = this._a | 0
        var br = this._b | 0
        var cr = this._c | 0
        var dr = this._d | 0
        var er = this._e | 0

        // computation
        for (var i = 0; i < 80; i += 1) {
          var tl
          var tr
          if (i < 16) {
            tl = fn1(al, bl, cl, dl, el, words[zl[i]], hl[0], sl[i])
            tr = fn5(ar, br, cr, dr, er, words[zr[i]], hr[0], sr[i])
          } else if (i < 32) {
            tl = fn2(al, bl, cl, dl, el, words[zl[i]], hl[1], sl[i])
            tr = fn4(ar, br, cr, dr, er, words[zr[i]], hr[1], sr[i])
          } else if (i < 48) {
            tl = fn3(al, bl, cl, dl, el, words[zl[i]], hl[2], sl[i])
            tr = fn3(ar, br, cr, dr, er, words[zr[i]], hr[2], sr[i])
          } else if (i < 64) {
            tl = fn4(al, bl, cl, dl, el, words[zl[i]], hl[3], sl[i])
            tr = fn2(ar, br, cr, dr, er, words[zr[i]], hr[3], sr[i])
          } else { // if (i<80) {
            tl = fn5(al, bl, cl, dl, el, words[zl[i]], hl[4], sl[i])
            tr = fn1(ar, br, cr, dr, er, words[zr[i]], hr[4], sr[i])
          }

          al = el
          el = dl
          dl = rotl(cl, 10)
          cl = bl
          bl = tl

          ar = er
          er = dr
          dr = rotl(cr, 10)
          cr = br
          br = tr
        }

        // update state
        var t = (this._b + cl + dr) | 0
        this._b = (this._c + dl + er) | 0
        this._c = (this._d + el + ar) | 0
        this._d = (this._e + al + br) | 0
        this._e = (this._a + bl + cr) | 0
        this._a = t
      }

      RIPEMD160.prototype._digest = function () {
        // create padding and handle blocks
        this._block[this._blockOffset++] = 0x80
        if (this._blockOffset > 56) {
          this._block.fill(0, this._blockOffset, 64)
          this._update()
          this._blockOffset = 0
        }

        this._block.fill(0, this._blockOffset, 56)
        this._block.writeUInt32LE(this._length[0], 56)
        this._block.writeUInt32LE(this._length[1], 60)
        this._update()

        // produce result
        var buffer = Buffer.alloc ? Buffer.alloc(20) : new Buffer(20)
        buffer.writeInt32LE(this._a, 0)
        buffer.writeInt32LE(this._b, 4)
        buffer.writeInt32LE(this._c, 8)
        buffer.writeInt32LE(this._d, 12)
        buffer.writeInt32LE(this._e, 16)
        return buffer
      }

      function rotl(x, n) {
        return (x << n) | (x >>> (32 - n))
      }

      function fn1(a, b, c, d, e, m, k, s) {
        return (rotl((a + (b ^ c ^ d) + m + k) | 0, s) + e) | 0
      }

      function fn2(a, b, c, d, e, m, k, s) {
        return (rotl((a + ((b & c) | ((~b) & d)) + m + k) | 0, s) + e) | 0
      }

      function fn3(a, b, c, d, e, m, k, s) {
        return (rotl((a + ((b | (~c)) ^ d) + m + k) | 0, s) + e) | 0
      }

      function fn4(a, b, c, d, e, m, k, s) {
        return (rotl((a + ((b & d) | (c & (~d))) + m + k) | 0, s) + e) | 0
      }

      function fn5(a, b, c, d, e, m, k, s) {
        return (rotl((a + (b ^ (c | (~d))) + m + k) | 0, s) + e) | 0
      }

      module.exports = RIPEMD160


      /***/
    }),

/***/ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/safe-buffer/index.js":
/*!***************************************************!*\
  !*** (webpack)/node_modules/safe-buffer/index.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

      /* eslint-disable node/no-deprecated-api */
      var buffer = __webpack_require__(/*! buffer */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/buffer/index.js")
      var Buffer = buffer.Buffer

      // alternative to using Object.keys for old browsers
      function copyProps(src, dst) {
        for (var key in src) {
          dst[key] = src[key]
        }
      }
      if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
        module.exports = buffer
      } else {
        // Copy properties from require('buffer')
        copyProps(buffer, exports)
        exports.Buffer = SafeBuffer
      }

      function SafeBuffer(arg, encodingOrOffset, length) {
        return Buffer(arg, encodingOrOffset, length)
      }

      // Copy static methods from Buffer
      copyProps(Buffer, SafeBuffer)

      SafeBuffer.from = function (arg, encodingOrOffset, length) {
        if (typeof arg === 'number') {
          throw new TypeError('Argument must not be a number')
        }
        return Buffer(arg, encodingOrOffset, length)
      }

      SafeBuffer.alloc = function (size, fill, encoding) {
        if (typeof size !== 'number') {
          throw new TypeError('Argument must be a number')
        }
        var buf = Buffer(size)
        if (fill !== undefined) {
          if (typeof encoding === 'string') {
            buf.fill(fill, encoding)
          } else {
            buf.fill(fill)
          }
        } else {
          buf.fill(0)
        }
        return buf
      }

      SafeBuffer.allocUnsafe = function (size) {
        if (typeof size !== 'number') {
          throw new TypeError('Argument must be a number')
        }
        return Buffer(size)
      }

      SafeBuffer.allocUnsafeSlow = function (size) {
        if (typeof size !== 'number') {
          throw new TypeError('Argument must be a number')
        }
        return buffer.SlowBuffer(size)
      }


      /***/
    }),

/***/ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/setimmediate/setImmediate.js":
/*!***********************************************************!*\
  !*** (webpack)/node_modules/setimmediate/setImmediate.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function (global, process) {
        (function (global, undefined) {
          "use strict";

          if (global.setImmediate) {
            return;
          }

          var nextHandle = 1; // Spec says greater than zero
          var tasksByHandle = {};
          var currentlyRunningATask = false;
          var doc = global.document;
          var registerImmediate;

          function setImmediate(callback) {
            // Callback can either be a function or a string
            if (typeof callback !== "function") {
              callback = new Function("" + callback);
            }
            // Copy function arguments
            var args = new Array(arguments.length - 1);
            for (var i = 0; i < args.length; i++) {
              args[i] = arguments[i + 1];
            }
            // Store and register the task
            var task = { callback: callback, args: args };
            tasksByHandle[nextHandle] = task;
            registerImmediate(nextHandle);
            return nextHandle++;
          }

          function clearImmediate(handle) {
            delete tasksByHandle[handle];
          }

          function run(task) {
            var callback = task.callback;
            var args = task.args;
            switch (args.length) {
              case 0:
                callback();
                break;
              case 1:
                callback(args[0]);
                break;
              case 2:
                callback(args[0], args[1]);
                break;
              case 3:
                callback(args[0], args[1], args[2]);
                break;
              default:
                callback.apply(undefined, args);
                break;
            }
          }

          function runIfPresent(handle) {
            // From the spec: "Wait until any invocations of this algorithm started before this one have completed."
            // So if we're currently running a task, we'll need to delay this invocation.
            if (currentlyRunningATask) {
              // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a
              // "too much recursion" error.
              setTimeout(runIfPresent, 0, handle);
            } else {
              var task = tasksByHandle[handle];
              if (task) {
                currentlyRunningATask = true;
                try {
                  run(task);
                } finally {
                  clearImmediate(handle);
                  currentlyRunningATask = false;
                }
              }
            }
          }

          function installNextTickImplementation() {
            registerImmediate = function (handle) {
              process.nextTick(function () { runIfPresent(handle); });
            };
          }

          function canUsePostMessage() {
            // The test against `importScripts` prevents this implementation from being installed inside a web worker,
            // where `global.postMessage` means something completely different and can't be used for this purpose.
            if (global.postMessage && !global.importScripts) {
              var postMessageIsAsynchronous = true;
              var oldOnMessage = global.onmessage;
              global.onmessage = function () {
                postMessageIsAsynchronous = false;
              };
              global.postMessage("", "*");
              global.onmessage = oldOnMessage;
              return postMessageIsAsynchronous;
            }
          }

          function installPostMessageImplementation() {
            // Installs an event handler on `global` for the `message` event: see
            // * https://developer.mozilla.org/en/DOM/window.postMessage
            // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages

            var messagePrefix = "setImmediate$" + Math.random() + "$";
            var onGlobalMessage = function (event) {
              if (event.source === global &&
                typeof event.data === "string" &&
                event.data.indexOf(messagePrefix) === 0) {
                runIfPresent(+event.data.slice(messagePrefix.length));
              }
            };

            if (global.addEventListener) {
              global.addEventListener("message", onGlobalMessage, false);
            } else {
              global.attachEvent("onmessage", onGlobalMessage);
            }

            registerImmediate = function (handle) {
              global.postMessage(messagePrefix + handle, "*");
            };
          }

          function installMessageChannelImplementation() {
            var channel = new MessageChannel();
            channel.port1.onmessage = function (event) {
              var handle = event.data;
              runIfPresent(handle);
            };

            registerImmediate = function (handle) {
              channel.port2.postMessage(handle);
            };
          }

          function installReadyStateChangeImplementation() {
            var html = doc.documentElement;
            registerImmediate = function (handle) {
              // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted
              // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.
              var script = doc.createElement("script");
              script.onreadystatechange = function () {
                runIfPresent(handle);
                script.onreadystatechange = null;
                html.removeChild(script);
                script = null;
              };
              html.appendChild(script);
            };
          }

          function installSetTimeoutImplementation() {
            registerImmediate = function (handle) {
              setTimeout(runIfPresent, 0, handle);
            };
          }

          // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.
          var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);
          attachTo = attachTo && attachTo.setTimeout ? attachTo : global;

          // Don't get fooled by e.g. browserify environments.
          if ({}.toString.call(global.process) === "[object process]") {
            // For Node.js before 0.9
            installNextTickImplementation();

          } else if (canUsePostMessage()) {
            // For non-IE10 modern browsers
            installPostMessageImplementation();

          } else if (global.MessageChannel) {
            // For web workers, where supported
            installMessageChannelImplementation();

          } else if (doc && "onreadystatechange" in doc.createElement("script")) {
            // For IE 6–8
            installReadyStateChangeImplementation();

          } else {
            // For older browsers
            installSetTimeoutImplementation();
          }

          attachTo.setImmediate = setImmediate;
          attachTo.clearImmediate = clearImmediate;
        } (typeof self === "undefined" ? typeof global === "undefined" ? this : global : self));

        /* WEBPACK VAR INJECTION */
      }.call(this, __webpack_require__(/*! ./../../buildin/global.js */ "../../../../../AppData/Roaming/npm/node_modules/webpack/buildin/global.js"), __webpack_require__(/*! ./../process/browser.js */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/process/browser.js")))

      /***/
    }),

/***/ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/sha.js/hash.js":
/*!*********************************************!*\
  !*** (webpack)/node_modules/sha.js/hash.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

      var Buffer = __webpack_require__(/*! safe-buffer */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/safe-buffer/index.js").Buffer

      // prototype class for hash functions
      function Hash(blockSize, finalSize) {
        this._block = Buffer.alloc(blockSize)
        this._finalSize = finalSize
        this._blockSize = blockSize
        this._len = 0
      }

      Hash.prototype.update = function (data, enc) {
        if (typeof data === 'string') {
          enc = enc || 'utf8'
          data = Buffer.from(data, enc)
        }

        var block = this._block
        var blockSize = this._blockSize
        var length = data.length
        var accum = this._len

        for (var offset = 0; offset < length;) {
          var assigned = accum % blockSize
          var remainder = Math.min(length - offset, blockSize - assigned)

          for (var i = 0; i < remainder; i++) {
            block[assigned + i] = data[offset + i]
          }

          accum += remainder
          offset += remainder

          if ((accum % blockSize) === 0) {
            this._update(block)
          }
        }

        this._len += length
        return this
      }

      Hash.prototype.digest = function (enc) {
        var rem = this._len % this._blockSize

        this._block[rem] = 0x80

        // zero (rem + 1) trailing bits, where (rem + 1) is the smallest
        // non-negative solution to the equation (length + 1 + (rem + 1)) === finalSize mod blockSize
        this._block.fill(0, rem + 1)

        if (rem >= this._finalSize) {
          this._update(this._block)
          this._block.fill(0)
        }

        var bits = this._len * 8

        // uint32
        if (bits <= 0xffffffff) {
          this._block.writeUInt32BE(bits, this._blockSize - 4)

          // uint64
        } else {
          var lowBits = (bits & 0xffffffff) >>> 0
          var highBits = (bits - lowBits) / 0x100000000

          this._block.writeUInt32BE(highBits, this._blockSize - 8)
          this._block.writeUInt32BE(lowBits, this._blockSize - 4)
        }

        this._update(this._block)
        var hash = this._hash()

        return enc ? hash.toString(enc) : hash
      }

      Hash.prototype._update = function () {
        throw new Error('_update must be implemented by subclass')
      }

      module.exports = Hash


      /***/
    }),

/***/ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/sha.js/index.js":
/*!**********************************************!*\
  !*** (webpack)/node_modules/sha.js/index.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

      var exports = module.exports = function SHA(algorithm) {
        algorithm = algorithm.toLowerCase()

        var Algorithm = exports[algorithm]
        if (!Algorithm) throw new Error(algorithm + ' is not supported (we accept pull requests)')

        return new Algorithm()
      }

      exports.sha = __webpack_require__(/*! ./sha */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/sha.js/sha.js")
      exports.sha1 = __webpack_require__(/*! ./sha1 */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/sha.js/sha1.js")
      exports.sha224 = __webpack_require__(/*! ./sha224 */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/sha.js/sha224.js")
      exports.sha256 = __webpack_require__(/*! ./sha256 */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/sha.js/sha256.js")
      exports.sha384 = __webpack_require__(/*! ./sha384 */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/sha.js/sha384.js")
      exports.sha512 = __webpack_require__(/*! ./sha512 */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/sha.js/sha512.js")


      /***/
    }),

/***/ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/sha.js/sha.js":
/*!********************************************!*\
  !*** (webpack)/node_modules/sha.js/sha.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

      /*
       * A JavaScript implementation of the Secure Hash Algorithm, SHA-0, as defined
       * in FIPS PUB 180-1
       * This source code is derived from sha1.js of the same repository.
       * The difference between SHA-0 and SHA-1 is just a bitwise rotate left
       * operation was added.
       */

      var inherits = __webpack_require__(/*! inherits */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/inherits/inherits_browser.js")
      var Hash = __webpack_require__(/*! ./hash */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/sha.js/hash.js")
      var Buffer = __webpack_require__(/*! safe-buffer */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/safe-buffer/index.js").Buffer

      var K = [
        0x5a827999, 0x6ed9eba1, 0x8f1bbcdc | 0, 0xca62c1d6 | 0
      ]

      var W = new Array(80)

      function Sha() {
        this.init()
        this._w = W

        Hash.call(this, 64, 56)
      }

      inherits(Sha, Hash)

      Sha.prototype.init = function () {
        this._a = 0x67452301
        this._b = 0xefcdab89
        this._c = 0x98badcfe
        this._d = 0x10325476
        this._e = 0xc3d2e1f0

        return this
      }

      function rotl5(num) {
        return (num << 5) | (num >>> 27)
      }

      function rotl30(num) {
        return (num << 30) | (num >>> 2)
      }

      function ft(s, b, c, d) {
        if (s === 0) return (b & c) | ((~b) & d)
        if (s === 2) return (b & c) | (b & d) | (c & d)
        return b ^ c ^ d
      }

      Sha.prototype._update = function (M) {
        var W = this._w

        var a = this._a | 0
        var b = this._b | 0
        var c = this._c | 0
        var d = this._d | 0
        var e = this._e | 0

        for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4)
        for (; i < 80; ++i) W[i] = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16]

        for (var j = 0; j < 80; ++j) {
          var s = ~~(j / 20)
          var t = (rotl5(a) + ft(s, b, c, d) + e + W[j] + K[s]) | 0

          e = d
          d = c
          c = rotl30(b)
          b = a
          a = t
        }

        this._a = (a + this._a) | 0
        this._b = (b + this._b) | 0
        this._c = (c + this._c) | 0
        this._d = (d + this._d) | 0
        this._e = (e + this._e) | 0
      }

      Sha.prototype._hash = function () {
        var H = Buffer.allocUnsafe(20)

        H.writeInt32BE(this._a | 0, 0)
        H.writeInt32BE(this._b | 0, 4)
        H.writeInt32BE(this._c | 0, 8)
        H.writeInt32BE(this._d | 0, 12)
        H.writeInt32BE(this._e | 0, 16)

        return H
      }

      module.exports = Sha


      /***/
    }),

/***/ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/sha.js/sha1.js":
/*!*********************************************!*\
  !*** (webpack)/node_modules/sha.js/sha1.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

      /*
       * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined
       * in FIPS PUB 180-1
       * Version 2.1a Copyright Paul Johnston 2000 - 2002.
       * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
       * Distributed under the BSD License
       * See http://pajhome.org.uk/crypt/md5 for details.
       */

      var inherits = __webpack_require__(/*! inherits */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/inherits/inherits_browser.js")
      var Hash = __webpack_require__(/*! ./hash */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/sha.js/hash.js")
      var Buffer = __webpack_require__(/*! safe-buffer */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/safe-buffer/index.js").Buffer

      var K = [
        0x5a827999, 0x6ed9eba1, 0x8f1bbcdc | 0, 0xca62c1d6 | 0
      ]

      var W = new Array(80)

      function Sha1() {
        this.init()
        this._w = W

        Hash.call(this, 64, 56)
      }

      inherits(Sha1, Hash)

      Sha1.prototype.init = function () {
        this._a = 0x67452301
        this._b = 0xefcdab89
        this._c = 0x98badcfe
        this._d = 0x10325476
        this._e = 0xc3d2e1f0

        return this
      }

      function rotl1(num) {
        return (num << 1) | (num >>> 31)
      }

      function rotl5(num) {
        return (num << 5) | (num >>> 27)
      }

      function rotl30(num) {
        return (num << 30) | (num >>> 2)
      }

      function ft(s, b, c, d) {
        if (s === 0) return (b & c) | ((~b) & d)
        if (s === 2) return (b & c) | (b & d) | (c & d)
        return b ^ c ^ d
      }

      Sha1.prototype._update = function (M) {
        var W = this._w

        var a = this._a | 0
        var b = this._b | 0
        var c = this._c | 0
        var d = this._d | 0
        var e = this._e | 0

        for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4)
        for (; i < 80; ++i) W[i] = rotl1(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16])

        for (var j = 0; j < 80; ++j) {
          var s = ~~(j / 20)
          var t = (rotl5(a) + ft(s, b, c, d) + e + W[j] + K[s]) | 0

          e = d
          d = c
          c = rotl30(b)
          b = a
          a = t
        }

        this._a = (a + this._a) | 0
        this._b = (b + this._b) | 0
        this._c = (c + this._c) | 0
        this._d = (d + this._d) | 0
        this._e = (e + this._e) | 0
      }

      Sha1.prototype._hash = function () {
        var H = Buffer.allocUnsafe(20)

        H.writeInt32BE(this._a | 0, 0)
        H.writeInt32BE(this._b | 0, 4)
        H.writeInt32BE(this._c | 0, 8)
        H.writeInt32BE(this._d | 0, 12)
        H.writeInt32BE(this._e | 0, 16)

        return H
      }

      module.exports = Sha1


      /***/
    }),

/***/ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/sha.js/sha224.js":
/*!***********************************************!*\
  !*** (webpack)/node_modules/sha.js/sha224.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

      /**
       * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
       * in FIPS 180-2
       * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
       * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
       *
       */

      var inherits = __webpack_require__(/*! inherits */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/inherits/inherits_browser.js")
      var Sha256 = __webpack_require__(/*! ./sha256 */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/sha.js/sha256.js")
      var Hash = __webpack_require__(/*! ./hash */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/sha.js/hash.js")
      var Buffer = __webpack_require__(/*! safe-buffer */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/safe-buffer/index.js").Buffer

      var W = new Array(64)

      function Sha224() {
        this.init()

        this._w = W // new Array(64)

        Hash.call(this, 64, 56)
      }

      inherits(Sha224, Sha256)

      Sha224.prototype.init = function () {
        this._a = 0xc1059ed8
        this._b = 0x367cd507
        this._c = 0x3070dd17
        this._d = 0xf70e5939
        this._e = 0xffc00b31
        this._f = 0x68581511
        this._g = 0x64f98fa7
        this._h = 0xbefa4fa4

        return this
      }

      Sha224.prototype._hash = function () {
        var H = Buffer.allocUnsafe(28)

        H.writeInt32BE(this._a, 0)
        H.writeInt32BE(this._b, 4)
        H.writeInt32BE(this._c, 8)
        H.writeInt32BE(this._d, 12)
        H.writeInt32BE(this._e, 16)
        H.writeInt32BE(this._f, 20)
        H.writeInt32BE(this._g, 24)

        return H
      }

      module.exports = Sha224


      /***/
    }),

/***/ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/sha.js/sha256.js":
/*!***********************************************!*\
  !*** (webpack)/node_modules/sha.js/sha256.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

      /**
       * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
       * in FIPS 180-2
       * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
       * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
       *
       */

      var inherits = __webpack_require__(/*! inherits */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/inherits/inherits_browser.js")
      var Hash = __webpack_require__(/*! ./hash */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/sha.js/hash.js")
      var Buffer = __webpack_require__(/*! safe-buffer */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/safe-buffer/index.js").Buffer

      var K = [
        0x428A2F98, 0x71374491, 0xB5C0FBCF, 0xE9B5DBA5,
        0x3956C25B, 0x59F111F1, 0x923F82A4, 0xAB1C5ED5,
        0xD807AA98, 0x12835B01, 0x243185BE, 0x550C7DC3,
        0x72BE5D74, 0x80DEB1FE, 0x9BDC06A7, 0xC19BF174,
        0xE49B69C1, 0xEFBE4786, 0x0FC19DC6, 0x240CA1CC,
        0x2DE92C6F, 0x4A7484AA, 0x5CB0A9DC, 0x76F988DA,
        0x983E5152, 0xA831C66D, 0xB00327C8, 0xBF597FC7,
        0xC6E00BF3, 0xD5A79147, 0x06CA6351, 0x14292967,
        0x27B70A85, 0x2E1B2138, 0x4D2C6DFC, 0x53380D13,
        0x650A7354, 0x766A0ABB, 0x81C2C92E, 0x92722C85,
        0xA2BFE8A1, 0xA81A664B, 0xC24B8B70, 0xC76C51A3,
        0xD192E819, 0xD6990624, 0xF40E3585, 0x106AA070,
        0x19A4C116, 0x1E376C08, 0x2748774C, 0x34B0BCB5,
        0x391C0CB3, 0x4ED8AA4A, 0x5B9CCA4F, 0x682E6FF3,
        0x748F82EE, 0x78A5636F, 0x84C87814, 0x8CC70208,
        0x90BEFFFA, 0xA4506CEB, 0xBEF9A3F7, 0xC67178F2
      ]

      var W = new Array(64)

      function Sha256() {
        this.init()

        this._w = W // new Array(64)

        Hash.call(this, 64, 56)
      }

      inherits(Sha256, Hash)

      Sha256.prototype.init = function () {
        this._a = 0x6a09e667
        this._b = 0xbb67ae85
        this._c = 0x3c6ef372
        this._d = 0xa54ff53a
        this._e = 0x510e527f
        this._f = 0x9b05688c
        this._g = 0x1f83d9ab
        this._h = 0x5be0cd19

        return this
      }

      function ch(x, y, z) {
        return z ^ (x & (y ^ z))
      }

      function maj(x, y, z) {
        return (x & y) | (z & (x | y))
      }

      function sigma0(x) {
        return (x >>> 2 | x << 30) ^ (x >>> 13 | x << 19) ^ (x >>> 22 | x << 10)
      }

      function sigma1(x) {
        return (x >>> 6 | x << 26) ^ (x >>> 11 | x << 21) ^ (x >>> 25 | x << 7)
      }

      function gamma0(x) {
        return (x >>> 7 | x << 25) ^ (x >>> 18 | x << 14) ^ (x >>> 3)
      }

      function gamma1(x) {
        return (x >>> 17 | x << 15) ^ (x >>> 19 | x << 13) ^ (x >>> 10)
      }

      Sha256.prototype._update = function (M) {
        var W = this._w

        var a = this._a | 0
        var b = this._b | 0
        var c = this._c | 0
        var d = this._d | 0
        var e = this._e | 0
        var f = this._f | 0
        var g = this._g | 0
        var h = this._h | 0

        for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4)
        for (; i < 64; ++i) W[i] = (gamma1(W[i - 2]) + W[i - 7] + gamma0(W[i - 15]) + W[i - 16]) | 0

        for (var j = 0; j < 64; ++j) {
          var T1 = (h + sigma1(e) + ch(e, f, g) + K[j] + W[j]) | 0
          var T2 = (sigma0(a) + maj(a, b, c)) | 0

          h = g
          g = f
          f = e
          e = (d + T1) | 0
          d = c
          c = b
          b = a
          a = (T1 + T2) | 0
        }

        this._a = (a + this._a) | 0
        this._b = (b + this._b) | 0
        this._c = (c + this._c) | 0
        this._d = (d + this._d) | 0
        this._e = (e + this._e) | 0
        this._f = (f + this._f) | 0
        this._g = (g + this._g) | 0
        this._h = (h + this._h) | 0
      }

      Sha256.prototype._hash = function () {
        var H = Buffer.allocUnsafe(32)

        H.writeInt32BE(this._a, 0)
        H.writeInt32BE(this._b, 4)
        H.writeInt32BE(this._c, 8)
        H.writeInt32BE(this._d, 12)
        H.writeInt32BE(this._e, 16)
        H.writeInt32BE(this._f, 20)
        H.writeInt32BE(this._g, 24)
        H.writeInt32BE(this._h, 28)

        return H
      }

      module.exports = Sha256


      /***/
    }),

/***/ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/sha.js/sha384.js":
/*!***********************************************!*\
  !*** (webpack)/node_modules/sha.js/sha384.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

      var inherits = __webpack_require__(/*! inherits */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/inherits/inherits_browser.js")
      var SHA512 = __webpack_require__(/*! ./sha512 */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/sha.js/sha512.js")
      var Hash = __webpack_require__(/*! ./hash */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/sha.js/hash.js")
      var Buffer = __webpack_require__(/*! safe-buffer */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/safe-buffer/index.js").Buffer

      var W = new Array(160)

      function Sha384() {
        this.init()
        this._w = W

        Hash.call(this, 128, 112)
      }

      inherits(Sha384, SHA512)

      Sha384.prototype.init = function () {
        this._ah = 0xcbbb9d5d
        this._bh = 0x629a292a
        this._ch = 0x9159015a
        this._dh = 0x152fecd8
        this._eh = 0x67332667
        this._fh = 0x8eb44a87
        this._gh = 0xdb0c2e0d
        this._hh = 0x47b5481d

        this._al = 0xc1059ed8
        this._bl = 0x367cd507
        this._cl = 0x3070dd17
        this._dl = 0xf70e5939
        this._el = 0xffc00b31
        this._fl = 0x68581511
        this._gl = 0x64f98fa7
        this._hl = 0xbefa4fa4

        return this
      }

      Sha384.prototype._hash = function () {
        var H = Buffer.allocUnsafe(48)

        function writeInt64BE(h, l, offset) {
          H.writeInt32BE(h, offset)
          H.writeInt32BE(l, offset + 4)
        }

        writeInt64BE(this._ah, this._al, 0)
        writeInt64BE(this._bh, this._bl, 8)
        writeInt64BE(this._ch, this._cl, 16)
        writeInt64BE(this._dh, this._dl, 24)
        writeInt64BE(this._eh, this._el, 32)
        writeInt64BE(this._fh, this._fl, 40)

        return H
      }

      module.exports = Sha384


      /***/
    }),

/***/ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/sha.js/sha512.js":
/*!***********************************************!*\
  !*** (webpack)/node_modules/sha.js/sha512.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

      var inherits = __webpack_require__(/*! inherits */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/inherits/inherits_browser.js")
      var Hash = __webpack_require__(/*! ./hash */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/sha.js/hash.js")
      var Buffer = __webpack_require__(/*! safe-buffer */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/safe-buffer/index.js").Buffer

      var K = [
        0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
        0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
        0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
        0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
        0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
        0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
        0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
        0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
        0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
        0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
        0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
        0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
        0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
        0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
        0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
        0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
        0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
        0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
        0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
        0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
        0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
        0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
        0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
        0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
        0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
        0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
        0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
        0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
        0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
        0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
        0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
        0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
        0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
        0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
        0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
        0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
        0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
        0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
        0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
        0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
      ]

      var W = new Array(160)

      function Sha512() {
        this.init()
        this._w = W

        Hash.call(this, 128, 112)
      }

      inherits(Sha512, Hash)

      Sha512.prototype.init = function () {
        this._ah = 0x6a09e667
        this._bh = 0xbb67ae85
        this._ch = 0x3c6ef372
        this._dh = 0xa54ff53a
        this._eh = 0x510e527f
        this._fh = 0x9b05688c
        this._gh = 0x1f83d9ab
        this._hh = 0x5be0cd19

        this._al = 0xf3bcc908
        this._bl = 0x84caa73b
        this._cl = 0xfe94f82b
        this._dl = 0x5f1d36f1
        this._el = 0xade682d1
        this._fl = 0x2b3e6c1f
        this._gl = 0xfb41bd6b
        this._hl = 0x137e2179

        return this
      }

      function Ch(x, y, z) {
        return z ^ (x & (y ^ z))
      }

      function maj(x, y, z) {
        return (x & y) | (z & (x | y))
      }

      function sigma0(x, xl) {
        return (x >>> 28 | xl << 4) ^ (xl >>> 2 | x << 30) ^ (xl >>> 7 | x << 25)
      }

      function sigma1(x, xl) {
        return (x >>> 14 | xl << 18) ^ (x >>> 18 | xl << 14) ^ (xl >>> 9 | x << 23)
      }

      function Gamma0(x, xl) {
        return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ (x >>> 7)
      }

      function Gamma0l(x, xl) {
        return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ (x >>> 7 | xl << 25)
      }

      function Gamma1(x, xl) {
        return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ (x >>> 6)
      }

      function Gamma1l(x, xl) {
        return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ (x >>> 6 | xl << 26)
      }

      function getCarry(a, b) {
        return (a >>> 0) < (b >>> 0) ? 1 : 0
      }

      Sha512.prototype._update = function (M) {
        var W = this._w

        var ah = this._ah | 0
        var bh = this._bh | 0
        var ch = this._ch | 0
        var dh = this._dh | 0
        var eh = this._eh | 0
        var fh = this._fh | 0
        var gh = this._gh | 0
        var hh = this._hh | 0

        var al = this._al | 0
        var bl = this._bl | 0
        var cl = this._cl | 0
        var dl = this._dl | 0
        var el = this._el | 0
        var fl = this._fl | 0
        var gl = this._gl | 0
        var hl = this._hl | 0

        for (var i = 0; i < 32; i += 2) {
          W[i] = M.readInt32BE(i * 4)
          W[i + 1] = M.readInt32BE(i * 4 + 4)
        }
        for (; i < 160; i += 2) {
          var xh = W[i - 15 * 2]
          var xl = W[i - 15 * 2 + 1]
          var gamma0 = Gamma0(xh, xl)
          var gamma0l = Gamma0l(xl, xh)

          xh = W[i - 2 * 2]
          xl = W[i - 2 * 2 + 1]
          var gamma1 = Gamma1(xh, xl)
          var gamma1l = Gamma1l(xl, xh)

          // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]
          var Wi7h = W[i - 7 * 2]
          var Wi7l = W[i - 7 * 2 + 1]

          var Wi16h = W[i - 16 * 2]
          var Wi16l = W[i - 16 * 2 + 1]

          var Wil = (gamma0l + Wi7l) | 0
          var Wih = (gamma0 + Wi7h + getCarry(Wil, gamma0l)) | 0
          Wil = (Wil + gamma1l) | 0
          Wih = (Wih + gamma1 + getCarry(Wil, gamma1l)) | 0
          Wil = (Wil + Wi16l) | 0
          Wih = (Wih + Wi16h + getCarry(Wil, Wi16l)) | 0

          W[i] = Wih
          W[i + 1] = Wil
        }

        for (var j = 0; j < 160; j += 2) {
          Wih = W[j]
          Wil = W[j + 1]

          var majh = maj(ah, bh, ch)
          var majl = maj(al, bl, cl)

          var sigma0h = sigma0(ah, al)
          var sigma0l = sigma0(al, ah)
          var sigma1h = sigma1(eh, el)
          var sigma1l = sigma1(el, eh)

          // t1 = h + sigma1 + ch + K[j] + W[j]
          var Kih = K[j]
          var Kil = K[j + 1]

          var chh = Ch(eh, fh, gh)
          var chl = Ch(el, fl, gl)

          var t1l = (hl + sigma1l) | 0
          var t1h = (hh + sigma1h + getCarry(t1l, hl)) | 0
          t1l = (t1l + chl) | 0
          t1h = (t1h + chh + getCarry(t1l, chl)) | 0
          t1l = (t1l + Kil) | 0
          t1h = (t1h + Kih + getCarry(t1l, Kil)) | 0
          t1l = (t1l + Wil) | 0
          t1h = (t1h + Wih + getCarry(t1l, Wil)) | 0

          // t2 = sigma0 + maj
          var t2l = (sigma0l + majl) | 0
          var t2h = (sigma0h + majh + getCarry(t2l, sigma0l)) | 0

          hh = gh
          hl = gl
          gh = fh
          gl = fl
          fh = eh
          fl = el
          el = (dl + t1l) | 0
          eh = (dh + t1h + getCarry(el, dl)) | 0
          dh = ch
          dl = cl
          ch = bh
          cl = bl
          bh = ah
          bl = al
          al = (t1l + t2l) | 0
          ah = (t1h + t2h + getCarry(al, t1l)) | 0
        }

        this._al = (this._al + al) | 0
        this._bl = (this._bl + bl) | 0
        this._cl = (this._cl + cl) | 0
        this._dl = (this._dl + dl) | 0
        this._el = (this._el + el) | 0
        this._fl = (this._fl + fl) | 0
        this._gl = (this._gl + gl) | 0
        this._hl = (this._hl + hl) | 0

        this._ah = (this._ah + ah + getCarry(this._al, al)) | 0
        this._bh = (this._bh + bh + getCarry(this._bl, bl)) | 0
        this._ch = (this._ch + ch + getCarry(this._cl, cl)) | 0
        this._dh = (this._dh + dh + getCarry(this._dl, dl)) | 0
        this._eh = (this._eh + eh + getCarry(this._el, el)) | 0
        this._fh = (this._fh + fh + getCarry(this._fl, fl)) | 0
        this._gh = (this._gh + gh + getCarry(this._gl, gl)) | 0
        this._hh = (this._hh + hh + getCarry(this._hl, hl)) | 0
      }

      Sha512.prototype._hash = function () {
        var H = Buffer.allocUnsafe(64)

        function writeInt64BE(h, l, offset) {
          H.writeInt32BE(h, offset)
          H.writeInt32BE(l, offset + 4)
        }

        writeInt64BE(this._ah, this._al, 0)
        writeInt64BE(this._bh, this._bl, 8)
        writeInt64BE(this._ch, this._cl, 16)
        writeInt64BE(this._dh, this._dl, 24)
        writeInt64BE(this._eh, this._el, 32)
        writeInt64BE(this._fh, this._fl, 40)
        writeInt64BE(this._gh, this._gl, 48)
        writeInt64BE(this._hh, this._hl, 56)

        return H
      }

      module.exports = Sha512


      /***/
    }),

/***/ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/stream-browserify/index.js":
/*!*********************************************************!*\
  !*** (webpack)/node_modules/stream-browserify/index.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

      // Copyright Joyent, Inc. and other Node contributors.
      //
      // Permission is hereby granted, free of charge, to any person obtaining a
      // copy of this software and associated documentation files (the
      // "Software"), to deal in the Software without restriction, including
      // without limitation the rights to use, copy, modify, merge, publish,
      // distribute, sublicense, and/or sell copies of the Software, and to permit
      // persons to whom the Software is furnished to do so, subject to the
      // following conditions:
      //
      // The above copyright notice and this permission notice shall be included
      // in all copies or substantial portions of the Software.
      //
      // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
      // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
      // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
      // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
      // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
      // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
      // USE OR OTHER DEALINGS IN THE SOFTWARE.

      module.exports = Stream;

      var EE = __webpack_require__(/*! events */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/events/events.js").EventEmitter;
      var inherits = __webpack_require__(/*! inherits */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/inherits/inherits_browser.js");

      inherits(Stream, EE);
      Stream.Readable = __webpack_require__(/*! readable-stream/readable.js */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/readable-stream/readable-browser.js");
      Stream.Writable = __webpack_require__(/*! readable-stream/writable.js */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/readable-stream/writable-browser.js");
      Stream.Duplex = __webpack_require__(/*! readable-stream/duplex.js */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/readable-stream/duplex-browser.js");
      Stream.Transform = __webpack_require__(/*! readable-stream/transform.js */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/readable-stream/transform.js");
      Stream.PassThrough = __webpack_require__(/*! readable-stream/passthrough.js */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/readable-stream/passthrough.js");

      // Backwards-compat with node 0.4.x
      Stream.Stream = Stream;



      // old-style streams.  Note that the pipe method (the only relevant
      // part of this class) is overridden in the Readable class.

      function Stream() {
        EE.call(this);
      }

      Stream.prototype.pipe = function (dest, options) {
        var source = this;

        function ondata(chunk) {
          if (dest.writable) {
            if (false === dest.write(chunk) && source.pause) {
              source.pause();
            }
          }
        }

        source.on('data', ondata);

        function ondrain() {
          if (source.readable && source.resume) {
            source.resume();
          }
        }

        dest.on('drain', ondrain);

        // If the 'end' option is not supplied, dest.end() will be called when
        // source gets the 'end' or 'close' events.  Only dest.end() once.
        if (!dest._isStdio && (!options || options.end !== false)) {
          source.on('end', onend);
          source.on('close', onclose);
        }

        var didOnEnd = false;
        function onend() {
          if (didOnEnd) return;
          didOnEnd = true;

          dest.end();
        }


        function onclose() {
          if (didOnEnd) return;
          didOnEnd = true;

          if (typeof dest.destroy === 'function') dest.destroy();
        }

        // don't leave dangling pipes when there are errors.
        function onerror(er) {
          cleanup();
          if (EE.listenerCount(this, 'error') === 0) {
            throw er; // Unhandled stream error in pipe.
          }
        }

        source.on('error', onerror);
        dest.on('error', onerror);

        // remove all the event listeners that were added.
        function cleanup() {
          source.removeListener('data', ondata);
          dest.removeListener('drain', ondrain);

          source.removeListener('end', onend);
          source.removeListener('close', onclose);

          source.removeListener('error', onerror);
          dest.removeListener('error', onerror);

          source.removeListener('end', cleanup);
          source.removeListener('close', cleanup);

          dest.removeListener('close', cleanup);
        }

        source.on('end', cleanup);
        source.on('close', cleanup);

        dest.on('close', cleanup);

        dest.emit('pipe', source);

        // Allow for unix-like usage: A.pipe(B).pipe(C)
        return dest;
      };


      /***/
    }),

/***/ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/string_decoder/lib/string_decoder.js":
/*!*******************************************************************!*\
  !*** (webpack)/node_modules/string_decoder/lib/string_decoder.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

      "use strict";
      // Copyright Joyent, Inc. and other Node contributors.
      //
      // Permission is hereby granted, free of charge, to any person obtaining a
      // copy of this software and associated documentation files (the
      // "Software"), to deal in the Software without restriction, including
      // without limitation the rights to use, copy, modify, merge, publish,
      // distribute, sublicense, and/or sell copies of the Software, and to permit
      // persons to whom the Software is furnished to do so, subject to the
      // following conditions:
      //
      // The above copyright notice and this permission notice shall be included
      // in all copies or substantial portions of the Software.
      //
      // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
      // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
      // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
      // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
      // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
      // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
      // USE OR OTHER DEALINGS IN THE SOFTWARE.



      /*<replacement>*/

      var Buffer = __webpack_require__(/*! safe-buffer */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/safe-buffer/index.js").Buffer;
      /*</replacement>*/

      var isEncoding = Buffer.isEncoding || function (encoding) {
        encoding = '' + encoding;
        switch (encoding && encoding.toLowerCase()) {
          case 'hex': case 'utf8': case 'utf-8': case 'ascii': case 'binary': case 'base64': case 'ucs2': case 'ucs-2': case 'utf16le': case 'utf-16le': case 'raw':
            return true;
          default:
            return false;
        }
      };

      function _normalizeEncoding(enc) {
        if (!enc) return 'utf8';
        var retried;
        while (true) {
          switch (enc) {
            case 'utf8':
            case 'utf-8':
              return 'utf8';
            case 'ucs2':
            case 'ucs-2':
            case 'utf16le':
            case 'utf-16le':
              return 'utf16le';
            case 'latin1':
            case 'binary':
              return 'latin1';
            case 'base64':
            case 'ascii':
            case 'hex':
              return enc;
            default:
              if (retried) return; // undefined
              enc = ('' + enc).toLowerCase();
              retried = true;
          }
        }
      };

      // Do not cache `Buffer.isEncoding` when checking encoding names as some
      // modules monkey-patch it to support additional encodings
      function normalizeEncoding(enc) {
        var nenc = _normalizeEncoding(enc);
        if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);
        return nenc || enc;
      }

      // StringDecoder provides an interface for efficiently splitting a series of
      // buffers into a series of JS strings without breaking apart multi-byte
      // characters.
      exports.StringDecoder = StringDecoder;
      function StringDecoder(encoding) {
        this.encoding = normalizeEncoding(encoding);
        var nb;
        switch (this.encoding) {
          case 'utf16le':
            this.text = utf16Text;
            this.end = utf16End;
            nb = 4;
            break;
          case 'utf8':
            this.fillLast = utf8FillLast;
            nb = 4;
            break;
          case 'base64':
            this.text = base64Text;
            this.end = base64End;
            nb = 3;
            break;
          default:
            this.write = simpleWrite;
            this.end = simpleEnd;
            return;
        }
        this.lastNeed = 0;
        this.lastTotal = 0;
        this.lastChar = Buffer.allocUnsafe(nb);
      }

      StringDecoder.prototype.write = function (buf) {
        if (buf.length === 0) return '';
        var r;
        var i;
        if (this.lastNeed) {
          r = this.fillLast(buf);
          if (r === undefined) return '';
          i = this.lastNeed;
          this.lastNeed = 0;
        } else {
          i = 0;
        }
        if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
        return r || '';
      };

      StringDecoder.prototype.end = utf8End;

      // Returns only complete characters in a Buffer
      StringDecoder.prototype.text = utf8Text;

      // Attempts to complete a partial non-UTF-8 character using bytes from a Buffer
      StringDecoder.prototype.fillLast = function (buf) {
        if (this.lastNeed <= buf.length) {
          buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
          return this.lastChar.toString(this.encoding, 0, this.lastTotal);
        }
        buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
        this.lastNeed -= buf.length;
      };

      // Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
      // continuation byte. If an invalid byte is detected, -2 is returned.
      function utf8CheckByte(byte) {
        if (byte <= 0x7F) return 0; else if (byte >> 5 === 0x06) return 2; else if (byte >> 4 === 0x0E) return 3; else if (byte >> 3 === 0x1E) return 4;
        return byte >> 6 === 0x02 ? -1 : -2;
      }

      // Checks at most 3 bytes at the end of a Buffer in order to detect an
      // incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
      // needed to complete the UTF-8 character (if applicable) are returned.
      function utf8CheckIncomplete(self, buf, i) {
        var j = buf.length - 1;
        if (j < i) return 0;
        var nb = utf8CheckByte(buf[j]);
        if (nb >= 0) {
          if (nb > 0) self.lastNeed = nb - 1;
          return nb;
        }
        if (--j < i || nb === -2) return 0;
        nb = utf8CheckByte(buf[j]);
        if (nb >= 0) {
          if (nb > 0) self.lastNeed = nb - 2;
          return nb;
        }
        if (--j < i || nb === -2) return 0;
        nb = utf8CheckByte(buf[j]);
        if (nb >= 0) {
          if (nb > 0) {
            if (nb === 2) nb = 0; else self.lastNeed = nb - 3;
          }
          return nb;
        }
        return 0;
      }

      // Validates as many continuation bytes for a multi-byte UTF-8 character as
      // needed or are available. If we see a non-continuation byte where we expect
      // one, we "replace" the validated continuation bytes we've seen so far with
      // a single UTF-8 replacement character ('\ufffd'), to match v8's UTF-8 decoding
      // behavior. The continuation byte check is included three times in the case
      // where all of the continuation bytes for a character exist in the same buffer.
      // It is also done this way as a slight performance increase instead of using a
      // loop.
      function utf8CheckExtraBytes(self, buf, p) {
        if ((buf[0] & 0xC0) !== 0x80) {
          self.lastNeed = 0;
          return '\ufffd';
        }
        if (self.lastNeed > 1 && buf.length > 1) {
          if ((buf[1] & 0xC0) !== 0x80) {
            self.lastNeed = 1;
            return '\ufffd';
          }
          if (self.lastNeed > 2 && buf.length > 2) {
            if ((buf[2] & 0xC0) !== 0x80) {
              self.lastNeed = 2;
              return '\ufffd';
            }
          }
        }
      }

      // Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.
      function utf8FillLast(buf) {
        var p = this.lastTotal - this.lastNeed;
        var r = utf8CheckExtraBytes(this, buf, p);
        if (r !== undefined) return r;
        if (this.lastNeed <= buf.length) {
          buf.copy(this.lastChar, p, 0, this.lastNeed);
          return this.lastChar.toString(this.encoding, 0, this.lastTotal);
        }
        buf.copy(this.lastChar, p, 0, buf.length);
        this.lastNeed -= buf.length;
      }

      // Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
      // partial character, the character's bytes are buffered until the required
      // number of bytes are available.
      function utf8Text(buf, i) {
        var total = utf8CheckIncomplete(this, buf, i);
        if (!this.lastNeed) return buf.toString('utf8', i);
        this.lastTotal = total;
        var end = buf.length - (total - this.lastNeed);
        buf.copy(this.lastChar, 0, end);
        return buf.toString('utf8', i, end);
      }

      // For UTF-8, a replacement character is added when ending on a partial
      // character.
      function utf8End(buf) {
        var r = buf && buf.length ? this.write(buf) : '';
        if (this.lastNeed) return r + '\ufffd';
        return r;
      }

      // UTF-16LE typically needs two bytes per character, but even if we have an even
      // number of bytes available, we need to check if we end on a leading/high
      // surrogate. In that case, we need to wait for the next two bytes in order to
      // decode the last character properly.
      function utf16Text(buf, i) {
        if ((buf.length - i) % 2 === 0) {
          var r = buf.toString('utf16le', i);
          if (r) {
            var c = r.charCodeAt(r.length - 1);
            if (c >= 0xD800 && c <= 0xDBFF) {
              this.lastNeed = 2;
              this.lastTotal = 4;
              this.lastChar[0] = buf[buf.length - 2];
              this.lastChar[1] = buf[buf.length - 1];
              return r.slice(0, -1);
            }
          }
          return r;
        }
        this.lastNeed = 1;
        this.lastTotal = 2;
        this.lastChar[0] = buf[buf.length - 1];
        return buf.toString('utf16le', i, buf.length - 1);
      }

      // For UTF-16LE we do not explicitly append special replacement characters if we
      // end on a partial character, we simply let v8 handle that.
      function utf16End(buf) {
        var r = buf && buf.length ? this.write(buf) : '';
        if (this.lastNeed) {
          var end = this.lastTotal - this.lastNeed;
          return r + this.lastChar.toString('utf16le', 0, end);
        }
        return r;
      }

      function base64Text(buf, i) {
        var n = (buf.length - i) % 3;
        if (n === 0) return buf.toString('base64', i);
        this.lastNeed = 3 - n;
        this.lastTotal = 3;
        if (n === 1) {
          this.lastChar[0] = buf[buf.length - 1];
        } else {
          this.lastChar[0] = buf[buf.length - 2];
          this.lastChar[1] = buf[buf.length - 1];
        }
        return buf.toString('base64', i, buf.length - n);
      }

      function base64End(buf) {
        var r = buf && buf.length ? this.write(buf) : '';
        if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);
        return r;
      }

      // Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)
      function simpleWrite(buf) {
        return buf.toString(this.encoding);
      }

      function simpleEnd(buf) {
        return buf && buf.length ? this.write(buf) : '';
      }

      /***/
    }),

/***/ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/timers-browserify/main.js":
/*!********************************************************!*\
  !*** (webpack)/node_modules/timers-browserify/main.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function (global) {
        var scope = (typeof global !== "undefined" && global) ||
          (typeof self !== "undefined" && self) ||
          window;
        var apply = Function.prototype.apply;

        // DOM APIs, for completeness

        exports.setTimeout = function () {
          return new Timeout(apply.call(setTimeout, scope, arguments), clearTimeout);
        };
        exports.setInterval = function () {
          return new Timeout(apply.call(setInterval, scope, arguments), clearInterval);
        };
        exports.clearTimeout =
          exports.clearInterval = function (timeout) {
            if (timeout) {
              timeout.close();
            }
          };

        function Timeout(id, clearFn) {
          this._id = id;
          this._clearFn = clearFn;
        }
        Timeout.prototype.unref = Timeout.prototype.ref = function () { };
        Timeout.prototype.close = function () {
          this._clearFn.call(scope, this._id);
        };

        // Does not start the time, just sets up the members needed.
        exports.enroll = function (item, msecs) {
          clearTimeout(item._idleTimeoutId);
          item._idleTimeout = msecs;
        };

        exports.unenroll = function (item) {
          clearTimeout(item._idleTimeoutId);
          item._idleTimeout = -1;
        };

        exports._unrefActive = exports.active = function (item) {
          clearTimeout(item._idleTimeoutId);

          var msecs = item._idleTimeout;
          if (msecs >= 0) {
            item._idleTimeoutId = setTimeout(function onTimeout() {
              if (item._onTimeout)
                item._onTimeout();
            }, msecs);
          }
        };

        // setimmediate attaches itself to the global object
        __webpack_require__(/*! setimmediate */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/setimmediate/setImmediate.js");
        // On some exotic environments, it's not clear which object `setimmediate` was
        // able to install onto.  Search each possibility in the same order as the
        // `setimmediate` library.
        exports.setImmediate = (typeof self !== "undefined" && self.setImmediate) ||
          (typeof global !== "undefined" && global.setImmediate) ||
          (this && this.setImmediate);
        exports.clearImmediate = (typeof self !== "undefined" && self.clearImmediate) ||
          (typeof global !== "undefined" && global.clearImmediate) ||
          (this && this.clearImmediate);

        /* WEBPACK VAR INJECTION */
      }.call(this, __webpack_require__(/*! ./../../buildin/global.js */ "../../../../../AppData/Roaming/npm/node_modules/webpack/buildin/global.js")))

      /***/
    }),

/***/ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/url/url.js":
/*!*****************************************!*\
  !*** (webpack)/node_modules/url/url.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

      "use strict";
      // Copyright Joyent, Inc. and other Node contributors.
      //
      // Permission is hereby granted, free of charge, to any person obtaining a
      // copy of this software and associated documentation files (the
      // "Software"), to deal in the Software without restriction, including
      // without limitation the rights to use, copy, modify, merge, publish,
      // distribute, sublicense, and/or sell copies of the Software, and to permit
      // persons to whom the Software is furnished to do so, subject to the
      // following conditions:
      //
      // The above copyright notice and this permission notice shall be included
      // in all copies or substantial portions of the Software.
      //
      // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
      // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
      // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
      // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
      // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
      // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
      // USE OR OTHER DEALINGS IN THE SOFTWARE.



      var punycode = __webpack_require__(/*! punycode */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/node-libs-browser/node_modules/punycode/punycode.js");
      var util = __webpack_require__(/*! ./util */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/url/util.js");

      exports.parse = urlParse;
      exports.resolve = urlResolve;
      exports.resolveObject = urlResolveObject;
      exports.format = urlFormat;

      exports.Url = Url;

      function Url() {
        this.protocol = null;
        this.slashes = null;
        this.auth = null;
        this.host = null;
        this.port = null;
        this.hostname = null;
        this.hash = null;
        this.search = null;
        this.query = null;
        this.pathname = null;
        this.path = null;
        this.href = null;
      }

      // Reference: RFC 3986, RFC 1808, RFC 2396

      // define these here so at least they only have to be
      // compiled once on the first module load.
      var protocolPattern = /^([a-z0-9.+-]+:)/i,
        portPattern = /:[0-9]*$/,

        // Special case for a simple path URL
        simplePathPattern = /^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,

        // RFC 2396: characters reserved for delimiting URLs.
        // We actually just auto-escape these.
        delims = ['<', '>', '"', '`', ' ', '\r', '\n', '\t'],

        // RFC 2396: characters not allowed for various reasons.
        unwise = ['{', '}', '|', '\\', '^', '`'].concat(delims),

        // Allowed by RFCs, but cause of XSS attacks.  Always escape these.
        autoEscape = ['\''].concat(unwise),
        // Characters that are never ever allowed in a hostname.
        // Note that any invalid chars are also handled, but these
        // are the ones that are *expected* to be seen, so we fast-path
        // them.
        nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),
        hostEndingChars = ['/', '?', '#'],
        hostnameMaxLen = 255,
        hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/,
        hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,
        // protocols that can allow "unsafe" and "unwise" chars.
        unsafeProtocol = {
          'javascript': true,
          'javascript:': true
        },
        // protocols that never have a hostname.
        hostlessProtocol = {
          'javascript': true,
          'javascript:': true
        },
        // protocols that always contain a // bit.
        slashedProtocol = {
          'http': true,
          'https': true,
          'ftp': true,
          'gopher': true,
          'file': true,
          'http:': true,
          'https:': true,
          'ftp:': true,
          'gopher:': true,
          'file:': true
        },
        querystring = __webpack_require__(/*! querystring */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/querystring-es3/index.js");

      function urlParse(url, parseQueryString, slashesDenoteHost) {
        if (url && util.isObject(url) && url instanceof Url) return url;

        var u = new Url;
        u.parse(url, parseQueryString, slashesDenoteHost);
        return u;
      }

      Url.prototype.parse = function (url, parseQueryString, slashesDenoteHost) {
        if (!util.isString(url)) {
          throw new TypeError("Parameter 'url' must be a string, not " + typeof url);
        }

        // Copy chrome, IE, opera backslash-handling behavior.
        // Back slashes before the query string get converted to forward slashes
        // See: https://code.google.com/p/chromium/issues/detail?id=25916
        var queryIndex = url.indexOf('?'),
          splitter =
            (queryIndex !== -1 && queryIndex < url.indexOf('#')) ? '?' : '#',
          uSplit = url.split(splitter),
          slashRegex = /\\/g;
        uSplit[0] = uSplit[0].replace(slashRegex, '/');
        url = uSplit.join(splitter);

        var rest = url;

        // trim before proceeding.
        // This is to support parse stuff like "  http://foo.com  \n"
        rest = rest.trim();

        if (!slashesDenoteHost && url.split('#').length === 1) {
          // Try fast path regexp
          var simplePath = simplePathPattern.exec(rest);
          if (simplePath) {
            this.path = rest;
            this.href = rest;
            this.pathname = simplePath[1];
            if (simplePath[2]) {
              this.search = simplePath[2];
              if (parseQueryString) {
                this.query = querystring.parse(this.search.substr(1));
              } else {
                this.query = this.search.substr(1);
              }
            } else if (parseQueryString) {
              this.search = '';
              this.query = {};
            }
            return this;
          }
        }

        var proto = protocolPattern.exec(rest);
        if (proto) {
          proto = proto[0];
          var lowerProto = proto.toLowerCase();
          this.protocol = lowerProto;
          rest = rest.substr(proto.length);
        }

        // figure out if it's got a host
        // user@server is *always* interpreted as a hostname, and url
        // resolution will treat //foo/bar as host=foo,path=bar because that's
        // how the browser resolves relative URLs.
        if (slashesDenoteHost || proto || rest.match(/^\/\/[^@\/]+@[^@\/]+/)) {
          var slashes = rest.substr(0, 2) === '//';
          if (slashes && !(proto && hostlessProtocol[proto])) {
            rest = rest.substr(2);
            this.slashes = true;
          }
        }

        if (!hostlessProtocol[proto] &&
          (slashes || (proto && !slashedProtocol[proto]))) {

          // there's a hostname.
          // the first instance of /, ?, ;, or # ends the host.
          //
          // If there is an @ in the hostname, then non-host chars *are* allowed
          // to the left of the last @ sign, unless some host-ending character
          // comes *before* the @-sign.
          // URLs are obnoxious.
          //
          // ex:
          // http://a@b@c/ => user:a@b host:c
          // http://a@b?@c => user:a host:c path:/?@c

          // v0.12 TODO(isaacs): This is not quite how Chrome does things.
          // Review our test case against browsers more comprehensively.

          // find the first instance of any hostEndingChars
          var hostEnd = -1;
          for (var i = 0; i < hostEndingChars.length; i++) {
            var hec = rest.indexOf(hostEndingChars[i]);
            if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
              hostEnd = hec;
          }

          // at this point, either we have an explicit point where the
          // auth portion cannot go past, or the last @ char is the decider.
          var auth, atSign;
          if (hostEnd === -1) {
            // atSign can be anywhere.
            atSign = rest.lastIndexOf('@');
          } else {
            // atSign must be in auth portion.
            // http://a@b/c@d => host:b auth:a path:/c@d
            atSign = rest.lastIndexOf('@', hostEnd);
          }

          // Now we have a portion which is definitely the auth.
          // Pull that off.
          if (atSign !== -1) {
            auth = rest.slice(0, atSign);
            rest = rest.slice(atSign + 1);
            this.auth = decodeURIComponent(auth);
          }

          // the host is the remaining to the left of the first non-host char
          hostEnd = -1;
          for (var i = 0; i < nonHostChars.length; i++) {
            var hec = rest.indexOf(nonHostChars[i]);
            if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
              hostEnd = hec;
          }
          // if we still have not hit it, then the entire thing is a host.
          if (hostEnd === -1)
            hostEnd = rest.length;

          this.host = rest.slice(0, hostEnd);
          rest = rest.slice(hostEnd);

          // pull out port.
          this.parseHost();

          // we've indicated that there is a hostname,
          // so even if it's empty, it has to be present.
          this.hostname = this.hostname || '';

          // if hostname begins with [ and ends with ]
          // assume that it's an IPv6 address.
          var ipv6Hostname = this.hostname[0] === '[' &&
            this.hostname[this.hostname.length - 1] === ']';

          // validate a little.
          if (!ipv6Hostname) {
            var hostparts = this.hostname.split(/\./);
            for (var i = 0, l = hostparts.length; i < l; i++) {
              var part = hostparts[i];
              if (!part) continue;
              if (!part.match(hostnamePartPattern)) {
                var newpart = '';
                for (var j = 0, k = part.length; j < k; j++) {
                  if (part.charCodeAt(j) > 127) {
                    // we replace non-ASCII char with a temporary placeholder
                    // we need this to make sure size of hostname is not
                    // broken by replacing non-ASCII by nothing
                    newpart += 'x';
                  } else {
                    newpart += part[j];
                  }
                }
                // we test again with ASCII char only
                if (!newpart.match(hostnamePartPattern)) {
                  var validParts = hostparts.slice(0, i);
                  var notHost = hostparts.slice(i + 1);
                  var bit = part.match(hostnamePartStart);
                  if (bit) {
                    validParts.push(bit[1]);
                    notHost.unshift(bit[2]);
                  }
                  if (notHost.length) {
                    rest = '/' + notHost.join('.') + rest;
                  }
                  this.hostname = validParts.join('.');
                  break;
                }
              }
            }
          }

          if (this.hostname.length > hostnameMaxLen) {
            this.hostname = '';
          } else {
            // hostnames are always lower case.
            this.hostname = this.hostname.toLowerCase();
          }

          if (!ipv6Hostname) {
            // IDNA Support: Returns a punycoded representation of "domain".
            // It only converts parts of the domain name that
            // have non-ASCII characters, i.e. it doesn't matter if
            // you call it with a domain that already is ASCII-only.
            this.hostname = punycode.toASCII(this.hostname);
          }

          var p = this.port ? ':' + this.port : '';
          var h = this.hostname || '';
          this.host = h + p;
          this.href += this.host;

          // strip [ and ] from the hostname
          // the host field still retains them, though
          if (ipv6Hostname) {
            this.hostname = this.hostname.substr(1, this.hostname.length - 2);
            if (rest[0] !== '/') {
              rest = '/' + rest;
            }
          }
        }

        // now rest is set to the post-host stuff.
        // chop off any delim chars.
        if (!unsafeProtocol[lowerProto]) {

          // First, make 100% sure that any "autoEscape" chars get
          // escaped, even if encodeURIComponent doesn't think they
          // need to be.
          for (var i = 0, l = autoEscape.length; i < l; i++) {
            var ae = autoEscape[i];
            if (rest.indexOf(ae) === -1)
              continue;
            var esc = encodeURIComponent(ae);
            if (esc === ae) {
              esc = escape(ae);
            }
            rest = rest.split(ae).join(esc);
          }
        }


        // chop off from the tail first.
        var hash = rest.indexOf('#');
        if (hash !== -1) {
          // got a fragment string.
          this.hash = rest.substr(hash);
          rest = rest.slice(0, hash);
        }
        var qm = rest.indexOf('?');
        if (qm !== -1) {
          this.search = rest.substr(qm);
          this.query = rest.substr(qm + 1);
          if (parseQueryString) {
            this.query = querystring.parse(this.query);
          }
          rest = rest.slice(0, qm);
        } else if (parseQueryString) {
          // no query string, but parseQueryString still requested
          this.search = '';
          this.query = {};
        }
        if (rest) this.pathname = rest;
        if (slashedProtocol[lowerProto] &&
          this.hostname && !this.pathname) {
          this.pathname = '/';
        }

        //to support http.request
        if (this.pathname || this.search) {
          var p = this.pathname || '';
          var s = this.search || '';
          this.path = p + s;
        }

        // finally, reconstruct the href based on what has been validated.
        this.href = this.format();
        return this;
      };

      // format a parsed object into a url string
      function urlFormat(obj) {
        // ensure it's an object, and not a string url.
        // If it's an obj, this is a no-op.
        // this way, you can call url_format() on strings
        // to clean up potentially wonky urls.
        if (util.isString(obj)) obj = urlParse(obj);
        if (!(obj instanceof Url)) return Url.prototype.format.call(obj);
        return obj.format();
      }

      Url.prototype.format = function () {
        var auth = this.auth || '';
        if (auth) {
          auth = encodeURIComponent(auth);
          auth = auth.replace(/%3A/i, ':');
          auth += '@';
        }

        var protocol = this.protocol || '',
          pathname = this.pathname || '',
          hash = this.hash || '',
          host = false,
          query = '';

        if (this.host) {
          host = auth + this.host;
        } else if (this.hostname) {
          host = auth + (this.hostname.indexOf(':') === -1 ?
            this.hostname :
            '[' + this.hostname + ']');
          if (this.port) {
            host += ':' + this.port;
          }
        }

        if (this.query &&
          util.isObject(this.query) &&
          Object.keys(this.query).length) {
          query = querystring.stringify(this.query);
        }

        var search = this.search || (query && ('?' + query)) || '';

        if (protocol && protocol.substr(-1) !== ':') protocol += ':';

        // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.
        // unless they had them to begin with.
        if (this.slashes ||
          (!protocol || slashedProtocol[protocol]) && host !== false) {
          host = '//' + (host || '');
          if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;
        } else if (!host) {
          host = '';
        }

        if (hash && hash.charAt(0) !== '#') hash = '#' + hash;
        if (search && search.charAt(0) !== '?') search = '?' + search;

        pathname = pathname.replace(/[?#]/g, function (match) {
          return encodeURIComponent(match);
        });
        search = search.replace('#', '%23');

        return protocol + host + pathname + search + hash;
      };

      function urlResolve(source, relative) {
        return urlParse(source, false, true).resolve(relative);
      }

      Url.prototype.resolve = function (relative) {
        return this.resolveObject(urlParse(relative, false, true)).format();
      };

      function urlResolveObject(source, relative) {
        if (!source) return relative;
        return urlParse(source, false, true).resolveObject(relative);
      }

      Url.prototype.resolveObject = function (relative) {
        if (util.isString(relative)) {
          var rel = new Url();
          rel.parse(relative, false, true);
          relative = rel;
        }

        var result = new Url();
        var tkeys = Object.keys(this);
        for (var tk = 0; tk < tkeys.length; tk++) {
          var tkey = tkeys[tk];
          result[tkey] = this[tkey];
        }

        // hash is always overridden, no matter what.
        // even href="" will remove it.
        result.hash = relative.hash;

        // if the relative url is empty, then there's nothing left to do here.
        if (relative.href === '') {
          result.href = result.format();
          return result;
        }

        // hrefs like //foo/bar always cut to the protocol.
        if (relative.slashes && !relative.protocol) {
          // take everything except the protocol from relative
          var rkeys = Object.keys(relative);
          for (var rk = 0; rk < rkeys.length; rk++) {
            var rkey = rkeys[rk];
            if (rkey !== 'protocol')
              result[rkey] = relative[rkey];
          }

          //urlParse appends trailing / to urls like http://www.example.com
          if (slashedProtocol[result.protocol] &&
            result.hostname && !result.pathname) {
            result.path = result.pathname = '/';
          }

          result.href = result.format();
          return result;
        }

        if (relative.protocol && relative.protocol !== result.protocol) {
          // if it's a known url protocol, then changing
          // the protocol does weird things
          // first, if it's not file:, then we MUST have a host,
          // and if there was a path
          // to begin with, then we MUST have a path.
          // if it is file:, then the host is dropped,
          // because that's known to be hostless.
          // anything else is assumed to be absolute.
          if (!slashedProtocol[relative.protocol]) {
            var keys = Object.keys(relative);
            for (var v = 0; v < keys.length; v++) {
              var k = keys[v];
              result[k] = relative[k];
            }
            result.href = result.format();
            return result;
          }

          result.protocol = relative.protocol;
          if (!relative.host && !hostlessProtocol[relative.protocol]) {
            var relPath = (relative.pathname || '').split('/');
            while (relPath.length && !(relative.host = relPath.shift()));
            if (!relative.host) relative.host = '';
            if (!relative.hostname) relative.hostname = '';
            if (relPath[0] !== '') relPath.unshift('');
            if (relPath.length < 2) relPath.unshift('');
            result.pathname = relPath.join('/');
          } else {
            result.pathname = relative.pathname;
          }
          result.search = relative.search;
          result.query = relative.query;
          result.host = relative.host || '';
          result.auth = relative.auth;
          result.hostname = relative.hostname || relative.host;
          result.port = relative.port;
          // to support http.request
          if (result.pathname || result.search) {
            var p = result.pathname || '';
            var s = result.search || '';
            result.path = p + s;
          }
          result.slashes = result.slashes || relative.slashes;
          result.href = result.format();
          return result;
        }

        var isSourceAbs = (result.pathname && result.pathname.charAt(0) === '/'),
          isRelAbs = (
            relative.host ||
            relative.pathname && relative.pathname.charAt(0) === '/'
          ),
          mustEndAbs = (isRelAbs || isSourceAbs ||
            (result.host && relative.pathname)),
          removeAllDots = mustEndAbs,
          srcPath = result.pathname && result.pathname.split('/') || [],
          relPath = relative.pathname && relative.pathname.split('/') || [],
          psychotic = result.protocol && !slashedProtocol[result.protocol];

        // if the url is a non-slashed url, then relative
        // links like ../.. should be able
        // to crawl up to the hostname, as well.  This is strange.
        // result.protocol has already been set by now.
        // Later on, put the first path part into the host field.
        if (psychotic) {
          result.hostname = '';
          result.port = null;
          if (result.host) {
            if (srcPath[0] === '') srcPath[0] = result.host;
            else srcPath.unshift(result.host);
          }
          result.host = '';
          if (relative.protocol) {
            relative.hostname = null;
            relative.port = null;
            if (relative.host) {
              if (relPath[0] === '') relPath[0] = relative.host;
              else relPath.unshift(relative.host);
            }
            relative.host = null;
          }
          mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');
        }

        if (isRelAbs) {
          // it's absolute.
          result.host = (relative.host || relative.host === '') ?
            relative.host : result.host;
          result.hostname = (relative.hostname || relative.hostname === '') ?
            relative.hostname : result.hostname;
          result.search = relative.search;
          result.query = relative.query;
          srcPath = relPath;
          // fall through to the dot-handling below.
        } else if (relPath.length) {
          // it's relative
          // throw away the existing file, and take the new path instead.
          if (!srcPath) srcPath = [];
          srcPath.pop();
          srcPath = srcPath.concat(relPath);
          result.search = relative.search;
          result.query = relative.query;
        } else if (!util.isNullOrUndefined(relative.search)) {
          // just pull out the search.
          // like href='?foo'.
          // Put this after the other two cases because it simplifies the booleans
          if (psychotic) {
            result.hostname = result.host = srcPath.shift();
            //occationaly the auth can get stuck only in host
            //this especially happens in cases like
            //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
            var authInHost = result.host && result.host.indexOf('@') > 0 ?
              result.host.split('@') : false;
            if (authInHost) {
              result.auth = authInHost.shift();
              result.host = result.hostname = authInHost.shift();
            }
          }
          result.search = relative.search;
          result.query = relative.query;
          //to support http.request
          if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
            result.path = (result.pathname ? result.pathname : '') +
              (result.search ? result.search : '');
          }
          result.href = result.format();
          return result;
        }

        if (!srcPath.length) {
          // no path at all.  easy.
          // we've already handled the other stuff above.
          result.pathname = null;
          //to support http.request
          if (result.search) {
            result.path = '/' + result.search;
          } else {
            result.path = null;
          }
          result.href = result.format();
          return result;
        }

        // if a url ENDs in . or .., then it must get a trailing slash.
        // however, if it ends in anything else non-slashy,
        // then it must NOT get a trailing slash.
        var last = srcPath.slice(-1)[0];
        var hasTrailingSlash = (
          (result.host || relative.host || srcPath.length > 1) &&
          (last === '.' || last === '..') || last === '');

        // strip single dots, resolve double dots to parent dir
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = srcPath.length; i >= 0; i--) {
          last = srcPath[i];
          if (last === '.') {
            srcPath.splice(i, 1);
          } else if (last === '..') {
            srcPath.splice(i, 1);
            up++;
          } else if (up) {
            srcPath.splice(i, 1);
            up--;
          }
        }

        // if the path is allowed to go above the root, restore leading ..s
        if (!mustEndAbs && !removeAllDots) {
          for (; up--; up) {
            srcPath.unshift('..');
          }
        }

        if (mustEndAbs && srcPath[0] !== '' &&
          (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {
          srcPath.unshift('');
        }

        if (hasTrailingSlash && (srcPath.join('/').substr(-1) !== '/')) {
          srcPath.push('');
        }

        var isAbsolute = srcPath[0] === '' ||
          (srcPath[0] && srcPath[0].charAt(0) === '/');

        // put the host back
        if (psychotic) {
          result.hostname = result.host = isAbsolute ? '' :
            srcPath.length ? srcPath.shift() : '';
          //occationaly the auth can get stuck only in host
          //this especially happens in cases like
          //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
          var authInHost = result.host && result.host.indexOf('@') > 0 ?
            result.host.split('@') : false;
          if (authInHost) {
            result.auth = authInHost.shift();
            result.host = result.hostname = authInHost.shift();
          }
        }

        mustEndAbs = mustEndAbs || (result.host && srcPath.length);

        if (mustEndAbs && !isAbsolute) {
          srcPath.unshift('');
        }

        if (!srcPath.length) {
          result.pathname = null;
          result.path = null;
        } else {
          result.pathname = srcPath.join('/');
        }

        //to support request.http
        if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
          result.path = (result.pathname ? result.pathname : '') +
            (result.search ? result.search : '');
        }
        result.auth = relative.auth || result.auth;
        result.slashes = result.slashes || relative.slashes;
        result.href = result.format();
        return result;
      };

      Url.prototype.parseHost = function () {
        var host = this.host;
        var port = portPattern.exec(host);
        if (port) {
          port = port[0];
          if (port !== ':') {
            this.port = port.substr(1);
          }
          host = host.substr(0, host.length - port.length);
        }
        if (host) this.hostname = host;
      };


      /***/
    }),

/***/ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/url/util.js":
/*!******************************************!*\
  !*** (webpack)/node_modules/url/util.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

      "use strict";


      module.exports = {
        isString: function (arg) {
          return typeof (arg) === 'string';
        },
        isObject: function (arg) {
          return typeof (arg) === 'object' && arg !== null;
        },
        isNull: function (arg) {
          return arg === null;
        },
        isNullOrUndefined: function (arg) {
          return arg == null;
        }
      };


      /***/
    }),

/***/ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/util-deprecate/browser.js":
/*!********************************************************!*\
  !*** (webpack)/node_modules/util-deprecate/browser.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function (global) {
        /**
         * Module exports.
         */

        module.exports = deprecate;

        /**
         * Mark that a method should not be used.
         * Returns a modified function which warns once by default.
         *
         * If `localStorage.noDeprecation = true` is set, then it is a no-op.
         *
         * If `localStorage.throwDeprecation = true` is set, then deprecated functions
         * will throw an Error when invoked.
         *
         * If `localStorage.traceDeprecation = true` is set, then deprecated functions
         * will invoke `console.trace()` instead of `console.error()`.
         *
         * @param {Function} fn - the function to deprecate
         * @param {String} msg - the string to print to the console when `fn` is invoked
         * @returns {Function} a new "deprecated" version of `fn`
         * @api public
         */

        function deprecate(fn, msg) {
          if (config('noDeprecation')) {
            return fn;
          }

          var warned = false;
          function deprecated() {
            if (!warned) {
              if (config('throwDeprecation')) {
                throw new Error(msg);
              } else if (config('traceDeprecation')) {
                console.trace(msg);
              } else {
                console.warn(msg);
              }
              warned = true;
            }
            return fn.apply(this, arguments);
          }

          return deprecated;
        }

        /**
         * Checks `localStorage` for boolean values for the given `name`.
         *
         * @param {String} name
         * @returns {Boolean}
         * @api private
         */

        function config(name) {
          // accessing global.localStorage can trigger a DOMException in sandboxed iframes
          try {
            if (!global.localStorage) return false;
          } catch (_) {
            return false;
          }
          var val = global.localStorage[name];
          if (null == val) return false;
          return String(val).toLowerCase() === 'true';
        }

        /* WEBPACK VAR INJECTION */
      }.call(this, __webpack_require__(/*! ./../../buildin/global.js */ "../../../../../AppData/Roaming/npm/node_modules/webpack/buildin/global.js")))

      /***/
    }),

/***/ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/vm-browserify/index.js":
/*!*****************************************************!*\
  !*** (webpack)/node_modules/vm-browserify/index.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

      var indexOf = __webpack_require__(/*! indexof */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/indexof/index.js");

      var Object_keys = function (obj) {
        if (Object.keys) return Object.keys(obj)
        else {
          var res = [];
          for (var key in obj) res.push(key)
          return res;
        }
      };

      var forEach = function (xs, fn) {
        if (xs.forEach) return xs.forEach(fn)
        else for (var i = 0; i < xs.length; i++) {
          fn(xs[i], i, xs);
        }
      };

      var defineProp = (function () {
        try {
          Object.defineProperty({}, '_', {});
          return function (obj, name, value) {
            Object.defineProperty(obj, name, {
              writable: true,
              enumerable: false,
              configurable: true,
              value: value
            })
          };
        } catch (e) {
          return function (obj, name, value) {
            obj[name] = value;
          };
        }
      } ());

      var globals = ['Array', 'Boolean', 'Date', 'Error', 'EvalError', 'Function',
        'Infinity', 'JSON', 'Math', 'NaN', 'Number', 'Object', 'RangeError',
        'ReferenceError', 'RegExp', 'String', 'SyntaxError', 'TypeError', 'URIError',
        'decodeURI', 'decodeURIComponent', 'encodeURI', 'encodeURIComponent', 'escape',
        'eval', 'isFinite', 'isNaN', 'parseFloat', 'parseInt', 'undefined', 'unescape'];

      function Context() { }
      Context.prototype = {};

      var Script = exports.Script = function NodeScript(code) {
        if (!(this instanceof Script)) return new Script(code);
        this.code = code;
      };

      Script.prototype.runInContext = function (context) {
        if (!(context instanceof Context)) {
          throw new TypeError("needs a 'context' argument.");
        }

        var iframe = document.createElement('iframe');
        if (!iframe.style) iframe.style = {};
        iframe.style.display = 'none';

        document.body.appendChild(iframe);

        var win = iframe.contentWindow;
        var wEval = win.eval, wExecScript = win.execScript;

        if (!wEval && wExecScript) {
          // win.eval() magically appears when this is called in IE:
          wExecScript.call(win, 'null');
          wEval = win.eval;
        }

        forEach(Object_keys(context), function (key) {
          win[key] = context[key];
        });
        forEach(globals, function (key) {
          if (context[key]) {
            win[key] = context[key];
          }
        });

        var winKeys = Object_keys(win);

        var res = wEval.call(win, this.code);

        forEach(Object_keys(win), function (key) {
          // Avoid copying circular objects like `top` and `window` by only
          // updating existing context properties or new properties in the `win`
          // that was only introduced after the eval.
          if (key in context || indexOf(winKeys, key) === -1) {
            context[key] = win[key];
          }
        });

        forEach(globals, function (key) {
          if (!(key in context)) {
            defineProp(context, key, win[key]);
          }
        });

        document.body.removeChild(iframe);

        return res;
      };

      Script.prototype.runInThisContext = function () {
        return eval(this.code); // maybe...
      };

      Script.prototype.runInNewContext = function (context) {
        var ctx = Script.createContext(context);
        var res = this.runInContext(ctx);

        forEach(Object_keys(ctx), function (key) {
          context[key] = ctx[key];
        });

        return res;
      };

      forEach(Object_keys(Script.prototype), function (name) {
        exports[name] = Script[name] = function (code) {
          var s = Script(code);
          return s[name].apply(s, [].slice.call(arguments, 1));
        };
      });

      exports.createScript = function (code) {
        return exports.Script(code);
      };

      exports.createContext = Script.createContext = function (context) {
        var copy = new Context();
        if (typeof context === 'object') {
          forEach(Object_keys(context), function (key) {
            copy[key] = context[key];
          });
        }
        return copy;
      };


      /***/
    }),

/***/ "../axios/index.js":
/*!*************************!*\
  !*** ../axios/index.js ***!
  \*************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

      module.exports = __webpack_require__(/*! ./lib/axios */ "../axios/lib/axios.js");

      /***/
    }),

/***/ "../axios/lib/adapters/xhr.js":
/*!************************************!*\
  !*** ../axios/lib/adapters/xhr.js ***!
  \************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

      "use strict";


      var utils = __webpack_require__(/*! ./../utils */ "../axios/lib/utils.js");
      var settle = __webpack_require__(/*! ./../core/settle */ "../axios/lib/core/settle.js");
      var buildURL = __webpack_require__(/*! ./../helpers/buildURL */ "../axios/lib/helpers/buildURL.js");
      var parseHeaders = __webpack_require__(/*! ./../helpers/parseHeaders */ "../axios/lib/helpers/parseHeaders.js");
      var isURLSameOrigin = __webpack_require__(/*! ./../helpers/isURLSameOrigin */ "../axios/lib/helpers/isURLSameOrigin.js");
      var createError = __webpack_require__(/*! ../core/createError */ "../axios/lib/core/createError.js");
      var btoa = (typeof window !== 'undefined' && window.btoa && window.btoa.bind(window)) || __webpack_require__(/*! ./../helpers/btoa */ "../axios/lib/helpers/btoa.js");

      module.exports = function xhrAdapter(config) {
        return new Promise(function dispatchXhrRequest(resolve, reject) {
          var requestData = config.data;
          var requestHeaders = config.headers;

          if (utils.isFormData(requestData)) {
            delete requestHeaders['Content-Type']; // Let the browser set it
          }

          var request = new XMLHttpRequest();
          var loadEvent = 'onreadystatechange';
          var xDomain = false;

          // For IE 8/9 CORS support
          // Only supports POST and GET calls and doesn't returns the response headers.
          // DON'T do this for testing b/c XMLHttpRequest is mocked, not XDomainRequest.
          if ("development" !== 'test' &&
            typeof window !== 'undefined' &&
            window.XDomainRequest && !('withCredentials' in request) &&
            !isURLSameOrigin(config.url)) {
            request = new window.XDomainRequest();
            loadEvent = 'onload';
            xDomain = true;
            request.onprogress = function handleProgress() { };
            request.ontimeout = function handleTimeout() { };
          }

          // HTTP basic authentication
          if (config.auth) {
            var username = config.auth.username || '';
            var password = config.auth.password || '';
            requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);
          }

          request.open(config.method.toUpperCase(), buildURL(config.url, config.params, config.paramsSerializer), true);

          // Set the request timeout in MS
          request.timeout = config.timeout;

          // Listen for ready state
          request[loadEvent] = function handleLoad() {
            if (!request || (request.readyState !== 4 && !xDomain)) {
              return;
            }

            // The request errored out and we didn't get a response, this will be
            // handled by onerror instead
            // With one exception: request that using file: protocol, most browsers
            // will return status as 0 even though it's a successful request
            if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {
              return;
            }

            // Prepare the response
            var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;
            var responseData = !config.responseType || config.responseType === 'text' ? request.responseText : request.response;
            var response = {
              data: responseData,
              // IE sends 1223 instead of 204 (https://github.com/axios/axios/issues/201)
              status: request.status === 1223 ? 204 : request.status,
              statusText: request.status === 1223 ? 'No Content' : request.statusText,
              headers: responseHeaders,
              config: config,
              request: request
            };

            settle(resolve, reject, response);

            // Clean up request
            request = null;
          };

          // Handle low level network errors
          request.onerror = function handleError() {
            // Real errors are hidden from us by the browser
            // onerror should only fire if it's a network error
            reject(createError('Network Error', config, null, request));

            // Clean up request
            request = null;
          };

          // Handle timeout
          request.ontimeout = function handleTimeout() {
            reject(createError('timeout of ' + config.timeout + 'ms exceeded', config, 'ECONNABORTED',
              request));

            // Clean up request
            request = null;
          };

          // Add xsrf header
          // This is only done if running in a standard browser environment.
          // Specifically not if we're in a web worker, or react-native.
          if (utils.isStandardBrowserEnv()) {
            var cookies = __webpack_require__(/*! ./../helpers/cookies */ "../axios/lib/helpers/cookies.js");

            // Add xsrf header
            var xsrfValue = (config.withCredentials || isURLSameOrigin(config.url)) && config.xsrfCookieName ?
              cookies.read(config.xsrfCookieName) :
              undefined;

            if (xsrfValue) {
              requestHeaders[config.xsrfHeaderName] = xsrfValue;
            }
          }

          // Add headers to the request
          if ('setRequestHeader' in request) {
            utils.forEach(requestHeaders, function setRequestHeader(val, key) {
              if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {
                // Remove Content-Type if data is undefined
                delete requestHeaders[key];
              } else {
                // Otherwise add header to the request
                request.setRequestHeader(key, val);
              }
            });
          }

          // Add withCredentials to request if needed
          if (config.withCredentials) {
            request.withCredentials = true;
          }

          // Add responseType to request if needed
          if (config.responseType) {
            try {
              request.responseType = config.responseType;
            } catch (e) {
              // Expected DOMException thrown by browsers not compatible XMLHttpRequest Level 2.
              // But, this can be suppressed for 'json' type as it can be parsed by default 'transformResponse' function.
              if (config.responseType !== 'json') {
                throw e;
              }
            }
          }

          // Handle progress if needed
          if (typeof config.onDownloadProgress === 'function') {
            request.addEventListener('progress', config.onDownloadProgress);
          }

          // Not all browsers support upload events
          if (typeof config.onUploadProgress === 'function' && request.upload) {
            request.upload.addEventListener('progress', config.onUploadProgress);
          }

          if (config.cancelToken) {
            // Handle cancellation
            config.cancelToken.promise.then(function onCanceled(cancel) {
              if (!request) {
                return;
              }

              request.abort();
              reject(cancel);
              // Clean up request
              request = null;
            });
          }

          if (requestData === undefined) {
            requestData = null;
          }

          // Send the request
          request.send(requestData);
        });
      };


      /***/
    }),

/***/ "../axios/lib/axios.js":
/*!*****************************!*\
  !*** ../axios/lib/axios.js ***!
  \*****************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

      "use strict";


      var utils = __webpack_require__(/*! ./utils */ "../axios/lib/utils.js");
      var bind = __webpack_require__(/*! ./helpers/bind */ "../axios/lib/helpers/bind.js");
      var Axios = __webpack_require__(/*! ./core/Axios */ "../axios/lib/core/Axios.js");
      var defaults = __webpack_require__(/*! ./defaults */ "../axios/lib/defaults.js");

      /**
       * Create an instance of Axios
       *
       * @param {Object} defaultConfig The default config for the instance
       * @return {Axios} A new instance of Axios
       */
      function createInstance(defaultConfig) {
        var context = new Axios(defaultConfig);
        var instance = bind(Axios.prototype.request, context);

        // Copy axios.prototype to instance
        utils.extend(instance, Axios.prototype, context);

        // Copy context to instance
        utils.extend(instance, context);

        return instance;
      }

      // Create the default instance to be exported
      var axios = createInstance(defaults);

      // Expose Axios class to allow class inheritance
      axios.Axios = Axios;

      // Factory for creating new instances
      axios.create = function create(instanceConfig) {
        return createInstance(utils.merge(defaults, instanceConfig));
      };

      // Expose Cancel & CancelToken
      axios.Cancel = __webpack_require__(/*! ./cancel/Cancel */ "../axios/lib/cancel/Cancel.js");
      axios.CancelToken = __webpack_require__(/*! ./cancel/CancelToken */ "../axios/lib/cancel/CancelToken.js");
      axios.isCancel = __webpack_require__(/*! ./cancel/isCancel */ "../axios/lib/cancel/isCancel.js");

      // Expose all/spread
      axios.all = function all(promises) {
        return Promise.all(promises);
      };
      axios.spread = __webpack_require__(/*! ./helpers/spread */ "../axios/lib/helpers/spread.js");

      module.exports = axios;

      // Allow use of default import syntax in TypeScript
      module.exports.default = axios;


      /***/
    }),

/***/ "../axios/lib/cancel/Cancel.js":
/*!*************************************!*\
  !*** ../axios/lib/cancel/Cancel.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

      "use strict";


      /**
       * A `Cancel` is an object that is thrown when an operation is canceled.
       *
       * @class
       * @param {string=} message The message.
       */
      function Cancel(message) {
        this.message = message;
      }

      Cancel.prototype.toString = function toString() {
        return 'Cancel' + (this.message ? ': ' + this.message : '');
      };

      Cancel.prototype.__CANCEL__ = true;

      module.exports = Cancel;


      /***/
    }),

/***/ "../axios/lib/cancel/CancelToken.js":
/*!******************************************!*\
  !*** ../axios/lib/cancel/CancelToken.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

      "use strict";


      var Cancel = __webpack_require__(/*! ./Cancel */ "../axios/lib/cancel/Cancel.js");

      /**
       * A `CancelToken` is an object that can be used to request cancellation of an operation.
       *
       * @class
       * @param {Function} executor The executor function.
       */
      function CancelToken(executor) {
        if (typeof executor !== 'function') {
          throw new TypeError('executor must be a function.');
        }

        var resolvePromise;
        this.promise = new Promise(function promiseExecutor(resolve) {
          resolvePromise = resolve;
        });

        var token = this;
        executor(function cancel(message) {
          if (token.reason) {
            // Cancellation has already been requested
            return;
          }

          token.reason = new Cancel(message);
          resolvePromise(token.reason);
        });
      }

      /**
       * Throws a `Cancel` if cancellation has been requested.
       */
      CancelToken.prototype.throwIfRequested = function throwIfRequested() {
        if (this.reason) {
          throw this.reason;
        }
      };

      /**
       * Returns an object that contains a new `CancelToken` and a function that, when called,
       * cancels the `CancelToken`.
       */
      CancelToken.source = function source() {
        var cancel;
        var token = new CancelToken(function executor(c) {
          cancel = c;
        });
        return {
          token: token,
          cancel: cancel
        };
      };

      module.exports = CancelToken;


      /***/
    }),

/***/ "../axios/lib/cancel/isCancel.js":
/*!***************************************!*\
  !*** ../axios/lib/cancel/isCancel.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

      "use strict";


      module.exports = function isCancel(value) {
        return !!(value && value.__CANCEL__);
      };


      /***/
    }),

/***/ "../axios/lib/core/Axios.js":
/*!**********************************!*\
  !*** ../axios/lib/core/Axios.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

      "use strict";


      var defaults = __webpack_require__(/*! ./../defaults */ "../axios/lib/defaults.js");
      var utils = __webpack_require__(/*! ./../utils */ "../axios/lib/utils.js");
      var InterceptorManager = __webpack_require__(/*! ./InterceptorManager */ "../axios/lib/core/InterceptorManager.js");
      var dispatchRequest = __webpack_require__(/*! ./dispatchRequest */ "../axios/lib/core/dispatchRequest.js");

      /**
       * Create a new instance of Axios
       *
       * @param {Object} instanceConfig The default config for the instance
       */
      function Axios(instanceConfig) {
        this.defaults = instanceConfig;
        this.interceptors = {
          request: new InterceptorManager(),
          response: new InterceptorManager()
        };
      }

      /**
       * Dispatch a request
       *
       * @param {Object} config The config specific for this request (merged with this.defaults)
       */
      Axios.prototype.request = function request(config) {
        /*eslint no-param-reassign:0*/
        // Allow for axios('example/url'[, config]) a la fetch API
        if (typeof config === 'string') {
          config = utils.merge({
            url: arguments[0]
          }, arguments[1]);
        }

        config = utils.merge(defaults, { method: 'get' }, this.defaults, config);
        config.method = config.method.toLowerCase();

        // Hook up interceptors middleware
        var chain = [dispatchRequest, undefined];
        var promise = Promise.resolve(config);

        this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
          chain.unshift(interceptor.fulfilled, interceptor.rejected);
        });

        this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
          chain.push(interceptor.fulfilled, interceptor.rejected);
        });

        while (chain.length) {
          promise = promise.then(chain.shift(), chain.shift());
        }

        return promise;
      };

      // Provide aliases for supported request methods
      utils.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {
        /*eslint func-names:0*/
        Axios.prototype[method] = function (url, config) {
          return this.request(utils.merge(config || {}, {
            method: method,
            url: url
          }));
        };
      });

      utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
        /*eslint func-names:0*/
        Axios.prototype[method] = function (url, data, config) {
          return this.request(utils.merge(config || {}, {
            method: method,
            url: url,
            data: data
          }));
        };
      });

      module.exports = Axios;


      /***/
    }),

/***/ "../axios/lib/core/InterceptorManager.js":
/*!***********************************************!*\
  !*** ../axios/lib/core/InterceptorManager.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

      "use strict";


      var utils = __webpack_require__(/*! ./../utils */ "../axios/lib/utils.js");

      function InterceptorManager() {
        this.handlers = [];
      }

      /**
       * Add a new interceptor to the stack
       *
       * @param {Function} fulfilled The function to handle `then` for a `Promise`
       * @param {Function} rejected The function to handle `reject` for a `Promise`
       *
       * @return {Number} An ID used to remove interceptor later
       */
      InterceptorManager.prototype.use = function use(fulfilled, rejected) {
        this.handlers.push({
          fulfilled: fulfilled,
          rejected: rejected
        });
        return this.handlers.length - 1;
      };

      /**
       * Remove an interceptor from the stack
       *
       * @param {Number} id The ID that was returned by `use`
       */
      InterceptorManager.prototype.eject = function eject(id) {
        if (this.handlers[id]) {
          this.handlers[id] = null;
        }
      };

      /**
       * Iterate over all the registered interceptors
       *
       * This method is particularly useful for skipping over any
       * interceptors that may have become `null` calling `eject`.
       *
       * @param {Function} fn The function to call for each interceptor
       */
      InterceptorManager.prototype.forEach = function forEach(fn) {
        utils.forEach(this.handlers, function forEachHandler(h) {
          if (h !== null) {
            fn(h);
          }
        });
      };

      module.exports = InterceptorManager;


      /***/
    }),

/***/ "../axios/lib/core/createError.js":
/*!****************************************!*\
  !*** ../axios/lib/core/createError.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

      "use strict";


      var enhanceError = __webpack_require__(/*! ./enhanceError */ "../axios/lib/core/enhanceError.js");

      /**
       * Create an Error with the specified message, config, error code, request and response.
       *
       * @param {string} message The error message.
       * @param {Object} config The config.
       * @param {string} [code] The error code (for example, 'ECONNABORTED').
       * @param {Object} [request] The request.
       * @param {Object} [response] The response.
       * @returns {Error} The created error.
       */
      module.exports = function createError(message, config, code, request, response) {
        var error = new Error(message);
        return enhanceError(error, config, code, request, response);
      };


      /***/
    }),

/***/ "../axios/lib/core/dispatchRequest.js":
/*!********************************************!*\
  !*** ../axios/lib/core/dispatchRequest.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

      "use strict";


      var utils = __webpack_require__(/*! ./../utils */ "../axios/lib/utils.js");
      var transformData = __webpack_require__(/*! ./transformData */ "../axios/lib/core/transformData.js");
      var isCancel = __webpack_require__(/*! ../cancel/isCancel */ "../axios/lib/cancel/isCancel.js");
      var defaults = __webpack_require__(/*! ../defaults */ "../axios/lib/defaults.js");
      var isAbsoluteURL = __webpack_require__(/*! ./../helpers/isAbsoluteURL */ "../axios/lib/helpers/isAbsoluteURL.js");
      var combineURLs = __webpack_require__(/*! ./../helpers/combineURLs */ "../axios/lib/helpers/combineURLs.js");

      /**
       * Throws a `Cancel` if cancellation has been requested.
       */
      function throwIfCancellationRequested(config) {
        if (config.cancelToken) {
          config.cancelToken.throwIfRequested();
        }
      }

      /**
       * Dispatch a request to the server using the configured adapter.
       *
       * @param {object} config The config that is to be used for the request
       * @returns {Promise} The Promise to be fulfilled
       */
      module.exports = function dispatchRequest(config) {
        throwIfCancellationRequested(config);

        // Support baseURL config
        if (config.baseURL && !isAbsoluteURL(config.url)) {
          config.url = combineURLs(config.baseURL, config.url);
        }

        // Ensure headers exist
        config.headers = config.headers || {};

        // Transform request data
        config.data = transformData(
          config.data,
          config.headers,
          config.transformRequest
        );

        // Flatten headers
        config.headers = utils.merge(
          config.headers.common || {},
          config.headers[config.method] || {},
          config.headers || {}
        );

        utils.forEach(
          ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],
          function cleanHeaderConfig(method) {
            delete config.headers[method];
          }
        );

        var adapter = config.adapter || defaults.adapter;

        return adapter(config).then(function onAdapterResolution(response) {
          throwIfCancellationRequested(config);

          // Transform response data
          response.data = transformData(
            response.data,
            response.headers,
            config.transformResponse
          );

          return response;
        }, function onAdapterRejection(reason) {
          if (!isCancel(reason)) {
            throwIfCancellationRequested(config);

            // Transform response data
            if (reason && reason.response) {
              reason.response.data = transformData(
                reason.response.data,
                reason.response.headers,
                config.transformResponse
              );
            }
          }

          return Promise.reject(reason);
        });
      };


      /***/
    }),

/***/ "../axios/lib/core/enhanceError.js":
/*!*****************************************!*\
  !*** ../axios/lib/core/enhanceError.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

      "use strict";


      /**
       * Update an Error with the specified config, error code, and response.
       *
       * @param {Error} error The error to update.
       * @param {Object} config The config.
       * @param {string} [code] The error code (for example, 'ECONNABORTED').
       * @param {Object} [request] The request.
       * @param {Object} [response] The response.
       * @returns {Error} The error.
       */
      module.exports = function enhanceError(error, config, code, request, response) {
        error.config = config;
        if (code) {
          error.code = code;
        }
        error.request = request;
        error.response = response;
        return error;
      };


      /***/
    }),

/***/ "../axios/lib/core/settle.js":
/*!***********************************!*\
  !*** ../axios/lib/core/settle.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

      "use strict";


      var createError = __webpack_require__(/*! ./createError */ "../axios/lib/core/createError.js");

      /**
       * Resolve or reject a Promise based on response status.
       *
       * @param {Function} resolve A function that resolves the promise.
       * @param {Function} reject A function that rejects the promise.
       * @param {object} response The response.
       */
      module.exports = function settle(resolve, reject, response) {
        var validateStatus = response.config.validateStatus;
        // Note: status is not exposed by XDomainRequest
        if (!response.status || !validateStatus || validateStatus(response.status)) {
          resolve(response);
        } else {
          reject(createError(
            'Request failed with status code ' + response.status,
            response.config,
            null,
            response.request,
            response
          ));
        }
      };


      /***/
    }),

/***/ "../axios/lib/core/transformData.js":
/*!******************************************!*\
  !*** ../axios/lib/core/transformData.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

      "use strict";


      var utils = __webpack_require__(/*! ./../utils */ "../axios/lib/utils.js");

      /**
       * Transform the data for a request or a response
       *
       * @param {Object|String} data The data to be transformed
       * @param {Array} headers The headers for the request or response
       * @param {Array|Function} fns A single function or Array of functions
       * @returns {*} The resulting transformed data
       */
      module.exports = function transformData(data, headers, fns) {
        /*eslint no-param-reassign:0*/
        utils.forEach(fns, function transform(fn) {
          data = fn(data, headers);
        });

        return data;
      };


      /***/
    }),

/***/ "../axios/lib/defaults.js":
/*!********************************!*\
  !*** ../axios/lib/defaults.js ***!
  \********************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

      "use strict";
/* WEBPACK VAR INJECTION */(function (process) {

        var utils = __webpack_require__(/*! ./utils */ "../axios/lib/utils.js");
        var normalizeHeaderName = __webpack_require__(/*! ./helpers/normalizeHeaderName */ "../axios/lib/helpers/normalizeHeaderName.js");

        var DEFAULT_CONTENT_TYPE = {
          'Content-Type': 'application/x-www-form-urlencoded'
        };

        function setContentTypeIfUnset(headers, value) {
          if (!utils.isUndefined(headers) && utils.isUndefined(headers['Content-Type'])) {
            headers['Content-Type'] = value;
          }
        }

        function getDefaultAdapter() {
          var adapter;
          if (typeof XMLHttpRequest !== 'undefined') {
            // For browsers use XHR adapter
            adapter = __webpack_require__(/*! ./adapters/xhr */ "../axios/lib/adapters/xhr.js");
          } else if (typeof process !== 'undefined') {
            // For node use HTTP adapter
            adapter = __webpack_require__(/*! ./adapters/http */ "../axios/lib/adapters/xhr.js");
          }
          return adapter;
        }

        var defaults = {
          adapter: getDefaultAdapter(),

          transformRequest: [function transformRequest(data, headers) {
            normalizeHeaderName(headers, 'Content-Type');
            if (utils.isFormData(data) ||
              utils.isArrayBuffer(data) ||
              utils.isBuffer(data) ||
              utils.isStream(data) ||
              utils.isFile(data) ||
              utils.isBlob(data)
            ) {
              return data;
            }
            if (utils.isArrayBufferView(data)) {
              return data.buffer;
            }
            if (utils.isURLSearchParams(data)) {
              setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');
              return data.toString();
            }
            if (utils.isObject(data)) {
              setContentTypeIfUnset(headers, 'application/json;charset=utf-8');
              return JSON.stringify(data);
            }
            return data;
          }],

          transformResponse: [function transformResponse(data) {
            /*eslint no-param-reassign:0*/
            if (typeof data === 'string') {
              try {
                data = JSON.parse(data);
              } catch (e) { /* Ignore */ }
            }
            return data;
          }],

          /**
           * A timeout in milliseconds to abort a request. If set to 0 (default) a
           * timeout is not created.
           */
          timeout: 0,

          xsrfCookieName: 'XSRF-TOKEN',
          xsrfHeaderName: 'X-XSRF-TOKEN',

          maxContentLength: -1,

          validateStatus: function validateStatus(status) {
            return status >= 200 && status < 300;
          }
        };

        defaults.headers = {
          common: {
            'Accept': 'application/json, text/plain, */*'
          }
        };

        utils.forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) {
          defaults.headers[method] = {};
        });

        utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
          defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);
        });

        module.exports = defaults;

        /* WEBPACK VAR INJECTION */
      }.call(this, __webpack_require__(/*! ./../../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/process/browser.js */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/process/browser.js")))

      /***/
    }),

/***/ "../axios/lib/helpers/bind.js":
/*!************************************!*\
  !*** ../axios/lib/helpers/bind.js ***!
  \************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

      "use strict";


      module.exports = function bind(fn, thisArg) {
        return function wrap() {
          var args = new Array(arguments.length);
          for (var i = 0; i < args.length; i++) {
            args[i] = arguments[i];
          }
          return fn.apply(thisArg, args);
        };
      };


      /***/
    }),

/***/ "../axios/lib/helpers/btoa.js":
/*!************************************!*\
  !*** ../axios/lib/helpers/btoa.js ***!
  \************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

      "use strict";


      // btoa polyfill for IE<10 courtesy https://github.com/davidchambers/Base64.js

      var chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';

      function E() {
        this.message = 'String contains an invalid character';
      }
      E.prototype = new Error;
      E.prototype.code = 5;
      E.prototype.name = 'InvalidCharacterError';

      function btoa(input) {
        var str = String(input);
        var output = '';
        for (
          // initialize result and counter
          var block, charCode, idx = 0, map = chars;
          // if the next str index does not exist:
          //   change the mapping table to "="
          //   check if d has no fractional digits
          str.charAt(idx | 0) || (map = '=', idx % 1);
          // "8 - idx % 1 * 8" generates the sequence 2, 4, 6, 8
          output += map.charAt(63 & block >> 8 - idx % 1 * 8)
        ) {
          charCode = str.charCodeAt(idx += 3 / 4);
          if (charCode > 0xFF) {
            throw new E();
          }
          block = block << 8 | charCode;
        }
        return output;
      }

      module.exports = btoa;


      /***/
    }),

/***/ "../axios/lib/helpers/buildURL.js":
/*!****************************************!*\
  !*** ../axios/lib/helpers/buildURL.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

      "use strict";


      var utils = __webpack_require__(/*! ./../utils */ "../axios/lib/utils.js");

      function encode(val) {
        return encodeURIComponent(val).
          replace(/%40/gi, '@').
          replace(/%3A/gi, ':').
          replace(/%24/g, '$').
          replace(/%2C/gi, ',').
          replace(/%20/g, '+').
          replace(/%5B/gi, '[').
          replace(/%5D/gi, ']');
      }

      /**
       * Build a URL by appending params to the end
       *
       * @param {string} url The base of the url (e.g., http://www.google.com)
       * @param {object} [params] The params to be appended
       * @returns {string} The formatted url
       */
      module.exports = function buildURL(url, params, paramsSerializer) {
        /*eslint no-param-reassign:0*/
        if (!params) {
          return url;
        }

        var serializedParams;
        if (paramsSerializer) {
          serializedParams = paramsSerializer(params);
        } else if (utils.isURLSearchParams(params)) {
          serializedParams = params.toString();
        } else {
          var parts = [];

          utils.forEach(params, function serialize(val, key) {
            if (val === null || typeof val === 'undefined') {
              return;
            }

            if (utils.isArray(val)) {
              key = key + '[]';
            } else {
              val = [val];
            }

            utils.forEach(val, function parseValue(v) {
              if (utils.isDate(v)) {
                v = v.toISOString();
              } else if (utils.isObject(v)) {
                v = JSON.stringify(v);
              }
              parts.push(encode(key) + '=' + encode(v));
            });
          });

          serializedParams = parts.join('&');
        }

        if (serializedParams) {
          url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;
        }

        return url;
      };


      /***/
    }),

/***/ "../axios/lib/helpers/combineURLs.js":
/*!*******************************************!*\
  !*** ../axios/lib/helpers/combineURLs.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

      "use strict";


      /**
       * Creates a new URL by combining the specified URLs
       *
       * @param {string} baseURL The base URL
       * @param {string} relativeURL The relative URL
       * @returns {string} The combined URL
       */
      module.exports = function combineURLs(baseURL, relativeURL) {
        return relativeURL
          ? baseURL.replace(/\/+$/, '') + '/' + relativeURL.replace(/^\/+/, '')
          : baseURL;
      };


      /***/
    }),

/***/ "../axios/lib/helpers/cookies.js":
/*!***************************************!*\
  !*** ../axios/lib/helpers/cookies.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

      "use strict";


      var utils = __webpack_require__(/*! ./../utils */ "../axios/lib/utils.js");

      module.exports = (
        utils.isStandardBrowserEnv() ?

          // Standard browser envs support document.cookie
          (function standardBrowserEnv() {
            return {
              write: function write(name, value, expires, path, domain, secure) {
                var cookie = [];
                cookie.push(name + '=' + encodeURIComponent(value));

                if (utils.isNumber(expires)) {
                  cookie.push('expires=' + new Date(expires).toGMTString());
                }

                if (utils.isString(path)) {
                  cookie.push('path=' + path);
                }

                if (utils.isString(domain)) {
                  cookie.push('domain=' + domain);
                }

                if (secure === true) {
                  cookie.push('secure');
                }

                document.cookie = cookie.join('; ');
              },

              read: function read(name) {
                var match = document.cookie.match(new RegExp('(^|;\\s*)(' + name + ')=([^;]*)'));
                return (match ? decodeURIComponent(match[3]) : null);
              },

              remove: function remove(name) {
                this.write(name, '', Date.now() - 86400000);
              }
            };
          })() :

          // Non standard browser env (web workers, react-native) lack needed support.
          (function nonStandardBrowserEnv() {
            return {
              write: function write() { },
              read: function read() { return null; },
              remove: function remove() { }
            };
          })()
      );


      /***/
    }),

/***/ "../axios/lib/helpers/isAbsoluteURL.js":
/*!*********************************************!*\
  !*** ../axios/lib/helpers/isAbsoluteURL.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

      "use strict";


      /**
       * Determines whether the specified URL is absolute
       *
       * @param {string} url The URL to test
       * @returns {boolean} True if the specified URL is absolute, otherwise false
       */
      module.exports = function isAbsoluteURL(url) {
        // A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).
        // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed
        // by any combination of letters, digits, plus, period, or hyphen.
        return /^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(url);
      };


      /***/
    }),

/***/ "../axios/lib/helpers/isURLSameOrigin.js":
/*!***********************************************!*\
  !*** ../axios/lib/helpers/isURLSameOrigin.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

      "use strict";


      var utils = __webpack_require__(/*! ./../utils */ "../axios/lib/utils.js");

      module.exports = (
        utils.isStandardBrowserEnv() ?

          // Standard browser envs have full support of the APIs needed to test
          // whether the request URL is of the same origin as current location.
          (function standardBrowserEnv() {
            var msie = /(msie|trident)/i.test(navigator.userAgent);
            var urlParsingNode = document.createElement('a');
            var originURL;

            /**
            * Parse a URL to discover it's components
            *
            * @param {String} url The URL to be parsed
            * @returns {Object}
            */
            function resolveURL(url) {
              var href = url;

              if (msie) {
                // IE needs attribute set twice to normalize properties
                urlParsingNode.setAttribute('href', href);
                href = urlParsingNode.href;
              }

              urlParsingNode.setAttribute('href', href);

              // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
              return {
                href: urlParsingNode.href,
                protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',
                host: urlParsingNode.host,
                search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',
                hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',
                hostname: urlParsingNode.hostname,
                port: urlParsingNode.port,
                pathname: (urlParsingNode.pathname.charAt(0) === '/') ?
                  urlParsingNode.pathname :
                  '/' + urlParsingNode.pathname
              };
            }

            originURL = resolveURL(window.location.href);

            /**
            * Determine if a URL shares the same origin as the current location
            *
            * @param {String} requestURL The URL to test
            * @returns {boolean} True if URL shares the same origin, otherwise false
            */
            return function isURLSameOrigin(requestURL) {
              var parsed = (utils.isString(requestURL)) ? resolveURL(requestURL) : requestURL;
              return (parsed.protocol === originURL.protocol &&
                parsed.host === originURL.host);
            };
          })() :

          // Non standard browser envs (web workers, react-native) lack needed support.
          (function nonStandardBrowserEnv() {
            return function isURLSameOrigin() {
              return true;
            };
          })()
      );


      /***/
    }),

/***/ "../axios/lib/helpers/normalizeHeaderName.js":
/*!***************************************************!*\
  !*** ../axios/lib/helpers/normalizeHeaderName.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

      "use strict";


      var utils = __webpack_require__(/*! ../utils */ "../axios/lib/utils.js");

      module.exports = function normalizeHeaderName(headers, normalizedName) {
        utils.forEach(headers, function processHeader(value, name) {
          if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {
            headers[normalizedName] = value;
            delete headers[name];
          }
        });
      };


      /***/
    }),

/***/ "../axios/lib/helpers/parseHeaders.js":
/*!********************************************!*\
  !*** ../axios/lib/helpers/parseHeaders.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

      "use strict";


      var utils = __webpack_require__(/*! ./../utils */ "../axios/lib/utils.js");

      // Headers whose duplicates are ignored by node
      // c.f. https://nodejs.org/api/http.html#http_message_headers
      var ignoreDuplicateOf = [
        'age', 'authorization', 'content-length', 'content-type', 'etag',
        'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since',
        'last-modified', 'location', 'max-forwards', 'proxy-authorization',
        'referer', 'retry-after', 'user-agent'
      ];

      /**
       * Parse headers into an object
       *
       * ```
       * Date: Wed, 27 Aug 2014 08:58:49 GMT
       * Content-Type: application/json
       * Connection: keep-alive
       * Transfer-Encoding: chunked
       * ```
       *
       * @param {String} headers Headers needing to be parsed
       * @returns {Object} Headers parsed into an object
       */
      module.exports = function parseHeaders(headers) {
        var parsed = {};
        var key;
        var val;
        var i;

        if (!headers) { return parsed; }

        utils.forEach(headers.split('\n'), function parser(line) {
          i = line.indexOf(':');
          key = utils.trim(line.substr(0, i)).toLowerCase();
          val = utils.trim(line.substr(i + 1));

          if (key) {
            if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {
              return;
            }
            if (key === 'set-cookie') {
              parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);
            } else {
              parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
            }
          }
        });

        return parsed;
      };


      /***/
    }),

/***/ "../axios/lib/helpers/spread.js":
/*!**************************************!*\
  !*** ../axios/lib/helpers/spread.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

      "use strict";


      /**
       * Syntactic sugar for invoking a function and expanding an array for arguments.
       *
       * Common use case would be to use `Function.prototype.apply`.
       *
       *  ```js
       *  function f(x, y, z) {}
       *  var args = [1, 2, 3];
       *  f.apply(null, args);
       *  ```
       *
       * With `spread` this example can be re-written.
       *
       *  ```js
       *  spread(function(x, y, z) {})([1, 2, 3]);
       *  ```
       *
       * @param {Function} callback
       * @returns {Function}
       */
      module.exports = function spread(callback) {
        return function wrap(arr) {
          return callback.apply(null, arr);
        };
      };


      /***/
    }),

/***/ "../axios/lib/utils.js":
/*!*****************************!*\
  !*** ../axios/lib/utils.js ***!
  \*****************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

      "use strict";


      var bind = __webpack_require__(/*! ./helpers/bind */ "../axios/lib/helpers/bind.js");
      var isBuffer = __webpack_require__(/*! is-buffer */ "../is-buffer/index.js");

      /*global toString:true*/

      // utils is a library of generic helper functions non-specific to axios

      var toString = Object.prototype.toString;

      /**
       * Determine if a value is an Array
       *
       * @param {Object} val The value to test
       * @returns {boolean} True if value is an Array, otherwise false
       */
      function isArray(val) {
        return toString.call(val) === '[object Array]';
      }

      /**
       * Determine if a value is an ArrayBuffer
       *
       * @param {Object} val The value to test
       * @returns {boolean} True if value is an ArrayBuffer, otherwise false
       */
      function isArrayBuffer(val) {
        return toString.call(val) === '[object ArrayBuffer]';
      }

      /**
       * Determine if a value is a FormData
       *
       * @param {Object} val The value to test
       * @returns {boolean} True if value is an FormData, otherwise false
       */
      function isFormData(val) {
        return (typeof FormData !== 'undefined') && (val instanceof FormData);
      }

      /**
       * Determine if a value is a view on an ArrayBuffer
       *
       * @param {Object} val The value to test
       * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
       */
      function isArrayBufferView(val) {
        var result;
        if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {
          result = ArrayBuffer.isView(val);
        } else {
          result = (val) && (val.buffer) && (val.buffer instanceof ArrayBuffer);
        }
        return result;
      }

      /**
       * Determine if a value is a String
       *
       * @param {Object} val The value to test
       * @returns {boolean} True if value is a String, otherwise false
       */
      function isString(val) {
        return typeof val === 'string';
      }

      /**
       * Determine if a value is a Number
       *
       * @param {Object} val The value to test
       * @returns {boolean} True if value is a Number, otherwise false
       */
      function isNumber(val) {
        return typeof val === 'number';
      }

      /**
       * Determine if a value is undefined
       *
       * @param {Object} val The value to test
       * @returns {boolean} True if the value is undefined, otherwise false
       */
      function isUndefined(val) {
        return typeof val === 'undefined';
      }

      /**
       * Determine if a value is an Object
       *
       * @param {Object} val The value to test
       * @returns {boolean} True if value is an Object, otherwise false
       */
      function isObject(val) {
        return val !== null && typeof val === 'object';
      }

      /**
       * Determine if a value is a Date
       *
       * @param {Object} val The value to test
       * @returns {boolean} True if value is a Date, otherwise false
       */
      function isDate(val) {
        return toString.call(val) === '[object Date]';
      }

      /**
       * Determine if a value is a File
       *
       * @param {Object} val The value to test
       * @returns {boolean} True if value is a File, otherwise false
       */
      function isFile(val) {
        return toString.call(val) === '[object File]';
      }

      /**
       * Determine if a value is a Blob
       *
       * @param {Object} val The value to test
       * @returns {boolean} True if value is a Blob, otherwise false
       */
      function isBlob(val) {
        return toString.call(val) === '[object Blob]';
      }

      /**
       * Determine if a value is a Function
       *
       * @param {Object} val The value to test
       * @returns {boolean} True if value is a Function, otherwise false
       */
      function isFunction(val) {
        return toString.call(val) === '[object Function]';
      }

      /**
       * Determine if a value is a Stream
       *
       * @param {Object} val The value to test
       * @returns {boolean} True if value is a Stream, otherwise false
       */
      function isStream(val) {
        return isObject(val) && isFunction(val.pipe);
      }

      /**
       * Determine if a value is a URLSearchParams object
       *
       * @param {Object} val The value to test
       * @returns {boolean} True if value is a URLSearchParams object, otherwise false
       */
      function isURLSearchParams(val) {
        return typeof URLSearchParams !== 'undefined' && val instanceof URLSearchParams;
      }

      /**
       * Trim excess whitespace off the beginning and end of a string
       *
       * @param {String} str The String to trim
       * @returns {String} The String freed of excess whitespace
       */
      function trim(str) {
        return str.replace(/^\s*/, '').replace(/\s*$/, '');
      }

      /**
       * Determine if we're running in a standard browser environment
       *
       * This allows axios to run in a web worker, and react-native.
       * Both environments support XMLHttpRequest, but not fully standard globals.
       *
       * web workers:
       *  typeof window -> undefined
       *  typeof document -> undefined
       *
       * react-native:
       *  navigator.product -> 'ReactNative'
       */
      function isStandardBrowserEnv() {
        if (typeof navigator !== 'undefined' && navigator.product === 'ReactNative') {
          return false;
        }
        return (
          typeof window !== 'undefined' &&
          typeof document !== 'undefined'
        );
      }

      /**
       * Iterate over an Array or an Object invoking a function for each item.
       *
       * If `obj` is an Array callback will be called passing
       * the value, index, and complete array for each item.
       *
       * If 'obj' is an Object callback will be called passing
       * the value, key, and complete object for each property.
       *
       * @param {Object|Array} obj The object to iterate
       * @param {Function} fn The callback to invoke for each item
       */
      function forEach(obj, fn) {
        // Don't bother if no value provided
        if (obj === null || typeof obj === 'undefined') {
          return;
        }

        // Force an array if not already something iterable
        if (typeof obj !== 'object') {
          /*eslint no-param-reassign:0*/
          obj = [obj];
        }

        if (isArray(obj)) {
          // Iterate over array values
          for (var i = 0, l = obj.length; i < l; i++) {
            fn.call(null, obj[i], i, obj);
          }
        } else {
          // Iterate over object keys
          for (var key in obj) {
            if (Object.prototype.hasOwnProperty.call(obj, key)) {
              fn.call(null, obj[key], key, obj);
            }
          }
        }
      }

      /**
       * Accepts varargs expecting each argument to be an object, then
       * immutably merges the properties of each object and returns result.
       *
       * When multiple objects contain the same key the later object in
       * the arguments list will take precedence.
       *
       * Example:
       *
       * ```js
       * var result = merge({foo: 123}, {foo: 456});
       * console.log(result.foo); // outputs 456
       * ```
       *
       * @param {Object} obj1 Object to merge
       * @returns {Object} Result of all merge properties
       */
      function merge(/* obj1, obj2, obj3, ... */) {
        var result = {};
        function assignValue(val, key) {
          if (typeof result[key] === 'object' && typeof val === 'object') {
            result[key] = merge(result[key], val);
          } else {
            result[key] = val;
          }
        }

        for (var i = 0, l = arguments.length; i < l; i++) {
          forEach(arguments[i], assignValue);
        }
        return result;
      }

      /**
       * Extends object a by mutably adding to it the properties of object b.
       *
       * @param {Object} a The object to be extended
       * @param {Object} b The object to copy properties from
       * @param {Object} thisArg The object to bind function to
       * @return {Object} The resulting value of object a
       */
      function extend(a, b, thisArg) {
        forEach(b, function assignValue(val, key) {
          if (thisArg && typeof val === 'function') {
            a[key] = bind(val, thisArg);
          } else {
            a[key] = val;
          }
        });
        return a;
      }

      module.exports = {
        isArray: isArray,
        isArrayBuffer: isArrayBuffer,
        isBuffer: isBuffer,
        isFormData: isFormData,
        isArrayBufferView: isArrayBufferView,
        isString: isString,
        isNumber: isNumber,
        isObject: isObject,
        isUndefined: isUndefined,
        isDate: isDate,
        isFile: isFile,
        isBlob: isBlob,
        isFunction: isFunction,
        isStream: isStream,
        isURLSearchParams: isURLSearchParams,
        isStandardBrowserEnv: isStandardBrowserEnv,
        forEach: forEach,
        merge: merge,
        extend: extend,
        trim: trim
      };


      /***/
    }),

/***/ "../base-x/index.js":
/*!**************************!*\
  !*** ../base-x/index.js ***!
  \**************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

      // base-x encoding
      // Forked from https://github.com/cryptocoinjs/bs58
      // Originally written by Mike Hearn for BitcoinJ
      // Copyright (c) 2011 Google Inc
      // Ported to JavaScript by Stefan Thomas
      // Merged Buffer refactorings from base58-native by Stephen Pair
      // Copyright (c) 2013 BitPay Inc

      var Buffer = __webpack_require__(/*! safe-buffer */ "../safe-buffer/index.js").Buffer

      module.exports = function base(ALPHABET) {
        var ALPHABET_MAP = {}
        var BASE = ALPHABET.length
        var LEADER = ALPHABET.charAt(0)

        // pre-compute lookup table
        for (var z = 0; z < ALPHABET.length; z++) {
          var x = ALPHABET.charAt(z)

          if (ALPHABET_MAP[x] !== undefined) throw new TypeError(x + ' is ambiguous')
          ALPHABET_MAP[x] = z
        }

        function encode(source) {
          if (source.length === 0) return ''

          var digits = [0]
          for (var i = 0; i < source.length; ++i) {
            for (var j = 0, carry = source[i]; j < digits.length; ++j) {
              carry += digits[j] << 8
              digits[j] = carry % BASE
              carry = (carry / BASE) | 0
            }

            while (carry > 0) {
              digits.push(carry % BASE)
              carry = (carry / BASE) | 0
            }
          }

          var string = ''

          // deal with leading zeros
          for (var k = 0; source[k] === 0 && k < source.length - 1; ++k) string += LEADER
          // convert digits to a string
          for (var q = digits.length - 1; q >= 0; --q) string += ALPHABET[digits[q]]

          return string
        }

        function decodeUnsafe(string) {
          if (typeof string !== 'string') throw new TypeError('Expected String')
          if (string.length === 0) return Buffer.allocUnsafe(0)

          var bytes = [0]
          for (var i = 0; i < string.length; i++) {
            var value = ALPHABET_MAP[string[i]]
            if (value === undefined) return

            for (var j = 0, carry = value; j < bytes.length; ++j) {
              carry += bytes[j] * BASE
              bytes[j] = carry & 0xff
              carry >>= 8
            }

            while (carry > 0) {
              bytes.push(carry & 0xff)
              carry >>= 8
            }
          }

          // deal with leading zeros
          for (var k = 0; string[k] === LEADER && k < string.length - 1; ++k) {
            bytes.push(0)
          }

          return Buffer.from(bytes.reverse())
        }

        function decode(string) {
          var buffer = decodeUnsafe(string)
          if (buffer) return buffer

          throw new Error('Non-base' + BASE + ' character')
        }

        return {
          encode: encode,
          decodeUnsafe: decodeUnsafe,
          decode: decode
        }
      }


      /***/
    }),

/***/ "../bignumber.js/bignumber.js":
/*!************************************!*\
  !*** ../bignumber.js/bignumber.js ***!
  \************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

      var __WEBPACK_AMD_DEFINE_RESULT__;; (function (globalObject) {
        'use strict';

        /*
         *      bignumber.js v7.2.1
         *      A JavaScript library for arbitrary-precision arithmetic.
         *      https://github.com/MikeMcl/bignumber.js
         *      Copyright (c) 2018 Michael Mclaughlin <M8ch88l@gmail.com>
         *      MIT Licensed.
         *
         *      BigNumber.prototype methods     |  BigNumber methods
         *                                      |
         *      absoluteValue            abs    |  clone
         *      comparedTo                      |  config               set
         *      decimalPlaces            dp     |      DECIMAL_PLACES
         *      dividedBy                div    |      ROUNDING_MODE
         *      dividedToIntegerBy       idiv   |      EXPONENTIAL_AT
         *      exponentiatedBy          pow    |      RANGE
         *      integerValue                    |      CRYPTO
         *      isEqualTo                eq     |      MODULO_MODE
         *      isFinite                        |      POW_PRECISION
         *      isGreaterThan            gt     |      FORMAT
         *      isGreaterThanOrEqualTo   gte    |      ALPHABET
         *      isInteger                       |  isBigNumber
         *      isLessThan               lt     |  maximum              max
         *      isLessThanOrEqualTo      lte    |  minimum              min
         *      isNaN                           |  random
         *      isNegative                      |
         *      isPositive                      |
         *      isZero                          |
         *      minus                           |
         *      modulo                   mod    |
         *      multipliedBy             times  |
         *      negated                         |
         *      plus                            |
         *      precision                sd     |
         *      shiftedBy                       |
         *      squareRoot               sqrt   |
         *      toExponential                   |
         *      toFixed                         |
         *      toFormat                        |
         *      toFraction                      |
         *      toJSON                          |
         *      toNumber                        |
         *      toPrecision                     |
         *      toString                        |
         *      valueOf                         |
         *
         */


        var BigNumber,
          isNumeric = /^-?(?:\d+(?:\.\d*)?|\.\d+)(?:e[+-]?\d+)?$/i,

          mathceil = Math.ceil,
          mathfloor = Math.floor,

          bignumberError = '[BigNumber Error] ',
          tooManyDigits = bignumberError + 'Number primitive has more than 15 significant digits: ',

          BASE = 1e14,
          LOG_BASE = 14,
          MAX_SAFE_INTEGER = 0x1fffffffffffff,         // 2^53 - 1
          // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1
          POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],
          SQRT_BASE = 1e7,

          // EDITABLE
          // The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and
          // the arguments to toExponential, toFixed, toFormat, and toPrecision.
          MAX = 1E9;                                   // 0 to MAX_INT32


        /*
         * Create and return a BigNumber constructor.
         */
        function clone(configObject) {
          var div, convertBase, parseNumeric,
            P = BigNumber.prototype = { constructor: BigNumber, toString: null, valueOf: null },
            ONE = new BigNumber(1),


            //----------------------------- EDITABLE CONFIG DEFAULTS -------------------------------


            // The default values below must be integers within the inclusive ranges stated.
            // The values can also be changed at run-time using BigNumber.set.

            // The maximum number of decimal places for operations involving division.
            DECIMAL_PLACES = 20,                     // 0 to MAX

            // The rounding mode used when rounding to the above decimal places, and when using
            // toExponential, toFixed, toFormat and toPrecision, and round (default value).
            // UP         0 Away from zero.
            // DOWN       1 Towards zero.
            // CEIL       2 Towards +Infinity.
            // FLOOR      3 Towards -Infinity.
            // HALF_UP    4 Towards nearest neighbour. If equidistant, up.
            // HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.
            // HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.
            // HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.
            // HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.
            ROUNDING_MODE = 4,                       // 0 to 8

            // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]

            // The exponent value at and beneath which toString returns exponential notation.
            // Number type: -7
            TO_EXP_NEG = -7,                         // 0 to -MAX

            // The exponent value at and above which toString returns exponential notation.
            // Number type: 21
            TO_EXP_POS = 21,                         // 0 to MAX

            // RANGE : [MIN_EXP, MAX_EXP]

            // The minimum exponent value, beneath which underflow to zero occurs.
            // Number type: -324  (5e-324)
            MIN_EXP = -1e7,                          // -1 to -MAX

            // The maximum exponent value, above which overflow to Infinity occurs.
            // Number type:  308  (1.7976931348623157e+308)
            // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.
            MAX_EXP = 1e7,                           // 1 to MAX

            // Whether to use cryptographically-secure random number generation, if available.
            CRYPTO = false,                          // true or false

            // The modulo mode used when calculating the modulus: a mod n.
            // The quotient (q = a / n) is calculated according to the corresponding rounding mode.
            // The remainder (r) is calculated as: r = a - n * q.
            //
            // UP        0 The remainder is positive if the dividend is negative, else is negative.
            // DOWN      1 The remainder has the same sign as the dividend.
            //             This modulo mode is commonly known as 'truncated division' and is
            //             equivalent to (a % n) in JavaScript.
            // FLOOR     3 The remainder has the same sign as the divisor (Python %).
            // HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.
            // EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).
            //             The remainder is always positive.
            //
            // The truncated division, floored division, Euclidian division and IEEE 754 remainder
            // modes are commonly used for the modulus operation.
            // Although the other rounding modes can also be used, they may not give useful results.
            MODULO_MODE = 1,                         // 0 to 9

            // The maximum number of significant digits of the result of the exponentiatedBy operation.
            // If POW_PRECISION is 0, there will be unlimited significant digits.
            POW_PRECISION = 0,                    // 0 to MAX

            // The format specification used by the BigNumber.prototype.toFormat method.
            FORMAT = {
              decimalSeparator: '.',
              groupSeparator: ',',
              groupSize: 3,
              secondaryGroupSize: 0,
              fractionGroupSeparator: '\xA0',      // non-breaking space
              fractionGroupSize: 0
            },

            // The alphabet used for base conversion.
            // It must be at least 2 characters long, with no '.' or repeated character.
            // '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_'
            ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyz';


          //------------------------------------------------------------------------------------------


          // CONSTRUCTOR


          /*
           * The BigNumber constructor and exported function.
           * Create and return a new instance of a BigNumber object.
           *
           * n {number|string|BigNumber} A numeric value.
           * [b] {number} The base of n. Integer, 2 to ALPHABET.length inclusive.
           */
          function BigNumber(n, b) {
            var alphabet, c, caseChanged, e, i, isNum, len, str,
              x = this;

            // Enable constructor usage without new.
            if (!(x instanceof BigNumber)) {

              // Don't throw on constructor call without new (#81).
              // '[BigNumber Error] Constructor call without new: {n}'
              //throw Error(bignumberError + ' Constructor call without new: ' + n);
              return new BigNumber(n, b);
            }

            if (b == null) {

              // Duplicate.
              if (n instanceof BigNumber) {
                x.s = n.s;
                x.e = n.e;
                x.c = (n = n.c) ? n.slice() : n;
                return;
              }

              isNum = typeof n == 'number';

              if (isNum && n * 0 == 0) {

                // Use `1 / n` to handle minus zero also.
                x.s = 1 / n < 0 ? (n = -n, -1) : 1;

                // Faster path for integers.
                if (n === ~~n) {
                  for (e = 0, i = n; i >= 10; i /= 10, e++);
                  x.e = e;
                  x.c = [n];
                  return;
                }

                str = n + '';
              } else {
                if (!isNumeric.test(str = n + '')) return parseNumeric(x, str, isNum);
                x.s = str.charCodeAt(0) == 45 ? (str = str.slice(1), -1) : 1;
              }

              // Decimal point?
              if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');

              // Exponential form?
              if ((i = str.search(/e/i)) > 0) {

                // Determine exponent.
                if (e < 0) e = i;
                e += +str.slice(i + 1);
                str = str.substring(0, i);
              } else if (e < 0) {

                // Integer.
                e = str.length;
              }

            } else {

              // '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'
              intCheck(b, 2, ALPHABET.length, 'Base');
              str = n + '';

              // Allow exponential notation to be used with base 10 argument, while
              // also rounding to DECIMAL_PLACES as with other bases.
              if (b == 10) {
                x = new BigNumber(n instanceof BigNumber ? n : str);
                return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);
              }

              isNum = typeof n == 'number';

              if (isNum) {

                // Avoid potential interpretation of Infinity and NaN as base 44+ values.
                if (n * 0 != 0) return parseNumeric(x, str, isNum, b);

                x.s = 1 / n < 0 ? (str = str.slice(1), -1) : 1;

                // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'
                if (BigNumber.DEBUG && str.replace(/^0\.0*|\./, '').length > 15) {
                  throw Error
                    (tooManyDigits + n);
                }

                // Prevent later check for length on converted number.
                isNum = false;
              } else {
                x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;
              }

              alphabet = ALPHABET.slice(0, b);
              e = i = 0;

              // Check that str is a valid base b number.
              // Don't use RegExp so alphabet can contain special characters.
              for (len = str.length; i < len; i++) {
                if (alphabet.indexOf(c = str.charAt(i)) < 0) {
                  if (c == '.') {

                    // If '.' is not the first character and it has not be found before.
                    if (i > e) {
                      e = len;
                      continue;
                    }
                  } else if (!caseChanged) {

                    // Allow e.g. hexadecimal 'FF' as well as 'ff'.
                    if (str == str.toUpperCase() && (str = str.toLowerCase()) ||
                      str == str.toLowerCase() && (str = str.toUpperCase())) {
                      caseChanged = true;
                      i = -1;
                      e = 0;
                      continue;
                    }
                  }

                  return parseNumeric(x, n + '', isNum, b);
                }
              }

              str = convertBase(str, b, 10, x.s);

              // Decimal point?
              if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');
              else e = str.length;
            }

            // Determine leading zeros.
            for (i = 0; str.charCodeAt(i) === 48; i++);

            // Determine trailing zeros.
            for (len = str.length; str.charCodeAt(--len) === 48;);

            str = str.slice(i, ++len);

            if (str) {
              len -= i;

              // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'
              if (isNum && BigNumber.DEBUG &&
                len > 15 && (n > MAX_SAFE_INTEGER || n !== mathfloor(n))) {
                throw Error
                  (tooManyDigits + (x.s * n));
              }

              e = e - i - 1;

              // Overflow?
              if (e > MAX_EXP) {

                // Infinity.
                x.c = x.e = null;

                // Underflow?
              } else if (e < MIN_EXP) {

                // Zero.
                x.c = [x.e = 0];
              } else {
                x.e = e;
                x.c = [];

                // Transform base

                // e is the base 10 exponent.
                // i is where to slice str to get the first element of the coefficient array.
                i = (e + 1) % LOG_BASE;
                if (e < 0) i += LOG_BASE;

                if (i < len) {
                  if (i) x.c.push(+str.slice(0, i));

                  for (len -= LOG_BASE; i < len;) {
                    x.c.push(+str.slice(i, i += LOG_BASE));
                  }

                  str = str.slice(i);
                  i = LOG_BASE - str.length;
                } else {
                  i -= len;
                }

                for (; i--; str += '0');
                x.c.push(+str);
              }
            } else {

              // Zero.
              x.c = [x.e = 0];
            }
          }


          // CONSTRUCTOR PROPERTIES


          BigNumber.clone = clone;

          BigNumber.ROUND_UP = 0;
          BigNumber.ROUND_DOWN = 1;
          BigNumber.ROUND_CEIL = 2;
          BigNumber.ROUND_FLOOR = 3;
          BigNumber.ROUND_HALF_UP = 4;
          BigNumber.ROUND_HALF_DOWN = 5;
          BigNumber.ROUND_HALF_EVEN = 6;
          BigNumber.ROUND_HALF_CEIL = 7;
          BigNumber.ROUND_HALF_FLOOR = 8;
          BigNumber.EUCLID = 9;


          /*
           * Configure infrequently-changing library-wide settings.
           *
           * Accept an object with the following optional properties (if the value of a property is
           * a number, it must be an integer within the inclusive range stated):
           *
           *   DECIMAL_PLACES   {number}           0 to MAX
           *   ROUNDING_MODE    {number}           0 to 8
           *   EXPONENTIAL_AT   {number|number[]}  -MAX to MAX  or  [-MAX to 0, 0 to MAX]
           *   RANGE            {number|number[]}  -MAX to MAX (not zero)  or  [-MAX to -1, 1 to MAX]
           *   CRYPTO           {boolean}          true or false
           *   MODULO_MODE      {number}           0 to 9
           *   POW_PRECISION       {number}           0 to MAX
           *   ALPHABET         {string}           A string of two or more unique characters which does
           *                                       not contain '.'.
           *   FORMAT           {object}           An object with some of the following properties:
           *      decimalSeparator       {string}
           *      groupSeparator         {string}
           *      groupSize              {number}
           *      secondaryGroupSize     {number}
           *      fractionGroupSeparator {string}
           *      fractionGroupSize      {number}
           *
           * (The values assigned to the above FORMAT object properties are not checked for validity.)
           *
           * E.g.
           * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })
           *
           * Ignore properties/parameters set to null or undefined, except for ALPHABET.
           *
           * Return an object with the properties current values.
           */
          BigNumber.config = BigNumber.set = function (obj) {
            var p, v;

            if (obj != null) {

              if (typeof obj == 'object') {

                // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.
                // '[BigNumber Error] DECIMAL_PLACES {not a primitive number|not an integer|out of range}: {v}'
                if (obj.hasOwnProperty(p = 'DECIMAL_PLACES')) {
                  v = obj[p];
                  intCheck(v, 0, MAX, p);
                  DECIMAL_PLACES = v;
                }

                // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.
                // '[BigNumber Error] ROUNDING_MODE {not a primitive number|not an integer|out of range}: {v}'
                if (obj.hasOwnProperty(p = 'ROUNDING_MODE')) {
                  v = obj[p];
                  intCheck(v, 0, 8, p);
                  ROUNDING_MODE = v;
                }

                // EXPONENTIAL_AT {number|number[]}
                // Integer, -MAX to MAX inclusive or
                // [integer -MAX to 0 inclusive, 0 to MAX inclusive].
                // '[BigNumber Error] EXPONENTIAL_AT {not a primitive number|not an integer|out of range}: {v}'
                if (obj.hasOwnProperty(p = 'EXPONENTIAL_AT')) {
                  v = obj[p];
                  if (isArray(v)) {
                    intCheck(v[0], -MAX, 0, p);
                    intCheck(v[1], 0, MAX, p);
                    TO_EXP_NEG = v[0];
                    TO_EXP_POS = v[1];
                  } else {
                    intCheck(v, -MAX, MAX, p);
                    TO_EXP_NEG = -(TO_EXP_POS = v < 0 ? -v : v);
                  }
                }

                // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or
                // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].
                // '[BigNumber Error] RANGE {not a primitive number|not an integer|out of range|cannot be zero}: {v}'
                if (obj.hasOwnProperty(p = 'RANGE')) {
                  v = obj[p];
                  if (isArray(v)) {
                    intCheck(v[0], -MAX, -1, p);
                    intCheck(v[1], 1, MAX, p);
                    MIN_EXP = v[0];
                    MAX_EXP = v[1];
                  } else {
                    intCheck(v, -MAX, MAX, p);
                    if (v) {
                      MIN_EXP = -(MAX_EXP = v < 0 ? -v : v);
                    } else {
                      throw Error
                        (bignumberError + p + ' cannot be zero: ' + v);
                    }
                  }
                }

                // CRYPTO {boolean} true or false.
                // '[BigNumber Error] CRYPTO not true or false: {v}'
                // '[BigNumber Error] crypto unavailable'
                if (obj.hasOwnProperty(p = 'CRYPTO')) {
                  v = obj[p];
                  if (v === !!v) {
                    if (v) {
                      if (typeof crypto != 'undefined' && crypto &&
                        (crypto.getRandomValues || crypto.randomBytes)) {
                        CRYPTO = v;
                      } else {
                        CRYPTO = !v;
                        throw Error
                          (bignumberError + 'crypto unavailable');
                      }
                    } else {
                      CRYPTO = v;
                    }
                  } else {
                    throw Error
                      (bignumberError + p + ' not true or false: ' + v);
                  }
                }

                // MODULO_MODE {number} Integer, 0 to 9 inclusive.
                // '[BigNumber Error] MODULO_MODE {not a primitive number|not an integer|out of range}: {v}'
                if (obj.hasOwnProperty(p = 'MODULO_MODE')) {
                  v = obj[p];
                  intCheck(v, 0, 9, p);
                  MODULO_MODE = v;
                }

                // POW_PRECISION {number} Integer, 0 to MAX inclusive.
                // '[BigNumber Error] POW_PRECISION {not a primitive number|not an integer|out of range}: {v}'
                if (obj.hasOwnProperty(p = 'POW_PRECISION')) {
                  v = obj[p];
                  intCheck(v, 0, MAX, p);
                  POW_PRECISION = v;
                }

                // FORMAT {object}
                // '[BigNumber Error] FORMAT not an object: {v}'
                if (obj.hasOwnProperty(p = 'FORMAT')) {
                  v = obj[p];
                  if (typeof v == 'object') FORMAT = v;
                  else throw Error
                    (bignumberError + p + ' not an object: ' + v);
                }

                // ALPHABET {string}
                // '[BigNumber Error] ALPHABET invalid: {v}'
                if (obj.hasOwnProperty(p = 'ALPHABET')) {
                  v = obj[p];

                  // Disallow if only one character, or contains '.' or a repeated character.
                  if (typeof v == 'string' && !/^.$|\.|(.).*\1/.test(v)) {
                    ALPHABET = v;
                  } else {
                    throw Error
                      (bignumberError + p + ' invalid: ' + v);
                  }
                }

              } else {

                // '[BigNumber Error] Object expected: {v}'
                throw Error
                  (bignumberError + 'Object expected: ' + obj);
              }
            }

            return {
              DECIMAL_PLACES: DECIMAL_PLACES,
              ROUNDING_MODE: ROUNDING_MODE,
              EXPONENTIAL_AT: [TO_EXP_NEG, TO_EXP_POS],
              RANGE: [MIN_EXP, MAX_EXP],
              CRYPTO: CRYPTO,
              MODULO_MODE: MODULO_MODE,
              POW_PRECISION: POW_PRECISION,
              FORMAT: FORMAT,
              ALPHABET: ALPHABET
            };
          };


          /*
           * Return true if v is a BigNumber instance, otherwise return false.
           *
           * v {any}
           */
          BigNumber.isBigNumber = function (v) {
            return v instanceof BigNumber || v && v._isBigNumber === true || false;
          };


          /*
           * Return a new BigNumber whose value is the maximum of the arguments.
           *
           * arguments {number|string|BigNumber}
           */
          BigNumber.maximum = BigNumber.max = function () {
            return maxOrMin(arguments, P.lt);
          };


          /*
           * Return a new BigNumber whose value is the minimum of the arguments.
           *
           * arguments {number|string|BigNumber}
           */
          BigNumber.minimum = BigNumber.min = function () {
            return maxOrMin(arguments, P.gt);
          };


          /*
           * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,
           * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing
           * zeros are produced).
           *
           * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
           *
           * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp}'
           * '[BigNumber Error] crypto unavailable'
           */
          BigNumber.random = (function () {
            var pow2_53 = 0x20000000000000;

            // Return a 53 bit integer n, where 0 <= n < 9007199254740992.
            // Check if Math.random() produces more than 32 bits of randomness.
            // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.
            // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.
            var random53bitInt = (Math.random() * pow2_53) & 0x1fffff
              ? function () { return mathfloor(Math.random() * pow2_53); }
              : function () {
                return ((Math.random() * 0x40000000 | 0) * 0x800000) +
                  (Math.random() * 0x800000 | 0);
              };

            return function (dp) {
              var a, b, e, k, v,
                i = 0,
                c = [],
                rand = new BigNumber(ONE);

              if (dp == null) dp = DECIMAL_PLACES;
              else intCheck(dp, 0, MAX);

              k = mathceil(dp / LOG_BASE);

              if (CRYPTO) {

                // Browsers supporting crypto.getRandomValues.
                if (crypto.getRandomValues) {

                  a = crypto.getRandomValues(new Uint32Array(k *= 2));

                  for (; i < k;) {

                    // 53 bits:
                    // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)
                    // 11111 11111111 11111111 11111111 11100000 00000000 00000000
                    // ((Math.pow(2, 32) - 1) >>> 11).toString(2)
                    //                                     11111 11111111 11111111
                    // 0x20000 is 2^21.
                    v = a[i] * 0x20000 + (a[i + 1] >>> 11);

                    // Rejection sampling:
                    // 0 <= v < 9007199254740992
                    // Probability that v >= 9e15, is
                    // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251
                    if (v >= 9e15) {
                      b = crypto.getRandomValues(new Uint32Array(2));
                      a[i] = b[0];
                      a[i + 1] = b[1];
                    } else {

                      // 0 <= v <= 8999999999999999
                      // 0 <= (v % 1e14) <= 99999999999999
                      c.push(v % 1e14);
                      i += 2;
                    }
                  }
                  i = k / 2;

                  // Node.js supporting crypto.randomBytes.
                } else if (crypto.randomBytes) {

                  // buffer
                  a = crypto.randomBytes(k *= 7);

                  for (; i < k;) {

                    // 0x1000000000000 is 2^48, 0x10000000000 is 2^40
                    // 0x100000000 is 2^32, 0x1000000 is 2^24
                    // 11111 11111111 11111111 11111111 11111111 11111111 11111111
                    // 0 <= v < 9007199254740992
                    v = ((a[i] & 31) * 0x1000000000000) + (a[i + 1] * 0x10000000000) +
                      (a[i + 2] * 0x100000000) + (a[i + 3] * 0x1000000) +
                      (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];

                    if (v >= 9e15) {
                      crypto.randomBytes(7).copy(a, i);
                    } else {

                      // 0 <= (v % 1e14) <= 99999999999999
                      c.push(v % 1e14);
                      i += 7;
                    }
                  }
                  i = k / 7;
                } else {
                  CRYPTO = false;
                  throw Error
                    (bignumberError + 'crypto unavailable');
                }
              }

              // Use Math.random.
              if (!CRYPTO) {

                for (; i < k;) {
                  v = random53bitInt();
                  if (v < 9e15) c[i++] = v % 1e14;
                }
              }

              k = c[--i];
              dp %= LOG_BASE;

              // Convert trailing digits to zeros according to dp.
              if (k && dp) {
                v = POWS_TEN[LOG_BASE - dp];
                c[i] = mathfloor(k / v) * v;
              }

              // Remove trailing elements which are zero.
              for (; c[i] === 0; c.pop(), i--);

              // Zero?
              if (i < 0) {
                c = [e = 0];
              } else {

                // Remove leading elements which are zero and adjust exponent accordingly.
                for (e = -1; c[0] === 0; c.splice(0, 1), e -= LOG_BASE);

                // Count the digits of the first element of c to determine leading zeros, and...
                for (i = 1, v = c[0]; v >= 10; v /= 10, i++);

                // adjust the exponent accordingly.
                if (i < LOG_BASE) e -= LOG_BASE - i;
              }

              rand.e = e;
              rand.c = c;
              return rand;
            };
          })();


          // PRIVATE FUNCTIONS


          // Called by BigNumber and BigNumber.prototype.toString.
          convertBase = (function () {
            var decimal = '0123456789';

            /*
             * Convert string of baseIn to an array of numbers of baseOut.
             * Eg. toBaseOut('255', 10, 16) returns [15, 15].
             * Eg. toBaseOut('ff', 16, 10) returns [2, 5, 5].
             */
            function toBaseOut(str, baseIn, baseOut, alphabet) {
              var j,
                arr = [0],
                arrL,
                i = 0,
                len = str.length;

              for (; i < len;) {
                for (arrL = arr.length; arrL--; arr[arrL] *= baseIn);

                arr[0] += alphabet.indexOf(str.charAt(i++));

                for (j = 0; j < arr.length; j++) {

                  if (arr[j] > baseOut - 1) {
                    if (arr[j + 1] == null) arr[j + 1] = 0;
                    arr[j + 1] += arr[j] / baseOut | 0;
                    arr[j] %= baseOut;
                  }
                }
              }

              return arr.reverse();
            }

            // Convert a numeric string of baseIn to a numeric string of baseOut.
            // If the caller is toString, we are converting from base 10 to baseOut.
            // If the caller is BigNumber, we are converting from baseIn to base 10.
            return function (str, baseIn, baseOut, sign, callerIsToString) {
              var alphabet, d, e, k, r, x, xc, y,
                i = str.indexOf('.'),
                dp = DECIMAL_PLACES,
                rm = ROUNDING_MODE;

              // Non-integer.
              if (i >= 0) {
                k = POW_PRECISION;

                // Unlimited precision.
                POW_PRECISION = 0;
                str = str.replace('.', '');
                y = new BigNumber(baseIn);
                x = y.pow(str.length - i);
                POW_PRECISION = k;

                // Convert str as if an integer, then restore the fraction part by dividing the
                // result by its base raised to a power.

                y.c = toBaseOut(toFixedPoint(coeffToString(x.c), x.e, '0'),
                  10, baseOut, decimal);
                y.e = y.c.length;
              }

              // Convert the number as integer.

              xc = toBaseOut(str, baseIn, baseOut, callerIsToString
                ? (alphabet = ALPHABET, decimal)
                : (alphabet = decimal, ALPHABET));

              // xc now represents str as an integer and converted to baseOut. e is the exponent.
              e = k = xc.length;

              // Remove trailing zeros.
              for (; xc[--k] == 0; xc.pop());

              // Zero?
              if (!xc[0]) return alphabet.charAt(0);

              // Does str represent an integer? If so, no need for the division.
              if (i < 0) {
                --e;
              } else {
                x.c = xc;
                x.e = e;

                // The sign is needed for correct rounding.
                x.s = sign;
                x = div(x, y, dp, rm, baseOut);
                xc = x.c;
                r = x.r;
                e = x.e;
              }

              // xc now represents str converted to baseOut.

              // THe index of the rounding digit.
              d = e + dp + 1;

              // The rounding digit: the digit to the right of the digit that may be rounded up.
              i = xc[d];

              // Look at the rounding digits and mode to determine whether to round up.

              k = baseOut / 2;
              r = r || d < 0 || xc[d + 1] != null;

              r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))
                : i > k || i == k && (rm == 4 || r || rm == 6 && xc[d - 1] & 1 ||
                  rm == (x.s < 0 ? 8 : 7));

              // If the index of the rounding digit is not greater than zero, or xc represents
              // zero, then the result of the base conversion is zero or, if rounding up, a value
              // such as 0.00001.
              if (d < 1 || !xc[0]) {

                // 1^-dp or 0
                str = r ? toFixedPoint(alphabet.charAt(1), -dp, alphabet.charAt(0))
                  : alphabet.charAt(0);
              } else {

                // Truncate xc to the required number of decimal places.
                xc.length = d;

                // Round up?
                if (r) {

                  // Rounding up may mean the previous digit has to be rounded up and so on.
                  for (--baseOut; ++xc[--d] > baseOut;) {
                    xc[d] = 0;

                    if (!d) {
                      ++e;
                      xc = [1].concat(xc);
                    }
                  }
                }

                // Determine trailing zeros.
                for (k = xc.length; !xc[--k];);

                // E.g. [4, 11, 15] becomes 4bf.
                for (i = 0, str = ''; i <= k; str += alphabet.charAt(xc[i++]));

                // Add leading zeros, decimal point and trailing zeros as required.
                str = toFixedPoint(str, e, alphabet.charAt(0));
              }

              // The caller will add the sign.
              return str;
            };
          })();


          // Perform division in the specified base. Called by div and convertBase.
          div = (function () {

            // Assume non-zero x and k.
            function multiply(x, k, base) {
              var m, temp, xlo, xhi,
                carry = 0,
                i = x.length,
                klo = k % SQRT_BASE,
                khi = k / SQRT_BASE | 0;

              for (x = x.slice(); i--;) {
                xlo = x[i] % SQRT_BASE;
                xhi = x[i] / SQRT_BASE | 0;
                m = khi * xlo + xhi * klo;
                temp = klo * xlo + ((m % SQRT_BASE) * SQRT_BASE) + carry;
                carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;
                x[i] = temp % base;
              }

              if (carry) x = [carry].concat(x);

              return x;
            }

            function compare(a, b, aL, bL) {
              var i, cmp;

              if (aL != bL) {
                cmp = aL > bL ? 1 : -1;
              } else {

                for (i = cmp = 0; i < aL; i++) {

                  if (a[i] != b[i]) {
                    cmp = a[i] > b[i] ? 1 : -1;
                    break;
                  }
                }
              }

              return cmp;
            }

            function subtract(a, b, aL, base) {
              var i = 0;

              // Subtract b from a.
              for (; aL--;) {
                a[aL] -= i;
                i = a[aL] < b[aL] ? 1 : 0;
                a[aL] = i * base + a[aL] - b[aL];
              }

              // Remove leading zeros.
              for (; !a[0] && a.length > 1; a.splice(0, 1));
            }

            // x: dividend, y: divisor.
            return function (x, y, dp, rm, base) {
              var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0,
                yL, yz,
                s = x.s == y.s ? 1 : -1,
                xc = x.c,
                yc = y.c;

              // Either NaN, Infinity or 0?
              if (!xc || !xc[0] || !yc || !yc[0]) {

                return new BigNumber(

                  // Return NaN if either NaN, or both Infinity or 0.
                  !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN :

                    // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.
                    xc && xc[0] == 0 || !yc ? s * 0 : s / 0
                );
              }

              q = new BigNumber(s);
              qc = q.c = [];
              e = x.e - y.e;
              s = dp + e + 1;

              if (!base) {
                base = BASE;
                e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);
                s = s / LOG_BASE | 0;
              }

              // Result exponent may be one less then the current value of e.
              // The coefficients of the BigNumbers from convertBase may have trailing zeros.
              for (i = 0; yc[i] == (xc[i] || 0); i++);

              if (yc[i] > (xc[i] || 0)) e--;

              if (s < 0) {
                qc.push(1);
                more = true;
              } else {
                xL = xc.length;
                yL = yc.length;
                i = 0;
                s += 2;

                // Normalise xc and yc so highest order digit of yc is >= base / 2.

                n = mathfloor(base / (yc[0] + 1));

                // Not necessary, but to handle odd bases where yc[0] == (base / 2) - 1.
                // if (n > 1 || n++ == 1 && yc[0] < base / 2) {
                if (n > 1) {
                  yc = multiply(yc, n, base);
                  xc = multiply(xc, n, base);
                  yL = yc.length;
                  xL = xc.length;
                }

                xi = yL;
                rem = xc.slice(0, yL);
                remL = rem.length;

                // Add zeros to make remainder as long as divisor.
                for (; remL < yL; rem[remL++] = 0);
                yz = yc.slice();
                yz = [0].concat(yz);
                yc0 = yc[0];
                if (yc[1] >= base / 2) yc0++;
                // Not necessary, but to prevent trial digit n > base, when using base 3.
                // else if (base == 3 && yc0 == 1) yc0 = 1 + 1e-15;

                do {
                  n = 0;

                  // Compare divisor and remainder.
                  cmp = compare(yc, rem, yL, remL);

                  // If divisor < remainder.
                  if (cmp < 0) {

                    // Calculate trial digit, n.

                    rem0 = rem[0];
                    if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);

                    // n is how many times the divisor goes into the current remainder.
                    n = mathfloor(rem0 / yc0);

                    //  Algorithm:
                    //  product = divisor multiplied by trial digit (n).
                    //  Compare product and remainder.
                    //  If product is greater than remainder:
                    //    Subtract divisor from product, decrement trial digit.
                    //  Subtract product from remainder.
                    //  If product was less than remainder at the last compare:
                    //    Compare new remainder and divisor.
                    //    If remainder is greater than divisor:
                    //      Subtract divisor from remainder, increment trial digit.

                    if (n > 1) {

                      // n may be > base only when base is 3.
                      if (n >= base) n = base - 1;

                      // product = divisor * trial digit.
                      prod = multiply(yc, n, base);
                      prodL = prod.length;
                      remL = rem.length;

                      // Compare product and remainder.
                      // If product > remainder then trial digit n too high.
                      // n is 1 too high about 5% of the time, and is not known to have
                      // ever been more than 1 too high.
                      while (compare(prod, rem, prodL, remL) == 1) {
                        n--;

                        // Subtract divisor from product.
                        subtract(prod, yL < prodL ? yz : yc, prodL, base);
                        prodL = prod.length;
                        cmp = 1;
                      }
                    } else {

                      // n is 0 or 1, cmp is -1.
                      // If n is 0, there is no need to compare yc and rem again below,
                      // so change cmp to 1 to avoid it.
                      // If n is 1, leave cmp as -1, so yc and rem are compared again.
                      if (n == 0) {

                        // divisor < remainder, so n must be at least 1.
                        cmp = n = 1;
                      }

                      // product = divisor
                      prod = yc.slice();
                      prodL = prod.length;
                    }

                    if (prodL < remL) prod = [0].concat(prod);

                    // Subtract product from remainder.
                    subtract(rem, prod, remL, base);
                    remL = rem.length;

                    // If product was < remainder.
                    if (cmp == -1) {

                      // Compare divisor and new remainder.
                      // If divisor < new remainder, subtract divisor from remainder.
                      // Trial digit n too low.
                      // n is 1 too low about 5% of the time, and very rarely 2 too low.
                      while (compare(yc, rem, yL, remL) < 1) {
                        n++;

                        // Subtract divisor from remainder.
                        subtract(rem, yL < remL ? yz : yc, remL, base);
                        remL = rem.length;
                      }
                    }
                  } else if (cmp === 0) {
                    n++;
                    rem = [0];
                  } // else cmp === 1 and n will be 0

                  // Add the next digit, n, to the result array.
                  qc[i++] = n;

                  // Update the remainder.
                  if (rem[0]) {
                    rem[remL++] = xc[xi] || 0;
                  } else {
                    rem = [xc[xi]];
                    remL = 1;
                  }
                } while ((xi++ < xL || rem[0] != null) && s--);

                more = rem[0] != null;

                // Leading zero?
                if (!qc[0]) qc.splice(0, 1);
              }

              if (base == BASE) {

                // To calculate q.e, first get the number of digits of qc[0].
                for (i = 1, s = qc[0]; s >= 10; s /= 10, i++);

                round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more);

                // Caller is convertBase.
              } else {
                q.e = e;
                q.r = +more;
              }

              return q;
            };
          })();


          /*
           * Return a string representing the value of BigNumber n in fixed-point or exponential
           * notation rounded to the specified decimal places or significant digits.
           *
           * n: a BigNumber.
           * i: the index of the last digit required (i.e. the digit that may be rounded up).
           * rm: the rounding mode.
           * id: 1 (toExponential) or 2 (toPrecision).
           */
          function format(n, i, rm, id) {
            var c0, e, ne, len, str;

            if (rm == null) rm = ROUNDING_MODE;
            else intCheck(rm, 0, 8);

            if (!n.c) return n.toString();

            c0 = n.c[0];
            ne = n.e;

            if (i == null) {
              str = coeffToString(n.c);
              str = id == 1 || id == 2 && ne <= TO_EXP_NEG
                ? toExponential(str, ne)
                : toFixedPoint(str, ne, '0');
            } else {
              n = round(new BigNumber(n), i, rm);

              // n.e may have changed if the value was rounded up.
              e = n.e;

              str = coeffToString(n.c);
              len = str.length;

              // toPrecision returns exponential notation if the number of significant digits
              // specified is less than the number of digits necessary to represent the integer
              // part of the value in fixed-point notation.

              // Exponential notation.
              if (id == 1 || id == 2 && (i <= e || e <= TO_EXP_NEG)) {

                // Append zeros?
                for (; len < i; str += '0', len++);
                str = toExponential(str, e);

                // Fixed-point notation.
              } else {
                i -= ne;
                str = toFixedPoint(str, e, '0');

                // Append zeros?
                if (e + 1 > len) {
                  if (--i > 0) for (str += '.'; i--; str += '0');
                } else {
                  i += e - len;
                  if (i > 0) {
                    if (e + 1 == len) str += '.';
                    for (; i--; str += '0');
                  }
                }
              }
            }

            return n.s < 0 && c0 ? '-' + str : str;
          }


          // Handle BigNumber.max and BigNumber.min.
          function maxOrMin(args, method) {
            var m, n,
              i = 0;

            if (isArray(args[0])) args = args[0];
            m = new BigNumber(args[0]);

            for (; ++i < args.length;) {
              n = new BigNumber(args[i]);

              // If any number is NaN, return NaN.
              if (!n.s) {
                m = n;
                break;
              } else if (method.call(m, n)) {
                m = n;
              }
            }

            return m;
          }


          /*
           * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.
           * Called by minus, plus and times.
           */
          function normalise(n, c, e) {
            var i = 1,
              j = c.length;

            // Remove trailing zeros.
            for (; !c[--j]; c.pop());

            // Calculate the base 10 exponent. First get the number of digits of c[0].
            for (j = c[0]; j >= 10; j /= 10, i++);

            // Overflow?
            if ((e = i + e * LOG_BASE - 1) > MAX_EXP) {

              // Infinity.
              n.c = n.e = null;

              // Underflow?
            } else if (e < MIN_EXP) {

              // Zero.
              n.c = [n.e = 0];
            } else {
              n.e = e;
              n.c = c;
            }

            return n;
          }


          // Handle values that fail the validity test in BigNumber.
          parseNumeric = (function () {
            var basePrefix = /^(-?)0([xbo])(?=\w[\w.]*$)/i,
              dotAfter = /^([^.]+)\.$/,
              dotBefore = /^\.([^.]+)$/,
              isInfinityOrNaN = /^-?(Infinity|NaN)$/,
              whitespaceOrPlus = /^\s*\+(?=[\w.])|^\s+|\s+$/g;

            return function (x, str, isNum, b) {
              var base,
                s = isNum ? str : str.replace(whitespaceOrPlus, '');

              // No exception on ±Infinity or NaN.
              if (isInfinityOrNaN.test(s)) {
                x.s = isNaN(s) ? null : s < 0 ? -1 : 1;
                x.c = x.e = null;
              } else {
                if (!isNum) {

                  // basePrefix = /^(-?)0([xbo])(?=\w[\w.]*$)/i
                  s = s.replace(basePrefix, function (m, p1, p2) {
                    base = (p2 = p2.toLowerCase()) == 'x' ? 16 : p2 == 'b' ? 2 : 8;
                    return !b || b == base ? p1 : m;
                  });

                  if (b) {
                    base = b;

                    // E.g. '1.' to '1', '.1' to '0.1'
                    s = s.replace(dotAfter, '$1').replace(dotBefore, '0.$1');
                  }

                  if (str != s) return new BigNumber(s, base);
                }

                // '[BigNumber Error] Not a number: {n}'
                // '[BigNumber Error] Not a base {b} number: {n}'
                if (BigNumber.DEBUG) {
                  throw Error
                    (bignumberError + 'Not a' + (b ? ' base ' + b : '') + ' number: ' + str);
                }

                // NaN
                x.c = x.e = x.s = null;
              }
            }
          })();


          /*
           * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.
           * If r is truthy, it is known that there are more digits after the rounding digit.
           */
          function round(x, sd, rm, r) {
            var d, i, j, k, n, ni, rd,
              xc = x.c,
              pows10 = POWS_TEN;

            // if x is not Infinity or NaN...
            if (xc) {

              // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.
              // n is a base 1e14 number, the value of the element of array x.c containing rd.
              // ni is the index of n within x.c.
              // d is the number of digits of n.
              // i is the index of rd within n including leading zeros.
              // j is the actual index of rd within n (if < 0, rd is a leading zero).
              out: {

                // Get the number of digits of the first element of xc.
                for (d = 1, k = xc[0]; k >= 10; k /= 10, d++);
                i = sd - d;

                // If the rounding digit is in the first element of xc...
                if (i < 0) {
                  i += LOG_BASE;
                  j = sd;
                  n = xc[ni = 0];

                  // Get the rounding digit at index j of n.
                  rd = n / pows10[d - j - 1] % 10 | 0;
                } else {
                  ni = mathceil((i + 1) / LOG_BASE);

                  if (ni >= xc.length) {

                    if (r) {

                      // Needed by sqrt.
                      for (; xc.length <= ni; xc.push(0));
                      n = rd = 0;
                      d = 1;
                      i %= LOG_BASE;
                      j = i - LOG_BASE + 1;
                    } else {
                      break out;
                    }
                  } else {
                    n = k = xc[ni];

                    // Get the number of digits of n.
                    for (d = 1; k >= 10; k /= 10, d++);

                    // Get the index of rd within n.
                    i %= LOG_BASE;

                    // Get the index of rd within n, adjusted for leading zeros.
                    // The number of leading zeros of n is given by LOG_BASE - d.
                    j = i - LOG_BASE + d;

                    // Get the rounding digit at index j of n.
                    rd = j < 0 ? 0 : n / pows10[d - j - 1] % 10 | 0;
                  }
                }

                r = r || sd < 0 ||

                  // Are there any non-zero digits after the rounding digit?
                  // The expression  n % pows10[d - j - 1]  returns all digits of n to the right
                  // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.
                  xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);

                r = rm < 4
                  ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))
                  : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 &&

                    // Check whether the digit to the left of the rounding digit is odd.
                    ((i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10) & 1 ||
                    rm == (x.s < 0 ? 8 : 7));

                if (sd < 1 || !xc[0]) {
                  xc.length = 0;

                  if (r) {

                    // Convert sd to decimal places.
                    sd -= x.e + 1;

                    // 1, 0.1, 0.01, 0.001, 0.0001 etc.
                    xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];
                    x.e = -sd || 0;
                  } else {

                    // Zero.
                    xc[0] = x.e = 0;
                  }

                  return x;
                }

                // Remove excess digits.
                if (i == 0) {
                  xc.length = ni;
                  k = 1;
                  ni--;
                } else {
                  xc.length = ni + 1;
                  k = pows10[LOG_BASE - i];

                  // E.g. 56700 becomes 56000 if 7 is the rounding digit.
                  // j > 0 means i > number of leading zeros of n.
                  xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;
                }

                // Round up?
                if (r) {

                  for (; ;) {

                    // If the digit to be rounded up is in the first element of xc...
                    if (ni == 0) {

                      // i will be the length of xc[0] before k is added.
                      for (i = 1, j = xc[0]; j >= 10; j /= 10, i++);
                      j = xc[0] += k;
                      for (k = 1; j >= 10; j /= 10, k++);

                      // if i != k the length has increased.
                      if (i != k) {
                        x.e++;
                        if (xc[0] == BASE) xc[0] = 1;
                      }

                      break;
                    } else {
                      xc[ni] += k;
                      if (xc[ni] != BASE) break;
                      xc[ni--] = 0;
                      k = 1;
                    }
                  }
                }

                // Remove trailing zeros.
                for (i = xc.length; xc[--i] === 0; xc.pop());
              }

              // Overflow? Infinity.
              if (x.e > MAX_EXP) {
                x.c = x.e = null;

                // Underflow? Zero.
              } else if (x.e < MIN_EXP) {
                x.c = [x.e = 0];
              }
            }

            return x;
          }


          // PROTOTYPE/INSTANCE METHODS


          /*
           * Return a new BigNumber whose value is the absolute value of this BigNumber.
           */
          P.absoluteValue = P.abs = function () {
            var x = new BigNumber(this);
            if (x.s < 0) x.s = 1;
            return x;
          };


          /*
           * Return
           *   1 if the value of this BigNumber is greater than the value of BigNumber(y, b),
           *   -1 if the value of this BigNumber is less than the value of BigNumber(y, b),
           *   0 if they have the same value,
           *   or null if the value of either is NaN.
           */
          P.comparedTo = function (y, b) {
            return compare(this, new BigNumber(y, b));
          };


          /*
           * If dp is undefined or null or true or false, return the number of decimal places of the
           * value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.
           *
           * Otherwise, if dp is a number, return a new BigNumber whose value is the value of this
           * BigNumber rounded to a maximum of dp decimal places using rounding mode rm, or
           * ROUNDING_MODE if rm is omitted.
           *
           * [dp] {number} Decimal places: integer, 0 to MAX inclusive.
           * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
           *
           * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'
           */
          P.decimalPlaces = P.dp = function (dp, rm) {
            var c, n, v,
              x = this;

            if (dp != null) {
              intCheck(dp, 0, MAX);
              if (rm == null) rm = ROUNDING_MODE;
              else intCheck(rm, 0, 8);

              return round(new BigNumber(x), dp + x.e + 1, rm);
            }

            if (!(c = x.c)) return null;
            n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE;

            // Subtract the number of trailing zeros of the last number.
            if (v = c[v]) for (; v % 10 == 0; v /= 10, n--);
            if (n < 0) n = 0;

            return n;
          };


          /*
           *  n / 0 = I
           *  n / N = N
           *  n / I = 0
           *  0 / n = 0
           *  0 / 0 = N
           *  0 / N = N
           *  0 / I = 0
           *  N / n = N
           *  N / 0 = N
           *  N / N = N
           *  N / I = N
           *  I / n = I
           *  I / 0 = I
           *  I / N = N
           *  I / I = N
           *
           * Return a new BigNumber whose value is the value of this BigNumber divided by the value of
           * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.
           */
          P.dividedBy = P.div = function (y, b) {
            return div(this, new BigNumber(y, b), DECIMAL_PLACES, ROUNDING_MODE);
          };


          /*
           * Return a new BigNumber whose value is the integer part of dividing the value of this
           * BigNumber by the value of BigNumber(y, b).
           */
          P.dividedToIntegerBy = P.idiv = function (y, b) {
            return div(this, new BigNumber(y, b), 0, 1);
          };


          /*
           * Return a BigNumber whose value is the value of this BigNumber exponentiated by n.
           *
           * If m is present, return the result modulo m.
           * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.
           * If POW_PRECISION is non-zero and m is not present, round to POW_PRECISION using ROUNDING_MODE.
           *
           * The modular power operation works efficiently when x, n, and m are integers, otherwise it
           * is equivalent to calculating x.exponentiatedBy(n).modulo(m) with a POW_PRECISION of 0.
           *
           * n {number|string|BigNumber} The exponent. An integer.
           * [m] {number|string|BigNumber} The modulus.
           *
           * '[BigNumber Error] Exponent not an integer: {n}'
           */
          P.exponentiatedBy = P.pow = function (n, m) {
            var half, isModExp, k, more, nIsBig, nIsNeg, nIsOdd, y,
              x = this;

            n = new BigNumber(n);

            // Allow NaN and ±Infinity, but not other non-integers.
            if (n.c && !n.isInteger()) {
              throw Error
                (bignumberError + 'Exponent not an integer: ' + n);
            }

            if (m != null) m = new BigNumber(m);

            // Exponent of MAX_SAFE_INTEGER is 15.
            nIsBig = n.e > 14;

            // If x is NaN, ±Infinity, ±0 or ±1, or n is ±Infinity, NaN or ±0.
            if (!x.c || !x.c[0] || x.c[0] == 1 && !x.e && x.c.length == 1 || !n.c || !n.c[0]) {

              // The sign of the result of pow when x is negative depends on the evenness of n.
              // If +n overflows to ±Infinity, the evenness of n would be not be known.
              y = new BigNumber(Math.pow(+x.valueOf(), nIsBig ? 2 - isOdd(n) : +n));
              return m ? y.mod(m) : y;
            }

            nIsNeg = n.s < 0;

            if (m) {

              // x % m returns NaN if abs(m) is zero, or m is NaN.
              if (m.c ? !m.c[0] : !m.s) return new BigNumber(NaN);

              isModExp = !nIsNeg && x.isInteger() && m.isInteger();

              if (isModExp) x = x.mod(m);

              // Overflow to ±Infinity: >=2**1e10 or >=1.0000024**1e15.
              // Underflow to ±0: <=0.79**1e10 or <=0.9999975**1e15.
            } else if (n.e > 9 && (x.e > 0 || x.e < -1 || (x.e == 0
              // [1, 240000000]
              ? x.c[0] > 1 || nIsBig && x.c[1] >= 24e7
              // [80000000000000]  [99999750000000]
              : x.c[0] < 8e13 || nIsBig && x.c[0] <= 9999975e7))) {

              // If x is negative and n is odd, k = -0, else k = 0.
              k = x.s < 0 && isOdd(n) ? -0 : 0;

              // If x >= 1, k = ±Infinity.
              if (x.e > -1) k = 1 / k;

              // If n is negative return ±0, else return ±Infinity.
              return new BigNumber(nIsNeg ? 1 / k : k);

            } else if (POW_PRECISION) {

              // Truncating each coefficient array to a length of k after each multiplication
              // equates to truncating significant digits to POW_PRECISION + [28, 41],
              // i.e. there will be a minimum of 28 guard digits retained.
              k = mathceil(POW_PRECISION / LOG_BASE + 2);
            }

            if (nIsBig) {
              half = new BigNumber(0.5);
              nIsOdd = isOdd(n);
            } else {
              nIsOdd = n % 2;
            }

            if (nIsNeg) n.s = 1;

            y = new BigNumber(ONE);

            // Performs 54 loop iterations for n of 9007199254740991.
            for (; ;) {

              if (nIsOdd) {
                y = y.times(x);
                if (!y.c) break;

                if (k) {
                  if (y.c.length > k) y.c.length = k;
                } else if (isModExp) {
                  y = y.mod(m);    //y = y.minus(div(y, m, 0, MODULO_MODE).times(m));
                }
              }

              if (nIsBig) {
                n = n.times(half);
                round(n, n.e + 1, 1);
                if (!n.c[0]) break;
                nIsBig = n.e > 14;
                nIsOdd = isOdd(n);
              } else {
                n = mathfloor(n / 2);
                if (!n) break;
                nIsOdd = n % 2;
              }

              x = x.times(x);

              if (k) {
                if (x.c && x.c.length > k) x.c.length = k;
              } else if (isModExp) {
                x = x.mod(m);    //x = x.minus(div(x, m, 0, MODULO_MODE).times(m));
              }
            }

            if (isModExp) return y;
            if (nIsNeg) y = ONE.div(y);

            return m ? y.mod(m) : k ? round(y, POW_PRECISION, ROUNDING_MODE, more) : y;
          };


          /*
           * Return a new BigNumber whose value is the value of this BigNumber rounded to an integer
           * using rounding mode rm, or ROUNDING_MODE if rm is omitted.
           *
           * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
           *
           * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {rm}'
           */
          P.integerValue = function (rm) {
            var n = new BigNumber(this);
            if (rm == null) rm = ROUNDING_MODE;
            else intCheck(rm, 0, 8);
            return round(n, n.e + 1, rm);
          };


          /*
           * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),
           * otherwise return false.
           */
          P.isEqualTo = P.eq = function (y, b) {
            return compare(this, new BigNumber(y, b)) === 0;
          };


          /*
           * Return true if the value of this BigNumber is a finite number, otherwise return false.
           */
          P.isFinite = function () {
            return !!this.c;
          };


          /*
           * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),
           * otherwise return false.
           */
          P.isGreaterThan = P.gt = function (y, b) {
            return compare(this, new BigNumber(y, b)) > 0;
          };


          /*
           * Return true if the value of this BigNumber is greater than or equal to the value of
           * BigNumber(y, b), otherwise return false.
           */
          P.isGreaterThanOrEqualTo = P.gte = function (y, b) {
            return (b = compare(this, new BigNumber(y, b))) === 1 || b === 0;

          };


          /*
           * Return true if the value of this BigNumber is an integer, otherwise return false.
           */
          P.isInteger = function () {
            return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;
          };


          /*
           * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),
           * otherwise return false.
           */
          P.isLessThan = P.lt = function (y, b) {
            return compare(this, new BigNumber(y, b)) < 0;
          };


          /*
           * Return true if the value of this BigNumber is less than or equal to the value of
           * BigNumber(y, b), otherwise return false.
           */
          P.isLessThanOrEqualTo = P.lte = function (y, b) {
            return (b = compare(this, new BigNumber(y, b))) === -1 || b === 0;
          };


          /*
           * Return true if the value of this BigNumber is NaN, otherwise return false.
           */
          P.isNaN = function () {
            return !this.s;
          };


          /*
           * Return true if the value of this BigNumber is negative, otherwise return false.
           */
          P.isNegative = function () {
            return this.s < 0;
          };


          /*
           * Return true if the value of this BigNumber is positive, otherwise return false.
           */
          P.isPositive = function () {
            return this.s > 0;
          };


          /*
           * Return true if the value of this BigNumber is 0 or -0, otherwise return false.
           */
          P.isZero = function () {
            return !!this.c && this.c[0] == 0;
          };


          /*
           *  n - 0 = n
           *  n - N = N
           *  n - I = -I
           *  0 - n = -n
           *  0 - 0 = 0
           *  0 - N = N
           *  0 - I = -I
           *  N - n = N
           *  N - 0 = N
           *  N - N = N
           *  N - I = N
           *  I - n = I
           *  I - 0 = I
           *  I - N = N
           *  I - I = N
           *
           * Return a new BigNumber whose value is the value of this BigNumber minus the value of
           * BigNumber(y, b).
           */
          P.minus = function (y, b) {
            var i, j, t, xLTy,
              x = this,
              a = x.s;

            y = new BigNumber(y, b);
            b = y.s;

            // Either NaN?
            if (!a || !b) return new BigNumber(NaN);

            // Signs differ?
            if (a != b) {
              y.s = -b;
              return x.plus(y);
            }

            var xe = x.e / LOG_BASE,
              ye = y.e / LOG_BASE,
              xc = x.c,
              yc = y.c;

            if (!xe || !ye) {

              // Either Infinity?
              if (!xc || !yc) return xc ? (y.s = -b, y) : new BigNumber(yc ? x : NaN);

              // Either zero?
              if (!xc[0] || !yc[0]) {

                // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.
                return yc[0] ? (y.s = -b, y) : new BigNumber(xc[0] ? x :

                  // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity
                  ROUNDING_MODE == 3 ? -0 : 0);
              }
            }

            xe = bitFloor(xe);
            ye = bitFloor(ye);
            xc = xc.slice();

            // Determine which is the bigger number.
            if (a = xe - ye) {

              if (xLTy = a < 0) {
                a = -a;
                t = xc;
              } else {
                ye = xe;
                t = yc;
              }

              t.reverse();

              // Prepend zeros to equalise exponents.
              for (b = a; b--; t.push(0));
              t.reverse();
            } else {

              // Exponents equal. Check digit by digit.
              j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;

              for (a = b = 0; b < j; b++) {

                if (xc[b] != yc[b]) {
                  xLTy = xc[b] < yc[b];
                  break;
                }
              }
            }

            // x < y? Point xc to the array of the bigger number.
            if (xLTy) t = xc, xc = yc, yc = t, y.s = -y.s;

            b = (j = yc.length) - (i = xc.length);

            // Append zeros to xc if shorter.
            // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.
            if (b > 0) for (; b--; xc[i++] = 0);
            b = BASE - 1;

            // Subtract yc from xc.
            for (; j > a;) {

              if (xc[--j] < yc[j]) {
                for (i = j; i && !xc[--i]; xc[i] = b);
                --xc[i];
                xc[j] += BASE;
              }

              xc[j] -= yc[j];
            }

            // Remove leading zeros and adjust exponent accordingly.
            for (; xc[0] == 0; xc.splice(0, 1), --ye);

            // Zero?
            if (!xc[0]) {

              // Following IEEE 754 (2008) 6.3,
              // n - n = +0  but  n - n = -0  when rounding towards -Infinity.
              y.s = ROUNDING_MODE == 3 ? -1 : 1;
              y.c = [y.e = 0];
              return y;
            }

            // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity
            // for finite x and y.
            return normalise(y, xc, ye);
          };


          /*
           *   n % 0 =  N
           *   n % N =  N
           *   n % I =  n
           *   0 % n =  0
           *  -0 % n = -0
           *   0 % 0 =  N
           *   0 % N =  N
           *   0 % I =  0
           *   N % n =  N
           *   N % 0 =  N
           *   N % N =  N
           *   N % I =  N
           *   I % n =  N
           *   I % 0 =  N
           *   I % N =  N
           *   I % I =  N
           *
           * Return a new BigNumber whose value is the value of this BigNumber modulo the value of
           * BigNumber(y, b). The result depends on the value of MODULO_MODE.
           */
          P.modulo = P.mod = function (y, b) {
            var q, s,
              x = this;

            y = new BigNumber(y, b);

            // Return NaN if x is Infinity or NaN, or y is NaN or zero.
            if (!x.c || !y.s || y.c && !y.c[0]) {
              return new BigNumber(NaN);

              // Return x if y is Infinity or x is zero.
            } else if (!y.c || x.c && !x.c[0]) {
              return new BigNumber(x);
            }

            if (MODULO_MODE == 9) {

              // Euclidian division: q = sign(y) * floor(x / abs(y))
              // r = x - qy    where  0 <= r < abs(y)
              s = y.s;
              y.s = 1;
              q = div(x, y, 0, 3);
              y.s = s;
              q.s *= s;
            } else {
              q = div(x, y, 0, MODULO_MODE);
            }

            y = x.minus(q.times(y));

            // To match JavaScript %, ensure sign of zero is sign of dividend.
            if (!y.c[0] && MODULO_MODE == 1) y.s = x.s;

            return y;
          };


          /*
           *  n * 0 = 0
           *  n * N = N
           *  n * I = I
           *  0 * n = 0
           *  0 * 0 = 0
           *  0 * N = N
           *  0 * I = N
           *  N * n = N
           *  N * 0 = N
           *  N * N = N
           *  N * I = N
           *  I * n = I
           *  I * 0 = N
           *  I * N = N
           *  I * I = I
           *
           * Return a new BigNumber whose value is the value of this BigNumber multiplied by the value
           * of BigNumber(y, b).
           */
          P.multipliedBy = P.times = function (y, b) {
            var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc,
              base, sqrtBase,
              x = this,
              xc = x.c,
              yc = (y = new BigNumber(y, b)).c;

            // Either NaN, ±Infinity or ±0?
            if (!xc || !yc || !xc[0] || !yc[0]) {

              // Return NaN if either is NaN, or one is 0 and the other is Infinity.
              if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {
                y.c = y.e = y.s = null;
              } else {
                y.s *= x.s;

                // Return ±Infinity if either is ±Infinity.
                if (!xc || !yc) {
                  y.c = y.e = null;

                  // Return ±0 if either is ±0.
                } else {
                  y.c = [0];
                  y.e = 0;
                }
              }

              return y;
            }

            e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);
            y.s *= x.s;
            xcL = xc.length;
            ycL = yc.length;

            // Ensure xc points to longer array and xcL to its length.
            if (xcL < ycL) zc = xc, xc = yc, yc = zc, i = xcL, xcL = ycL, ycL = i;

            // Initialise the result array with zeros.
            for (i = xcL + ycL, zc = []; i--; zc.push(0));

            base = BASE;
            sqrtBase = SQRT_BASE;

            for (i = ycL; --i >= 0;) {
              c = 0;
              ylo = yc[i] % sqrtBase;
              yhi = yc[i] / sqrtBase | 0;

              for (k = xcL, j = i + k; j > i;) {
                xlo = xc[--k] % sqrtBase;
                xhi = xc[k] / sqrtBase | 0;
                m = yhi * xlo + xhi * ylo;
                xlo = ylo * xlo + ((m % sqrtBase) * sqrtBase) + zc[j] + c;
                c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;
                zc[j--] = xlo % base;
              }

              zc[j] = c;
            }

            if (c) {
              ++e;
            } else {
              zc.splice(0, 1);
            }

            return normalise(y, zc, e);
          };


          /*
           * Return a new BigNumber whose value is the value of this BigNumber negated,
           * i.e. multiplied by -1.
           */
          P.negated = function () {
            var x = new BigNumber(this);
            x.s = -x.s || null;
            return x;
          };


          /*
           *  n + 0 = n
           *  n + N = N
           *  n + I = I
           *  0 + n = n
           *  0 + 0 = 0
           *  0 + N = N
           *  0 + I = I
           *  N + n = N
           *  N + 0 = N
           *  N + N = N
           *  N + I = N
           *  I + n = I
           *  I + 0 = I
           *  I + N = N
           *  I + I = I
           *
           * Return a new BigNumber whose value is the value of this BigNumber plus the value of
           * BigNumber(y, b).
           */
          P.plus = function (y, b) {
            var t,
              x = this,
              a = x.s;

            y = new BigNumber(y, b);
            b = y.s;

            // Either NaN?
            if (!a || !b) return new BigNumber(NaN);

            // Signs differ?
            if (a != b) {
              y.s = -b;
              return x.minus(y);
            }

            var xe = x.e / LOG_BASE,
              ye = y.e / LOG_BASE,
              xc = x.c,
              yc = y.c;

            if (!xe || !ye) {

              // Return ±Infinity if either ±Infinity.
              if (!xc || !yc) return new BigNumber(a / 0);

              // Either zero?
              // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.
              if (!xc[0] || !yc[0]) return yc[0] ? y : new BigNumber(xc[0] ? x : a * 0);
            }

            xe = bitFloor(xe);
            ye = bitFloor(ye);
            xc = xc.slice();

            // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.
            if (a = xe - ye) {
              if (a > 0) {
                ye = xe;
                t = yc;
              } else {
                a = -a;
                t = xc;
              }

              t.reverse();
              for (; a--; t.push(0));
              t.reverse();
            }

            a = xc.length;
            b = yc.length;

            // Point xc to the longer array, and b to the shorter length.
            if (a - b < 0) t = yc, yc = xc, xc = t, b = a;

            // Only start adding at yc.length - 1 as the further digits of xc can be ignored.
            for (a = 0; b;) {
              a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;
              xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;
            }

            if (a) {
              xc = [a].concat(xc);
              ++ye;
            }

            // No need to check for zero, as +x + +y != 0 && -x + -y != 0
            // ye = MAX_EXP + 1 possible
            return normalise(y, xc, ye);
          };


          /*
           * If sd is undefined or null or true or false, return the number of significant digits of
           * the value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.
           * If sd is true include integer-part trailing zeros in the count.
           *
           * Otherwise, if sd is a number, return a new BigNumber whose value is the value of this
           * BigNumber rounded to a maximum of sd significant digits using rounding mode rm, or
           * ROUNDING_MODE if rm is omitted.
           *
           * sd {number|boolean} number: significant digits: integer, 1 to MAX inclusive.
           *                     boolean: whether to count integer-part trailing zeros: true or false.
           * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
           *
           * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'
           */
          P.precision = P.sd = function (sd, rm) {
            var c, n, v,
              x = this;

            if (sd != null && sd !== !!sd) {
              intCheck(sd, 1, MAX);
              if (rm == null) rm = ROUNDING_MODE;
              else intCheck(rm, 0, 8);

              return round(new BigNumber(x), sd, rm);
            }

            if (!(c = x.c)) return null;
            v = c.length - 1;
            n = v * LOG_BASE + 1;

            if (v = c[v]) {

              // Subtract the number of trailing zeros of the last element.
              for (; v % 10 == 0; v /= 10, n--);

              // Add the number of digits of the first element.
              for (v = c[0]; v >= 10; v /= 10, n++);
            }

            if (sd && x.e + 1 > n) n = x.e + 1;

            return n;
          };


          /*
           * Return a new BigNumber whose value is the value of this BigNumber shifted by k places
           * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.
           *
           * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.
           *
           * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {k}'
           */
          P.shiftedBy = function (k) {
            intCheck(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);
            return this.times('1e' + k);
          };


          /*
           *  sqrt(-n) =  N
           *  sqrt(N) =  N
           *  sqrt(-I) =  N
           *  sqrt(I) =  I
           *  sqrt(0) =  0
           *  sqrt(-0) = -0
           *
           * Return a new BigNumber whose value is the square root of the value of this BigNumber,
           * rounded according to DECIMAL_PLACES and ROUNDING_MODE.
           */
          P.squareRoot = P.sqrt = function () {
            var m, n, r, rep, t,
              x = this,
              c = x.c,
              s = x.s,
              e = x.e,
              dp = DECIMAL_PLACES + 4,
              half = new BigNumber('0.5');

            // Negative/NaN/Infinity/zero?
            if (s !== 1 || !c || !c[0]) {
              return new BigNumber(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);
            }

            // Initial estimate.
            s = Math.sqrt(+x);

            // Math.sqrt underflow/overflow?
            // Pass x to Math.sqrt as integer, then adjust the exponent of the result.
            if (s == 0 || s == 1 / 0) {
              n = coeffToString(c);
              if ((n.length + e) % 2 == 0) n += '0';
              s = Math.sqrt(n);
              e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);

              if (s == 1 / 0) {
                n = '1e' + e;
              } else {
                n = s.toExponential();
                n = n.slice(0, n.indexOf('e') + 1) + e;
              }

              r = new BigNumber(n);
            } else {
              r = new BigNumber(s + '');
            }

            // Check for zero.
            // r could be zero if MIN_EXP is changed after the this value was created.
            // This would cause a division by zero (x/t) and hence Infinity below, which would cause
            // coeffToString to throw.
            if (r.c[0]) {
              e = r.e;
              s = e + dp;
              if (s < 3) s = 0;

              // Newton-Raphson iteration.
              for (; ;) {
                t = r;
                r = half.times(t.plus(div(x, t, dp, 1)));

                if (coeffToString(t.c).slice(0, s) === (n =
                  coeffToString(r.c)).slice(0, s)) {

                  // The exponent of r may here be one less than the final result exponent,
                  // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits
                  // are indexed correctly.
                  if (r.e < e)--s;
                  n = n.slice(s - 3, s + 1);

                  // The 4th rounding digit may be in error by -1 so if the 4 rounding digits
                  // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the
                  // iteration.
                  if (n == '9999' || !rep && n == '4999') {

                    // On the first iteration only, check to see if rounding up gives the
                    // exact result as the nines may infinitely repeat.
                    if (!rep) {
                      round(t, t.e + DECIMAL_PLACES + 2, 0);

                      if (t.times(t).eq(x)) {
                        r = t;
                        break;
                      }
                    }

                    dp += 4;
                    s += 4;
                    rep = 1;
                  } else {

                    // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact
                    // result. If not, then there are further digits and m will be truthy.
                    if (!+n || !+n.slice(1) && n.charAt(0) == '5') {

                      // Truncate to the first rounding digit.
                      round(r, r.e + DECIMAL_PLACES + 2, 1);
                      m = !r.times(r).eq(x);
                    }

                    break;
                  }
                }
              }
            }

            return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);
          };


          /*
           * Return a string representing the value of this BigNumber in exponential notation and
           * rounded using ROUNDING_MODE to dp fixed decimal places.
           *
           * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
           * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
           *
           * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'
           */
          P.toExponential = function (dp, rm) {
            if (dp != null) {
              intCheck(dp, 0, MAX);
              dp++;
            }
            return format(this, dp, rm, 1);
          };


          /*
           * Return a string representing the value of this BigNumber in fixed-point notation rounding
           * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.
           *
           * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',
           * but e.g. (-0.00001).toFixed(0) is '-0'.
           *
           * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
           * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
           *
           * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'
           */
          P.toFixed = function (dp, rm) {
            if (dp != null) {
              intCheck(dp, 0, MAX);
              dp = dp + this.e + 1;
            }
            return format(this, dp, rm);
          };


          /*
           * Return a string representing the value of this BigNumber in fixed-point notation rounded
           * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties
           * of the FORMAT object (see BigNumber.set).
           *
           * FORMAT = {
           *      decimalSeparator : '.',
           *      groupSeparator : ',',
           *      groupSize : 3,
           *      secondaryGroupSize : 0,
           *      fractionGroupSeparator : '\xA0',    // non-breaking space
           *      fractionGroupSize : 0
           * };
           *
           * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
           * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
           *
           * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'
           */
          P.toFormat = function (dp, rm) {
            var str = this.toFixed(dp, rm);

            if (this.c) {
              var i,
                arr = str.split('.'),
                g1 = +FORMAT.groupSize,
                g2 = +FORMAT.secondaryGroupSize,
                groupSeparator = FORMAT.groupSeparator,
                intPart = arr[0],
                fractionPart = arr[1],
                isNeg = this.s < 0,
                intDigits = isNeg ? intPart.slice(1) : intPart,
                len = intDigits.length;

              if (g2) i = g1, g1 = g2, g2 = i, len -= i;

              if (g1 > 0 && len > 0) {
                i = len % g1 || g1;
                intPart = intDigits.substr(0, i);

                for (; i < len; i += g1) {
                  intPart += groupSeparator + intDigits.substr(i, g1);
                }

                if (g2 > 0) intPart += groupSeparator + intDigits.slice(i);
                if (isNeg) intPart = '-' + intPart;
              }

              str = fractionPart
                ? intPart + FORMAT.decimalSeparator + ((g2 = +FORMAT.fractionGroupSize)
                  ? fractionPart.replace(new RegExp('\\d{' + g2 + '}\\B', 'g'),
                    '$&' + FORMAT.fractionGroupSeparator)
                  : fractionPart)
                : intPart;
            }

            return str;
          };


          /*
           * Return a string array representing the value of this BigNumber as a simple fraction with
           * an integer numerator and an integer denominator. The denominator will be a positive
           * non-zero value less than or equal to the specified maximum denominator. If a maximum
           * denominator is not specified, the denominator will be the lowest value necessary to
           * represent the number exactly.
           *
           * [md] {number|string|BigNumber} Integer >= 1, or Infinity. The maximum denominator.
           *
           * '[BigNumber Error] Argument {not an integer|out of range} : {md}'
           */
          P.toFraction = function (md) {
            var arr, d, d0, d1, d2, e, exp, n, n0, n1, q, s,
              x = this,
              xc = x.c;

            if (md != null) {
              n = new BigNumber(md);

              // Throw if md is less than one or is not an integer, unless it is Infinity.
              if (!n.isInteger() && (n.c || n.s !== 1) || n.lt(ONE)) {
                throw Error
                  (bignumberError + 'Argument ' +
                  (n.isInteger() ? 'out of range: ' : 'not an integer: ') + md);
              }
            }

            if (!xc) return x.toString();

            d = new BigNumber(ONE);
            n1 = d0 = new BigNumber(ONE);
            d1 = n0 = new BigNumber(ONE);
            s = coeffToString(xc);

            // Determine initial denominator.
            // d is a power of 10 and the minimum max denominator that specifies the value exactly.
            e = d.e = s.length - x.e - 1;
            d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];
            md = !md || n.comparedTo(d) > 0 ? (e > 0 ? d : n1) : n;

            exp = MAX_EXP;
            MAX_EXP = 1 / 0;
            n = new BigNumber(s);

            // n0 = d1 = 0
            n0.c[0] = 0;

            for (; ;) {
              q = div(n, d, 0, 1);
              d2 = d0.plus(q.times(d1));
              if (d2.comparedTo(md) == 1) break;
              d0 = d1;
              d1 = d2;
              n1 = n0.plus(q.times(d2 = n1));
              n0 = d2;
              d = n.minus(q.times(d2 = d));
              n = d2;
            }

            d2 = div(md.minus(d0), d1, 0, 1);
            n0 = n0.plus(d2.times(n1));
            d0 = d0.plus(d2.times(d1));
            n0.s = n1.s = x.s;
            e *= 2;

            // Determine which fraction is closer to x, n0/d0 or n1/d1
            arr = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().comparedTo(
              div(n0, d0, e, ROUNDING_MODE).minus(x).abs()) < 1
              ? [n1.toString(), d1.toString()]
              : [n0.toString(), d0.toString()];

            MAX_EXP = exp;
            return arr;
          };


          /*
           * Return the value of this BigNumber converted to a number primitive.
           */
          P.toNumber = function () {
            return +this;
          };


          /*
           * Return a string representing the value of this BigNumber rounded to sd significant digits
           * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits
           * necessary to represent the integer part of the value in fixed-point notation, then use
           * exponential notation.
           *
           * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.
           * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
           *
           * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'
           */
          P.toPrecision = function (sd, rm) {
            if (sd != null) intCheck(sd, 1, MAX);
            return format(this, sd, rm, 2);
          };


          /*
           * Return a string representing the value of this BigNumber in base b, or base 10 if b is
           * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and
           * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent
           * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than
           * TO_EXP_NEG, return exponential notation.
           *
           * [b] {number} Integer, 2 to ALPHABET.length inclusive.
           *
           * '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'
           */
          P.toString = function (b) {
            var str,
              n = this,
              s = n.s,
              e = n.e;

            // Infinity or NaN?
            if (e === null) {

              if (s) {
                str = 'Infinity';
                if (s < 0) str = '-' + str;
              } else {
                str = 'NaN';
              }
            } else {
              str = coeffToString(n.c);

              if (b == null) {
                str = e <= TO_EXP_NEG || e >= TO_EXP_POS
                  ? toExponential(str, e)
                  : toFixedPoint(str, e, '0');
              } else {
                intCheck(b, 2, ALPHABET.length, 'Base');
                str = convertBase(toFixedPoint(str, e, '0'), 10, b, s, true);
              }

              if (s < 0 && n.c[0]) str = '-' + str;
            }

            return str;
          };


          /*
           * Return as toString, but do not accept a base argument, and include the minus sign for
           * negative zero.
           */
          P.valueOf = P.toJSON = function () {
            var str,
              n = this,
              e = n.e;

            if (e === null) return n.toString();

            str = coeffToString(n.c);

            str = e <= TO_EXP_NEG || e >= TO_EXP_POS
              ? toExponential(str, e)
              : toFixedPoint(str, e, '0');

            return n.s < 0 ? '-' + str : str;
          };


          P._isBigNumber = true;

          if (configObject != null) BigNumber.set(configObject);

          return BigNumber;
        }


        // PRIVATE HELPER FUNCTIONS


        function bitFloor(n) {
          var i = n | 0;
          return n > 0 || n === i ? i : i - 1;
        }


        // Return a coefficient array as a string of base 10 digits.
        function coeffToString(a) {
          var s, z,
            i = 1,
            j = a.length,
            r = a[0] + '';

          for (; i < j;) {
            s = a[i++] + '';
            z = LOG_BASE - s.length;
            for (; z--; s = '0' + s);
            r += s;
          }

          // Determine trailing zeros.
          for (j = r.length; r.charCodeAt(--j) === 48;);
          return r.slice(0, j + 1 || 1);
        }


        // Compare the value of BigNumbers x and y.
        function compare(x, y) {
          var a, b,
            xc = x.c,
            yc = y.c,
            i = x.s,
            j = y.s,
            k = x.e,
            l = y.e;

          // Either NaN?
          if (!i || !j) return null;

          a = xc && !xc[0];
          b = yc && !yc[0];

          // Either zero?
          if (a || b) return a ? b ? 0 : -j : i;

          // Signs differ?
          if (i != j) return i;

          a = i < 0;
          b = k == l;

          // Either Infinity?
          if (!xc || !yc) return b ? 0 : !xc ^ a ? 1 : -1;

          // Compare exponents.
          if (!b) return k > l ^ a ? 1 : -1;

          j = (k = xc.length) < (l = yc.length) ? k : l;

          // Compare digit by digit.
          for (i = 0; i < j; i++) if (xc[i] != yc[i]) return xc[i] > yc[i] ^ a ? 1 : -1;

          // Compare lengths.
          return k == l ? 0 : k > l ^ a ? 1 : -1;
        }


        /*
         * Check that n is a primitive number, an integer, and in range, otherwise throw.
         */
        function intCheck(n, min, max, name) {
          if (n < min || n > max || n !== (n < 0 ? mathceil(n) : mathfloor(n))) {
            throw Error
              (bignumberError + (name || 'Argument') + (typeof n == 'number'
                ? n < min || n > max ? ' out of range: ' : ' not an integer: '
                : ' not a primitive number: ') + n);
          }
        }


        function isArray(obj) {
          return Object.prototype.toString.call(obj) == '[object Array]';
        }


        // Assumes finite n.
        function isOdd(n) {
          var k = n.c.length - 1;
          return bitFloor(n.e / LOG_BASE) == k && n.c[k] % 2 != 0;
        }


        function toExponential(str, e) {
          return (str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str) +
            (e < 0 ? 'e' : 'e+') + e;
        }


        function toFixedPoint(str, e, z) {
          var len, zs;

          // Negative exponent?
          if (e < 0) {

            // Prepend zeros.
            for (zs = z + '.'; ++e; zs += z);
            str = zs + str;

            // Positive exponent
          } else {
            len = str.length;

            // Append zeros.
            if (++e > len) {
              for (zs = z, e -= len; --e; zs += z);
              str += zs;
            } else if (e < len) {
              str = str.slice(0, e) + '.' + str.slice(e);
            }
          }

          return str;
        }


        // EXPORT


        BigNumber = clone();
        BigNumber['default'] = BigNumber.BigNumber = BigNumber;

        // AMD.
        if (true) {
          !(__WEBPACK_AMD_DEFINE_RESULT__ = (function () { return BigNumber; }).call(exports, __webpack_require__, exports, module),
            __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

          // Node.js and other environments that support module.exports.
        } else { }
      })(this);


      /***/
    }),

/***/ "../bs58/index.js":
/*!************************!*\
  !*** ../bs58/index.js ***!
  \************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

      var basex = __webpack_require__(/*! base-x */ "../base-x/index.js")
      var ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'

      module.exports = basex(ALPHABET)


      /***/
    }),

/***/ "../eth-lib/lib/hash.js":
/*!******************************!*\
  !*** ../eth-lib/lib/hash.js ***!
  \******************************/
/*! no static exports found */
/***/ (function (module, exports) {

      // This was ported from https://github.com/emn178/js-sha3, with some minor
      // modifications and pruning. It is licensed under MIT:
      //
      // Copyright 2015-2016 Chen, Yi-Cyuan
      //  
      // Permission is hereby granted, free of charge, to any person obtaining
      // a copy of this software and associated documentation files (the
      // "Software"), to deal in the Software without restriction, including
      // without limitation the rights to use, copy, modify, merge, publish,
      // distribute, sublicense, and/or sell copies of the Software, and to
      // permit persons to whom the Software is furnished to do so, subject to
      // the following conditions:
      // 
      // The above copyright notice and this permission notice shall be
      // included in all copies or substantial portions of the Software.
      // 
      // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
      // EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
      // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
      // NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
      // LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
      // OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
      // WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

      var HEX_CHARS = '0123456789abcdef'.split('');
      var KECCAK_PADDING = [1, 256, 65536, 16777216];
      var SHIFT = [0, 8, 16, 24];
      var RC = [1, 0, 32898, 0, 32906, 2147483648, 2147516416, 2147483648, 32907, 0, 2147483649, 0, 2147516545, 2147483648, 32777, 2147483648, 138, 0, 136, 0, 2147516425, 0, 2147483658, 0, 2147516555, 0, 139, 2147483648, 32905, 2147483648, 32771, 2147483648, 32770, 2147483648, 128, 2147483648, 32778, 0, 2147483658, 2147483648, 2147516545, 2147483648, 32896, 2147483648, 2147483649, 0, 2147516424, 2147483648];

      var Keccak = function Keccak(bits) {
        return {
          blocks: [],
          reset: true,
          block: 0,
          start: 0,
          blockCount: 1600 - (bits << 1) >> 5,
          outputBlocks: bits >> 5,
          s: function (s) {
            return [].concat(s, s, s, s, s);
          } ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
        };
      };

      var update = function update(state, message) {
        var length = message.length,
          blocks = state.blocks,
          byteCount = state.blockCount << 2,
          blockCount = state.blockCount,
          outputBlocks = state.outputBlocks,
          s = state.s,
          index = 0,
          i,
          code;

        // update
        while (index < length) {
          if (state.reset) {
            state.reset = false;
            blocks[0] = state.block;
            for (i = 1; i < blockCount + 1; ++i) {
              blocks[i] = 0;
            }
          }
          if (typeof message !== "string") {
            for (i = state.start; index < length && i < byteCount; ++index) {
              blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];
            }
          } else {
            for (i = state.start; index < length && i < byteCount; ++index) {
              code = message.charCodeAt(index);
              if (code < 0x80) {
                blocks[i >> 2] |= code << SHIFT[i++ & 3];
              } else if (code < 0x800) {
                blocks[i >> 2] |= (0xc0 | code >> 6) << SHIFT[i++ & 3];
                blocks[i >> 2] |= (0x80 | code & 0x3f) << SHIFT[i++ & 3];
              } else if (code < 0xd800 || code >= 0xe000) {
                blocks[i >> 2] |= (0xe0 | code >> 12) << SHIFT[i++ & 3];
                blocks[i >> 2] |= (0x80 | code >> 6 & 0x3f) << SHIFT[i++ & 3];
                blocks[i >> 2] |= (0x80 | code & 0x3f) << SHIFT[i++ & 3];
              } else {
                code = 0x10000 + ((code & 0x3ff) << 10 | message.charCodeAt(++index) & 0x3ff);
                blocks[i >> 2] |= (0xf0 | code >> 18) << SHIFT[i++ & 3];
                blocks[i >> 2] |= (0x80 | code >> 12 & 0x3f) << SHIFT[i++ & 3];
                blocks[i >> 2] |= (0x80 | code >> 6 & 0x3f) << SHIFT[i++ & 3];
                blocks[i >> 2] |= (0x80 | code & 0x3f) << SHIFT[i++ & 3];
              }
            }
          }
          state.lastByteIndex = i;
          if (i >= byteCount) {
            state.start = i - byteCount;
            state.block = blocks[blockCount];
            for (i = 0; i < blockCount; ++i) {
              s[i] ^= blocks[i];
            }
            f(s);
            state.reset = true;
          } else {
            state.start = i;
          }
        }

        // finalize
        i = state.lastByteIndex;
        blocks[i >> 2] |= KECCAK_PADDING[i & 3];
        if (state.lastByteIndex === byteCount) {
          blocks[0] = blocks[blockCount];
          for (i = 1; i < blockCount + 1; ++i) {
            blocks[i] = 0;
          }
        }
        blocks[blockCount - 1] |= 0x80000000;
        for (i = 0; i < blockCount; ++i) {
          s[i] ^= blocks[i];
        }
        f(s);

        // toString
        var hex = '',
          i = 0,
          j = 0,
          block;
        while (j < outputBlocks) {
          for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {
            block = s[i];
            hex += HEX_CHARS[block >> 4 & 0x0F] + HEX_CHARS[block & 0x0F] + HEX_CHARS[block >> 12 & 0x0F] + HEX_CHARS[block >> 8 & 0x0F] + HEX_CHARS[block >> 20 & 0x0F] + HEX_CHARS[block >> 16 & 0x0F] + HEX_CHARS[block >> 28 & 0x0F] + HEX_CHARS[block >> 24 & 0x0F];
          }
          if (j % blockCount === 0) {
            f(s);
            i = 0;
          }
        }
        return "0x" + hex;
      };

      var f = function f(s) {
        var h, l, n, c0, c1, c2, c3, c4, c5, c6, c7, c8, c9, b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, b10, b11, b12, b13, b14, b15, b16, b17, b18, b19, b20, b21, b22, b23, b24, b25, b26, b27, b28, b29, b30, b31, b32, b33, b34, b35, b36, b37, b38, b39, b40, b41, b42, b43, b44, b45, b46, b47, b48, b49;

        for (n = 0; n < 48; n += 2) {
          c0 = s[0] ^ s[10] ^ s[20] ^ s[30] ^ s[40];
          c1 = s[1] ^ s[11] ^ s[21] ^ s[31] ^ s[41];
          c2 = s[2] ^ s[12] ^ s[22] ^ s[32] ^ s[42];
          c3 = s[3] ^ s[13] ^ s[23] ^ s[33] ^ s[43];
          c4 = s[4] ^ s[14] ^ s[24] ^ s[34] ^ s[44];
          c5 = s[5] ^ s[15] ^ s[25] ^ s[35] ^ s[45];
          c6 = s[6] ^ s[16] ^ s[26] ^ s[36] ^ s[46];
          c7 = s[7] ^ s[17] ^ s[27] ^ s[37] ^ s[47];
          c8 = s[8] ^ s[18] ^ s[28] ^ s[38] ^ s[48];
          c9 = s[9] ^ s[19] ^ s[29] ^ s[39] ^ s[49];

          h = c8 ^ (c2 << 1 | c3 >>> 31);
          l = c9 ^ (c3 << 1 | c2 >>> 31);
          s[0] ^= h;
          s[1] ^= l;
          s[10] ^= h;
          s[11] ^= l;
          s[20] ^= h;
          s[21] ^= l;
          s[30] ^= h;
          s[31] ^= l;
          s[40] ^= h;
          s[41] ^= l;
          h = c0 ^ (c4 << 1 | c5 >>> 31);
          l = c1 ^ (c5 << 1 | c4 >>> 31);
          s[2] ^= h;
          s[3] ^= l;
          s[12] ^= h;
          s[13] ^= l;
          s[22] ^= h;
          s[23] ^= l;
          s[32] ^= h;
          s[33] ^= l;
          s[42] ^= h;
          s[43] ^= l;
          h = c2 ^ (c6 << 1 | c7 >>> 31);
          l = c3 ^ (c7 << 1 | c6 >>> 31);
          s[4] ^= h;
          s[5] ^= l;
          s[14] ^= h;
          s[15] ^= l;
          s[24] ^= h;
          s[25] ^= l;
          s[34] ^= h;
          s[35] ^= l;
          s[44] ^= h;
          s[45] ^= l;
          h = c4 ^ (c8 << 1 | c9 >>> 31);
          l = c5 ^ (c9 << 1 | c8 >>> 31);
          s[6] ^= h;
          s[7] ^= l;
          s[16] ^= h;
          s[17] ^= l;
          s[26] ^= h;
          s[27] ^= l;
          s[36] ^= h;
          s[37] ^= l;
          s[46] ^= h;
          s[47] ^= l;
          h = c6 ^ (c0 << 1 | c1 >>> 31);
          l = c7 ^ (c1 << 1 | c0 >>> 31);
          s[8] ^= h;
          s[9] ^= l;
          s[18] ^= h;
          s[19] ^= l;
          s[28] ^= h;
          s[29] ^= l;
          s[38] ^= h;
          s[39] ^= l;
          s[48] ^= h;
          s[49] ^= l;

          b0 = s[0];
          b1 = s[1];
          b32 = s[11] << 4 | s[10] >>> 28;
          b33 = s[10] << 4 | s[11] >>> 28;
          b14 = s[20] << 3 | s[21] >>> 29;
          b15 = s[21] << 3 | s[20] >>> 29;
          b46 = s[31] << 9 | s[30] >>> 23;
          b47 = s[30] << 9 | s[31] >>> 23;
          b28 = s[40] << 18 | s[41] >>> 14;
          b29 = s[41] << 18 | s[40] >>> 14;
          b20 = s[2] << 1 | s[3] >>> 31;
          b21 = s[3] << 1 | s[2] >>> 31;
          b2 = s[13] << 12 | s[12] >>> 20;
          b3 = s[12] << 12 | s[13] >>> 20;
          b34 = s[22] << 10 | s[23] >>> 22;
          b35 = s[23] << 10 | s[22] >>> 22;
          b16 = s[33] << 13 | s[32] >>> 19;
          b17 = s[32] << 13 | s[33] >>> 19;
          b48 = s[42] << 2 | s[43] >>> 30;
          b49 = s[43] << 2 | s[42] >>> 30;
          b40 = s[5] << 30 | s[4] >>> 2;
          b41 = s[4] << 30 | s[5] >>> 2;
          b22 = s[14] << 6 | s[15] >>> 26;
          b23 = s[15] << 6 | s[14] >>> 26;
          b4 = s[25] << 11 | s[24] >>> 21;
          b5 = s[24] << 11 | s[25] >>> 21;
          b36 = s[34] << 15 | s[35] >>> 17;
          b37 = s[35] << 15 | s[34] >>> 17;
          b18 = s[45] << 29 | s[44] >>> 3;
          b19 = s[44] << 29 | s[45] >>> 3;
          b10 = s[6] << 28 | s[7] >>> 4;
          b11 = s[7] << 28 | s[6] >>> 4;
          b42 = s[17] << 23 | s[16] >>> 9;
          b43 = s[16] << 23 | s[17] >>> 9;
          b24 = s[26] << 25 | s[27] >>> 7;
          b25 = s[27] << 25 | s[26] >>> 7;
          b6 = s[36] << 21 | s[37] >>> 11;
          b7 = s[37] << 21 | s[36] >>> 11;
          b38 = s[47] << 24 | s[46] >>> 8;
          b39 = s[46] << 24 | s[47] >>> 8;
          b30 = s[8] << 27 | s[9] >>> 5;
          b31 = s[9] << 27 | s[8] >>> 5;
          b12 = s[18] << 20 | s[19] >>> 12;
          b13 = s[19] << 20 | s[18] >>> 12;
          b44 = s[29] << 7 | s[28] >>> 25;
          b45 = s[28] << 7 | s[29] >>> 25;
          b26 = s[38] << 8 | s[39] >>> 24;
          b27 = s[39] << 8 | s[38] >>> 24;
          b8 = s[48] << 14 | s[49] >>> 18;
          b9 = s[49] << 14 | s[48] >>> 18;

          s[0] = b0 ^ ~b2 & b4;
          s[1] = b1 ^ ~b3 & b5;
          s[10] = b10 ^ ~b12 & b14;
          s[11] = b11 ^ ~b13 & b15;
          s[20] = b20 ^ ~b22 & b24;
          s[21] = b21 ^ ~b23 & b25;
          s[30] = b30 ^ ~b32 & b34;
          s[31] = b31 ^ ~b33 & b35;
          s[40] = b40 ^ ~b42 & b44;
          s[41] = b41 ^ ~b43 & b45;
          s[2] = b2 ^ ~b4 & b6;
          s[3] = b3 ^ ~b5 & b7;
          s[12] = b12 ^ ~b14 & b16;
          s[13] = b13 ^ ~b15 & b17;
          s[22] = b22 ^ ~b24 & b26;
          s[23] = b23 ^ ~b25 & b27;
          s[32] = b32 ^ ~b34 & b36;
          s[33] = b33 ^ ~b35 & b37;
          s[42] = b42 ^ ~b44 & b46;
          s[43] = b43 ^ ~b45 & b47;
          s[4] = b4 ^ ~b6 & b8;
          s[5] = b5 ^ ~b7 & b9;
          s[14] = b14 ^ ~b16 & b18;
          s[15] = b15 ^ ~b17 & b19;
          s[24] = b24 ^ ~b26 & b28;
          s[25] = b25 ^ ~b27 & b29;
          s[34] = b34 ^ ~b36 & b38;
          s[35] = b35 ^ ~b37 & b39;
          s[44] = b44 ^ ~b46 & b48;
          s[45] = b45 ^ ~b47 & b49;
          s[6] = b6 ^ ~b8 & b0;
          s[7] = b7 ^ ~b9 & b1;
          s[16] = b16 ^ ~b18 & b10;
          s[17] = b17 ^ ~b19 & b11;
          s[26] = b26 ^ ~b28 & b20;
          s[27] = b27 ^ ~b29 & b21;
          s[36] = b36 ^ ~b38 & b30;
          s[37] = b37 ^ ~b39 & b31;
          s[46] = b46 ^ ~b48 & b40;
          s[47] = b47 ^ ~b49 & b41;
          s[8] = b8 ^ ~b0 & b2;
          s[9] = b9 ^ ~b1 & b3;
          s[18] = b18 ^ ~b10 & b12;
          s[19] = b19 ^ ~b11 & b13;
          s[28] = b28 ^ ~b20 & b22;
          s[29] = b29 ^ ~b21 & b23;
          s[38] = b38 ^ ~b30 & b32;
          s[39] = b39 ^ ~b31 & b33;
          s[48] = b48 ^ ~b40 & b42;
          s[49] = b49 ^ ~b41 & b43;

          s[0] ^= RC[n];
          s[1] ^= RC[n + 1];
        }
      };

      var keccak = function keccak(bits) {
        return function (str) {
          var msg;
          if (str.slice(0, 2) === "0x") {
            msg = [];
            for (var i = 2, l = str.length; i < l; i += 2) {
              msg.push(parseInt(str.slice(i, i + 2), 16));
            }
          } else {
            msg = str;
          }
          return update(Keccak(bits, bits), msg);
        };
      };

      module.exports = {
        keccak256: keccak(256),
        keccak512: keccak(512),
        keccak256s: keccak(256),
        keccak512s: keccak(512)
      };

      /***/
    }),

/***/ "../ethjs-abi/lib/index.js":
/*!*********************************!*\
  !*** ../ethjs-abi/lib/index.js ***!
  \*********************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

      "use strict";
/* WEBPACK VAR INJECTION */(function (Buffer) {

        /* eslint-disable */

        var utils = __webpack_require__(/*! ./utils/index.js */ "../ethjs-abi/lib/utils/index.js");
        var uint256Coder = utils.uint256Coder;
        var coderBoolean = utils.coderBoolean;
        var coderFixedBytes = utils.coderFixedBytes;
        var coderAddress = utils.coderAddress;
        var coderDynamicBytes = utils.coderDynamicBytes;
        var coderString = utils.coderString;
        var coderArray = utils.coderArray;
        var paramTypePart = utils.paramTypePart;
        var getParamCoder = utils.getParamCoder;

        function Result() { }

        function encodeParams(types, values) {
          if (types.length !== values.length) {
            throw new Error('[ethjs-abi] while encoding params, types/values mismatch, Your contract requires ' + types.length + ' types (arguments), and you passed in ' + values.length);
          }

          var parts = [];

          types.forEach(function (type, index) {
            var coder = getParamCoder(type);
            parts.push({ dynamic: coder.dynamic, value: coder.encode(values[index]) });
          });

          function alignSize(size) {
            return parseInt(32 * Math.ceil(size / 32));
          }

          var staticSize = 0,
            dynamicSize = 0;
          parts.forEach(function (part) {
            if (part.dynamic) {
              staticSize += 32;
              dynamicSize += alignSize(part.value.length);
            } else {
              staticSize += alignSize(part.value.length);
            }
          });

          var offset = 0,
            dynamicOffset = staticSize;
          var data = new Buffer(staticSize + dynamicSize);

          parts.forEach(function (part, index) {
            if (part.dynamic) {
              uint256Coder.encode(dynamicOffset).copy(data, offset);
              offset += 32;

              part.value.copy(data, dynamicOffset);
              dynamicOffset += alignSize(part.value.length);
            } else {
              part.value.copy(data, offset);
              offset += alignSize(part.value.length);
            }
          });

          return '0x' + data.toString('hex');
        }

        // decode bytecode data from output names and types
        function decodeParams(names, types, data) {
          var useNumberedParams = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;

          // Names is optional, so shift over all the parameters if not provided
          if (arguments.length < 3) {
            data = types;
            types = names;
            names = [];
          }

          data = utils.hexOrBuffer(data);
          var values = new Result();

          var offset = 0;
          types.forEach(function (type, index) {
            var coder = getParamCoder(type);

            if (coder.dynamic) {
              var dynamicOffset = uint256Coder.decode(data, offset);
              var result = coder.decode(data, dynamicOffset.value.toNumber());
              offset += dynamicOffset.consumed;
            } else {
              var result = coder.decode(data, offset);
              offset += result.consumed;
            }

            if (useNumberedParams) {
              values[index] = result.value;
            }

            if (names[index]) {
              values[names[index]] = result.value;
            }
          });
          return values;
        }

        // create an encoded method signature from an ABI object
        function encodeSignature(method) {
          var signature = method.name + '(' + utils.getKeys(method.inputs, 'type').join(',') + ')';
          var signatureEncoded = '0x' + new Buffer(utils.keccak256(signature), 'hex').slice(0, 4).toString('hex');

          return signatureEncoded;
        }

        // encode method ABI object with values in an array, output bytecode
        function encodeMethod(method, values) {
          var paramsEncoded = encodeParams(utils.getKeys(method.inputs, 'type'), values).substring(2);

          return '' + encodeSignature(method) + paramsEncoded;
        }

        // decode method data bytecode, from method ABI object
        function decodeMethod(method, data) {
          var outputNames = utils.getKeys(method.outputs, 'name', true);
          var outputTypes = utils.getKeys(method.outputs, 'type');

          return decodeParams(outputNames, outputTypes, utils.hexOrBuffer(data));
        }

        // decode method data bytecode, from method ABI object
        function encodeEvent(eventObject, values) {
          return encodeMethod(eventObject, values);
        }

        function eventSignature(eventObject) {
          var signature = eventObject.name + '(' + utils.getKeys(eventObject.inputs, 'type').join(',') + ')';

          return '0x' + utils.keccak256(signature);
        }

        // decode method data bytecode, from method ABI object
        function decodeEvent(eventObject, data, topics) {
          var useNumberedParams = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;

          var nonIndexed = eventObject.inputs.filter(function (input) {
            return !input.indexed;
          });
          var nonIndexedNames = utils.getKeys(nonIndexed, 'name', true);
          var nonIndexedTypes = utils.getKeys(nonIndexed, 'type');
          var event = decodeParams(nonIndexedNames, nonIndexedTypes, utils.hexOrBuffer(data), useNumberedParams);
          var topicOffset = eventObject.anonymous ? 0 : 1;

          eventObject.inputs.filter(function (input) {
            return input.indexed;
          }).map(function (input, i) {
            var topic = new Buffer(topics[i + topicOffset].slice(2), 'hex');
            var coder = getParamCoder(input.type);
            event[input.name] = coder.decode(topic, 0).value;
          });

          event._eventName = eventObject.name;

          return event;
        }

        // Decode a specific log item with a specific event abi
        function decodeLogItem(eventObject, log) {
          var useNumberedParams = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;

          if (eventObject && log.topics[0] === eventSignature(eventObject)) {
            return decodeEvent(eventObject, log.data, log.topics, useNumberedParams);
          }
        }

        // Create a decoder for all events defined in an abi. It returns a function which is called
        // on an array of log entries such as received from getLogs or getTransactionReceipt and parses
        // any matching log entries
        function logDecoder(abi) {
          var useNumberedParams = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

          var eventMap = {};
          abi.filter(function (item) {
            return item.type === 'event';
          }).map(function (item) {
            eventMap[eventSignature(item)] = item;
          });
          return function (logItems) {
            return logItems.map(function (log) {
              return decodeLogItem(eventMap[log.topics[0]], log, useNumberedParams);
            }).filter(function (i) {
              return i;
            });
          };
        }

        module.exports = {
          encodeParams: encodeParams,
          decodeParams: decodeParams,
          encodeMethod: encodeMethod,
          decodeMethod: decodeMethod,
          encodeEvent: encodeEvent,
          decodeEvent: decodeEvent,
          decodeLogItem: decodeLogItem,
          logDecoder: logDecoder,
          eventSignature: eventSignature,
          encodeSignature: encodeSignature
        };
        /* WEBPACK VAR INJECTION */
      }.call(this, __webpack_require__(/*! ./../../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/buffer/index.js */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/buffer/index.js").Buffer))

      /***/
    }),

/***/ "../ethjs-abi/lib/utils/index.js":
/*!***************************************!*\
  !*** ../ethjs-abi/lib/utils/index.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

      "use strict";
/* WEBPACK VAR INJECTION */(function (Buffer) {

        var BN = __webpack_require__(/*! bn.js */ "../ethjs-abi/node_modules/bn.js/lib/bn.js");
        var numberToBN = __webpack_require__(/*! number-to-bn */ "../number-to-bn/src/index.js");
        var keccak256 = __webpack_require__(/*! js-sha3 */ "../js-sha3/src/sha3.js").keccak_256;

        // from ethereumjs-util
        function stripZeros(aInput) {
          var a = aInput; // eslint-disable-line
          var first = a[0]; // eslint-disable-line
          while (a.length > 0 && first.toString() === '0') {
            a = a.slice(1);
            first = a[0];
          }
          return a;
        }

        function bnToBuffer(bnInput) {
          var bn = bnInput; // eslint-disable-line
          var hex = bn.toString(16); // eslint-disable-line
          if (hex.length % 2) {
            hex = '0' + hex;
          }
          return stripZeros(new Buffer(hex, 'hex'));
        }

        function isHexString(value, length) {
          if (typeof value !== 'string' || !value.match(/^0x[0-9A-Fa-f]*$/)) {
            return false;
          }
          if (length && value.length !== 2 + 2 * length) {
            return false;
          }
          return true;
        }

        function hexOrBuffer(valueInput, name) {
          var value = valueInput; // eslint-disable-line
          if (!Buffer.isBuffer(value)) {
            if (!isHexString(value)) {
              var error = new Error(name ? '[ethjs-abi] invalid ' + name : '[ethjs-abi] invalid hex or buffer, must be a prefixed alphanumeric even length hex string');
              error.reason = '[ethjs-abi] invalid hex string, hex must be prefixed and alphanumeric (e.g. 0x023..)';
              error.value = value;
              throw error;
            }

            value = value.substring(2);
            if (value.length % 2) {
              value = '0' + value;
            }
            value = new Buffer(value, 'hex');
          }

          return value;
        }

        function hexlify(value) {
          if (typeof value === 'number') {
            return '0x' + bnToBuffer(new BN(value)).toString('hex');
          } else if (value.mod || value.modulo) {
            return '0x' + bnToBuffer(value).toString('hex');
          } else {
            // eslint-disable-line
            return '0x' + hexOrBuffer(value).toString('hex');
          }
        }

        // getKeys([{a: 1, b: 2}, {a: 3, b: 4}], 'a') => [1, 3]
        function getKeys(params, key, allowEmpty) {
          var result = []; // eslint-disable-line

          if (!Array.isArray(params)) {
            throw new Error('[ethjs-abi] while getting keys, invalid params value ' + JSON.stringify(params));
          }

          for (var i = 0; i < params.length; i++) {
            // eslint-disable-line
            var value = params[i][key]; // eslint-disable-line
            if (allowEmpty && !value) {
              value = '';
            } else if (typeof value !== 'string') {
              throw new Error('[ethjs-abi] while getKeys found invalid ABI data structure, type value not string');
            }
            result.push(value);
          }

          return result;
        }

        function coderNumber(size, signed) {
          return {
            encode: function encodeNumber(valueInput) {
              var value = valueInput; // eslint-disable-line

              if (typeof value === 'object' && value.toString && (value.toTwos || value.dividedToIntegerBy)) {
                value = value.toString(10).split('.')[0];
              }

              if (typeof value === 'string' || typeof value === 'number') {
                value = String(value).split('.')[0];
              }

              value = numberToBN(value);
              value = value.toTwos(size * 8).maskn(size * 8);
              if (signed) {
                value = value.fromTwos(size * 8).toTwos(256);
              }
              return value.toArrayLike(Buffer, 'be', 32);
            },
            decode: function decodeNumber(data, offset) {
              var junkLength = 32 - size; // eslint-disable-line
              var value = new BN(data.slice(offset + junkLength, offset + 32)); // eslint-disable-line
              if (signed) {
                value = value.fromTwos(size * 8);
              } else {
                value = value.maskn(size * 8);
              }
              return {
                consumed: 32,
                value: new BN(value.toString(10))
              };
            }
          };
        }
        var uint256Coder = coderNumber(32, false);

        var coderBoolean = {
          encode: function encodeBoolean(value) {
            return uint256Coder.encode(value ? 1 : 0);
          },
          decode: function decodeBoolean(data, offset) {
            var result = uint256Coder.decode(data, offset); // eslint-disable-line
            return {
              consumed: result.consumed,
              value: !result.value.isZero()
            };
          }
        };

        function coderFixedBytes(length) {
          return {
            encode: function encodeFixedBytes(valueInput) {
              var value = valueInput; // eslint-disable-line
              value = hexOrBuffer(value);

              if (value.length === 32) {
                return value;
              }

              var result = new Buffer(32); // eslint-disable-line
              result.fill(0);
              value.copy(result);
              return result;
            },
            decode: function decodeFixedBytes(data, offset) {
              if (data.length !== 0 && data.length < offset + 32) {
                throw new Error('[ethjs-abi] while decoding fixed bytes, invalid bytes data length: ' + length);
              }

              return {
                consumed: 32,
                value: '0x' + data.slice(offset, offset + length).toString('hex')
              };
            }
          };
        }

        var coderAddress = {
          encode: function encodeAddress(valueInput) {
            var value = valueInput; // eslint-disable-line
            var result = new Buffer(32); // eslint-disable-line
            if (!isHexString(value, 20)) {
              throw new Error('[ethjs-abi] while encoding address, invalid address value, not alphanumeric 20 byte hex string');
            }
            value = hexOrBuffer(value);
            result.fill(0);
            value.copy(result, 12);
            return result;
          },
          decode: function decodeAddress(data, offset) {
            if (data.length === 0) {
              return {
                consumed: 32,
                value: '0x'
              };
            }
            if (data.length !== 0 && data.length < offset + 32) {
              throw new Error('[ethjs-abi] while decoding address data, invalid address data, invalid byte length ' + data.length);
            }
            return {
              consumed: 32,
              value: '0x' + data.slice(offset + 12, offset + 32).toString('hex')
            };
          }
        };

        function encodeDynamicBytesHelper(value) {
          var dataLength = parseInt(32 * Math.ceil(value.length / 32)); // eslint-disable-line
          var padding = new Buffer(dataLength - value.length); // eslint-disable-line
          padding.fill(0);

          return Buffer.concat([uint256Coder.encode(value.length), value, padding]);
        }

        function decodeDynamicBytesHelper(data, offset) {
          if (data.length !== 0 && data.length < offset + 32) {
            throw new Error('[ethjs-abi] while decoding dynamic bytes data, invalid bytes length: ' + data.length + ' should be less than ' + (offset + 32));
          }

          var length = uint256Coder.decode(data, offset).value; // eslint-disable-line
          length = length.toNumber();
          if (data.length !== 0 && data.length < offset + 32 + length) {
            throw new Error('[ethjs-abi] while decoding dynamic bytes data, invalid bytes length: ' + data.length + ' should be less than ' + (offset + 32 + length));
          }

          return {
            consumed: parseInt(32 + 32 * Math.ceil(length / 32), 10),
            value: data.slice(offset + 32, offset + 32 + length)
          };
        }

        var coderDynamicBytes = {
          encode: function encodeDynamicBytes(value) {
            return encodeDynamicBytesHelper(hexOrBuffer(value));
          },
          decode: function decodeDynamicBytes(data, offset) {
            var result = decodeDynamicBytesHelper(data, offset); // eslint-disable-line
            result.value = '0x' + result.value.toString('hex');
            return result;
          },
          dynamic: true
        };

        var coderString = {
          encode: function encodeString(value) {
            return encodeDynamicBytesHelper(new Buffer(value, 'utf8'));
          },
          decode: function decodeString(data, offset) {
            var result = decodeDynamicBytesHelper(data, offset); // eslint-disable-line
            result.value = result.value.toString('utf8');
            return result;
          },
          dynamic: true
        };

        function coderArray(coder, lengthInput) {
          return {
            encode: function encodeArray(value) {
              var result = new Buffer(0); // eslint-disable-line
              var length = lengthInput; // eslint-disable-line

              if (!Array.isArray(value)) {
                throw new Error('[ethjs-abi] while encoding array, invalid array data, not type Object (Array)');
              }

              if (length === -1) {
                length = value.length;
                result = uint256Coder.encode(length);
              }

              if (length !== value.length) {
                throw new Error('[ethjs-abi] while encoding array, size mismatch array length ' + length + ' does not equal ' + value.length);
              }

              value.forEach(function (resultValue) {
                result = Buffer.concat([result, coder.encode(resultValue)]);
              });

              return result;
            },
            decode: function decodeArray(data, offsetInput) {
              var length = lengthInput; // eslint-disable-line
              var offset = offsetInput; // eslint-disable-line
              // @TODO:
              // if (data.length < offset + length * 32) { throw new Error('invalid array'); }

              var consumed = 0; // eslint-disable-line
              var decodeResult; // eslint-disable-line

              if (length === -1) {
                decodeResult = uint256Coder.decode(data, offset);
                length = decodeResult.value.toNumber();
                consumed += decodeResult.consumed;
                offset += decodeResult.consumed;
              }

              var value = []; // eslint-disable-line

              for (var i = 0; i < length; i++) {
                // eslint-disable-line
                var loopResult = coder.decode(data, offset);
                consumed += loopResult.consumed;
                offset += loopResult.consumed;
                value.push(loopResult.value);
              }

              return {
                consumed: consumed,
                value: value
              };
            },
            dynamic: lengthInput === -1
          };
        }

        // Break the type up into [staticType][staticArray]*[dynamicArray]? | [dynamicType] and
        // build the coder up from its parts
        var paramTypePart = new RegExp(/^((u?int|bytes)([0-9]*)|(address|bool|string)|(\[([0-9]*)\]))/);

        function getParamCoder(typeInput) {
          var type = typeInput; // eslint-disable-line
          var coder = null; // eslint-disable-line
          var invalidTypeErrorMessage = '[ethjs-abi] while getting param coder (getParamCoder) type value ' + JSON.stringify(type) + ' is either invalid or unsupported by ethjs-abi.';

          while (type) {
            var part = type.match(paramTypePart); // eslint-disable-line
            if (!part) {
              throw new Error(invalidTypeErrorMessage);
            }
            type = type.substring(part[0].length);

            var prefix = part[2] || part[4] || part[5]; // eslint-disable-line
            switch (prefix) {
              case 'int': case 'uint':
                if (coder) {
                  throw new Error(invalidTypeErrorMessage);
                }
                var intSize = parseInt(part[3] || 256); // eslint-disable-line
                if (intSize === 0 || intSize > 256 || intSize % 8 !== 0) {
                  throw new Error('[ethjs-abi] while getting param coder for type ' + type + ', invalid ' + prefix + '<N> width: ' + type);
                }

                coder = coderNumber(intSize / 8, prefix === 'int');
                break;

              case 'bool':
                if (coder) {
                  throw new Error(invalidTypeErrorMessage);
                }
                coder = coderBoolean;
                break;

              case 'string':
                if (coder) {
                  throw new Error(invalidTypeErrorMessage);
                }
                coder = coderString;
                break;

              case 'bytes':
                if (coder) {
                  throw new Error(invalidTypeErrorMessage);
                }
                if (part[3]) {
                  var size = parseInt(part[3]); // eslint-disable-line
                  if (size === 0 || size > 32) {
                    throw new Error('[ethjs-abi] while getting param coder for prefix bytes, invalid type ' + type + ', size ' + size + ' should be 0 or greater than 32');
                  }
                  coder = coderFixedBytes(size);
                } else {
                  coder = coderDynamicBytes;
                }
                break;

              case 'address':
                if (coder) {
                  throw new Error(invalidTypeErrorMessage);
                }
                coder = coderAddress;
                break;

              case '[]':
                if (!coder || coder.dynamic) {
                  throw new Error(invalidTypeErrorMessage);
                }
                coder = coderArray(coder, -1);
                break;

              // "[0-9+]"
              default:
                if (!coder || coder.dynamic) {
                  throw new Error(invalidTypeErrorMessage);
                }
                var defaultSize = parseInt(part[6]); // eslint-disable-line
                coder = coderArray(coder, defaultSize);
            }
          }

          if (!coder) {
            throw new Error(invalidTypeErrorMessage);
          }
          return coder;
        }

        module.exports = {
          BN: BN,
          bnToBuffer: bnToBuffer,
          isHexString: isHexString,
          hexOrBuffer: hexOrBuffer,
          hexlify: hexlify,
          stripZeros: stripZeros,

          keccak256: keccak256,

          getKeys: getKeys,
          numberToBN: numberToBN,
          coderNumber: coderNumber,
          uint256Coder: uint256Coder,
          coderBoolean: coderBoolean,
          coderFixedBytes: coderFixedBytes,
          coderAddress: coderAddress,
          coderDynamicBytes: coderDynamicBytes,
          coderString: coderString,
          coderArray: coderArray,
          paramTypePart: paramTypePart,
          getParamCoder: getParamCoder
        };
        /* WEBPACK VAR INJECTION */
      }.call(this, __webpack_require__(/*! ./../../../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/buffer/index.js */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/buffer/index.js").Buffer))

      /***/
    }),

/***/ "../ethjs-abi/node_modules/bn.js/lib/bn.js":
/*!*************************************************!*\
  !*** ../ethjs-abi/node_modules/bn.js/lib/bn.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function (module) {
        (function (module, exports) {
          'use strict';

          // Utils
          function assert(val, msg) {
            if (!val) throw new Error(msg || 'Assertion failed');
          }

          // Could use `inherits` module, but don't want to move from single file
          // architecture yet.
          function inherits(ctor, superCtor) {
            ctor.super_ = superCtor;
            var TempCtor = function () { };
            TempCtor.prototype = superCtor.prototype;
            ctor.prototype = new TempCtor();
            ctor.prototype.constructor = ctor;
          }

          // BN

          function BN(number, base, endian) {
            if (BN.isBN(number)) {
              return number;
            }

            this.negative = 0;
            this.words = null;
            this.length = 0;

            // Reduction context
            this.red = null;

            if (number !== null) {
              if (base === 'le' || base === 'be') {
                endian = base;
                base = 10;
              }

              this._init(number || 0, base || 10, endian || 'be');
            }
          }
          if (typeof module === 'object') {
            module.exports = BN;
          } else {
            exports.BN = BN;
          }

          BN.BN = BN;
          BN.wordSize = 26;

          var Buffer;
          try {
            Buffer = __webpack_require__(/*! buffer */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/buffer/index.js").Buffer;
          } catch (e) {
          }

          BN.isBN = function isBN(num) {
            if (num instanceof BN) {
              return true;
            }

            return num !== null && typeof num === 'object' &&
              num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
          };

          BN.max = function max(left, right) {
            if (left.cmp(right) > 0) return left;
            return right;
          };

          BN.min = function min(left, right) {
            if (left.cmp(right) < 0) return left;
            return right;
          };

          BN.prototype._init = function init(number, base, endian) {
            if (typeof number === 'number') {
              return this._initNumber(number, base, endian);
            }

            if (typeof number === 'object') {
              return this._initArray(number, base, endian);
            }

            if (base === 'hex') {
              base = 16;
            }
            assert(base === (base | 0) && base >= 2 && base <= 36);

            number = number.toString().replace(/\s+/g, '');
            var start = 0;
            if (number[0] === '-') {
              start++;
            }

            if (base === 16) {
              this._parseHex(number, start);
            } else {
              this._parseBase(number, base, start);
            }

            if (number[0] === '-') {
              this.negative = 1;
            }

            this.strip();

            if (endian !== 'le') return;

            this._initArray(this.toArray(), base, endian);
          };

          BN.prototype._initNumber = function _initNumber(number, base, endian) {
            if (number < 0) {
              this.negative = 1;
              number = -number;
            }
            if (number < 0x4000000) {
              this.words = [number & 0x3ffffff];
              this.length = 1;
            } else if (number < 0x10000000000000) {
              this.words = [
                number & 0x3ffffff,
                (number / 0x4000000) & 0x3ffffff
              ];
              this.length = 2;
            } else {
              assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
              this.words = [
                number & 0x3ffffff,
                (number / 0x4000000) & 0x3ffffff,
                1
              ];
              this.length = 3;
            }

            if (endian !== 'le') return;

            // Reverse the bytes
            this._initArray(this.toArray(), base, endian);
          };

          BN.prototype._initArray = function _initArray(number, base, endian) {
            // Perhaps a Uint8Array
            assert(typeof number.length === 'number');
            if (number.length <= 0) {
              this.words = [0];
              this.length = 1;
              return this;
            }

            this.length = Math.ceil(number.length / 3);
            this.words = new Array(this.length);
            for (var i = 0; i < this.length; i++) {
              this.words[i] = 0;
            }

            var j, w;
            var off = 0;
            if (endian === 'be') {
              for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
                w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
                this.words[j] |= (w << off) & 0x3ffffff;
                this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
                off += 24;
                if (off >= 26) {
                  off -= 26;
                  j++;
                }
              }
            } else if (endian === 'le') {
              for (i = 0, j = 0; i < number.length; i += 3) {
                w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
                this.words[j] |= (w << off) & 0x3ffffff;
                this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
                off += 24;
                if (off >= 26) {
                  off -= 26;
                  j++;
                }
              }
            }
            return this.strip();
          };

          function parseHex(str, start, end) {
            var r = 0;
            var len = Math.min(str.length, end);
            for (var i = start; i < len; i++) {
              var c = str.charCodeAt(i) - 48;

              r <<= 4;

              // 'a' - 'f'
              if (c >= 49 && c <= 54) {
                r |= c - 49 + 0xa;

                // 'A' - 'F'
              } else if (c >= 17 && c <= 22) {
                r |= c - 17 + 0xa;

                // '0' - '9'
              } else {
                r |= c & 0xf;
              }
            }
            return r;
          }

          BN.prototype._parseHex = function _parseHex(number, start) {
            // Create possibly bigger array to ensure that it fits the number
            this.length = Math.ceil((number.length - start) / 6);
            this.words = new Array(this.length);
            for (var i = 0; i < this.length; i++) {
              this.words[i] = 0;
            }

            var j, w;
            // Scan 24-bit chunks and add them to the number
            var off = 0;
            for (i = number.length - 6, j = 0; i >= start; i -= 6) {
              w = parseHex(number, i, i + 6);
              this.words[j] |= (w << off) & 0x3ffffff;
              // NOTE: `0x3fffff` is intentional here, 26bits max shift + 24bit hex limb
              this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;
              off += 24;
              if (off >= 26) {
                off -= 26;
                j++;
              }
            }
            if (i + 6 !== start) {
              w = parseHex(number, start, i + 6);
              this.words[j] |= (w << off) & 0x3ffffff;
              this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;
            }
            this.strip();
          };

          function parseBase(str, start, end, mul) {
            var r = 0;
            var len = Math.min(str.length, end);
            for (var i = start; i < len; i++) {
              var c = str.charCodeAt(i) - 48;

              r *= mul;

              // 'a'
              if (c >= 49) {
                r += c - 49 + 0xa;

                // 'A'
              } else if (c >= 17) {
                r += c - 17 + 0xa;

                // '0' - '9'
              } else {
                r += c;
              }
            }
            return r;
          }

          BN.prototype._parseBase = function _parseBase(number, base, start) {
            // Initialize as zero
            this.words = [0];
            this.length = 1;

            // Find length of limb in base
            for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
              limbLen++;
            }
            limbLen--;
            limbPow = (limbPow / base) | 0;

            var total = number.length - start;
            var mod = total % limbLen;
            var end = Math.min(total, total - mod) + start;

            var word = 0;
            for (var i = start; i < end; i += limbLen) {
              word = parseBase(number, i, i + limbLen, base);

              this.imuln(limbPow);
              if (this.words[0] + word < 0x4000000) {
                this.words[0] += word;
              } else {
                this._iaddn(word);
              }
            }

            if (mod !== 0) {
              var pow = 1;
              word = parseBase(number, i, number.length, base);

              for (i = 0; i < mod; i++) {
                pow *= base;
              }

              this.imuln(pow);
              if (this.words[0] + word < 0x4000000) {
                this.words[0] += word;
              } else {
                this._iaddn(word);
              }
            }
          };

          BN.prototype.copy = function copy(dest) {
            dest.words = new Array(this.length);
            for (var i = 0; i < this.length; i++) {
              dest.words[i] = this.words[i];
            }
            dest.length = this.length;
            dest.negative = this.negative;
            dest.red = this.red;
          };

          BN.prototype.clone = function clone() {
            var r = new BN(null);
            this.copy(r);
            return r;
          };

          BN.prototype._expand = function _expand(size) {
            while (this.length < size) {
              this.words[this.length++] = 0;
            }
            return this;
          };

          // Remove leading `0` from `this`
          BN.prototype.strip = function strip() {
            while (this.length > 1 && this.words[this.length - 1] === 0) {
              this.length--;
            }
            return this._normSign();
          };

          BN.prototype._normSign = function _normSign() {
            // -0 = 0
            if (this.length === 1 && this.words[0] === 0) {
              this.negative = 0;
            }
            return this;
          };

          BN.prototype.inspect = function inspect() {
            return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
          };

          /*
        
          var zeros = [];
          var groupSizes = [];
          var groupBases = [];
        
          var s = '';
          var i = -1;
          while (++i < BN.wordSize) {
            zeros[i] = s;
            s += '0';
          }
          groupSizes[0] = 0;
          groupSizes[1] = 0;
          groupBases[0] = 0;
          groupBases[1] = 0;
          var base = 2 - 1;
          while (++base < 36 + 1) {
            var groupSize = 0;
            var groupBase = 1;
            while (groupBase < (1 << BN.wordSize) / base) {
              groupBase *= base;
              groupSize += 1;
            }
            groupSizes[base] = groupSize;
            groupBases[base] = groupBase;
          }
        
          */

          var zeros = [
            '',
            '0',
            '00',
            '000',
            '0000',
            '00000',
            '000000',
            '0000000',
            '00000000',
            '000000000',
            '0000000000',
            '00000000000',
            '000000000000',
            '0000000000000',
            '00000000000000',
            '000000000000000',
            '0000000000000000',
            '00000000000000000',
            '000000000000000000',
            '0000000000000000000',
            '00000000000000000000',
            '000000000000000000000',
            '0000000000000000000000',
            '00000000000000000000000',
            '000000000000000000000000',
            '0000000000000000000000000'
          ];

          var groupSizes = [
            0, 0,
            25, 16, 12, 11, 10, 9, 8,
            8, 7, 7, 7, 7, 6, 6,
            6, 6, 6, 6, 6, 5, 5,
            5, 5, 5, 5, 5, 5, 5,
            5, 5, 5, 5, 5, 5, 5
          ];

          var groupBases = [
            0, 0,
            33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,
            43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,
            16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,
            6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,
            24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176
          ];

          BN.prototype.toString = function toString(base, padding) {
            base = base || 10;
            padding = padding | 0 || 1;

            var out;
            if (base === 16 || base === 'hex') {
              out = '';
              var off = 0;
              var carry = 0;
              for (var i = 0; i < this.length; i++) {
                var w = this.words[i];
                var word = (((w << off) | carry) & 0xffffff).toString(16);
                carry = (w >>> (24 - off)) & 0xffffff;
                if (carry !== 0 || i !== this.length - 1) {
                  out = zeros[6 - word.length] + word + out;
                } else {
                  out = word + out;
                }
                off += 2;
                if (off >= 26) {
                  off -= 26;
                  i--;
                }
              }
              if (carry !== 0) {
                out = carry.toString(16) + out;
              }
              while (out.length % padding !== 0) {
                out = '0' + out;
              }
              if (this.negative !== 0) {
                out = '-' + out;
              }
              return out;
            }

            if (base === (base | 0) && base >= 2 && base <= 36) {
              // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
              var groupSize = groupSizes[base];
              // var groupBase = Math.pow(base, groupSize);
              var groupBase = groupBases[base];
              out = '';
              var c = this.clone();
              c.negative = 0;
              while (!c.isZero()) {
                var r = c.modn(groupBase).toString(base);
                c = c.idivn(groupBase);

                if (!c.isZero()) {
                  out = zeros[groupSize - r.length] + r + out;
                } else {
                  out = r + out;
                }
              }
              if (this.isZero()) {
                out = '0' + out;
              }
              while (out.length % padding !== 0) {
                out = '0' + out;
              }
              if (this.negative !== 0) {
                out = '-' + out;
              }
              return out;
            }

            assert(false, 'Base should be between 2 and 36');
          };

          BN.prototype.toNumber = function toNumber() {
            var ret = this.words[0];
            if (this.length === 2) {
              ret += this.words[1] * 0x4000000;
            } else if (this.length === 3 && this.words[2] === 0x01) {
              // NOTE: at this stage it is known that the top bit is set
              ret += 0x10000000000000 + (this.words[1] * 0x4000000);
            } else if (this.length > 2) {
              assert(false, 'Number can only safely store up to 53 bits');
            }
            return (this.negative !== 0) ? -ret : ret;
          };

          BN.prototype.toJSON = function toJSON() {
            return this.toString(16);
          };

          BN.prototype.toBuffer = function toBuffer(endian, length) {
            assert(typeof Buffer !== 'undefined');
            return this.toArrayLike(Buffer, endian, length);
          };

          BN.prototype.toArray = function toArray(endian, length) {
            return this.toArrayLike(Array, endian, length);
          };

          BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
            var byteLength = this.byteLength();
            var reqLength = length || Math.max(1, byteLength);
            assert(byteLength <= reqLength, 'byte array longer than desired length');
            assert(reqLength > 0, 'Requested array length <= 0');

            this.strip();
            var littleEndian = endian === 'le';
            var res = new ArrayType(reqLength);

            var b, i;
            var q = this.clone();
            if (!littleEndian) {
              // Assume big-endian
              for (i = 0; i < reqLength - byteLength; i++) {
                res[i] = 0;
              }

              for (i = 0; !q.isZero(); i++) {
                b = q.andln(0xff);
                q.iushrn(8);

                res[reqLength - i - 1] = b;
              }
            } else {
              for (i = 0; !q.isZero(); i++) {
                b = q.andln(0xff);
                q.iushrn(8);

                res[i] = b;
              }

              for (; i < reqLength; i++) {
                res[i] = 0;
              }
            }

            return res;
          };

          if (Math.clz32) {
            BN.prototype._countBits = function _countBits(w) {
              return 32 - Math.clz32(w);
            };
          } else {
            BN.prototype._countBits = function _countBits(w) {
              var t = w;
              var r = 0;
              if (t >= 0x1000) {
                r += 13;
                t >>>= 13;
              }
              if (t >= 0x40) {
                r += 7;
                t >>>= 7;
              }
              if (t >= 0x8) {
                r += 4;
                t >>>= 4;
              }
              if (t >= 0x02) {
                r += 2;
                t >>>= 2;
              }
              return r + t;
            };
          }

          BN.prototype._zeroBits = function _zeroBits(w) {
            // Short-cut
            if (w === 0) return 26;

            var t = w;
            var r = 0;
            if ((t & 0x1fff) === 0) {
              r += 13;
              t >>>= 13;
            }
            if ((t & 0x7f) === 0) {
              r += 7;
              t >>>= 7;
            }
            if ((t & 0xf) === 0) {
              r += 4;
              t >>>= 4;
            }
            if ((t & 0x3) === 0) {
              r += 2;
              t >>>= 2;
            }
            if ((t & 0x1) === 0) {
              r++;
            }
            return r;
          };

          // Return number of used bits in a BN
          BN.prototype.bitLength = function bitLength() {
            var w = this.words[this.length - 1];
            var hi = this._countBits(w);
            return (this.length - 1) * 26 + hi;
          };

          function toBitArray(num) {
            var w = new Array(num.bitLength());

            for (var bit = 0; bit < w.length; bit++) {
              var off = (bit / 26) | 0;
              var wbit = bit % 26;

              w[bit] = (num.words[off] & (1 << wbit)) >>> wbit;
            }

            return w;
          }

          // Number of trailing zero bits
          BN.prototype.zeroBits = function zeroBits() {
            if (this.isZero()) return 0;

            var r = 0;
            for (var i = 0; i < this.length; i++) {
              var b = this._zeroBits(this.words[i]);
              r += b;
              if (b !== 26) break;
            }
            return r;
          };

          BN.prototype.byteLength = function byteLength() {
            return Math.ceil(this.bitLength() / 8);
          };

          BN.prototype.toTwos = function toTwos(width) {
            if (this.negative !== 0) {
              return this.abs().inotn(width).iaddn(1);
            }
            return this.clone();
          };

          BN.prototype.fromTwos = function fromTwos(width) {
            if (this.testn(width - 1)) {
              return this.notn(width).iaddn(1).ineg();
            }
            return this.clone();
          };

          BN.prototype.isNeg = function isNeg() {
            return this.negative !== 0;
          };

          // Return negative clone of `this`
          BN.prototype.neg = function neg() {
            return this.clone().ineg();
          };

          BN.prototype.ineg = function ineg() {
            if (!this.isZero()) {
              this.negative ^= 1;
            }

            return this;
          };

          // Or `num` with `this` in-place
          BN.prototype.iuor = function iuor(num) {
            while (this.length < num.length) {
              this.words[this.length++] = 0;
            }

            for (var i = 0; i < num.length; i++) {
              this.words[i] = this.words[i] | num.words[i];
            }

            return this.strip();
          };

          BN.prototype.ior = function ior(num) {
            assert((this.negative | num.negative) === 0);
            return this.iuor(num);
          };

          // Or `num` with `this`
          BN.prototype.or = function or(num) {
            if (this.length > num.length) return this.clone().ior(num);
            return num.clone().ior(this);
          };

          BN.prototype.uor = function uor(num) {
            if (this.length > num.length) return this.clone().iuor(num);
            return num.clone().iuor(this);
          };

          // And `num` with `this` in-place
          BN.prototype.iuand = function iuand(num) {
            // b = min-length(num, this)
            var b;
            if (this.length > num.length) {
              b = num;
            } else {
              b = this;
            }

            for (var i = 0; i < b.length; i++) {
              this.words[i] = this.words[i] & num.words[i];
            }

            this.length = b.length;

            return this.strip();
          };

          BN.prototype.iand = function iand(num) {
            assert((this.negative | num.negative) === 0);
            return this.iuand(num);
          };

          // And `num` with `this`
          BN.prototype.and = function and(num) {
            if (this.length > num.length) return this.clone().iand(num);
            return num.clone().iand(this);
          };

          BN.prototype.uand = function uand(num) {
            if (this.length > num.length) return this.clone().iuand(num);
            return num.clone().iuand(this);
          };

          // Xor `num` with `this` in-place
          BN.prototype.iuxor = function iuxor(num) {
            // a.length > b.length
            var a;
            var b;
            if (this.length > num.length) {
              a = this;
              b = num;
            } else {
              a = num;
              b = this;
            }

            for (var i = 0; i < b.length; i++) {
              this.words[i] = a.words[i] ^ b.words[i];
            }

            if (this !== a) {
              for (; i < a.length; i++) {
                this.words[i] = a.words[i];
              }
            }

            this.length = a.length;

            return this.strip();
          };

          BN.prototype.ixor = function ixor(num) {
            assert((this.negative | num.negative) === 0);
            return this.iuxor(num);
          };

          // Xor `num` with `this`
          BN.prototype.xor = function xor(num) {
            if (this.length > num.length) return this.clone().ixor(num);
            return num.clone().ixor(this);
          };

          BN.prototype.uxor = function uxor(num) {
            if (this.length > num.length) return this.clone().iuxor(num);
            return num.clone().iuxor(this);
          };

          // Not ``this`` with ``width`` bitwidth
          BN.prototype.inotn = function inotn(width) {
            assert(typeof width === 'number' && width >= 0);

            var bytesNeeded = Math.ceil(width / 26) | 0;
            var bitsLeft = width % 26;

            // Extend the buffer with leading zeroes
            this._expand(bytesNeeded);

            if (bitsLeft > 0) {
              bytesNeeded--;
            }

            // Handle complete words
            for (var i = 0; i < bytesNeeded; i++) {
              this.words[i] = ~this.words[i] & 0x3ffffff;
            }

            // Handle the residue
            if (bitsLeft > 0) {
              this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));
            }

            // And remove leading zeroes
            return this.strip();
          };

          BN.prototype.notn = function notn(width) {
            return this.clone().inotn(width);
          };

          // Set `bit` of `this`
          BN.prototype.setn = function setn(bit, val) {
            assert(typeof bit === 'number' && bit >= 0);

            var off = (bit / 26) | 0;
            var wbit = bit % 26;

            this._expand(off + 1);

            if (val) {
              this.words[off] = this.words[off] | (1 << wbit);
            } else {
              this.words[off] = this.words[off] & ~(1 << wbit);
            }

            return this.strip();
          };

          // Add `num` to `this` in-place
          BN.prototype.iadd = function iadd(num) {
            var r;

            // negative + positive
            if (this.negative !== 0 && num.negative === 0) {
              this.negative = 0;
              r = this.isub(num);
              this.negative ^= 1;
              return this._normSign();

              // positive + negative
            } else if (this.negative === 0 && num.negative !== 0) {
              num.negative = 0;
              r = this.isub(num);
              num.negative = 1;
              return r._normSign();
            }

            // a.length > b.length
            var a, b;
            if (this.length > num.length) {
              a = this;
              b = num;
            } else {
              a = num;
              b = this;
            }

            var carry = 0;
            for (var i = 0; i < b.length; i++) {
              r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
              this.words[i] = r & 0x3ffffff;
              carry = r >>> 26;
            }
            for (; carry !== 0 && i < a.length; i++) {
              r = (a.words[i] | 0) + carry;
              this.words[i] = r & 0x3ffffff;
              carry = r >>> 26;
            }

            this.length = a.length;
            if (carry !== 0) {
              this.words[this.length] = carry;
              this.length++;
              // Copy the rest of the words
            } else if (a !== this) {
              for (; i < a.length; i++) {
                this.words[i] = a.words[i];
              }
            }

            return this;
          };

          // Add `num` to `this`
          BN.prototype.add = function add(num) {
            var res;
            if (num.negative !== 0 && this.negative === 0) {
              num.negative = 0;
              res = this.sub(num);
              num.negative ^= 1;
              return res;
            } else if (num.negative === 0 && this.negative !== 0) {
              this.negative = 0;
              res = num.sub(this);
              this.negative = 1;
              return res;
            }

            if (this.length > num.length) return this.clone().iadd(num);

            return num.clone().iadd(this);
          };

          // Subtract `num` from `this` in-place
          BN.prototype.isub = function isub(num) {
            // this - (-num) = this + num
            if (num.negative !== 0) {
              num.negative = 0;
              var r = this.iadd(num);
              num.negative = 1;
              return r._normSign();

              // -this - num = -(this + num)
            } else if (this.negative !== 0) {
              this.negative = 0;
              this.iadd(num);
              this.negative = 1;
              return this._normSign();
            }

            // At this point both numbers are positive
            var cmp = this.cmp(num);

            // Optimization - zeroify
            if (cmp === 0) {
              this.negative = 0;
              this.length = 1;
              this.words[0] = 0;
              return this;
            }

            // a > b
            var a, b;
            if (cmp > 0) {
              a = this;
              b = num;
            } else {
              a = num;
              b = this;
            }

            var carry = 0;
            for (var i = 0; i < b.length; i++) {
              r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
              carry = r >> 26;
              this.words[i] = r & 0x3ffffff;
            }
            for (; carry !== 0 && i < a.length; i++) {
              r = (a.words[i] | 0) + carry;
              carry = r >> 26;
              this.words[i] = r & 0x3ffffff;
            }

            // Copy rest of the words
            if (carry === 0 && i < a.length && a !== this) {
              for (; i < a.length; i++) {
                this.words[i] = a.words[i];
              }
            }

            this.length = Math.max(this.length, i);

            if (a !== this) {
              this.negative = 1;
            }

            return this.strip();
          };

          // Subtract `num` from `this`
          BN.prototype.sub = function sub(num) {
            return this.clone().isub(num);
          };

          function smallMulTo(self, num, out) {
            out.negative = num.negative ^ self.negative;
            var len = (self.length + num.length) | 0;
            out.length = len;
            len = (len - 1) | 0;

            // Peel one iteration (compiler can't do it, because of code complexity)
            var a = self.words[0] | 0;
            var b = num.words[0] | 0;
            var r = a * b;

            var lo = r & 0x3ffffff;
            var carry = (r / 0x4000000) | 0;
            out.words[0] = lo;

            for (var k = 1; k < len; k++) {
              // Sum all words with the same `i + j = k` and accumulate `ncarry`,
              // note that ncarry could be >= 0x3ffffff
              var ncarry = carry >>> 26;
              var rword = carry & 0x3ffffff;
              var maxJ = Math.min(k, num.length - 1);
              for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
                var i = (k - j) | 0;
                a = self.words[i] | 0;
                b = num.words[j] | 0;
                r = a * b + rword;
                ncarry += (r / 0x4000000) | 0;
                rword = r & 0x3ffffff;
              }
              out.words[k] = rword | 0;
              carry = ncarry | 0;
            }
            if (carry !== 0) {
              out.words[k] = carry | 0;
            } else {
              out.length--;
            }

            return out.strip();
          }

          // TODO(indutny): it may be reasonable to omit it for users who don't need
          // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
          // multiplication (like elliptic secp256k1).
          var comb10MulTo = function comb10MulTo(self, num, out) {
            var a = self.words;
            var b = num.words;
            var o = out.words;
            var c = 0;
            var lo;
            var mid;
            var hi;
            var a0 = a[0] | 0;
            var al0 = a0 & 0x1fff;
            var ah0 = a0 >>> 13;
            var a1 = a[1] | 0;
            var al1 = a1 & 0x1fff;
            var ah1 = a1 >>> 13;
            var a2 = a[2] | 0;
            var al2 = a2 & 0x1fff;
            var ah2 = a2 >>> 13;
            var a3 = a[3] | 0;
            var al3 = a3 & 0x1fff;
            var ah3 = a3 >>> 13;
            var a4 = a[4] | 0;
            var al4 = a4 & 0x1fff;
            var ah4 = a4 >>> 13;
            var a5 = a[5] | 0;
            var al5 = a5 & 0x1fff;
            var ah5 = a5 >>> 13;
            var a6 = a[6] | 0;
            var al6 = a6 & 0x1fff;
            var ah6 = a6 >>> 13;
            var a7 = a[7] | 0;
            var al7 = a7 & 0x1fff;
            var ah7 = a7 >>> 13;
            var a8 = a[8] | 0;
            var al8 = a8 & 0x1fff;
            var ah8 = a8 >>> 13;
            var a9 = a[9] | 0;
            var al9 = a9 & 0x1fff;
            var ah9 = a9 >>> 13;
            var b0 = b[0] | 0;
            var bl0 = b0 & 0x1fff;
            var bh0 = b0 >>> 13;
            var b1 = b[1] | 0;
            var bl1 = b1 & 0x1fff;
            var bh1 = b1 >>> 13;
            var b2 = b[2] | 0;
            var bl2 = b2 & 0x1fff;
            var bh2 = b2 >>> 13;
            var b3 = b[3] | 0;
            var bl3 = b3 & 0x1fff;
            var bh3 = b3 >>> 13;
            var b4 = b[4] | 0;
            var bl4 = b4 & 0x1fff;
            var bh4 = b4 >>> 13;
            var b5 = b[5] | 0;
            var bl5 = b5 & 0x1fff;
            var bh5 = b5 >>> 13;
            var b6 = b[6] | 0;
            var bl6 = b6 & 0x1fff;
            var bh6 = b6 >>> 13;
            var b7 = b[7] | 0;
            var bl7 = b7 & 0x1fff;
            var bh7 = b7 >>> 13;
            var b8 = b[8] | 0;
            var bl8 = b8 & 0x1fff;
            var bh8 = b8 >>> 13;
            var b9 = b[9] | 0;
            var bl9 = b9 & 0x1fff;
            var bh9 = b9 >>> 13;

            out.negative = self.negative ^ num.negative;
            out.length = 19;
            /* k = 0 */
            lo = Math.imul(al0, bl0);
            mid = Math.imul(al0, bh0);
            mid = (mid + Math.imul(ah0, bl0)) | 0;
            hi = Math.imul(ah0, bh0);
            var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
            c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;
            w0 &= 0x3ffffff;
            /* k = 1 */
            lo = Math.imul(al1, bl0);
            mid = Math.imul(al1, bh0);
            mid = (mid + Math.imul(ah1, bl0)) | 0;
            hi = Math.imul(ah1, bh0);
            lo = (lo + Math.imul(al0, bl1)) | 0;
            mid = (mid + Math.imul(al0, bh1)) | 0;
            mid = (mid + Math.imul(ah0, bl1)) | 0;
            hi = (hi + Math.imul(ah0, bh1)) | 0;
            var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
            c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;
            w1 &= 0x3ffffff;
            /* k = 2 */
            lo = Math.imul(al2, bl0);
            mid = Math.imul(al2, bh0);
            mid = (mid + Math.imul(ah2, bl0)) | 0;
            hi = Math.imul(ah2, bh0);
            lo = (lo + Math.imul(al1, bl1)) | 0;
            mid = (mid + Math.imul(al1, bh1)) | 0;
            mid = (mid + Math.imul(ah1, bl1)) | 0;
            hi = (hi + Math.imul(ah1, bh1)) | 0;
            lo = (lo + Math.imul(al0, bl2)) | 0;
            mid = (mid + Math.imul(al0, bh2)) | 0;
            mid = (mid + Math.imul(ah0, bl2)) | 0;
            hi = (hi + Math.imul(ah0, bh2)) | 0;
            var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
            c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;
            w2 &= 0x3ffffff;
            /* k = 3 */
            lo = Math.imul(al3, bl0);
            mid = Math.imul(al3, bh0);
            mid = (mid + Math.imul(ah3, bl0)) | 0;
            hi = Math.imul(ah3, bh0);
            lo = (lo + Math.imul(al2, bl1)) | 0;
            mid = (mid + Math.imul(al2, bh1)) | 0;
            mid = (mid + Math.imul(ah2, bl1)) | 0;
            hi = (hi + Math.imul(ah2, bh1)) | 0;
            lo = (lo + Math.imul(al1, bl2)) | 0;
            mid = (mid + Math.imul(al1, bh2)) | 0;
            mid = (mid + Math.imul(ah1, bl2)) | 0;
            hi = (hi + Math.imul(ah1, bh2)) | 0;
            lo = (lo + Math.imul(al0, bl3)) | 0;
            mid = (mid + Math.imul(al0, bh3)) | 0;
            mid = (mid + Math.imul(ah0, bl3)) | 0;
            hi = (hi + Math.imul(ah0, bh3)) | 0;
            var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
            c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;
            w3 &= 0x3ffffff;
            /* k = 4 */
            lo = Math.imul(al4, bl0);
            mid = Math.imul(al4, bh0);
            mid = (mid + Math.imul(ah4, bl0)) | 0;
            hi = Math.imul(ah4, bh0);
            lo = (lo + Math.imul(al3, bl1)) | 0;
            mid = (mid + Math.imul(al3, bh1)) | 0;
            mid = (mid + Math.imul(ah3, bl1)) | 0;
            hi = (hi + Math.imul(ah3, bh1)) | 0;
            lo = (lo + Math.imul(al2, bl2)) | 0;
            mid = (mid + Math.imul(al2, bh2)) | 0;
            mid = (mid + Math.imul(ah2, bl2)) | 0;
            hi = (hi + Math.imul(ah2, bh2)) | 0;
            lo = (lo + Math.imul(al1, bl3)) | 0;
            mid = (mid + Math.imul(al1, bh3)) | 0;
            mid = (mid + Math.imul(ah1, bl3)) | 0;
            hi = (hi + Math.imul(ah1, bh3)) | 0;
            lo = (lo + Math.imul(al0, bl4)) | 0;
            mid = (mid + Math.imul(al0, bh4)) | 0;
            mid = (mid + Math.imul(ah0, bl4)) | 0;
            hi = (hi + Math.imul(ah0, bh4)) | 0;
            var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
            c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;
            w4 &= 0x3ffffff;
            /* k = 5 */
            lo = Math.imul(al5, bl0);
            mid = Math.imul(al5, bh0);
            mid = (mid + Math.imul(ah5, bl0)) | 0;
            hi = Math.imul(ah5, bh0);
            lo = (lo + Math.imul(al4, bl1)) | 0;
            mid = (mid + Math.imul(al4, bh1)) | 0;
            mid = (mid + Math.imul(ah4, bl1)) | 0;
            hi = (hi + Math.imul(ah4, bh1)) | 0;
            lo = (lo + Math.imul(al3, bl2)) | 0;
            mid = (mid + Math.imul(al3, bh2)) | 0;
            mid = (mid + Math.imul(ah3, bl2)) | 0;
            hi = (hi + Math.imul(ah3, bh2)) | 0;
            lo = (lo + Math.imul(al2, bl3)) | 0;
            mid = (mid + Math.imul(al2, bh3)) | 0;
            mid = (mid + Math.imul(ah2, bl3)) | 0;
            hi = (hi + Math.imul(ah2, bh3)) | 0;
            lo = (lo + Math.imul(al1, bl4)) | 0;
            mid = (mid + Math.imul(al1, bh4)) | 0;
            mid = (mid + Math.imul(ah1, bl4)) | 0;
            hi = (hi + Math.imul(ah1, bh4)) | 0;
            lo = (lo + Math.imul(al0, bl5)) | 0;
            mid = (mid + Math.imul(al0, bh5)) | 0;
            mid = (mid + Math.imul(ah0, bl5)) | 0;
            hi = (hi + Math.imul(ah0, bh5)) | 0;
            var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
            c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;
            w5 &= 0x3ffffff;
            /* k = 6 */
            lo = Math.imul(al6, bl0);
            mid = Math.imul(al6, bh0);
            mid = (mid + Math.imul(ah6, bl0)) | 0;
            hi = Math.imul(ah6, bh0);
            lo = (lo + Math.imul(al5, bl1)) | 0;
            mid = (mid + Math.imul(al5, bh1)) | 0;
            mid = (mid + Math.imul(ah5, bl1)) | 0;
            hi = (hi + Math.imul(ah5, bh1)) | 0;
            lo = (lo + Math.imul(al4, bl2)) | 0;
            mid = (mid + Math.imul(al4, bh2)) | 0;
            mid = (mid + Math.imul(ah4, bl2)) | 0;
            hi = (hi + Math.imul(ah4, bh2)) | 0;
            lo = (lo + Math.imul(al3, bl3)) | 0;
            mid = (mid + Math.imul(al3, bh3)) | 0;
            mid = (mid + Math.imul(ah3, bl3)) | 0;
            hi = (hi + Math.imul(ah3, bh3)) | 0;
            lo = (lo + Math.imul(al2, bl4)) | 0;
            mid = (mid + Math.imul(al2, bh4)) | 0;
            mid = (mid + Math.imul(ah2, bl4)) | 0;
            hi = (hi + Math.imul(ah2, bh4)) | 0;
            lo = (lo + Math.imul(al1, bl5)) | 0;
            mid = (mid + Math.imul(al1, bh5)) | 0;
            mid = (mid + Math.imul(ah1, bl5)) | 0;
            hi = (hi + Math.imul(ah1, bh5)) | 0;
            lo = (lo + Math.imul(al0, bl6)) | 0;
            mid = (mid + Math.imul(al0, bh6)) | 0;
            mid = (mid + Math.imul(ah0, bl6)) | 0;
            hi = (hi + Math.imul(ah0, bh6)) | 0;
            var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
            c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;
            w6 &= 0x3ffffff;
            /* k = 7 */
            lo = Math.imul(al7, bl0);
            mid = Math.imul(al7, bh0);
            mid = (mid + Math.imul(ah7, bl0)) | 0;
            hi = Math.imul(ah7, bh0);
            lo = (lo + Math.imul(al6, bl1)) | 0;
            mid = (mid + Math.imul(al6, bh1)) | 0;
            mid = (mid + Math.imul(ah6, bl1)) | 0;
            hi = (hi + Math.imul(ah6, bh1)) | 0;
            lo = (lo + Math.imul(al5, bl2)) | 0;
            mid = (mid + Math.imul(al5, bh2)) | 0;
            mid = (mid + Math.imul(ah5, bl2)) | 0;
            hi = (hi + Math.imul(ah5, bh2)) | 0;
            lo = (lo + Math.imul(al4, bl3)) | 0;
            mid = (mid + Math.imul(al4, bh3)) | 0;
            mid = (mid + Math.imul(ah4, bl3)) | 0;
            hi = (hi + Math.imul(ah4, bh3)) | 0;
            lo = (lo + Math.imul(al3, bl4)) | 0;
            mid = (mid + Math.imul(al3, bh4)) | 0;
            mid = (mid + Math.imul(ah3, bl4)) | 0;
            hi = (hi + Math.imul(ah3, bh4)) | 0;
            lo = (lo + Math.imul(al2, bl5)) | 0;
            mid = (mid + Math.imul(al2, bh5)) | 0;
            mid = (mid + Math.imul(ah2, bl5)) | 0;
            hi = (hi + Math.imul(ah2, bh5)) | 0;
            lo = (lo + Math.imul(al1, bl6)) | 0;
            mid = (mid + Math.imul(al1, bh6)) | 0;
            mid = (mid + Math.imul(ah1, bl6)) | 0;
            hi = (hi + Math.imul(ah1, bh6)) | 0;
            lo = (lo + Math.imul(al0, bl7)) | 0;
            mid = (mid + Math.imul(al0, bh7)) | 0;
            mid = (mid + Math.imul(ah0, bl7)) | 0;
            hi = (hi + Math.imul(ah0, bh7)) | 0;
            var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
            c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;
            w7 &= 0x3ffffff;
            /* k = 8 */
            lo = Math.imul(al8, bl0);
            mid = Math.imul(al8, bh0);
            mid = (mid + Math.imul(ah8, bl0)) | 0;
            hi = Math.imul(ah8, bh0);
            lo = (lo + Math.imul(al7, bl1)) | 0;
            mid = (mid + Math.imul(al7, bh1)) | 0;
            mid = (mid + Math.imul(ah7, bl1)) | 0;
            hi = (hi + Math.imul(ah7, bh1)) | 0;
            lo = (lo + Math.imul(al6, bl2)) | 0;
            mid = (mid + Math.imul(al6, bh2)) | 0;
            mid = (mid + Math.imul(ah6, bl2)) | 0;
            hi = (hi + Math.imul(ah6, bh2)) | 0;
            lo = (lo + Math.imul(al5, bl3)) | 0;
            mid = (mid + Math.imul(al5, bh3)) | 0;
            mid = (mid + Math.imul(ah5, bl3)) | 0;
            hi = (hi + Math.imul(ah5, bh3)) | 0;
            lo = (lo + Math.imul(al4, bl4)) | 0;
            mid = (mid + Math.imul(al4, bh4)) | 0;
            mid = (mid + Math.imul(ah4, bl4)) | 0;
            hi = (hi + Math.imul(ah4, bh4)) | 0;
            lo = (lo + Math.imul(al3, bl5)) | 0;
            mid = (mid + Math.imul(al3, bh5)) | 0;
            mid = (mid + Math.imul(ah3, bl5)) | 0;
            hi = (hi + Math.imul(ah3, bh5)) | 0;
            lo = (lo + Math.imul(al2, bl6)) | 0;
            mid = (mid + Math.imul(al2, bh6)) | 0;
            mid = (mid + Math.imul(ah2, bl6)) | 0;
            hi = (hi + Math.imul(ah2, bh6)) | 0;
            lo = (lo + Math.imul(al1, bl7)) | 0;
            mid = (mid + Math.imul(al1, bh7)) | 0;
            mid = (mid + Math.imul(ah1, bl7)) | 0;
            hi = (hi + Math.imul(ah1, bh7)) | 0;
            lo = (lo + Math.imul(al0, bl8)) | 0;
            mid = (mid + Math.imul(al0, bh8)) | 0;
            mid = (mid + Math.imul(ah0, bl8)) | 0;
            hi = (hi + Math.imul(ah0, bh8)) | 0;
            var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
            c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;
            w8 &= 0x3ffffff;
            /* k = 9 */
            lo = Math.imul(al9, bl0);
            mid = Math.imul(al9, bh0);
            mid = (mid + Math.imul(ah9, bl0)) | 0;
            hi = Math.imul(ah9, bh0);
            lo = (lo + Math.imul(al8, bl1)) | 0;
            mid = (mid + Math.imul(al8, bh1)) | 0;
            mid = (mid + Math.imul(ah8, bl1)) | 0;
            hi = (hi + Math.imul(ah8, bh1)) | 0;
            lo = (lo + Math.imul(al7, bl2)) | 0;
            mid = (mid + Math.imul(al7, bh2)) | 0;
            mid = (mid + Math.imul(ah7, bl2)) | 0;
            hi = (hi + Math.imul(ah7, bh2)) | 0;
            lo = (lo + Math.imul(al6, bl3)) | 0;
            mid = (mid + Math.imul(al6, bh3)) | 0;
            mid = (mid + Math.imul(ah6, bl3)) | 0;
            hi = (hi + Math.imul(ah6, bh3)) | 0;
            lo = (lo + Math.imul(al5, bl4)) | 0;
            mid = (mid + Math.imul(al5, bh4)) | 0;
            mid = (mid + Math.imul(ah5, bl4)) | 0;
            hi = (hi + Math.imul(ah5, bh4)) | 0;
            lo = (lo + Math.imul(al4, bl5)) | 0;
            mid = (mid + Math.imul(al4, bh5)) | 0;
            mid = (mid + Math.imul(ah4, bl5)) | 0;
            hi = (hi + Math.imul(ah4, bh5)) | 0;
            lo = (lo + Math.imul(al3, bl6)) | 0;
            mid = (mid + Math.imul(al3, bh6)) | 0;
            mid = (mid + Math.imul(ah3, bl6)) | 0;
            hi = (hi + Math.imul(ah3, bh6)) | 0;
            lo = (lo + Math.imul(al2, bl7)) | 0;
            mid = (mid + Math.imul(al2, bh7)) | 0;
            mid = (mid + Math.imul(ah2, bl7)) | 0;
            hi = (hi + Math.imul(ah2, bh7)) | 0;
            lo = (lo + Math.imul(al1, bl8)) | 0;
            mid = (mid + Math.imul(al1, bh8)) | 0;
            mid = (mid + Math.imul(ah1, bl8)) | 0;
            hi = (hi + Math.imul(ah1, bh8)) | 0;
            lo = (lo + Math.imul(al0, bl9)) | 0;
            mid = (mid + Math.imul(al0, bh9)) | 0;
            mid = (mid + Math.imul(ah0, bl9)) | 0;
            hi = (hi + Math.imul(ah0, bh9)) | 0;
            var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
            c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;
            w9 &= 0x3ffffff;
            /* k = 10 */
            lo = Math.imul(al9, bl1);
            mid = Math.imul(al9, bh1);
            mid = (mid + Math.imul(ah9, bl1)) | 0;
            hi = Math.imul(ah9, bh1);
            lo = (lo + Math.imul(al8, bl2)) | 0;
            mid = (mid + Math.imul(al8, bh2)) | 0;
            mid = (mid + Math.imul(ah8, bl2)) | 0;
            hi = (hi + Math.imul(ah8, bh2)) | 0;
            lo = (lo + Math.imul(al7, bl3)) | 0;
            mid = (mid + Math.imul(al7, bh3)) | 0;
            mid = (mid + Math.imul(ah7, bl3)) | 0;
            hi = (hi + Math.imul(ah7, bh3)) | 0;
            lo = (lo + Math.imul(al6, bl4)) | 0;
            mid = (mid + Math.imul(al6, bh4)) | 0;
            mid = (mid + Math.imul(ah6, bl4)) | 0;
            hi = (hi + Math.imul(ah6, bh4)) | 0;
            lo = (lo + Math.imul(al5, bl5)) | 0;
            mid = (mid + Math.imul(al5, bh5)) | 0;
            mid = (mid + Math.imul(ah5, bl5)) | 0;
            hi = (hi + Math.imul(ah5, bh5)) | 0;
            lo = (lo + Math.imul(al4, bl6)) | 0;
            mid = (mid + Math.imul(al4, bh6)) | 0;
            mid = (mid + Math.imul(ah4, bl6)) | 0;
            hi = (hi + Math.imul(ah4, bh6)) | 0;
            lo = (lo + Math.imul(al3, bl7)) | 0;
            mid = (mid + Math.imul(al3, bh7)) | 0;
            mid = (mid + Math.imul(ah3, bl7)) | 0;
            hi = (hi + Math.imul(ah3, bh7)) | 0;
            lo = (lo + Math.imul(al2, bl8)) | 0;
            mid = (mid + Math.imul(al2, bh8)) | 0;
            mid = (mid + Math.imul(ah2, bl8)) | 0;
            hi = (hi + Math.imul(ah2, bh8)) | 0;
            lo = (lo + Math.imul(al1, bl9)) | 0;
            mid = (mid + Math.imul(al1, bh9)) | 0;
            mid = (mid + Math.imul(ah1, bl9)) | 0;
            hi = (hi + Math.imul(ah1, bh9)) | 0;
            var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
            c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;
            w10 &= 0x3ffffff;
            /* k = 11 */
            lo = Math.imul(al9, bl2);
            mid = Math.imul(al9, bh2);
            mid = (mid + Math.imul(ah9, bl2)) | 0;
            hi = Math.imul(ah9, bh2);
            lo = (lo + Math.imul(al8, bl3)) | 0;
            mid = (mid + Math.imul(al8, bh3)) | 0;
            mid = (mid + Math.imul(ah8, bl3)) | 0;
            hi = (hi + Math.imul(ah8, bh3)) | 0;
            lo = (lo + Math.imul(al7, bl4)) | 0;
            mid = (mid + Math.imul(al7, bh4)) | 0;
            mid = (mid + Math.imul(ah7, bl4)) | 0;
            hi = (hi + Math.imul(ah7, bh4)) | 0;
            lo = (lo + Math.imul(al6, bl5)) | 0;
            mid = (mid + Math.imul(al6, bh5)) | 0;
            mid = (mid + Math.imul(ah6, bl5)) | 0;
            hi = (hi + Math.imul(ah6, bh5)) | 0;
            lo = (lo + Math.imul(al5, bl6)) | 0;
            mid = (mid + Math.imul(al5, bh6)) | 0;
            mid = (mid + Math.imul(ah5, bl6)) | 0;
            hi = (hi + Math.imul(ah5, bh6)) | 0;
            lo = (lo + Math.imul(al4, bl7)) | 0;
            mid = (mid + Math.imul(al4, bh7)) | 0;
            mid = (mid + Math.imul(ah4, bl7)) | 0;
            hi = (hi + Math.imul(ah4, bh7)) | 0;
            lo = (lo + Math.imul(al3, bl8)) | 0;
            mid = (mid + Math.imul(al3, bh8)) | 0;
            mid = (mid + Math.imul(ah3, bl8)) | 0;
            hi = (hi + Math.imul(ah3, bh8)) | 0;
            lo = (lo + Math.imul(al2, bl9)) | 0;
            mid = (mid + Math.imul(al2, bh9)) | 0;
            mid = (mid + Math.imul(ah2, bl9)) | 0;
            hi = (hi + Math.imul(ah2, bh9)) | 0;
            var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
            c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;
            w11 &= 0x3ffffff;
            /* k = 12 */
            lo = Math.imul(al9, bl3);
            mid = Math.imul(al9, bh3);
            mid = (mid + Math.imul(ah9, bl3)) | 0;
            hi = Math.imul(ah9, bh3);
            lo = (lo + Math.imul(al8, bl4)) | 0;
            mid = (mid + Math.imul(al8, bh4)) | 0;
            mid = (mid + Math.imul(ah8, bl4)) | 0;
            hi = (hi + Math.imul(ah8, bh4)) | 0;
            lo = (lo + Math.imul(al7, bl5)) | 0;
            mid = (mid + Math.imul(al7, bh5)) | 0;
            mid = (mid + Math.imul(ah7, bl5)) | 0;
            hi = (hi + Math.imul(ah7, bh5)) | 0;
            lo = (lo + Math.imul(al6, bl6)) | 0;
            mid = (mid + Math.imul(al6, bh6)) | 0;
            mid = (mid + Math.imul(ah6, bl6)) | 0;
            hi = (hi + Math.imul(ah6, bh6)) | 0;
            lo = (lo + Math.imul(al5, bl7)) | 0;
            mid = (mid + Math.imul(al5, bh7)) | 0;
            mid = (mid + Math.imul(ah5, bl7)) | 0;
            hi = (hi + Math.imul(ah5, bh7)) | 0;
            lo = (lo + Math.imul(al4, bl8)) | 0;
            mid = (mid + Math.imul(al4, bh8)) | 0;
            mid = (mid + Math.imul(ah4, bl8)) | 0;
            hi = (hi + Math.imul(ah4, bh8)) | 0;
            lo = (lo + Math.imul(al3, bl9)) | 0;
            mid = (mid + Math.imul(al3, bh9)) | 0;
            mid = (mid + Math.imul(ah3, bl9)) | 0;
            hi = (hi + Math.imul(ah3, bh9)) | 0;
            var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
            c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;
            w12 &= 0x3ffffff;
            /* k = 13 */
            lo = Math.imul(al9, bl4);
            mid = Math.imul(al9, bh4);
            mid = (mid + Math.imul(ah9, bl4)) | 0;
            hi = Math.imul(ah9, bh4);
            lo = (lo + Math.imul(al8, bl5)) | 0;
            mid = (mid + Math.imul(al8, bh5)) | 0;
            mid = (mid + Math.imul(ah8, bl5)) | 0;
            hi = (hi + Math.imul(ah8, bh5)) | 0;
            lo = (lo + Math.imul(al7, bl6)) | 0;
            mid = (mid + Math.imul(al7, bh6)) | 0;
            mid = (mid + Math.imul(ah7, bl6)) | 0;
            hi = (hi + Math.imul(ah7, bh6)) | 0;
            lo = (lo + Math.imul(al6, bl7)) | 0;
            mid = (mid + Math.imul(al6, bh7)) | 0;
            mid = (mid + Math.imul(ah6, bl7)) | 0;
            hi = (hi + Math.imul(ah6, bh7)) | 0;
            lo = (lo + Math.imul(al5, bl8)) | 0;
            mid = (mid + Math.imul(al5, bh8)) | 0;
            mid = (mid + Math.imul(ah5, bl8)) | 0;
            hi = (hi + Math.imul(ah5, bh8)) | 0;
            lo = (lo + Math.imul(al4, bl9)) | 0;
            mid = (mid + Math.imul(al4, bh9)) | 0;
            mid = (mid + Math.imul(ah4, bl9)) | 0;
            hi = (hi + Math.imul(ah4, bh9)) | 0;
            var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
            c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;
            w13 &= 0x3ffffff;
            /* k = 14 */
            lo = Math.imul(al9, bl5);
            mid = Math.imul(al9, bh5);
            mid = (mid + Math.imul(ah9, bl5)) | 0;
            hi = Math.imul(ah9, bh5);
            lo = (lo + Math.imul(al8, bl6)) | 0;
            mid = (mid + Math.imul(al8, bh6)) | 0;
            mid = (mid + Math.imul(ah8, bl6)) | 0;
            hi = (hi + Math.imul(ah8, bh6)) | 0;
            lo = (lo + Math.imul(al7, bl7)) | 0;
            mid = (mid + Math.imul(al7, bh7)) | 0;
            mid = (mid + Math.imul(ah7, bl7)) | 0;
            hi = (hi + Math.imul(ah7, bh7)) | 0;
            lo = (lo + Math.imul(al6, bl8)) | 0;
            mid = (mid + Math.imul(al6, bh8)) | 0;
            mid = (mid + Math.imul(ah6, bl8)) | 0;
            hi = (hi + Math.imul(ah6, bh8)) | 0;
            lo = (lo + Math.imul(al5, bl9)) | 0;
            mid = (mid + Math.imul(al5, bh9)) | 0;
            mid = (mid + Math.imul(ah5, bl9)) | 0;
            hi = (hi + Math.imul(ah5, bh9)) | 0;
            var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
            c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;
            w14 &= 0x3ffffff;
            /* k = 15 */
            lo = Math.imul(al9, bl6);
            mid = Math.imul(al9, bh6);
            mid = (mid + Math.imul(ah9, bl6)) | 0;
            hi = Math.imul(ah9, bh6);
            lo = (lo + Math.imul(al8, bl7)) | 0;
            mid = (mid + Math.imul(al8, bh7)) | 0;
            mid = (mid + Math.imul(ah8, bl7)) | 0;
            hi = (hi + Math.imul(ah8, bh7)) | 0;
            lo = (lo + Math.imul(al7, bl8)) | 0;
            mid = (mid + Math.imul(al7, bh8)) | 0;
            mid = (mid + Math.imul(ah7, bl8)) | 0;
            hi = (hi + Math.imul(ah7, bh8)) | 0;
            lo = (lo + Math.imul(al6, bl9)) | 0;
            mid = (mid + Math.imul(al6, bh9)) | 0;
            mid = (mid + Math.imul(ah6, bl9)) | 0;
            hi = (hi + Math.imul(ah6, bh9)) | 0;
            var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
            c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;
            w15 &= 0x3ffffff;
            /* k = 16 */
            lo = Math.imul(al9, bl7);
            mid = Math.imul(al9, bh7);
            mid = (mid + Math.imul(ah9, bl7)) | 0;
            hi = Math.imul(ah9, bh7);
            lo = (lo + Math.imul(al8, bl8)) | 0;
            mid = (mid + Math.imul(al8, bh8)) | 0;
            mid = (mid + Math.imul(ah8, bl8)) | 0;
            hi = (hi + Math.imul(ah8, bh8)) | 0;
            lo = (lo + Math.imul(al7, bl9)) | 0;
            mid = (mid + Math.imul(al7, bh9)) | 0;
            mid = (mid + Math.imul(ah7, bl9)) | 0;
            hi = (hi + Math.imul(ah7, bh9)) | 0;
            var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
            c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;
            w16 &= 0x3ffffff;
            /* k = 17 */
            lo = Math.imul(al9, bl8);
            mid = Math.imul(al9, bh8);
            mid = (mid + Math.imul(ah9, bl8)) | 0;
            hi = Math.imul(ah9, bh8);
            lo = (lo + Math.imul(al8, bl9)) | 0;
            mid = (mid + Math.imul(al8, bh9)) | 0;
            mid = (mid + Math.imul(ah8, bl9)) | 0;
            hi = (hi + Math.imul(ah8, bh9)) | 0;
            var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
            c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;
            w17 &= 0x3ffffff;
            /* k = 18 */
            lo = Math.imul(al9, bl9);
            mid = Math.imul(al9, bh9);
            mid = (mid + Math.imul(ah9, bl9)) | 0;
            hi = Math.imul(ah9, bh9);
            var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
            c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;
            w18 &= 0x3ffffff;
            o[0] = w0;
            o[1] = w1;
            o[2] = w2;
            o[3] = w3;
            o[4] = w4;
            o[5] = w5;
            o[6] = w6;
            o[7] = w7;
            o[8] = w8;
            o[9] = w9;
            o[10] = w10;
            o[11] = w11;
            o[12] = w12;
            o[13] = w13;
            o[14] = w14;
            o[15] = w15;
            o[16] = w16;
            o[17] = w17;
            o[18] = w18;
            if (c !== 0) {
              o[19] = c;
              out.length++;
            }
            return out;
          };

          // Polyfill comb
          if (!Math.imul) {
            comb10MulTo = smallMulTo;
          }

          function bigMulTo(self, num, out) {
            out.negative = num.negative ^ self.negative;
            out.length = self.length + num.length;

            var carry = 0;
            var hncarry = 0;
            for (var k = 0; k < out.length - 1; k++) {
              // Sum all words with the same `i + j = k` and accumulate `ncarry`,
              // note that ncarry could be >= 0x3ffffff
              var ncarry = hncarry;
              hncarry = 0;
              var rword = carry & 0x3ffffff;
              var maxJ = Math.min(k, num.length - 1);
              for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
                var i = k - j;
                var a = self.words[i] | 0;
                var b = num.words[j] | 0;
                var r = a * b;

                var lo = r & 0x3ffffff;
                ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
                lo = (lo + rword) | 0;
                rword = lo & 0x3ffffff;
                ncarry = (ncarry + (lo >>> 26)) | 0;

                hncarry += ncarry >>> 26;
                ncarry &= 0x3ffffff;
              }
              out.words[k] = rword;
              carry = ncarry;
              ncarry = hncarry;
            }
            if (carry !== 0) {
              out.words[k] = carry;
            } else {
              out.length--;
            }

            return out.strip();
          }

          function jumboMulTo(self, num, out) {
            var fftm = new FFTM();
            return fftm.mulp(self, num, out);
          }

          BN.prototype.mulTo = function mulTo(num, out) {
            var res;
            var len = this.length + num.length;
            if (this.length === 10 && num.length === 10) {
              res = comb10MulTo(this, num, out);
            } else if (len < 63) {
              res = smallMulTo(this, num, out);
            } else if (len < 1024) {
              res = bigMulTo(this, num, out);
            } else {
              res = jumboMulTo(this, num, out);
            }

            return res;
          };

          // Cooley-Tukey algorithm for FFT
          // slightly revisited to rely on looping instead of recursion

          function FFTM(x, y) {
            this.x = x;
            this.y = y;
          }

          FFTM.prototype.makeRBT = function makeRBT(N) {
            var t = new Array(N);
            var l = BN.prototype._countBits(N) - 1;
            for (var i = 0; i < N; i++) {
              t[i] = this.revBin(i, l, N);
            }

            return t;
          };

          // Returns binary-reversed representation of `x`
          FFTM.prototype.revBin = function revBin(x, l, N) {
            if (x === 0 || x === N - 1) return x;

            var rb = 0;
            for (var i = 0; i < l; i++) {
              rb |= (x & 1) << (l - i - 1);
              x >>= 1;
            }

            return rb;
          };

          // Performs "tweedling" phase, therefore 'emulating'
          // behaviour of the recursive algorithm
          FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {
            for (var i = 0; i < N; i++) {
              rtws[i] = rws[rbt[i]];
              itws[i] = iws[rbt[i]];
            }
          };

          FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {
            this.permute(rbt, rws, iws, rtws, itws, N);

            for (var s = 1; s < N; s <<= 1) {
              var l = s << 1;

              var rtwdf = Math.cos(2 * Math.PI / l);
              var itwdf = Math.sin(2 * Math.PI / l);

              for (var p = 0; p < N; p += l) {
                var rtwdf_ = rtwdf;
                var itwdf_ = itwdf;

                for (var j = 0; j < s; j++) {
                  var re = rtws[p + j];
                  var ie = itws[p + j];

                  var ro = rtws[p + j + s];
                  var io = itws[p + j + s];

                  var rx = rtwdf_ * ro - itwdf_ * io;

                  io = rtwdf_ * io + itwdf_ * ro;
                  ro = rx;

                  rtws[p + j] = re + ro;
                  itws[p + j] = ie + io;

                  rtws[p + j + s] = re - ro;
                  itws[p + j + s] = ie - io;

                  /* jshint maxdepth : false */
                  if (j !== l) {
                    rx = rtwdf * rtwdf_ - itwdf * itwdf_;

                    itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                    rtwdf_ = rx;
                  }
                }
              }
            }
          };

          FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
            var N = Math.max(m, n) | 1;
            var odd = N & 1;
            var i = 0;
            for (N = N / 2 | 0; N; N = N >>> 1) {
              i++;
            }

            return 1 << i + 1 + odd;
          };

          FFTM.prototype.conjugate = function conjugate(rws, iws, N) {
            if (N <= 1) return;

            for (var i = 0; i < N / 2; i++) {
              var t = rws[i];

              rws[i] = rws[N - i - 1];
              rws[N - i - 1] = t;

              t = iws[i];

              iws[i] = -iws[N - i - 1];
              iws[N - i - 1] = -t;
            }
          };

          FFTM.prototype.normalize13b = function normalize13b(ws, N) {
            var carry = 0;
            for (var i = 0; i < N / 2; i++) {
              var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +
                Math.round(ws[2 * i] / N) +
                carry;

              ws[i] = w & 0x3ffffff;

              if (w < 0x4000000) {
                carry = 0;
              } else {
                carry = w / 0x4000000 | 0;
              }
            }

            return ws;
          };

          FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {
            var carry = 0;
            for (var i = 0; i < len; i++) {
              carry = carry + (ws[i] | 0);

              rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;
              rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;
            }

            // Pad with zeroes
            for (i = 2 * len; i < N; ++i) {
              rws[i] = 0;
            }

            assert(carry === 0);
            assert((carry & ~0x1fff) === 0);
          };

          FFTM.prototype.stub = function stub(N) {
            var ph = new Array(N);
            for (var i = 0; i < N; i++) {
              ph[i] = 0;
            }

            return ph;
          };

          FFTM.prototype.mulp = function mulp(x, y, out) {
            var N = 2 * this.guessLen13b(x.length, y.length);

            var rbt = this.makeRBT(N);

            var _ = this.stub(N);

            var rws = new Array(N);
            var rwst = new Array(N);
            var iwst = new Array(N);

            var nrws = new Array(N);
            var nrwst = new Array(N);
            var niwst = new Array(N);

            var rmws = out.words;
            rmws.length = N;

            this.convert13b(x.words, x.length, rws, N);
            this.convert13b(y.words, y.length, nrws, N);

            this.transform(rws, _, rwst, iwst, N, rbt);
            this.transform(nrws, _, nrwst, niwst, N, rbt);

            for (var i = 0; i < N; i++) {
              var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
              iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
              rwst[i] = rx;
            }

            this.conjugate(rwst, iwst, N);
            this.transform(rwst, iwst, rmws, _, N, rbt);
            this.conjugate(rmws, _, N);
            this.normalize13b(rmws, N);

            out.negative = x.negative ^ y.negative;
            out.length = x.length + y.length;
            return out.strip();
          };

          // Multiply `this` by `num`
          BN.prototype.mul = function mul(num) {
            var out = new BN(null);
            out.words = new Array(this.length + num.length);
            return this.mulTo(num, out);
          };

          // Multiply employing FFT
          BN.prototype.mulf = function mulf(num) {
            var out = new BN(null);
            out.words = new Array(this.length + num.length);
            return jumboMulTo(this, num, out);
          };

          // In-place Multiplication
          BN.prototype.imul = function imul(num) {
            return this.clone().mulTo(num, this);
          };

          BN.prototype.imuln = function imuln(num) {
            assert(typeof num === 'number');
            assert(num < 0x4000000);

            // Carry
            var carry = 0;
            for (var i = 0; i < this.length; i++) {
              var w = (this.words[i] | 0) * num;
              var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
              carry >>= 26;
              carry += (w / 0x4000000) | 0;
              // NOTE: lo is 27bit maximum
              carry += lo >>> 26;
              this.words[i] = lo & 0x3ffffff;
            }

            if (carry !== 0) {
              this.words[i] = carry;
              this.length++;
            }

            return this;
          };

          BN.prototype.muln = function muln(num) {
            return this.clone().imuln(num);
          };

          // `this` * `this`
          BN.prototype.sqr = function sqr() {
            return this.mul(this);
          };

          // `this` * `this` in-place
          BN.prototype.isqr = function isqr() {
            return this.imul(this.clone());
          };

          // Math.pow(`this`, `num`)
          BN.prototype.pow = function pow(num) {
            var w = toBitArray(num);
            if (w.length === 0) return new BN(1);

            // Skip leading zeroes
            var res = this;
            for (var i = 0; i < w.length; i++ , res = res.sqr()) {
              if (w[i] !== 0) break;
            }

            if (++i < w.length) {
              for (var q = res.sqr(); i < w.length; i++ , q = q.sqr()) {
                if (w[i] === 0) continue;

                res = res.mul(q);
              }
            }

            return res;
          };

          // Shift-left in-place
          BN.prototype.iushln = function iushln(bits) {
            assert(typeof bits === 'number' && bits >= 0);
            var r = bits % 26;
            var s = (bits - r) / 26;
            var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);
            var i;

            if (r !== 0) {
              var carry = 0;

              for (i = 0; i < this.length; i++) {
                var newCarry = this.words[i] & carryMask;
                var c = ((this.words[i] | 0) - newCarry) << r;
                this.words[i] = c | carry;
                carry = newCarry >>> (26 - r);
              }

              if (carry) {
                this.words[i] = carry;
                this.length++;
              }
            }

            if (s !== 0) {
              for (i = this.length - 1; i >= 0; i--) {
                this.words[i + s] = this.words[i];
              }

              for (i = 0; i < s; i++) {
                this.words[i] = 0;
              }

              this.length += s;
            }

            return this.strip();
          };

          BN.prototype.ishln = function ishln(bits) {
            // TODO(indutny): implement me
            assert(this.negative === 0);
            return this.iushln(bits);
          };

          // Shift-right in-place
          // NOTE: `hint` is a lowest bit before trailing zeroes
          // NOTE: if `extended` is present - it will be filled with destroyed bits
          BN.prototype.iushrn = function iushrn(bits, hint, extended) {
            assert(typeof bits === 'number' && bits >= 0);
            var h;
            if (hint) {
              h = (hint - (hint % 26)) / 26;
            } else {
              h = 0;
            }

            var r = bits % 26;
            var s = Math.min((bits - r) / 26, this.length);
            var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
            var maskedWords = extended;

            h -= s;
            h = Math.max(0, h);

            // Extended mode, copy masked part
            if (maskedWords) {
              for (var i = 0; i < s; i++) {
                maskedWords.words[i] = this.words[i];
              }
              maskedWords.length = s;
            }

            if (s === 0) {
              // No-op, we should not move anything at all
            } else if (this.length > s) {
              this.length -= s;
              for (i = 0; i < this.length; i++) {
                this.words[i] = this.words[i + s];
              }
            } else {
              this.words[0] = 0;
              this.length = 1;
            }

            var carry = 0;
            for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
              var word = this.words[i] | 0;
              this.words[i] = (carry << (26 - r)) | (word >>> r);
              carry = word & mask;
            }

            // Push carried bits as a mask
            if (maskedWords && carry !== 0) {
              maskedWords.words[maskedWords.length++] = carry;
            }

            if (this.length === 0) {
              this.words[0] = 0;
              this.length = 1;
            }

            return this.strip();
          };

          BN.prototype.ishrn = function ishrn(bits, hint, extended) {
            // TODO(indutny): implement me
            assert(this.negative === 0);
            return this.iushrn(bits, hint, extended);
          };

          // Shift-left
          BN.prototype.shln = function shln(bits) {
            return this.clone().ishln(bits);
          };

          BN.prototype.ushln = function ushln(bits) {
            return this.clone().iushln(bits);
          };

          // Shift-right
          BN.prototype.shrn = function shrn(bits) {
            return this.clone().ishrn(bits);
          };

          BN.prototype.ushrn = function ushrn(bits) {
            return this.clone().iushrn(bits);
          };

          // Test if n bit is set
          BN.prototype.testn = function testn(bit) {
            assert(typeof bit === 'number' && bit >= 0);
            var r = bit % 26;
            var s = (bit - r) / 26;
            var q = 1 << r;

            // Fast case: bit is much higher than all existing words
            if (this.length <= s) return false;

            // Check bit and return
            var w = this.words[s];

            return !!(w & q);
          };

          // Return only lowers bits of number (in-place)
          BN.prototype.imaskn = function imaskn(bits) {
            assert(typeof bits === 'number' && bits >= 0);
            var r = bits % 26;
            var s = (bits - r) / 26;

            assert(this.negative === 0, 'imaskn works only with positive numbers');

            if (this.length <= s) {
              return this;
            }

            if (r !== 0) {
              s++;
            }
            this.length = Math.min(s, this.length);

            if (r !== 0) {
              var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
              this.words[this.length - 1] &= mask;
            }

            return this.strip();
          };

          // Return only lowers bits of number
          BN.prototype.maskn = function maskn(bits) {
            return this.clone().imaskn(bits);
          };

          // Add plain number `num` to `this`
          BN.prototype.iaddn = function iaddn(num) {
            assert(typeof num === 'number');
            assert(num < 0x4000000);
            if (num < 0) return this.isubn(-num);

            // Possible sign change
            if (this.negative !== 0) {
              if (this.length === 1 && (this.words[0] | 0) < num) {
                this.words[0] = num - (this.words[0] | 0);
                this.negative = 0;
                return this;
              }

              this.negative = 0;
              this.isubn(num);
              this.negative = 1;
              return this;
            }

            // Add without checks
            return this._iaddn(num);
          };

          BN.prototype._iaddn = function _iaddn(num) {
            this.words[0] += num;

            // Carry
            for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
              this.words[i] -= 0x4000000;
              if (i === this.length - 1) {
                this.words[i + 1] = 1;
              } else {
                this.words[i + 1]++;
              }
            }
            this.length = Math.max(this.length, i + 1);

            return this;
          };

          // Subtract plain number `num` from `this`
          BN.prototype.isubn = function isubn(num) {
            assert(typeof num === 'number');
            assert(num < 0x4000000);
            if (num < 0) return this.iaddn(-num);

            if (this.negative !== 0) {
              this.negative = 0;
              this.iaddn(num);
              this.negative = 1;
              return this;
            }

            this.words[0] -= num;

            if (this.length === 1 && this.words[0] < 0) {
              this.words[0] = -this.words[0];
              this.negative = 1;
            } else {
              // Carry
              for (var i = 0; i < this.length && this.words[i] < 0; i++) {
                this.words[i] += 0x4000000;
                this.words[i + 1] -= 1;
              }
            }

            return this.strip();
          };

          BN.prototype.addn = function addn(num) {
            return this.clone().iaddn(num);
          };

          BN.prototype.subn = function subn(num) {
            return this.clone().isubn(num);
          };

          BN.prototype.iabs = function iabs() {
            this.negative = 0;

            return this;
          };

          BN.prototype.abs = function abs() {
            return this.clone().iabs();
          };

          BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
            var len = num.length + shift;
            var i;

            this._expand(len);

            var w;
            var carry = 0;
            for (i = 0; i < num.length; i++) {
              w = (this.words[i + shift] | 0) + carry;
              var right = (num.words[i] | 0) * mul;
              w -= right & 0x3ffffff;
              carry = (w >> 26) - ((right / 0x4000000) | 0);
              this.words[i + shift] = w & 0x3ffffff;
            }
            for (; i < this.length - shift; i++) {
              w = (this.words[i + shift] | 0) + carry;
              carry = w >> 26;
              this.words[i + shift] = w & 0x3ffffff;
            }

            if (carry === 0) return this.strip();

            // Subtraction overflow
            assert(carry === -1);
            carry = 0;
            for (i = 0; i < this.length; i++) {
              w = -(this.words[i] | 0) + carry;
              carry = w >> 26;
              this.words[i] = w & 0x3ffffff;
            }
            this.negative = 1;

            return this.strip();
          };

          BN.prototype._wordDiv = function _wordDiv(num, mode) {
            var shift = this.length - num.length;

            var a = this.clone();
            var b = num;

            // Normalize
            var bhi = b.words[b.length - 1] | 0;
            var bhiBits = this._countBits(bhi);
            shift = 26 - bhiBits;
            if (shift !== 0) {
              b = b.ushln(shift);
              a.iushln(shift);
              bhi = b.words[b.length - 1] | 0;
            }

            // Initialize quotient
            var m = a.length - b.length;
            var q;

            if (mode !== 'mod') {
              q = new BN(null);
              q.length = m + 1;
              q.words = new Array(q.length);
              for (var i = 0; i < q.length; i++) {
                q.words[i] = 0;
              }
            }

            var diff = a.clone()._ishlnsubmul(b, 1, m);
            if (diff.negative === 0) {
              a = diff;
              if (q) {
                q.words[m] = 1;
              }
            }

            for (var j = m - 1; j >= 0; j--) {
              var qj = (a.words[b.length + j] | 0) * 0x4000000 +
                (a.words[b.length + j - 1] | 0);

              // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
              // (0x7ffffff)
              qj = Math.min((qj / bhi) | 0, 0x3ffffff);

              a._ishlnsubmul(b, qj, j);
              while (a.negative !== 0) {
                qj--;
                a.negative = 0;
                a._ishlnsubmul(b, 1, j);
                if (!a.isZero()) {
                  a.negative ^= 1;
                }
              }
              if (q) {
                q.words[j] = qj;
              }
            }
            if (q) {
              q.strip();
            }
            a.strip();

            // Denormalize
            if (mode !== 'div' && shift !== 0) {
              a.iushrn(shift);
            }

            return {
              div: q || null,
              mod: a
            };
          };

          // NOTE: 1) `mode` can be set to `mod` to request mod only,
          //       to `div` to request div only, or be absent to
          //       request both div & mod
          //       2) `positive` is true if unsigned mod is requested
          BN.prototype.divmod = function divmod(num, mode, positive) {
            assert(!num.isZero());

            if (this.isZero()) {
              return {
                div: new BN(0),
                mod: new BN(0)
              };
            }

            var div, mod, res;
            if (this.negative !== 0 && num.negative === 0) {
              res = this.neg().divmod(num, mode);

              if (mode !== 'mod') {
                div = res.div.neg();
              }

              if (mode !== 'div') {
                mod = res.mod.neg();
                if (positive && mod.negative !== 0) {
                  mod.iadd(num);
                }
              }

              return {
                div: div,
                mod: mod
              };
            }

            if (this.negative === 0 && num.negative !== 0) {
              res = this.divmod(num.neg(), mode);

              if (mode !== 'mod') {
                div = res.div.neg();
              }

              return {
                div: div,
                mod: res.mod
              };
            }

            if ((this.negative & num.negative) !== 0) {
              res = this.neg().divmod(num.neg(), mode);

              if (mode !== 'div') {
                mod = res.mod.neg();
                if (positive && mod.negative !== 0) {
                  mod.isub(num);
                }
              }

              return {
                div: res.div,
                mod: mod
              };
            }

            // Both numbers are positive at this point

            // Strip both numbers to approximate shift value
            if (num.length > this.length || this.cmp(num) < 0) {
              return {
                div: new BN(0),
                mod: this
              };
            }

            // Very short reduction
            if (num.length === 1) {
              if (mode === 'div') {
                return {
                  div: this.divn(num.words[0]),
                  mod: null
                };
              }

              if (mode === 'mod') {
                return {
                  div: null,
                  mod: new BN(this.modn(num.words[0]))
                };
              }

              return {
                div: this.divn(num.words[0]),
                mod: new BN(this.modn(num.words[0]))
              };
            }

            return this._wordDiv(num, mode);
          };

          // Find `this` / `num`
          BN.prototype.div = function div(num) {
            return this.divmod(num, 'div', false).div;
          };

          // Find `this` % `num`
          BN.prototype.mod = function mod(num) {
            return this.divmod(num, 'mod', false).mod;
          };

          BN.prototype.umod = function umod(num) {
            return this.divmod(num, 'mod', true).mod;
          };

          // Find Round(`this` / `num`)
          BN.prototype.divRound = function divRound(num) {
            var dm = this.divmod(num);

            // Fast case - exact division
            if (dm.mod.isZero()) return dm.div;

            var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;

            var half = num.ushrn(1);
            var r2 = num.andln(1);
            var cmp = mod.cmp(half);

            // Round down
            if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;

            // Round up
            return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
          };

          BN.prototype.modn = function modn(num) {
            assert(num <= 0x3ffffff);
            var p = (1 << 26) % num;

            var acc = 0;
            for (var i = this.length - 1; i >= 0; i--) {
              acc = (p * acc + (this.words[i] | 0)) % num;
            }

            return acc;
          };

          // In-place division by number
          BN.prototype.idivn = function idivn(num) {
            assert(num <= 0x3ffffff);

            var carry = 0;
            for (var i = this.length - 1; i >= 0; i--) {
              var w = (this.words[i] | 0) + carry * 0x4000000;
              this.words[i] = (w / num) | 0;
              carry = w % num;
            }

            return this.strip();
          };

          BN.prototype.divn = function divn(num) {
            return this.clone().idivn(num);
          };

          BN.prototype.egcd = function egcd(p) {
            assert(p.negative === 0);
            assert(!p.isZero());

            var x = this;
            var y = p.clone();

            if (x.negative !== 0) {
              x = x.umod(p);
            } else {
              x = x.clone();
            }

            // A * x + B * y = x
            var A = new BN(1);
            var B = new BN(0);

            // C * x + D * y = y
            var C = new BN(0);
            var D = new BN(1);

            var g = 0;

            while (x.isEven() && y.isEven()) {
              x.iushrn(1);
              y.iushrn(1);
              ++g;
            }

            var yp = y.clone();
            var xp = x.clone();

            while (!x.isZero()) {
              for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
              if (i > 0) {
                x.iushrn(i);
                while (i-- > 0) {
                  if (A.isOdd() || B.isOdd()) {
                    A.iadd(yp);
                    B.isub(xp);
                  }

                  A.iushrn(1);
                  B.iushrn(1);
                }
              }

              for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
              if (j > 0) {
                y.iushrn(j);
                while (j-- > 0) {
                  if (C.isOdd() || D.isOdd()) {
                    C.iadd(yp);
                    D.isub(xp);
                  }

                  C.iushrn(1);
                  D.iushrn(1);
                }
              }

              if (x.cmp(y) >= 0) {
                x.isub(y);
                A.isub(C);
                B.isub(D);
              } else {
                y.isub(x);
                C.isub(A);
                D.isub(B);
              }
            }

            return {
              a: C,
              b: D,
              gcd: y.iushln(g)
            };
          };

          // This is reduced incarnation of the binary EEA
          // above, designated to invert members of the
          // _prime_ fields F(p) at a maximal speed
          BN.prototype._invmp = function _invmp(p) {
            assert(p.negative === 0);
            assert(!p.isZero());

            var a = this;
            var b = p.clone();

            if (a.negative !== 0) {
              a = a.umod(p);
            } else {
              a = a.clone();
            }

            var x1 = new BN(1);
            var x2 = new BN(0);

            var delta = b.clone();

            while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
              for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
              if (i > 0) {
                a.iushrn(i);
                while (i-- > 0) {
                  if (x1.isOdd()) {
                    x1.iadd(delta);
                  }

                  x1.iushrn(1);
                }
              }

              for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
              if (j > 0) {
                b.iushrn(j);
                while (j-- > 0) {
                  if (x2.isOdd()) {
                    x2.iadd(delta);
                  }

                  x2.iushrn(1);
                }
              }

              if (a.cmp(b) >= 0) {
                a.isub(b);
                x1.isub(x2);
              } else {
                b.isub(a);
                x2.isub(x1);
              }
            }

            var res;
            if (a.cmpn(1) === 0) {
              res = x1;
            } else {
              res = x2;
            }

            if (res.cmpn(0) < 0) {
              res.iadd(p);
            }

            return res;
          };

          BN.prototype.gcd = function gcd(num) {
            if (this.isZero()) return num.abs();
            if (num.isZero()) return this.abs();

            var a = this.clone();
            var b = num.clone();
            a.negative = 0;
            b.negative = 0;

            // Remove common factor of two
            for (var shift = 0; a.isEven() && b.isEven(); shift++) {
              a.iushrn(1);
              b.iushrn(1);
            }

            do {
              while (a.isEven()) {
                a.iushrn(1);
              }
              while (b.isEven()) {
                b.iushrn(1);
              }

              var r = a.cmp(b);
              if (r < 0) {
                // Swap `a` and `b` to make `a` always bigger than `b`
                var t = a;
                a = b;
                b = t;
              } else if (r === 0 || b.cmpn(1) === 0) {
                break;
              }

              a.isub(b);
            } while (true);

            return b.iushln(shift);
          };

          // Invert number in the field F(num)
          BN.prototype.invm = function invm(num) {
            return this.egcd(num).a.umod(num);
          };

          BN.prototype.isEven = function isEven() {
            return (this.words[0] & 1) === 0;
          };

          BN.prototype.isOdd = function isOdd() {
            return (this.words[0] & 1) === 1;
          };

          // And first word and num
          BN.prototype.andln = function andln(num) {
            return this.words[0] & num;
          };

          // Increment at the bit position in-line
          BN.prototype.bincn = function bincn(bit) {
            assert(typeof bit === 'number');
            var r = bit % 26;
            var s = (bit - r) / 26;
            var q = 1 << r;

            // Fast case: bit is much higher than all existing words
            if (this.length <= s) {
              this._expand(s + 1);
              this.words[s] |= q;
              return this;
            }

            // Add bit and propagate, if needed
            var carry = q;
            for (var i = s; carry !== 0 && i < this.length; i++) {
              var w = this.words[i] | 0;
              w += carry;
              carry = w >>> 26;
              w &= 0x3ffffff;
              this.words[i] = w;
            }
            if (carry !== 0) {
              this.words[i] = carry;
              this.length++;
            }
            return this;
          };

          BN.prototype.isZero = function isZero() {
            return this.length === 1 && this.words[0] === 0;
          };

          BN.prototype.cmpn = function cmpn(num) {
            var negative = num < 0;

            if (this.negative !== 0 && !negative) return -1;
            if (this.negative === 0 && negative) return 1;

            this.strip();

            var res;
            if (this.length > 1) {
              res = 1;
            } else {
              if (negative) {
                num = -num;
              }

              assert(num <= 0x3ffffff, 'Number is too big');

              var w = this.words[0] | 0;
              res = w === num ? 0 : w < num ? -1 : 1;
            }
            if (this.negative !== 0) return -res | 0;
            return res;
          };

          // Compare two numbers and return:
          // 1 - if `this` > `num`
          // 0 - if `this` == `num`
          // -1 - if `this` < `num`
          BN.prototype.cmp = function cmp(num) {
            if (this.negative !== 0 && num.negative === 0) return -1;
            if (this.negative === 0 && num.negative !== 0) return 1;

            var res = this.ucmp(num);
            if (this.negative !== 0) return -res | 0;
            return res;
          };

          // Unsigned comparison
          BN.prototype.ucmp = function ucmp(num) {
            // At this point both numbers have the same sign
            if (this.length > num.length) return 1;
            if (this.length < num.length) return -1;

            var res = 0;
            for (var i = this.length - 1; i >= 0; i--) {
              var a = this.words[i] | 0;
              var b = num.words[i] | 0;

              if (a === b) continue;
              if (a < b) {
                res = -1;
              } else if (a > b) {
                res = 1;
              }
              break;
            }
            return res;
          };

          BN.prototype.gtn = function gtn(num) {
            return this.cmpn(num) === 1;
          };

          BN.prototype.gt = function gt(num) {
            return this.cmp(num) === 1;
          };

          BN.prototype.gten = function gten(num) {
            return this.cmpn(num) >= 0;
          };

          BN.prototype.gte = function gte(num) {
            return this.cmp(num) >= 0;
          };

          BN.prototype.ltn = function ltn(num) {
            return this.cmpn(num) === -1;
          };

          BN.prototype.lt = function lt(num) {
            return this.cmp(num) === -1;
          };

          BN.prototype.lten = function lten(num) {
            return this.cmpn(num) <= 0;
          };

          BN.prototype.lte = function lte(num) {
            return this.cmp(num) <= 0;
          };

          BN.prototype.eqn = function eqn(num) {
            return this.cmpn(num) === 0;
          };

          BN.prototype.eq = function eq(num) {
            return this.cmp(num) === 0;
          };

          //
          // A reduce context, could be using montgomery or something better, depending
          // on the `m` itself.
          //
          BN.red = function red(num) {
            return new Red(num);
          };

          BN.prototype.toRed = function toRed(ctx) {
            assert(!this.red, 'Already a number in reduction context');
            assert(this.negative === 0, 'red works only with positives');
            return ctx.convertTo(this)._forceRed(ctx);
          };

          BN.prototype.fromRed = function fromRed() {
            assert(this.red, 'fromRed works only with numbers in reduction context');
            return this.red.convertFrom(this);
          };

          BN.prototype._forceRed = function _forceRed(ctx) {
            this.red = ctx;
            return this;
          };

          BN.prototype.forceRed = function forceRed(ctx) {
            assert(!this.red, 'Already a number in reduction context');
            return this._forceRed(ctx);
          };

          BN.prototype.redAdd = function redAdd(num) {
            assert(this.red, 'redAdd works only with red numbers');
            return this.red.add(this, num);
          };

          BN.prototype.redIAdd = function redIAdd(num) {
            assert(this.red, 'redIAdd works only with red numbers');
            return this.red.iadd(this, num);
          };

          BN.prototype.redSub = function redSub(num) {
            assert(this.red, 'redSub works only with red numbers');
            return this.red.sub(this, num);
          };

          BN.prototype.redISub = function redISub(num) {
            assert(this.red, 'redISub works only with red numbers');
            return this.red.isub(this, num);
          };

          BN.prototype.redShl = function redShl(num) {
            assert(this.red, 'redShl works only with red numbers');
            return this.red.shl(this, num);
          };

          BN.prototype.redMul = function redMul(num) {
            assert(this.red, 'redMul works only with red numbers');
            this.red._verify2(this, num);
            return this.red.mul(this, num);
          };

          BN.prototype.redIMul = function redIMul(num) {
            assert(this.red, 'redMul works only with red numbers');
            this.red._verify2(this, num);
            return this.red.imul(this, num);
          };

          BN.prototype.redSqr = function redSqr() {
            assert(this.red, 'redSqr works only with red numbers');
            this.red._verify1(this);
            return this.red.sqr(this);
          };

          BN.prototype.redISqr = function redISqr() {
            assert(this.red, 'redISqr works only with red numbers');
            this.red._verify1(this);
            return this.red.isqr(this);
          };

          // Square root over p
          BN.prototype.redSqrt = function redSqrt() {
            assert(this.red, 'redSqrt works only with red numbers');
            this.red._verify1(this);
            return this.red.sqrt(this);
          };

          BN.prototype.redInvm = function redInvm() {
            assert(this.red, 'redInvm works only with red numbers');
            this.red._verify1(this);
            return this.red.invm(this);
          };

          // Return negative clone of `this` % `red modulo`
          BN.prototype.redNeg = function redNeg() {
            assert(this.red, 'redNeg works only with red numbers');
            this.red._verify1(this);
            return this.red.neg(this);
          };

          BN.prototype.redPow = function redPow(num) {
            assert(this.red && !num.red, 'redPow(normalNum)');
            this.red._verify1(this);
            return this.red.pow(this, num);
          };

          // Prime numbers with efficient reduction
          var primes = {
            k256: null,
            p224: null,
            p192: null,
            p25519: null
          };

          // Pseudo-Mersenne prime
          function MPrime(name, p) {
            // P = 2 ^ N - K
            this.name = name;
            this.p = new BN(p, 16);
            this.n = this.p.bitLength();
            this.k = new BN(1).iushln(this.n).isub(this.p);

            this.tmp = this._tmp();
          }

          MPrime.prototype._tmp = function _tmp() {
            var tmp = new BN(null);
            tmp.words = new Array(Math.ceil(this.n / 13));
            return tmp;
          };

          MPrime.prototype.ireduce = function ireduce(num) {
            // Assumes that `num` is less than `P^2`
            // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
            var r = num;
            var rlen;

            do {
              this.split(r, this.tmp);
              r = this.imulK(r);
              r = r.iadd(this.tmp);
              rlen = r.bitLength();
            } while (rlen > this.n);

            var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
            if (cmp === 0) {
              r.words[0] = 0;
              r.length = 1;
            } else if (cmp > 0) {
              r.isub(this.p);
            } else {
              r.strip();
            }

            return r;
          };

          MPrime.prototype.split = function split(input, out) {
            input.iushrn(this.n, 0, out);
          };

          MPrime.prototype.imulK = function imulK(num) {
            return num.imul(this.k);
          };

          function K256() {
            MPrime.call(
              this,
              'k256',
              'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
          }
          inherits(K256, MPrime);

          K256.prototype.split = function split(input, output) {
            // 256 = 9 * 26 + 22
            var mask = 0x3fffff;

            var outLen = Math.min(input.length, 9);
            for (var i = 0; i < outLen; i++) {
              output.words[i] = input.words[i];
            }
            output.length = outLen;

            if (input.length <= 9) {
              input.words[0] = 0;
              input.length = 1;
              return;
            }

            // Shift by 9 limbs
            var prev = input.words[9];
            output.words[output.length++] = prev & mask;

            for (i = 10; i < input.length; i++) {
              var next = input.words[i] | 0;
              input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);
              prev = next;
            }
            prev >>>= 22;
            input.words[i - 10] = prev;
            if (prev === 0 && input.length > 10) {
              input.length -= 10;
            } else {
              input.length -= 9;
            }
          };

          K256.prototype.imulK = function imulK(num) {
            // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
            num.words[num.length] = 0;
            num.words[num.length + 1] = 0;
            num.length += 2;

            // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
            var lo = 0;
            for (var i = 0; i < num.length; i++) {
              var w = num.words[i] | 0;
              lo += w * 0x3d1;
              num.words[i] = lo & 0x3ffffff;
              lo = w * 0x40 + ((lo / 0x4000000) | 0);
            }

            // Fast length reduction
            if (num.words[num.length - 1] === 0) {
              num.length--;
              if (num.words[num.length - 1] === 0) {
                num.length--;
              }
            }
            return num;
          };

          function P224() {
            MPrime.call(
              this,
              'p224',
              'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
          }
          inherits(P224, MPrime);

          function P192() {
            MPrime.call(
              this,
              'p192',
              'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
          }
          inherits(P192, MPrime);

          function P25519() {
            // 2 ^ 255 - 19
            MPrime.call(
              this,
              '25519',
              '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
          }
          inherits(P25519, MPrime);

          P25519.prototype.imulK = function imulK(num) {
            // K = 0x13
            var carry = 0;
            for (var i = 0; i < num.length; i++) {
              var hi = (num.words[i] | 0) * 0x13 + carry;
              var lo = hi & 0x3ffffff;
              hi >>>= 26;

              num.words[i] = lo;
              carry = hi;
            }
            if (carry !== 0) {
              num.words[num.length++] = carry;
            }
            return num;
          };

          // Exported mostly for testing purposes, use plain name instead
          BN._prime = function prime(name) {
            // Cached version of prime
            if (primes[name]) return primes[name];

            var prime;
            if (name === 'k256') {
              prime = new K256();
            } else if (name === 'p224') {
              prime = new P224();
            } else if (name === 'p192') {
              prime = new P192();
            } else if (name === 'p25519') {
              prime = new P25519();
            } else {
              throw new Error('Unknown prime ' + name);
            }
            primes[name] = prime;

            return prime;
          };

          //
          // Base reduction engine
          //
          function Red(m) {
            if (typeof m === 'string') {
              var prime = BN._prime(m);
              this.m = prime.p;
              this.prime = prime;
            } else {
              assert(m.gtn(1), 'modulus must be greater than 1');
              this.m = m;
              this.prime = null;
            }
          }

          Red.prototype._verify1 = function _verify1(a) {
            assert(a.negative === 0, 'red works only with positives');
            assert(a.red, 'red works only with red numbers');
          };

          Red.prototype._verify2 = function _verify2(a, b) {
            assert((a.negative | b.negative) === 0, 'red works only with positives');
            assert(a.red && a.red === b.red,
              'red works only with red numbers');
          };

          Red.prototype.imod = function imod(a) {
            if (this.prime) return this.prime.ireduce(a)._forceRed(this);
            return a.umod(this.m)._forceRed(this);
          };

          Red.prototype.neg = function neg(a) {
            if (a.isZero()) {
              return a.clone();
            }

            return this.m.sub(a)._forceRed(this);
          };

          Red.prototype.add = function add(a, b) {
            this._verify2(a, b);

            var res = a.add(b);
            if (res.cmp(this.m) >= 0) {
              res.isub(this.m);
            }
            return res._forceRed(this);
          };

          Red.prototype.iadd = function iadd(a, b) {
            this._verify2(a, b);

            var res = a.iadd(b);
            if (res.cmp(this.m) >= 0) {
              res.isub(this.m);
            }
            return res;
          };

          Red.prototype.sub = function sub(a, b) {
            this._verify2(a, b);

            var res = a.sub(b);
            if (res.cmpn(0) < 0) {
              res.iadd(this.m);
            }
            return res._forceRed(this);
          };

          Red.prototype.isub = function isub(a, b) {
            this._verify2(a, b);

            var res = a.isub(b);
            if (res.cmpn(0) < 0) {
              res.iadd(this.m);
            }
            return res;
          };

          Red.prototype.shl = function shl(a, num) {
            this._verify1(a);
            return this.imod(a.ushln(num));
          };

          Red.prototype.imul = function imul(a, b) {
            this._verify2(a, b);
            return this.imod(a.imul(b));
          };

          Red.prototype.mul = function mul(a, b) {
            this._verify2(a, b);
            return this.imod(a.mul(b));
          };

          Red.prototype.isqr = function isqr(a) {
            return this.imul(a, a.clone());
          };

          Red.prototype.sqr = function sqr(a) {
            return this.mul(a, a);
          };

          Red.prototype.sqrt = function sqrt(a) {
            if (a.isZero()) return a.clone();

            var mod3 = this.m.andln(3);
            assert(mod3 % 2 === 1);

            // Fast case
            if (mod3 === 3) {
              var pow = this.m.add(new BN(1)).iushrn(2);
              return this.pow(a, pow);
            }

            // Tonelli-Shanks algorithm (Totally unoptimized and slow)
            //
            // Find Q and S, that Q * 2 ^ S = (P - 1)
            var q = this.m.subn(1);
            var s = 0;
            while (!q.isZero() && q.andln(1) === 0) {
              s++;
              q.iushrn(1);
            }
            assert(!q.isZero());

            var one = new BN(1).toRed(this);
            var nOne = one.redNeg();

            // Find quadratic non-residue
            // NOTE: Max is such because of generalized Riemann hypothesis.
            var lpow = this.m.subn(1).iushrn(1);
            var z = this.m.bitLength();
            z = new BN(2 * z * z).toRed(this);

            while (this.pow(z, lpow).cmp(nOne) !== 0) {
              z.redIAdd(nOne);
            }

            var c = this.pow(z, q);
            var r = this.pow(a, q.addn(1).iushrn(1));
            var t = this.pow(a, q);
            var m = s;
            while (t.cmp(one) !== 0) {
              var tmp = t;
              for (var i = 0; tmp.cmp(one) !== 0; i++) {
                tmp = tmp.redSqr();
              }
              assert(i < m);
              var b = this.pow(c, new BN(1).iushln(m - i - 1));

              r = r.redMul(b);
              c = b.redSqr();
              t = t.redMul(c);
              m = i;
            }

            return r;
          };

          Red.prototype.invm = function invm(a) {
            var inv = a._invmp(this.m);
            if (inv.negative !== 0) {
              inv.negative = 0;
              return this.imod(inv).redNeg();
            } else {
              return this.imod(inv);
            }
          };

          Red.prototype.pow = function pow(a, num) {
            if (num.isZero()) return new BN(1);
            if (num.cmpn(1) === 0) return a.clone();

            var windowSize = 4;
            var wnd = new Array(1 << windowSize);
            wnd[0] = new BN(1).toRed(this);
            wnd[1] = a;
            for (var i = 2; i < wnd.length; i++) {
              wnd[i] = this.mul(wnd[i - 1], a);
            }

            var res = wnd[0];
            var current = 0;
            var currentLen = 0;
            var start = num.bitLength() % 26;
            if (start === 0) {
              start = 26;
            }

            for (i = num.length - 1; i >= 0; i--) {
              var word = num.words[i];
              for (var j = start - 1; j >= 0; j--) {
                var bit = (word >> j) & 1;
                if (res !== wnd[0]) {
                  res = this.sqr(res);
                }

                if (bit === 0 && current === 0) {
                  currentLen = 0;
                  continue;
                }

                current <<= 1;
                current |= bit;
                currentLen++;
                if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;

                res = this.mul(res, wnd[current]);
                currentLen = 0;
                current = 0;
              }
              start = 26;
            }

            return res;
          };

          Red.prototype.convertTo = function convertTo(num) {
            var r = num.umod(this.m);

            return r === num ? r.clone() : r;
          };

          Red.prototype.convertFrom = function convertFrom(num) {
            var res = num.clone();
            res.red = null;
            return res;
          };

          //
          // Montgomery method engine
          //

          BN.mont = function mont(num) {
            return new Mont(num);
          };

          function Mont(m) {
            Red.call(this, m);

            this.shift = this.m.bitLength();
            if (this.shift % 26 !== 0) {
              this.shift += 26 - (this.shift % 26);
            }

            this.r = new BN(1).iushln(this.shift);
            this.r2 = this.imod(this.r.sqr());
            this.rinv = this.r._invmp(this.m);

            this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
            this.minv = this.minv.umod(this.r);
            this.minv = this.r.sub(this.minv);
          }
          inherits(Mont, Red);

          Mont.prototype.convertTo = function convertTo(num) {
            return this.imod(num.ushln(this.shift));
          };

          Mont.prototype.convertFrom = function convertFrom(num) {
            var r = this.imod(num.mul(this.rinv));
            r.red = null;
            return r;
          };

          Mont.prototype.imul = function imul(a, b) {
            if (a.isZero() || b.isZero()) {
              a.words[0] = 0;
              a.length = 1;
              return a;
            }

            var t = a.imul(b);
            var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
            var u = t.isub(c).iushrn(this.shift);
            var res = u;

            if (u.cmp(this.m) >= 0) {
              res = u.isub(this.m);
            } else if (u.cmpn(0) < 0) {
              res = u.iadd(this.m);
            }

            return res._forceRed(this);
          };

          Mont.prototype.mul = function mul(a, b) {
            if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);

            var t = a.mul(b);
            var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
            var u = t.isub(c).iushrn(this.shift);
            var res = u;
            if (u.cmp(this.m) >= 0) {
              res = u.isub(this.m);
            } else if (u.cmpn(0) < 0) {
              res = u.iadd(this.m);
            }

            return res._forceRed(this);
          };

          Mont.prototype.invm = function invm(a) {
            // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
            var res = this.imod(a._invmp(this.m).mul(this.r2));
            return res._forceRed(this);
          };
        })(typeof module === 'undefined' || module, this);

        /* WEBPACK VAR INJECTION */
      }.call(this, __webpack_require__(/*! ./../../../../../../../../AppData/Roaming/npm/node_modules/webpack/buildin/module.js */ "../../../../../AppData/Roaming/npm/node_modules/webpack/buildin/module.js")(module)))

      /***/
    }),

/***/ "../ethjs-unit/lib/index.js":
/*!**********************************!*\
  !*** ../ethjs-unit/lib/index.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

      "use strict";


      var BN = __webpack_require__(/*! bn.js */ "../ethjs-unit/node_modules/bn.js/lib/bn.js");
      var numberToBN = __webpack_require__(/*! number-to-bn */ "../number-to-bn/src/index.js");

      var zero = new BN(0);
      var negative1 = new BN(-1);

      // complete ethereum unit map
      var unitMap = {
        'noether': '0', // eslint-disable-line
        'wei': '1', // eslint-disable-line
        'kwei': '1000', // eslint-disable-line
        'Kwei': '1000', // eslint-disable-line
        'babbage': '1000', // eslint-disable-line
        'femtoether': '1000', // eslint-disable-line
        'mwei': '1000000', // eslint-disable-line
        'Mwei': '1000000', // eslint-disable-line
        'lovelace': '1000000', // eslint-disable-line
        'picoether': '1000000', // eslint-disable-line
        'gwei': '1000000000', // eslint-disable-line
        'Gwei': '1000000000', // eslint-disable-line
        'shannon': '1000000000', // eslint-disable-line
        'nanoether': '1000000000', // eslint-disable-line
        'nano': '1000000000', // eslint-disable-line
        'szabo': '1000000000000', // eslint-disable-line
        'microether': '1000000000000', // eslint-disable-line
        'micro': '1000000000000', // eslint-disable-line
        'finney': '1000000000000000', // eslint-disable-line
        'milliether': '1000000000000000', // eslint-disable-line
        'milli': '1000000000000000', // eslint-disable-line
        'ether': '1000000000000000000', // eslint-disable-line
        'kether': '1000000000000000000000', // eslint-disable-line
        'grand': '1000000000000000000000', // eslint-disable-line
        'mether': '1000000000000000000000000', // eslint-disable-line
        'gether': '1000000000000000000000000000', // eslint-disable-line
        'tether': '1000000000000000000000000000000'
      };

      /**
       * Returns value of unit in Wei
       *
       * @method getValueOfUnit
       * @param {String} unit the unit to convert to, default ether
       * @returns {BigNumber} value of the unit (in Wei)
       * @throws error if the unit is not correct:w
       */
      function getValueOfUnit(unitInput) {
        var unit = unitInput ? unitInput.toLowerCase() : 'ether';
        var unitValue = unitMap[unit]; // eslint-disable-line

        if (typeof unitValue !== 'string') {
          throw new Error('[ethjs-unit] the unit provided ' + unitInput + ' doesn\'t exists, please use the one of the following units ' + JSON.stringify(unitMap, null, 2));
        }

        return new BN(unitValue, 10);
      }

      function numberToString(arg) {
        if (typeof arg === 'string') {
          if (!arg.match(/^-?[0-9.]+$/)) {
            throw new Error('while converting number to string, invalid number value \'' + arg + '\', should be a number matching (^-?[0-9.]+).');
          }
          return arg;
        } else if (typeof arg === 'number') {
          return String(arg);
        } else if (typeof arg === 'object' && arg.toString && (arg.toTwos || arg.dividedToIntegerBy)) {
          if (arg.toPrecision) {
            return String(arg.toPrecision());
          } else {
            // eslint-disable-line
            return arg.toString(10);
          }
        }
        throw new Error('while converting number to string, invalid number value \'' + arg + '\' type ' + typeof arg + '.');
      }

      function fromWei(weiInput, unit, optionsInput) {
        var wei = numberToBN(weiInput); // eslint-disable-line
        var negative = wei.lt(zero); // eslint-disable-line
        var base = getValueOfUnit(unit);
        var baseLength = unitMap[unit].length - 1 || 1;
        var options = optionsInput || {};

        if (negative) {
          wei = wei.mul(negative1);
        }

        var fraction = wei.mod(base).toString(10); // eslint-disable-line

        while (fraction.length < baseLength) {
          fraction = '0' + fraction;
        }

        if (!options.pad) {
          fraction = fraction.match(/^([0-9]*[1-9]|0)(0*)/)[1];
        }

        var whole = wei.div(base).toString(10); // eslint-disable-line

        if (options.commify) {
          whole = whole.replace(/\B(?=(\d{3})+(?!\d))/g, ',');
        }

        var value = '' + whole + (fraction == '0' ? '' : '.' + fraction); // eslint-disable-line

        if (negative) {
          value = '-' + value;
        }

        return value;
      }

      function toWei(etherInput, unit) {
        var ether = numberToString(etherInput); // eslint-disable-line
        var base = getValueOfUnit(unit);
        var baseLength = unitMap[unit].length - 1 || 1;

        // Is it negative?
        var negative = ether.substring(0, 1) === '-'; // eslint-disable-line
        if (negative) {
          ether = ether.substring(1);
        }

        if (ether === '.') {
          throw new Error('[ethjs-unit] while converting number ' + etherInput + ' to wei, invalid value');
        }

        // Split it into a whole and fractional part
        var comps = ether.split('.'); // eslint-disable-line
        if (comps.length > 2) {
          throw new Error('[ethjs-unit] while converting number ' + etherInput + ' to wei,  too many decimal points');
        }

        var whole = comps[0],
          fraction = comps[1]; // eslint-disable-line

        if (!whole) {
          whole = '0';
        }
        if (!fraction) {
          fraction = '0';
        }
        if (fraction.length > baseLength) {
          throw new Error('[ethjs-unit] while converting number ' + etherInput + ' to wei, too many decimal places');
        }

        while (fraction.length < baseLength) {
          fraction += '0';
        }

        whole = new BN(whole);
        fraction = new BN(fraction);
        var wei = whole.mul(base).add(fraction); // eslint-disable-line

        if (negative) {
          wei = wei.mul(negative1);
        }

        return new BN(wei.toString(10), 10);
      }

      module.exports = {
        unitMap: unitMap,
        numberToString: numberToString,
        getValueOfUnit: getValueOfUnit,
        fromWei: fromWei,
        toWei: toWei
      };

      /***/
    }),

/***/ "../ethjs-unit/node_modules/bn.js/lib/bn.js":
/*!**************************************************!*\
  !*** ../ethjs-unit/node_modules/bn.js/lib/bn.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function (module) {
        (function (module, exports) {
          'use strict';

          // Utils
          function assert(val, msg) {
            if (!val) throw new Error(msg || 'Assertion failed');
          }

          // Could use `inherits` module, but don't want to move from single file
          // architecture yet.
          function inherits(ctor, superCtor) {
            ctor.super_ = superCtor;
            var TempCtor = function () { };
            TempCtor.prototype = superCtor.prototype;
            ctor.prototype = new TempCtor();
            ctor.prototype.constructor = ctor;
          }

          // BN

          function BN(number, base, endian) {
            if (BN.isBN(number)) {
              return number;
            }

            this.negative = 0;
            this.words = null;
            this.length = 0;

            // Reduction context
            this.red = null;

            if (number !== null) {
              if (base === 'le' || base === 'be') {
                endian = base;
                base = 10;
              }

              this._init(number || 0, base || 10, endian || 'be');
            }
          }
          if (typeof module === 'object') {
            module.exports = BN;
          } else {
            exports.BN = BN;
          }

          BN.BN = BN;
          BN.wordSize = 26;

          var Buffer;
          try {
            Buffer = __webpack_require__(/*! buffer */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/buffer/index.js").Buffer;
          } catch (e) {
          }

          BN.isBN = function isBN(num) {
            if (num instanceof BN) {
              return true;
            }

            return num !== null && typeof num === 'object' &&
              num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
          };

          BN.max = function max(left, right) {
            if (left.cmp(right) > 0) return left;
            return right;
          };

          BN.min = function min(left, right) {
            if (left.cmp(right) < 0) return left;
            return right;
          };

          BN.prototype._init = function init(number, base, endian) {
            if (typeof number === 'number') {
              return this._initNumber(number, base, endian);
            }

            if (typeof number === 'object') {
              return this._initArray(number, base, endian);
            }

            if (base === 'hex') {
              base = 16;
            }
            assert(base === (base | 0) && base >= 2 && base <= 36);

            number = number.toString().replace(/\s+/g, '');
            var start = 0;
            if (number[0] === '-') {
              start++;
            }

            if (base === 16) {
              this._parseHex(number, start);
            } else {
              this._parseBase(number, base, start);
            }

            if (number[0] === '-') {
              this.negative = 1;
            }

            this.strip();

            if (endian !== 'le') return;

            this._initArray(this.toArray(), base, endian);
          };

          BN.prototype._initNumber = function _initNumber(number, base, endian) {
            if (number < 0) {
              this.negative = 1;
              number = -number;
            }
            if (number < 0x4000000) {
              this.words = [number & 0x3ffffff];
              this.length = 1;
            } else if (number < 0x10000000000000) {
              this.words = [
                number & 0x3ffffff,
                (number / 0x4000000) & 0x3ffffff
              ];
              this.length = 2;
            } else {
              assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
              this.words = [
                number & 0x3ffffff,
                (number / 0x4000000) & 0x3ffffff,
                1
              ];
              this.length = 3;
            }

            if (endian !== 'le') return;

            // Reverse the bytes
            this._initArray(this.toArray(), base, endian);
          };

          BN.prototype._initArray = function _initArray(number, base, endian) {
            // Perhaps a Uint8Array
            assert(typeof number.length === 'number');
            if (number.length <= 0) {
              this.words = [0];
              this.length = 1;
              return this;
            }

            this.length = Math.ceil(number.length / 3);
            this.words = new Array(this.length);
            for (var i = 0; i < this.length; i++) {
              this.words[i] = 0;
            }

            var j, w;
            var off = 0;
            if (endian === 'be') {
              for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
                w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
                this.words[j] |= (w << off) & 0x3ffffff;
                this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
                off += 24;
                if (off >= 26) {
                  off -= 26;
                  j++;
                }
              }
            } else if (endian === 'le') {
              for (i = 0, j = 0; i < number.length; i += 3) {
                w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
                this.words[j] |= (w << off) & 0x3ffffff;
                this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
                off += 24;
                if (off >= 26) {
                  off -= 26;
                  j++;
                }
              }
            }
            return this.strip();
          };

          function parseHex(str, start, end) {
            var r = 0;
            var len = Math.min(str.length, end);
            for (var i = start; i < len; i++) {
              var c = str.charCodeAt(i) - 48;

              r <<= 4;

              // 'a' - 'f'
              if (c >= 49 && c <= 54) {
                r |= c - 49 + 0xa;

                // 'A' - 'F'
              } else if (c >= 17 && c <= 22) {
                r |= c - 17 + 0xa;

                // '0' - '9'
              } else {
                r |= c & 0xf;
              }
            }
            return r;
          }

          BN.prototype._parseHex = function _parseHex(number, start) {
            // Create possibly bigger array to ensure that it fits the number
            this.length = Math.ceil((number.length - start) / 6);
            this.words = new Array(this.length);
            for (var i = 0; i < this.length; i++) {
              this.words[i] = 0;
            }

            var j, w;
            // Scan 24-bit chunks and add them to the number
            var off = 0;
            for (i = number.length - 6, j = 0; i >= start; i -= 6) {
              w = parseHex(number, i, i + 6);
              this.words[j] |= (w << off) & 0x3ffffff;
              // NOTE: `0x3fffff` is intentional here, 26bits max shift + 24bit hex limb
              this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;
              off += 24;
              if (off >= 26) {
                off -= 26;
                j++;
              }
            }
            if (i + 6 !== start) {
              w = parseHex(number, start, i + 6);
              this.words[j] |= (w << off) & 0x3ffffff;
              this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;
            }
            this.strip();
          };

          function parseBase(str, start, end, mul) {
            var r = 0;
            var len = Math.min(str.length, end);
            for (var i = start; i < len; i++) {
              var c = str.charCodeAt(i) - 48;

              r *= mul;

              // 'a'
              if (c >= 49) {
                r += c - 49 + 0xa;

                // 'A'
              } else if (c >= 17) {
                r += c - 17 + 0xa;

                // '0' - '9'
              } else {
                r += c;
              }
            }
            return r;
          }

          BN.prototype._parseBase = function _parseBase(number, base, start) {
            // Initialize as zero
            this.words = [0];
            this.length = 1;

            // Find length of limb in base
            for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
              limbLen++;
            }
            limbLen--;
            limbPow = (limbPow / base) | 0;

            var total = number.length - start;
            var mod = total % limbLen;
            var end = Math.min(total, total - mod) + start;

            var word = 0;
            for (var i = start; i < end; i += limbLen) {
              word = parseBase(number, i, i + limbLen, base);

              this.imuln(limbPow);
              if (this.words[0] + word < 0x4000000) {
                this.words[0] += word;
              } else {
                this._iaddn(word);
              }
            }

            if (mod !== 0) {
              var pow = 1;
              word = parseBase(number, i, number.length, base);

              for (i = 0; i < mod; i++) {
                pow *= base;
              }

              this.imuln(pow);
              if (this.words[0] + word < 0x4000000) {
                this.words[0] += word;
              } else {
                this._iaddn(word);
              }
            }
          };

          BN.prototype.copy = function copy(dest) {
            dest.words = new Array(this.length);
            for (var i = 0; i < this.length; i++) {
              dest.words[i] = this.words[i];
            }
            dest.length = this.length;
            dest.negative = this.negative;
            dest.red = this.red;
          };

          BN.prototype.clone = function clone() {
            var r = new BN(null);
            this.copy(r);
            return r;
          };

          BN.prototype._expand = function _expand(size) {
            while (this.length < size) {
              this.words[this.length++] = 0;
            }
            return this;
          };

          // Remove leading `0` from `this`
          BN.prototype.strip = function strip() {
            while (this.length > 1 && this.words[this.length - 1] === 0) {
              this.length--;
            }
            return this._normSign();
          };

          BN.prototype._normSign = function _normSign() {
            // -0 = 0
            if (this.length === 1 && this.words[0] === 0) {
              this.negative = 0;
            }
            return this;
          };

          BN.prototype.inspect = function inspect() {
            return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
          };

          /*
        
          var zeros = [];
          var groupSizes = [];
          var groupBases = [];
        
          var s = '';
          var i = -1;
          while (++i < BN.wordSize) {
            zeros[i] = s;
            s += '0';
          }
          groupSizes[0] = 0;
          groupSizes[1] = 0;
          groupBases[0] = 0;
          groupBases[1] = 0;
          var base = 2 - 1;
          while (++base < 36 + 1) {
            var groupSize = 0;
            var groupBase = 1;
            while (groupBase < (1 << BN.wordSize) / base) {
              groupBase *= base;
              groupSize += 1;
            }
            groupSizes[base] = groupSize;
            groupBases[base] = groupBase;
          }
        
          */

          var zeros = [
            '',
            '0',
            '00',
            '000',
            '0000',
            '00000',
            '000000',
            '0000000',
            '00000000',
            '000000000',
            '0000000000',
            '00000000000',
            '000000000000',
            '0000000000000',
            '00000000000000',
            '000000000000000',
            '0000000000000000',
            '00000000000000000',
            '000000000000000000',
            '0000000000000000000',
            '00000000000000000000',
            '000000000000000000000',
            '0000000000000000000000',
            '00000000000000000000000',
            '000000000000000000000000',
            '0000000000000000000000000'
          ];

          var groupSizes = [
            0, 0,
            25, 16, 12, 11, 10, 9, 8,
            8, 7, 7, 7, 7, 6, 6,
            6, 6, 6, 6, 6, 5, 5,
            5, 5, 5, 5, 5, 5, 5,
            5, 5, 5, 5, 5, 5, 5
          ];

          var groupBases = [
            0, 0,
            33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,
            43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,
            16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,
            6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,
            24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176
          ];

          BN.prototype.toString = function toString(base, padding) {
            base = base || 10;
            padding = padding | 0 || 1;

            var out;
            if (base === 16 || base === 'hex') {
              out = '';
              var off = 0;
              var carry = 0;
              for (var i = 0; i < this.length; i++) {
                var w = this.words[i];
                var word = (((w << off) | carry) & 0xffffff).toString(16);
                carry = (w >>> (24 - off)) & 0xffffff;
                if (carry !== 0 || i !== this.length - 1) {
                  out = zeros[6 - word.length] + word + out;
                } else {
                  out = word + out;
                }
                off += 2;
                if (off >= 26) {
                  off -= 26;
                  i--;
                }
              }
              if (carry !== 0) {
                out = carry.toString(16) + out;
              }
              while (out.length % padding !== 0) {
                out = '0' + out;
              }
              if (this.negative !== 0) {
                out = '-' + out;
              }
              return out;
            }

            if (base === (base | 0) && base >= 2 && base <= 36) {
              // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
              var groupSize = groupSizes[base];
              // var groupBase = Math.pow(base, groupSize);
              var groupBase = groupBases[base];
              out = '';
              var c = this.clone();
              c.negative = 0;
              while (!c.isZero()) {
                var r = c.modn(groupBase).toString(base);
                c = c.idivn(groupBase);

                if (!c.isZero()) {
                  out = zeros[groupSize - r.length] + r + out;
                } else {
                  out = r + out;
                }
              }
              if (this.isZero()) {
                out = '0' + out;
              }
              while (out.length % padding !== 0) {
                out = '0' + out;
              }
              if (this.negative !== 0) {
                out = '-' + out;
              }
              return out;
            }

            assert(false, 'Base should be between 2 and 36');
          };

          BN.prototype.toNumber = function toNumber() {
            var ret = this.words[0];
            if (this.length === 2) {
              ret += this.words[1] * 0x4000000;
            } else if (this.length === 3 && this.words[2] === 0x01) {
              // NOTE: at this stage it is known that the top bit is set
              ret += 0x10000000000000 + (this.words[1] * 0x4000000);
            } else if (this.length > 2) {
              assert(false, 'Number can only safely store up to 53 bits');
            }
            return (this.negative !== 0) ? -ret : ret;
          };

          BN.prototype.toJSON = function toJSON() {
            return this.toString(16);
          };

          BN.prototype.toBuffer = function toBuffer(endian, length) {
            assert(typeof Buffer !== 'undefined');
            return this.toArrayLike(Buffer, endian, length);
          };

          BN.prototype.toArray = function toArray(endian, length) {
            return this.toArrayLike(Array, endian, length);
          };

          BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
            var byteLength = this.byteLength();
            var reqLength = length || Math.max(1, byteLength);
            assert(byteLength <= reqLength, 'byte array longer than desired length');
            assert(reqLength > 0, 'Requested array length <= 0');

            this.strip();
            var littleEndian = endian === 'le';
            var res = new ArrayType(reqLength);

            var b, i;
            var q = this.clone();
            if (!littleEndian) {
              // Assume big-endian
              for (i = 0; i < reqLength - byteLength; i++) {
                res[i] = 0;
              }

              for (i = 0; !q.isZero(); i++) {
                b = q.andln(0xff);
                q.iushrn(8);

                res[reqLength - i - 1] = b;
              }
            } else {
              for (i = 0; !q.isZero(); i++) {
                b = q.andln(0xff);
                q.iushrn(8);

                res[i] = b;
              }

              for (; i < reqLength; i++) {
                res[i] = 0;
              }
            }

            return res;
          };

          if (Math.clz32) {
            BN.prototype._countBits = function _countBits(w) {
              return 32 - Math.clz32(w);
            };
          } else {
            BN.prototype._countBits = function _countBits(w) {
              var t = w;
              var r = 0;
              if (t >= 0x1000) {
                r += 13;
                t >>>= 13;
              }
              if (t >= 0x40) {
                r += 7;
                t >>>= 7;
              }
              if (t >= 0x8) {
                r += 4;
                t >>>= 4;
              }
              if (t >= 0x02) {
                r += 2;
                t >>>= 2;
              }
              return r + t;
            };
          }

          BN.prototype._zeroBits = function _zeroBits(w) {
            // Short-cut
            if (w === 0) return 26;

            var t = w;
            var r = 0;
            if ((t & 0x1fff) === 0) {
              r += 13;
              t >>>= 13;
            }
            if ((t & 0x7f) === 0) {
              r += 7;
              t >>>= 7;
            }
            if ((t & 0xf) === 0) {
              r += 4;
              t >>>= 4;
            }
            if ((t & 0x3) === 0) {
              r += 2;
              t >>>= 2;
            }
            if ((t & 0x1) === 0) {
              r++;
            }
            return r;
          };

          // Return number of used bits in a BN
          BN.prototype.bitLength = function bitLength() {
            var w = this.words[this.length - 1];
            var hi = this._countBits(w);
            return (this.length - 1) * 26 + hi;
          };

          function toBitArray(num) {
            var w = new Array(num.bitLength());

            for (var bit = 0; bit < w.length; bit++) {
              var off = (bit / 26) | 0;
              var wbit = bit % 26;

              w[bit] = (num.words[off] & (1 << wbit)) >>> wbit;
            }

            return w;
          }

          // Number of trailing zero bits
          BN.prototype.zeroBits = function zeroBits() {
            if (this.isZero()) return 0;

            var r = 0;
            for (var i = 0; i < this.length; i++) {
              var b = this._zeroBits(this.words[i]);
              r += b;
              if (b !== 26) break;
            }
            return r;
          };

          BN.prototype.byteLength = function byteLength() {
            return Math.ceil(this.bitLength() / 8);
          };

          BN.prototype.toTwos = function toTwos(width) {
            if (this.negative !== 0) {
              return this.abs().inotn(width).iaddn(1);
            }
            return this.clone();
          };

          BN.prototype.fromTwos = function fromTwos(width) {
            if (this.testn(width - 1)) {
              return this.notn(width).iaddn(1).ineg();
            }
            return this.clone();
          };

          BN.prototype.isNeg = function isNeg() {
            return this.negative !== 0;
          };

          // Return negative clone of `this`
          BN.prototype.neg = function neg() {
            return this.clone().ineg();
          };

          BN.prototype.ineg = function ineg() {
            if (!this.isZero()) {
              this.negative ^= 1;
            }

            return this;
          };

          // Or `num` with `this` in-place
          BN.prototype.iuor = function iuor(num) {
            while (this.length < num.length) {
              this.words[this.length++] = 0;
            }

            for (var i = 0; i < num.length; i++) {
              this.words[i] = this.words[i] | num.words[i];
            }

            return this.strip();
          };

          BN.prototype.ior = function ior(num) {
            assert((this.negative | num.negative) === 0);
            return this.iuor(num);
          };

          // Or `num` with `this`
          BN.prototype.or = function or(num) {
            if (this.length > num.length) return this.clone().ior(num);
            return num.clone().ior(this);
          };

          BN.prototype.uor = function uor(num) {
            if (this.length > num.length) return this.clone().iuor(num);
            return num.clone().iuor(this);
          };

          // And `num` with `this` in-place
          BN.prototype.iuand = function iuand(num) {
            // b = min-length(num, this)
            var b;
            if (this.length > num.length) {
              b = num;
            } else {
              b = this;
            }

            for (var i = 0; i < b.length; i++) {
              this.words[i] = this.words[i] & num.words[i];
            }

            this.length = b.length;

            return this.strip();
          };

          BN.prototype.iand = function iand(num) {
            assert((this.negative | num.negative) === 0);
            return this.iuand(num);
          };

          // And `num` with `this`
          BN.prototype.and = function and(num) {
            if (this.length > num.length) return this.clone().iand(num);
            return num.clone().iand(this);
          };

          BN.prototype.uand = function uand(num) {
            if (this.length > num.length) return this.clone().iuand(num);
            return num.clone().iuand(this);
          };

          // Xor `num` with `this` in-place
          BN.prototype.iuxor = function iuxor(num) {
            // a.length > b.length
            var a;
            var b;
            if (this.length > num.length) {
              a = this;
              b = num;
            } else {
              a = num;
              b = this;
            }

            for (var i = 0; i < b.length; i++) {
              this.words[i] = a.words[i] ^ b.words[i];
            }

            if (this !== a) {
              for (; i < a.length; i++) {
                this.words[i] = a.words[i];
              }
            }

            this.length = a.length;

            return this.strip();
          };

          BN.prototype.ixor = function ixor(num) {
            assert((this.negative | num.negative) === 0);
            return this.iuxor(num);
          };

          // Xor `num` with `this`
          BN.prototype.xor = function xor(num) {
            if (this.length > num.length) return this.clone().ixor(num);
            return num.clone().ixor(this);
          };

          BN.prototype.uxor = function uxor(num) {
            if (this.length > num.length) return this.clone().iuxor(num);
            return num.clone().iuxor(this);
          };

          // Not ``this`` with ``width`` bitwidth
          BN.prototype.inotn = function inotn(width) {
            assert(typeof width === 'number' && width >= 0);

            var bytesNeeded = Math.ceil(width / 26) | 0;
            var bitsLeft = width % 26;

            // Extend the buffer with leading zeroes
            this._expand(bytesNeeded);

            if (bitsLeft > 0) {
              bytesNeeded--;
            }

            // Handle complete words
            for (var i = 0; i < bytesNeeded; i++) {
              this.words[i] = ~this.words[i] & 0x3ffffff;
            }

            // Handle the residue
            if (bitsLeft > 0) {
              this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));
            }

            // And remove leading zeroes
            return this.strip();
          };

          BN.prototype.notn = function notn(width) {
            return this.clone().inotn(width);
          };

          // Set `bit` of `this`
          BN.prototype.setn = function setn(bit, val) {
            assert(typeof bit === 'number' && bit >= 0);

            var off = (bit / 26) | 0;
            var wbit = bit % 26;

            this._expand(off + 1);

            if (val) {
              this.words[off] = this.words[off] | (1 << wbit);
            } else {
              this.words[off] = this.words[off] & ~(1 << wbit);
            }

            return this.strip();
          };

          // Add `num` to `this` in-place
          BN.prototype.iadd = function iadd(num) {
            var r;

            // negative + positive
            if (this.negative !== 0 && num.negative === 0) {
              this.negative = 0;
              r = this.isub(num);
              this.negative ^= 1;
              return this._normSign();

              // positive + negative
            } else if (this.negative === 0 && num.negative !== 0) {
              num.negative = 0;
              r = this.isub(num);
              num.negative = 1;
              return r._normSign();
            }

            // a.length > b.length
            var a, b;
            if (this.length > num.length) {
              a = this;
              b = num;
            } else {
              a = num;
              b = this;
            }

            var carry = 0;
            for (var i = 0; i < b.length; i++) {
              r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
              this.words[i] = r & 0x3ffffff;
              carry = r >>> 26;
            }
            for (; carry !== 0 && i < a.length; i++) {
              r = (a.words[i] | 0) + carry;
              this.words[i] = r & 0x3ffffff;
              carry = r >>> 26;
            }

            this.length = a.length;
            if (carry !== 0) {
              this.words[this.length] = carry;
              this.length++;
              // Copy the rest of the words
            } else if (a !== this) {
              for (; i < a.length; i++) {
                this.words[i] = a.words[i];
              }
            }

            return this;
          };

          // Add `num` to `this`
          BN.prototype.add = function add(num) {
            var res;
            if (num.negative !== 0 && this.negative === 0) {
              num.negative = 0;
              res = this.sub(num);
              num.negative ^= 1;
              return res;
            } else if (num.negative === 0 && this.negative !== 0) {
              this.negative = 0;
              res = num.sub(this);
              this.negative = 1;
              return res;
            }

            if (this.length > num.length) return this.clone().iadd(num);

            return num.clone().iadd(this);
          };

          // Subtract `num` from `this` in-place
          BN.prototype.isub = function isub(num) {
            // this - (-num) = this + num
            if (num.negative !== 0) {
              num.negative = 0;
              var r = this.iadd(num);
              num.negative = 1;
              return r._normSign();

              // -this - num = -(this + num)
            } else if (this.negative !== 0) {
              this.negative = 0;
              this.iadd(num);
              this.negative = 1;
              return this._normSign();
            }

            // At this point both numbers are positive
            var cmp = this.cmp(num);

            // Optimization - zeroify
            if (cmp === 0) {
              this.negative = 0;
              this.length = 1;
              this.words[0] = 0;
              return this;
            }

            // a > b
            var a, b;
            if (cmp > 0) {
              a = this;
              b = num;
            } else {
              a = num;
              b = this;
            }

            var carry = 0;
            for (var i = 0; i < b.length; i++) {
              r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
              carry = r >> 26;
              this.words[i] = r & 0x3ffffff;
            }
            for (; carry !== 0 && i < a.length; i++) {
              r = (a.words[i] | 0) + carry;
              carry = r >> 26;
              this.words[i] = r & 0x3ffffff;
            }

            // Copy rest of the words
            if (carry === 0 && i < a.length && a !== this) {
              for (; i < a.length; i++) {
                this.words[i] = a.words[i];
              }
            }

            this.length = Math.max(this.length, i);

            if (a !== this) {
              this.negative = 1;
            }

            return this.strip();
          };

          // Subtract `num` from `this`
          BN.prototype.sub = function sub(num) {
            return this.clone().isub(num);
          };

          function smallMulTo(self, num, out) {
            out.negative = num.negative ^ self.negative;
            var len = (self.length + num.length) | 0;
            out.length = len;
            len = (len - 1) | 0;

            // Peel one iteration (compiler can't do it, because of code complexity)
            var a = self.words[0] | 0;
            var b = num.words[0] | 0;
            var r = a * b;

            var lo = r & 0x3ffffff;
            var carry = (r / 0x4000000) | 0;
            out.words[0] = lo;

            for (var k = 1; k < len; k++) {
              // Sum all words with the same `i + j = k` and accumulate `ncarry`,
              // note that ncarry could be >= 0x3ffffff
              var ncarry = carry >>> 26;
              var rword = carry & 0x3ffffff;
              var maxJ = Math.min(k, num.length - 1);
              for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
                var i = (k - j) | 0;
                a = self.words[i] | 0;
                b = num.words[j] | 0;
                r = a * b + rword;
                ncarry += (r / 0x4000000) | 0;
                rword = r & 0x3ffffff;
              }
              out.words[k] = rword | 0;
              carry = ncarry | 0;
            }
            if (carry !== 0) {
              out.words[k] = carry | 0;
            } else {
              out.length--;
            }

            return out.strip();
          }

          // TODO(indutny): it may be reasonable to omit it for users who don't need
          // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
          // multiplication (like elliptic secp256k1).
          var comb10MulTo = function comb10MulTo(self, num, out) {
            var a = self.words;
            var b = num.words;
            var o = out.words;
            var c = 0;
            var lo;
            var mid;
            var hi;
            var a0 = a[0] | 0;
            var al0 = a0 & 0x1fff;
            var ah0 = a0 >>> 13;
            var a1 = a[1] | 0;
            var al1 = a1 & 0x1fff;
            var ah1 = a1 >>> 13;
            var a2 = a[2] | 0;
            var al2 = a2 & 0x1fff;
            var ah2 = a2 >>> 13;
            var a3 = a[3] | 0;
            var al3 = a3 & 0x1fff;
            var ah3 = a3 >>> 13;
            var a4 = a[4] | 0;
            var al4 = a4 & 0x1fff;
            var ah4 = a4 >>> 13;
            var a5 = a[5] | 0;
            var al5 = a5 & 0x1fff;
            var ah5 = a5 >>> 13;
            var a6 = a[6] | 0;
            var al6 = a6 & 0x1fff;
            var ah6 = a6 >>> 13;
            var a7 = a[7] | 0;
            var al7 = a7 & 0x1fff;
            var ah7 = a7 >>> 13;
            var a8 = a[8] | 0;
            var al8 = a8 & 0x1fff;
            var ah8 = a8 >>> 13;
            var a9 = a[9] | 0;
            var al9 = a9 & 0x1fff;
            var ah9 = a9 >>> 13;
            var b0 = b[0] | 0;
            var bl0 = b0 & 0x1fff;
            var bh0 = b0 >>> 13;
            var b1 = b[1] | 0;
            var bl1 = b1 & 0x1fff;
            var bh1 = b1 >>> 13;
            var b2 = b[2] | 0;
            var bl2 = b2 & 0x1fff;
            var bh2 = b2 >>> 13;
            var b3 = b[3] | 0;
            var bl3 = b3 & 0x1fff;
            var bh3 = b3 >>> 13;
            var b4 = b[4] | 0;
            var bl4 = b4 & 0x1fff;
            var bh4 = b4 >>> 13;
            var b5 = b[5] | 0;
            var bl5 = b5 & 0x1fff;
            var bh5 = b5 >>> 13;
            var b6 = b[6] | 0;
            var bl6 = b6 & 0x1fff;
            var bh6 = b6 >>> 13;
            var b7 = b[7] | 0;
            var bl7 = b7 & 0x1fff;
            var bh7 = b7 >>> 13;
            var b8 = b[8] | 0;
            var bl8 = b8 & 0x1fff;
            var bh8 = b8 >>> 13;
            var b9 = b[9] | 0;
            var bl9 = b9 & 0x1fff;
            var bh9 = b9 >>> 13;

            out.negative = self.negative ^ num.negative;
            out.length = 19;
            /* k = 0 */
            lo = Math.imul(al0, bl0);
            mid = Math.imul(al0, bh0);
            mid = (mid + Math.imul(ah0, bl0)) | 0;
            hi = Math.imul(ah0, bh0);
            var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
            c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;
            w0 &= 0x3ffffff;
            /* k = 1 */
            lo = Math.imul(al1, bl0);
            mid = Math.imul(al1, bh0);
            mid = (mid + Math.imul(ah1, bl0)) | 0;
            hi = Math.imul(ah1, bh0);
            lo = (lo + Math.imul(al0, bl1)) | 0;
            mid = (mid + Math.imul(al0, bh1)) | 0;
            mid = (mid + Math.imul(ah0, bl1)) | 0;
            hi = (hi + Math.imul(ah0, bh1)) | 0;
            var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
            c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;
            w1 &= 0x3ffffff;
            /* k = 2 */
            lo = Math.imul(al2, bl0);
            mid = Math.imul(al2, bh0);
            mid = (mid + Math.imul(ah2, bl0)) | 0;
            hi = Math.imul(ah2, bh0);
            lo = (lo + Math.imul(al1, bl1)) | 0;
            mid = (mid + Math.imul(al1, bh1)) | 0;
            mid = (mid + Math.imul(ah1, bl1)) | 0;
            hi = (hi + Math.imul(ah1, bh1)) | 0;
            lo = (lo + Math.imul(al0, bl2)) | 0;
            mid = (mid + Math.imul(al0, bh2)) | 0;
            mid = (mid + Math.imul(ah0, bl2)) | 0;
            hi = (hi + Math.imul(ah0, bh2)) | 0;
            var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
            c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;
            w2 &= 0x3ffffff;
            /* k = 3 */
            lo = Math.imul(al3, bl0);
            mid = Math.imul(al3, bh0);
            mid = (mid + Math.imul(ah3, bl0)) | 0;
            hi = Math.imul(ah3, bh0);
            lo = (lo + Math.imul(al2, bl1)) | 0;
            mid = (mid + Math.imul(al2, bh1)) | 0;
            mid = (mid + Math.imul(ah2, bl1)) | 0;
            hi = (hi + Math.imul(ah2, bh1)) | 0;
            lo = (lo + Math.imul(al1, bl2)) | 0;
            mid = (mid + Math.imul(al1, bh2)) | 0;
            mid = (mid + Math.imul(ah1, bl2)) | 0;
            hi = (hi + Math.imul(ah1, bh2)) | 0;
            lo = (lo + Math.imul(al0, bl3)) | 0;
            mid = (mid + Math.imul(al0, bh3)) | 0;
            mid = (mid + Math.imul(ah0, bl3)) | 0;
            hi = (hi + Math.imul(ah0, bh3)) | 0;
            var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
            c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;
            w3 &= 0x3ffffff;
            /* k = 4 */
            lo = Math.imul(al4, bl0);
            mid = Math.imul(al4, bh0);
            mid = (mid + Math.imul(ah4, bl0)) | 0;
            hi = Math.imul(ah4, bh0);
            lo = (lo + Math.imul(al3, bl1)) | 0;
            mid = (mid + Math.imul(al3, bh1)) | 0;
            mid = (mid + Math.imul(ah3, bl1)) | 0;
            hi = (hi + Math.imul(ah3, bh1)) | 0;
            lo = (lo + Math.imul(al2, bl2)) | 0;
            mid = (mid + Math.imul(al2, bh2)) | 0;
            mid = (mid + Math.imul(ah2, bl2)) | 0;
            hi = (hi + Math.imul(ah2, bh2)) | 0;
            lo = (lo + Math.imul(al1, bl3)) | 0;
            mid = (mid + Math.imul(al1, bh3)) | 0;
            mid = (mid + Math.imul(ah1, bl3)) | 0;
            hi = (hi + Math.imul(ah1, bh3)) | 0;
            lo = (lo + Math.imul(al0, bl4)) | 0;
            mid = (mid + Math.imul(al0, bh4)) | 0;
            mid = (mid + Math.imul(ah0, bl4)) | 0;
            hi = (hi + Math.imul(ah0, bh4)) | 0;
            var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
            c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;
            w4 &= 0x3ffffff;
            /* k = 5 */
            lo = Math.imul(al5, bl0);
            mid = Math.imul(al5, bh0);
            mid = (mid + Math.imul(ah5, bl0)) | 0;
            hi = Math.imul(ah5, bh0);
            lo = (lo + Math.imul(al4, bl1)) | 0;
            mid = (mid + Math.imul(al4, bh1)) | 0;
            mid = (mid + Math.imul(ah4, bl1)) | 0;
            hi = (hi + Math.imul(ah4, bh1)) | 0;
            lo = (lo + Math.imul(al3, bl2)) | 0;
            mid = (mid + Math.imul(al3, bh2)) | 0;
            mid = (mid + Math.imul(ah3, bl2)) | 0;
            hi = (hi + Math.imul(ah3, bh2)) | 0;
            lo = (lo + Math.imul(al2, bl3)) | 0;
            mid = (mid + Math.imul(al2, bh3)) | 0;
            mid = (mid + Math.imul(ah2, bl3)) | 0;
            hi = (hi + Math.imul(ah2, bh3)) | 0;
            lo = (lo + Math.imul(al1, bl4)) | 0;
            mid = (mid + Math.imul(al1, bh4)) | 0;
            mid = (mid + Math.imul(ah1, bl4)) | 0;
            hi = (hi + Math.imul(ah1, bh4)) | 0;
            lo = (lo + Math.imul(al0, bl5)) | 0;
            mid = (mid + Math.imul(al0, bh5)) | 0;
            mid = (mid + Math.imul(ah0, bl5)) | 0;
            hi = (hi + Math.imul(ah0, bh5)) | 0;
            var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
            c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;
            w5 &= 0x3ffffff;
            /* k = 6 */
            lo = Math.imul(al6, bl0);
            mid = Math.imul(al6, bh0);
            mid = (mid + Math.imul(ah6, bl0)) | 0;
            hi = Math.imul(ah6, bh0);
            lo = (lo + Math.imul(al5, bl1)) | 0;
            mid = (mid + Math.imul(al5, bh1)) | 0;
            mid = (mid + Math.imul(ah5, bl1)) | 0;
            hi = (hi + Math.imul(ah5, bh1)) | 0;
            lo = (lo + Math.imul(al4, bl2)) | 0;
            mid = (mid + Math.imul(al4, bh2)) | 0;
            mid = (mid + Math.imul(ah4, bl2)) | 0;
            hi = (hi + Math.imul(ah4, bh2)) | 0;
            lo = (lo + Math.imul(al3, bl3)) | 0;
            mid = (mid + Math.imul(al3, bh3)) | 0;
            mid = (mid + Math.imul(ah3, bl3)) | 0;
            hi = (hi + Math.imul(ah3, bh3)) | 0;
            lo = (lo + Math.imul(al2, bl4)) | 0;
            mid = (mid + Math.imul(al2, bh4)) | 0;
            mid = (mid + Math.imul(ah2, bl4)) | 0;
            hi = (hi + Math.imul(ah2, bh4)) | 0;
            lo = (lo + Math.imul(al1, bl5)) | 0;
            mid = (mid + Math.imul(al1, bh5)) | 0;
            mid = (mid + Math.imul(ah1, bl5)) | 0;
            hi = (hi + Math.imul(ah1, bh5)) | 0;
            lo = (lo + Math.imul(al0, bl6)) | 0;
            mid = (mid + Math.imul(al0, bh6)) | 0;
            mid = (mid + Math.imul(ah0, bl6)) | 0;
            hi = (hi + Math.imul(ah0, bh6)) | 0;
            var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
            c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;
            w6 &= 0x3ffffff;
            /* k = 7 */
            lo = Math.imul(al7, bl0);
            mid = Math.imul(al7, bh0);
            mid = (mid + Math.imul(ah7, bl0)) | 0;
            hi = Math.imul(ah7, bh0);
            lo = (lo + Math.imul(al6, bl1)) | 0;
            mid = (mid + Math.imul(al6, bh1)) | 0;
            mid = (mid + Math.imul(ah6, bl1)) | 0;
            hi = (hi + Math.imul(ah6, bh1)) | 0;
            lo = (lo + Math.imul(al5, bl2)) | 0;
            mid = (mid + Math.imul(al5, bh2)) | 0;
            mid = (mid + Math.imul(ah5, bl2)) | 0;
            hi = (hi + Math.imul(ah5, bh2)) | 0;
            lo = (lo + Math.imul(al4, bl3)) | 0;
            mid = (mid + Math.imul(al4, bh3)) | 0;
            mid = (mid + Math.imul(ah4, bl3)) | 0;
            hi = (hi + Math.imul(ah4, bh3)) | 0;
            lo = (lo + Math.imul(al3, bl4)) | 0;
            mid = (mid + Math.imul(al3, bh4)) | 0;
            mid = (mid + Math.imul(ah3, bl4)) | 0;
            hi = (hi + Math.imul(ah3, bh4)) | 0;
            lo = (lo + Math.imul(al2, bl5)) | 0;
            mid = (mid + Math.imul(al2, bh5)) | 0;
            mid = (mid + Math.imul(ah2, bl5)) | 0;
            hi = (hi + Math.imul(ah2, bh5)) | 0;
            lo = (lo + Math.imul(al1, bl6)) | 0;
            mid = (mid + Math.imul(al1, bh6)) | 0;
            mid = (mid + Math.imul(ah1, bl6)) | 0;
            hi = (hi + Math.imul(ah1, bh6)) | 0;
            lo = (lo + Math.imul(al0, bl7)) | 0;
            mid = (mid + Math.imul(al0, bh7)) | 0;
            mid = (mid + Math.imul(ah0, bl7)) | 0;
            hi = (hi + Math.imul(ah0, bh7)) | 0;
            var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
            c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;
            w7 &= 0x3ffffff;
            /* k = 8 */
            lo = Math.imul(al8, bl0);
            mid = Math.imul(al8, bh0);
            mid = (mid + Math.imul(ah8, bl0)) | 0;
            hi = Math.imul(ah8, bh0);
            lo = (lo + Math.imul(al7, bl1)) | 0;
            mid = (mid + Math.imul(al7, bh1)) | 0;
            mid = (mid + Math.imul(ah7, bl1)) | 0;
            hi = (hi + Math.imul(ah7, bh1)) | 0;
            lo = (lo + Math.imul(al6, bl2)) | 0;
            mid = (mid + Math.imul(al6, bh2)) | 0;
            mid = (mid + Math.imul(ah6, bl2)) | 0;
            hi = (hi + Math.imul(ah6, bh2)) | 0;
            lo = (lo + Math.imul(al5, bl3)) | 0;
            mid = (mid + Math.imul(al5, bh3)) | 0;
            mid = (mid + Math.imul(ah5, bl3)) | 0;
            hi = (hi + Math.imul(ah5, bh3)) | 0;
            lo = (lo + Math.imul(al4, bl4)) | 0;
            mid = (mid + Math.imul(al4, bh4)) | 0;
            mid = (mid + Math.imul(ah4, bl4)) | 0;
            hi = (hi + Math.imul(ah4, bh4)) | 0;
            lo = (lo + Math.imul(al3, bl5)) | 0;
            mid = (mid + Math.imul(al3, bh5)) | 0;
            mid = (mid + Math.imul(ah3, bl5)) | 0;
            hi = (hi + Math.imul(ah3, bh5)) | 0;
            lo = (lo + Math.imul(al2, bl6)) | 0;
            mid = (mid + Math.imul(al2, bh6)) | 0;
            mid = (mid + Math.imul(ah2, bl6)) | 0;
            hi = (hi + Math.imul(ah2, bh6)) | 0;
            lo = (lo + Math.imul(al1, bl7)) | 0;
            mid = (mid + Math.imul(al1, bh7)) | 0;
            mid = (mid + Math.imul(ah1, bl7)) | 0;
            hi = (hi + Math.imul(ah1, bh7)) | 0;
            lo = (lo + Math.imul(al0, bl8)) | 0;
            mid = (mid + Math.imul(al0, bh8)) | 0;
            mid = (mid + Math.imul(ah0, bl8)) | 0;
            hi = (hi + Math.imul(ah0, bh8)) | 0;
            var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
            c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;
            w8 &= 0x3ffffff;
            /* k = 9 */
            lo = Math.imul(al9, bl0);
            mid = Math.imul(al9, bh0);
            mid = (mid + Math.imul(ah9, bl0)) | 0;
            hi = Math.imul(ah9, bh0);
            lo = (lo + Math.imul(al8, bl1)) | 0;
            mid = (mid + Math.imul(al8, bh1)) | 0;
            mid = (mid + Math.imul(ah8, bl1)) | 0;
            hi = (hi + Math.imul(ah8, bh1)) | 0;
            lo = (lo + Math.imul(al7, bl2)) | 0;
            mid = (mid + Math.imul(al7, bh2)) | 0;
            mid = (mid + Math.imul(ah7, bl2)) | 0;
            hi = (hi + Math.imul(ah7, bh2)) | 0;
            lo = (lo + Math.imul(al6, bl3)) | 0;
            mid = (mid + Math.imul(al6, bh3)) | 0;
            mid = (mid + Math.imul(ah6, bl3)) | 0;
            hi = (hi + Math.imul(ah6, bh3)) | 0;
            lo = (lo + Math.imul(al5, bl4)) | 0;
            mid = (mid + Math.imul(al5, bh4)) | 0;
            mid = (mid + Math.imul(ah5, bl4)) | 0;
            hi = (hi + Math.imul(ah5, bh4)) | 0;
            lo = (lo + Math.imul(al4, bl5)) | 0;
            mid = (mid + Math.imul(al4, bh5)) | 0;
            mid = (mid + Math.imul(ah4, bl5)) | 0;
            hi = (hi + Math.imul(ah4, bh5)) | 0;
            lo = (lo + Math.imul(al3, bl6)) | 0;
            mid = (mid + Math.imul(al3, bh6)) | 0;
            mid = (mid + Math.imul(ah3, bl6)) | 0;
            hi = (hi + Math.imul(ah3, bh6)) | 0;
            lo = (lo + Math.imul(al2, bl7)) | 0;
            mid = (mid + Math.imul(al2, bh7)) | 0;
            mid = (mid + Math.imul(ah2, bl7)) | 0;
            hi = (hi + Math.imul(ah2, bh7)) | 0;
            lo = (lo + Math.imul(al1, bl8)) | 0;
            mid = (mid + Math.imul(al1, bh8)) | 0;
            mid = (mid + Math.imul(ah1, bl8)) | 0;
            hi = (hi + Math.imul(ah1, bh8)) | 0;
            lo = (lo + Math.imul(al0, bl9)) | 0;
            mid = (mid + Math.imul(al0, bh9)) | 0;
            mid = (mid + Math.imul(ah0, bl9)) | 0;
            hi = (hi + Math.imul(ah0, bh9)) | 0;
            var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
            c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;
            w9 &= 0x3ffffff;
            /* k = 10 */
            lo = Math.imul(al9, bl1);
            mid = Math.imul(al9, bh1);
            mid = (mid + Math.imul(ah9, bl1)) | 0;
            hi = Math.imul(ah9, bh1);
            lo = (lo + Math.imul(al8, bl2)) | 0;
            mid = (mid + Math.imul(al8, bh2)) | 0;
            mid = (mid + Math.imul(ah8, bl2)) | 0;
            hi = (hi + Math.imul(ah8, bh2)) | 0;
            lo = (lo + Math.imul(al7, bl3)) | 0;
            mid = (mid + Math.imul(al7, bh3)) | 0;
            mid = (mid + Math.imul(ah7, bl3)) | 0;
            hi = (hi + Math.imul(ah7, bh3)) | 0;
            lo = (lo + Math.imul(al6, bl4)) | 0;
            mid = (mid + Math.imul(al6, bh4)) | 0;
            mid = (mid + Math.imul(ah6, bl4)) | 0;
            hi = (hi + Math.imul(ah6, bh4)) | 0;
            lo = (lo + Math.imul(al5, bl5)) | 0;
            mid = (mid + Math.imul(al5, bh5)) | 0;
            mid = (mid + Math.imul(ah5, bl5)) | 0;
            hi = (hi + Math.imul(ah5, bh5)) | 0;
            lo = (lo + Math.imul(al4, bl6)) | 0;
            mid = (mid + Math.imul(al4, bh6)) | 0;
            mid = (mid + Math.imul(ah4, bl6)) | 0;
            hi = (hi + Math.imul(ah4, bh6)) | 0;
            lo = (lo + Math.imul(al3, bl7)) | 0;
            mid = (mid + Math.imul(al3, bh7)) | 0;
            mid = (mid + Math.imul(ah3, bl7)) | 0;
            hi = (hi + Math.imul(ah3, bh7)) | 0;
            lo = (lo + Math.imul(al2, bl8)) | 0;
            mid = (mid + Math.imul(al2, bh8)) | 0;
            mid = (mid + Math.imul(ah2, bl8)) | 0;
            hi = (hi + Math.imul(ah2, bh8)) | 0;
            lo = (lo + Math.imul(al1, bl9)) | 0;
            mid = (mid + Math.imul(al1, bh9)) | 0;
            mid = (mid + Math.imul(ah1, bl9)) | 0;
            hi = (hi + Math.imul(ah1, bh9)) | 0;
            var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
            c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;
            w10 &= 0x3ffffff;
            /* k = 11 */
            lo = Math.imul(al9, bl2);
            mid = Math.imul(al9, bh2);
            mid = (mid + Math.imul(ah9, bl2)) | 0;
            hi = Math.imul(ah9, bh2);
            lo = (lo + Math.imul(al8, bl3)) | 0;
            mid = (mid + Math.imul(al8, bh3)) | 0;
            mid = (mid + Math.imul(ah8, bl3)) | 0;
            hi = (hi + Math.imul(ah8, bh3)) | 0;
            lo = (lo + Math.imul(al7, bl4)) | 0;
            mid = (mid + Math.imul(al7, bh4)) | 0;
            mid = (mid + Math.imul(ah7, bl4)) | 0;
            hi = (hi + Math.imul(ah7, bh4)) | 0;
            lo = (lo + Math.imul(al6, bl5)) | 0;
            mid = (mid + Math.imul(al6, bh5)) | 0;
            mid = (mid + Math.imul(ah6, bl5)) | 0;
            hi = (hi + Math.imul(ah6, bh5)) | 0;
            lo = (lo + Math.imul(al5, bl6)) | 0;
            mid = (mid + Math.imul(al5, bh6)) | 0;
            mid = (mid + Math.imul(ah5, bl6)) | 0;
            hi = (hi + Math.imul(ah5, bh6)) | 0;
            lo = (lo + Math.imul(al4, bl7)) | 0;
            mid = (mid + Math.imul(al4, bh7)) | 0;
            mid = (mid + Math.imul(ah4, bl7)) | 0;
            hi = (hi + Math.imul(ah4, bh7)) | 0;
            lo = (lo + Math.imul(al3, bl8)) | 0;
            mid = (mid + Math.imul(al3, bh8)) | 0;
            mid = (mid + Math.imul(ah3, bl8)) | 0;
            hi = (hi + Math.imul(ah3, bh8)) | 0;
            lo = (lo + Math.imul(al2, bl9)) | 0;
            mid = (mid + Math.imul(al2, bh9)) | 0;
            mid = (mid + Math.imul(ah2, bl9)) | 0;
            hi = (hi + Math.imul(ah2, bh9)) | 0;
            var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
            c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;
            w11 &= 0x3ffffff;
            /* k = 12 */
            lo = Math.imul(al9, bl3);
            mid = Math.imul(al9, bh3);
            mid = (mid + Math.imul(ah9, bl3)) | 0;
            hi = Math.imul(ah9, bh3);
            lo = (lo + Math.imul(al8, bl4)) | 0;
            mid = (mid + Math.imul(al8, bh4)) | 0;
            mid = (mid + Math.imul(ah8, bl4)) | 0;
            hi = (hi + Math.imul(ah8, bh4)) | 0;
            lo = (lo + Math.imul(al7, bl5)) | 0;
            mid = (mid + Math.imul(al7, bh5)) | 0;
            mid = (mid + Math.imul(ah7, bl5)) | 0;
            hi = (hi + Math.imul(ah7, bh5)) | 0;
            lo = (lo + Math.imul(al6, bl6)) | 0;
            mid = (mid + Math.imul(al6, bh6)) | 0;
            mid = (mid + Math.imul(ah6, bl6)) | 0;
            hi = (hi + Math.imul(ah6, bh6)) | 0;
            lo = (lo + Math.imul(al5, bl7)) | 0;
            mid = (mid + Math.imul(al5, bh7)) | 0;
            mid = (mid + Math.imul(ah5, bl7)) | 0;
            hi = (hi + Math.imul(ah5, bh7)) | 0;
            lo = (lo + Math.imul(al4, bl8)) | 0;
            mid = (mid + Math.imul(al4, bh8)) | 0;
            mid = (mid + Math.imul(ah4, bl8)) | 0;
            hi = (hi + Math.imul(ah4, bh8)) | 0;
            lo = (lo + Math.imul(al3, bl9)) | 0;
            mid = (mid + Math.imul(al3, bh9)) | 0;
            mid = (mid + Math.imul(ah3, bl9)) | 0;
            hi = (hi + Math.imul(ah3, bh9)) | 0;
            var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
            c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;
            w12 &= 0x3ffffff;
            /* k = 13 */
            lo = Math.imul(al9, bl4);
            mid = Math.imul(al9, bh4);
            mid = (mid + Math.imul(ah9, bl4)) | 0;
            hi = Math.imul(ah9, bh4);
            lo = (lo + Math.imul(al8, bl5)) | 0;
            mid = (mid + Math.imul(al8, bh5)) | 0;
            mid = (mid + Math.imul(ah8, bl5)) | 0;
            hi = (hi + Math.imul(ah8, bh5)) | 0;
            lo = (lo + Math.imul(al7, bl6)) | 0;
            mid = (mid + Math.imul(al7, bh6)) | 0;
            mid = (mid + Math.imul(ah7, bl6)) | 0;
            hi = (hi + Math.imul(ah7, bh6)) | 0;
            lo = (lo + Math.imul(al6, bl7)) | 0;
            mid = (mid + Math.imul(al6, bh7)) | 0;
            mid = (mid + Math.imul(ah6, bl7)) | 0;
            hi = (hi + Math.imul(ah6, bh7)) | 0;
            lo = (lo + Math.imul(al5, bl8)) | 0;
            mid = (mid + Math.imul(al5, bh8)) | 0;
            mid = (mid + Math.imul(ah5, bl8)) | 0;
            hi = (hi + Math.imul(ah5, bh8)) | 0;
            lo = (lo + Math.imul(al4, bl9)) | 0;
            mid = (mid + Math.imul(al4, bh9)) | 0;
            mid = (mid + Math.imul(ah4, bl9)) | 0;
            hi = (hi + Math.imul(ah4, bh9)) | 0;
            var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
            c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;
            w13 &= 0x3ffffff;
            /* k = 14 */
            lo = Math.imul(al9, bl5);
            mid = Math.imul(al9, bh5);
            mid = (mid + Math.imul(ah9, bl5)) | 0;
            hi = Math.imul(ah9, bh5);
            lo = (lo + Math.imul(al8, bl6)) | 0;
            mid = (mid + Math.imul(al8, bh6)) | 0;
            mid = (mid + Math.imul(ah8, bl6)) | 0;
            hi = (hi + Math.imul(ah8, bh6)) | 0;
            lo = (lo + Math.imul(al7, bl7)) | 0;
            mid = (mid + Math.imul(al7, bh7)) | 0;
            mid = (mid + Math.imul(ah7, bl7)) | 0;
            hi = (hi + Math.imul(ah7, bh7)) | 0;
            lo = (lo + Math.imul(al6, bl8)) | 0;
            mid = (mid + Math.imul(al6, bh8)) | 0;
            mid = (mid + Math.imul(ah6, bl8)) | 0;
            hi = (hi + Math.imul(ah6, bh8)) | 0;
            lo = (lo + Math.imul(al5, bl9)) | 0;
            mid = (mid + Math.imul(al5, bh9)) | 0;
            mid = (mid + Math.imul(ah5, bl9)) | 0;
            hi = (hi + Math.imul(ah5, bh9)) | 0;
            var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
            c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;
            w14 &= 0x3ffffff;
            /* k = 15 */
            lo = Math.imul(al9, bl6);
            mid = Math.imul(al9, bh6);
            mid = (mid + Math.imul(ah9, bl6)) | 0;
            hi = Math.imul(ah9, bh6);
            lo = (lo + Math.imul(al8, bl7)) | 0;
            mid = (mid + Math.imul(al8, bh7)) | 0;
            mid = (mid + Math.imul(ah8, bl7)) | 0;
            hi = (hi + Math.imul(ah8, bh7)) | 0;
            lo = (lo + Math.imul(al7, bl8)) | 0;
            mid = (mid + Math.imul(al7, bh8)) | 0;
            mid = (mid + Math.imul(ah7, bl8)) | 0;
            hi = (hi + Math.imul(ah7, bh8)) | 0;
            lo = (lo + Math.imul(al6, bl9)) | 0;
            mid = (mid + Math.imul(al6, bh9)) | 0;
            mid = (mid + Math.imul(ah6, bl9)) | 0;
            hi = (hi + Math.imul(ah6, bh9)) | 0;
            var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
            c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;
            w15 &= 0x3ffffff;
            /* k = 16 */
            lo = Math.imul(al9, bl7);
            mid = Math.imul(al9, bh7);
            mid = (mid + Math.imul(ah9, bl7)) | 0;
            hi = Math.imul(ah9, bh7);
            lo = (lo + Math.imul(al8, bl8)) | 0;
            mid = (mid + Math.imul(al8, bh8)) | 0;
            mid = (mid + Math.imul(ah8, bl8)) | 0;
            hi = (hi + Math.imul(ah8, bh8)) | 0;
            lo = (lo + Math.imul(al7, bl9)) | 0;
            mid = (mid + Math.imul(al7, bh9)) | 0;
            mid = (mid + Math.imul(ah7, bl9)) | 0;
            hi = (hi + Math.imul(ah7, bh9)) | 0;
            var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
            c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;
            w16 &= 0x3ffffff;
            /* k = 17 */
            lo = Math.imul(al9, bl8);
            mid = Math.imul(al9, bh8);
            mid = (mid + Math.imul(ah9, bl8)) | 0;
            hi = Math.imul(ah9, bh8);
            lo = (lo + Math.imul(al8, bl9)) | 0;
            mid = (mid + Math.imul(al8, bh9)) | 0;
            mid = (mid + Math.imul(ah8, bl9)) | 0;
            hi = (hi + Math.imul(ah8, bh9)) | 0;
            var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
            c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;
            w17 &= 0x3ffffff;
            /* k = 18 */
            lo = Math.imul(al9, bl9);
            mid = Math.imul(al9, bh9);
            mid = (mid + Math.imul(ah9, bl9)) | 0;
            hi = Math.imul(ah9, bh9);
            var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
            c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;
            w18 &= 0x3ffffff;
            o[0] = w0;
            o[1] = w1;
            o[2] = w2;
            o[3] = w3;
            o[4] = w4;
            o[5] = w5;
            o[6] = w6;
            o[7] = w7;
            o[8] = w8;
            o[9] = w9;
            o[10] = w10;
            o[11] = w11;
            o[12] = w12;
            o[13] = w13;
            o[14] = w14;
            o[15] = w15;
            o[16] = w16;
            o[17] = w17;
            o[18] = w18;
            if (c !== 0) {
              o[19] = c;
              out.length++;
            }
            return out;
          };

          // Polyfill comb
          if (!Math.imul) {
            comb10MulTo = smallMulTo;
          }

          function bigMulTo(self, num, out) {
            out.negative = num.negative ^ self.negative;
            out.length = self.length + num.length;

            var carry = 0;
            var hncarry = 0;
            for (var k = 0; k < out.length - 1; k++) {
              // Sum all words with the same `i + j = k` and accumulate `ncarry`,
              // note that ncarry could be >= 0x3ffffff
              var ncarry = hncarry;
              hncarry = 0;
              var rword = carry & 0x3ffffff;
              var maxJ = Math.min(k, num.length - 1);
              for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
                var i = k - j;
                var a = self.words[i] | 0;
                var b = num.words[j] | 0;
                var r = a * b;

                var lo = r & 0x3ffffff;
                ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
                lo = (lo + rword) | 0;
                rword = lo & 0x3ffffff;
                ncarry = (ncarry + (lo >>> 26)) | 0;

                hncarry += ncarry >>> 26;
                ncarry &= 0x3ffffff;
              }
              out.words[k] = rword;
              carry = ncarry;
              ncarry = hncarry;
            }
            if (carry !== 0) {
              out.words[k] = carry;
            } else {
              out.length--;
            }

            return out.strip();
          }

          function jumboMulTo(self, num, out) {
            var fftm = new FFTM();
            return fftm.mulp(self, num, out);
          }

          BN.prototype.mulTo = function mulTo(num, out) {
            var res;
            var len = this.length + num.length;
            if (this.length === 10 && num.length === 10) {
              res = comb10MulTo(this, num, out);
            } else if (len < 63) {
              res = smallMulTo(this, num, out);
            } else if (len < 1024) {
              res = bigMulTo(this, num, out);
            } else {
              res = jumboMulTo(this, num, out);
            }

            return res;
          };

          // Cooley-Tukey algorithm for FFT
          // slightly revisited to rely on looping instead of recursion

          function FFTM(x, y) {
            this.x = x;
            this.y = y;
          }

          FFTM.prototype.makeRBT = function makeRBT(N) {
            var t = new Array(N);
            var l = BN.prototype._countBits(N) - 1;
            for (var i = 0; i < N; i++) {
              t[i] = this.revBin(i, l, N);
            }

            return t;
          };

          // Returns binary-reversed representation of `x`
          FFTM.prototype.revBin = function revBin(x, l, N) {
            if (x === 0 || x === N - 1) return x;

            var rb = 0;
            for (var i = 0; i < l; i++) {
              rb |= (x & 1) << (l - i - 1);
              x >>= 1;
            }

            return rb;
          };

          // Performs "tweedling" phase, therefore 'emulating'
          // behaviour of the recursive algorithm
          FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {
            for (var i = 0; i < N; i++) {
              rtws[i] = rws[rbt[i]];
              itws[i] = iws[rbt[i]];
            }
          };

          FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {
            this.permute(rbt, rws, iws, rtws, itws, N);

            for (var s = 1; s < N; s <<= 1) {
              var l = s << 1;

              var rtwdf = Math.cos(2 * Math.PI / l);
              var itwdf = Math.sin(2 * Math.PI / l);

              for (var p = 0; p < N; p += l) {
                var rtwdf_ = rtwdf;
                var itwdf_ = itwdf;

                for (var j = 0; j < s; j++) {
                  var re = rtws[p + j];
                  var ie = itws[p + j];

                  var ro = rtws[p + j + s];
                  var io = itws[p + j + s];

                  var rx = rtwdf_ * ro - itwdf_ * io;

                  io = rtwdf_ * io + itwdf_ * ro;
                  ro = rx;

                  rtws[p + j] = re + ro;
                  itws[p + j] = ie + io;

                  rtws[p + j + s] = re - ro;
                  itws[p + j + s] = ie - io;

                  /* jshint maxdepth : false */
                  if (j !== l) {
                    rx = rtwdf * rtwdf_ - itwdf * itwdf_;

                    itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                    rtwdf_ = rx;
                  }
                }
              }
            }
          };

          FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
            var N = Math.max(m, n) | 1;
            var odd = N & 1;
            var i = 0;
            for (N = N / 2 | 0; N; N = N >>> 1) {
              i++;
            }

            return 1 << i + 1 + odd;
          };

          FFTM.prototype.conjugate = function conjugate(rws, iws, N) {
            if (N <= 1) return;

            for (var i = 0; i < N / 2; i++) {
              var t = rws[i];

              rws[i] = rws[N - i - 1];
              rws[N - i - 1] = t;

              t = iws[i];

              iws[i] = -iws[N - i - 1];
              iws[N - i - 1] = -t;
            }
          };

          FFTM.prototype.normalize13b = function normalize13b(ws, N) {
            var carry = 0;
            for (var i = 0; i < N / 2; i++) {
              var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +
                Math.round(ws[2 * i] / N) +
                carry;

              ws[i] = w & 0x3ffffff;

              if (w < 0x4000000) {
                carry = 0;
              } else {
                carry = w / 0x4000000 | 0;
              }
            }

            return ws;
          };

          FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {
            var carry = 0;
            for (var i = 0; i < len; i++) {
              carry = carry + (ws[i] | 0);

              rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;
              rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;
            }

            // Pad with zeroes
            for (i = 2 * len; i < N; ++i) {
              rws[i] = 0;
            }

            assert(carry === 0);
            assert((carry & ~0x1fff) === 0);
          };

          FFTM.prototype.stub = function stub(N) {
            var ph = new Array(N);
            for (var i = 0; i < N; i++) {
              ph[i] = 0;
            }

            return ph;
          };

          FFTM.prototype.mulp = function mulp(x, y, out) {
            var N = 2 * this.guessLen13b(x.length, y.length);

            var rbt = this.makeRBT(N);

            var _ = this.stub(N);

            var rws = new Array(N);
            var rwst = new Array(N);
            var iwst = new Array(N);

            var nrws = new Array(N);
            var nrwst = new Array(N);
            var niwst = new Array(N);

            var rmws = out.words;
            rmws.length = N;

            this.convert13b(x.words, x.length, rws, N);
            this.convert13b(y.words, y.length, nrws, N);

            this.transform(rws, _, rwst, iwst, N, rbt);
            this.transform(nrws, _, nrwst, niwst, N, rbt);

            for (var i = 0; i < N; i++) {
              var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
              iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
              rwst[i] = rx;
            }

            this.conjugate(rwst, iwst, N);
            this.transform(rwst, iwst, rmws, _, N, rbt);
            this.conjugate(rmws, _, N);
            this.normalize13b(rmws, N);

            out.negative = x.negative ^ y.negative;
            out.length = x.length + y.length;
            return out.strip();
          };

          // Multiply `this` by `num`
          BN.prototype.mul = function mul(num) {
            var out = new BN(null);
            out.words = new Array(this.length + num.length);
            return this.mulTo(num, out);
          };

          // Multiply employing FFT
          BN.prototype.mulf = function mulf(num) {
            var out = new BN(null);
            out.words = new Array(this.length + num.length);
            return jumboMulTo(this, num, out);
          };

          // In-place Multiplication
          BN.prototype.imul = function imul(num) {
            return this.clone().mulTo(num, this);
          };

          BN.prototype.imuln = function imuln(num) {
            assert(typeof num === 'number');
            assert(num < 0x4000000);

            // Carry
            var carry = 0;
            for (var i = 0; i < this.length; i++) {
              var w = (this.words[i] | 0) * num;
              var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
              carry >>= 26;
              carry += (w / 0x4000000) | 0;
              // NOTE: lo is 27bit maximum
              carry += lo >>> 26;
              this.words[i] = lo & 0x3ffffff;
            }

            if (carry !== 0) {
              this.words[i] = carry;
              this.length++;
            }

            return this;
          };

          BN.prototype.muln = function muln(num) {
            return this.clone().imuln(num);
          };

          // `this` * `this`
          BN.prototype.sqr = function sqr() {
            return this.mul(this);
          };

          // `this` * `this` in-place
          BN.prototype.isqr = function isqr() {
            return this.imul(this.clone());
          };

          // Math.pow(`this`, `num`)
          BN.prototype.pow = function pow(num) {
            var w = toBitArray(num);
            if (w.length === 0) return new BN(1);

            // Skip leading zeroes
            var res = this;
            for (var i = 0; i < w.length; i++ , res = res.sqr()) {
              if (w[i] !== 0) break;
            }

            if (++i < w.length) {
              for (var q = res.sqr(); i < w.length; i++ , q = q.sqr()) {
                if (w[i] === 0) continue;

                res = res.mul(q);
              }
            }

            return res;
          };

          // Shift-left in-place
          BN.prototype.iushln = function iushln(bits) {
            assert(typeof bits === 'number' && bits >= 0);
            var r = bits % 26;
            var s = (bits - r) / 26;
            var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);
            var i;

            if (r !== 0) {
              var carry = 0;

              for (i = 0; i < this.length; i++) {
                var newCarry = this.words[i] & carryMask;
                var c = ((this.words[i] | 0) - newCarry) << r;
                this.words[i] = c | carry;
                carry = newCarry >>> (26 - r);
              }

              if (carry) {
                this.words[i] = carry;
                this.length++;
              }
            }

            if (s !== 0) {
              for (i = this.length - 1; i >= 0; i--) {
                this.words[i + s] = this.words[i];
              }

              for (i = 0; i < s; i++) {
                this.words[i] = 0;
              }

              this.length += s;
            }

            return this.strip();
          };

          BN.prototype.ishln = function ishln(bits) {
            // TODO(indutny): implement me
            assert(this.negative === 0);
            return this.iushln(bits);
          };

          // Shift-right in-place
          // NOTE: `hint` is a lowest bit before trailing zeroes
          // NOTE: if `extended` is present - it will be filled with destroyed bits
          BN.prototype.iushrn = function iushrn(bits, hint, extended) {
            assert(typeof bits === 'number' && bits >= 0);
            var h;
            if (hint) {
              h = (hint - (hint % 26)) / 26;
            } else {
              h = 0;
            }

            var r = bits % 26;
            var s = Math.min((bits - r) / 26, this.length);
            var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
            var maskedWords = extended;

            h -= s;
            h = Math.max(0, h);

            // Extended mode, copy masked part
            if (maskedWords) {
              for (var i = 0; i < s; i++) {
                maskedWords.words[i] = this.words[i];
              }
              maskedWords.length = s;
            }

            if (s === 0) {
              // No-op, we should not move anything at all
            } else if (this.length > s) {
              this.length -= s;
              for (i = 0; i < this.length; i++) {
                this.words[i] = this.words[i + s];
              }
            } else {
              this.words[0] = 0;
              this.length = 1;
            }

            var carry = 0;
            for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
              var word = this.words[i] | 0;
              this.words[i] = (carry << (26 - r)) | (word >>> r);
              carry = word & mask;
            }

            // Push carried bits as a mask
            if (maskedWords && carry !== 0) {
              maskedWords.words[maskedWords.length++] = carry;
            }

            if (this.length === 0) {
              this.words[0] = 0;
              this.length = 1;
            }

            return this.strip();
          };

          BN.prototype.ishrn = function ishrn(bits, hint, extended) {
            // TODO(indutny): implement me
            assert(this.negative === 0);
            return this.iushrn(bits, hint, extended);
          };

          // Shift-left
          BN.prototype.shln = function shln(bits) {
            return this.clone().ishln(bits);
          };

          BN.prototype.ushln = function ushln(bits) {
            return this.clone().iushln(bits);
          };

          // Shift-right
          BN.prototype.shrn = function shrn(bits) {
            return this.clone().ishrn(bits);
          };

          BN.prototype.ushrn = function ushrn(bits) {
            return this.clone().iushrn(bits);
          };

          // Test if n bit is set
          BN.prototype.testn = function testn(bit) {
            assert(typeof bit === 'number' && bit >= 0);
            var r = bit % 26;
            var s = (bit - r) / 26;
            var q = 1 << r;

            // Fast case: bit is much higher than all existing words
            if (this.length <= s) return false;

            // Check bit and return
            var w = this.words[s];

            return !!(w & q);
          };

          // Return only lowers bits of number (in-place)
          BN.prototype.imaskn = function imaskn(bits) {
            assert(typeof bits === 'number' && bits >= 0);
            var r = bits % 26;
            var s = (bits - r) / 26;

            assert(this.negative === 0, 'imaskn works only with positive numbers');

            if (this.length <= s) {
              return this;
            }

            if (r !== 0) {
              s++;
            }
            this.length = Math.min(s, this.length);

            if (r !== 0) {
              var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
              this.words[this.length - 1] &= mask;
            }

            return this.strip();
          };

          // Return only lowers bits of number
          BN.prototype.maskn = function maskn(bits) {
            return this.clone().imaskn(bits);
          };

          // Add plain number `num` to `this`
          BN.prototype.iaddn = function iaddn(num) {
            assert(typeof num === 'number');
            assert(num < 0x4000000);
            if (num < 0) return this.isubn(-num);

            // Possible sign change
            if (this.negative !== 0) {
              if (this.length === 1 && (this.words[0] | 0) < num) {
                this.words[0] = num - (this.words[0] | 0);
                this.negative = 0;
                return this;
              }

              this.negative = 0;
              this.isubn(num);
              this.negative = 1;
              return this;
            }

            // Add without checks
            return this._iaddn(num);
          };

          BN.prototype._iaddn = function _iaddn(num) {
            this.words[0] += num;

            // Carry
            for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
              this.words[i] -= 0x4000000;
              if (i === this.length - 1) {
                this.words[i + 1] = 1;
              } else {
                this.words[i + 1]++;
              }
            }
            this.length = Math.max(this.length, i + 1);

            return this;
          };

          // Subtract plain number `num` from `this`
          BN.prototype.isubn = function isubn(num) {
            assert(typeof num === 'number');
            assert(num < 0x4000000);
            if (num < 0) return this.iaddn(-num);

            if (this.negative !== 0) {
              this.negative = 0;
              this.iaddn(num);
              this.negative = 1;
              return this;
            }

            this.words[0] -= num;

            if (this.length === 1 && this.words[0] < 0) {
              this.words[0] = -this.words[0];
              this.negative = 1;
            } else {
              // Carry
              for (var i = 0; i < this.length && this.words[i] < 0; i++) {
                this.words[i] += 0x4000000;
                this.words[i + 1] -= 1;
              }
            }

            return this.strip();
          };

          BN.prototype.addn = function addn(num) {
            return this.clone().iaddn(num);
          };

          BN.prototype.subn = function subn(num) {
            return this.clone().isubn(num);
          };

          BN.prototype.iabs = function iabs() {
            this.negative = 0;

            return this;
          };

          BN.prototype.abs = function abs() {
            return this.clone().iabs();
          };

          BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
            var len = num.length + shift;
            var i;

            this._expand(len);

            var w;
            var carry = 0;
            for (i = 0; i < num.length; i++) {
              w = (this.words[i + shift] | 0) + carry;
              var right = (num.words[i] | 0) * mul;
              w -= right & 0x3ffffff;
              carry = (w >> 26) - ((right / 0x4000000) | 0);
              this.words[i + shift] = w & 0x3ffffff;
            }
            for (; i < this.length - shift; i++) {
              w = (this.words[i + shift] | 0) + carry;
              carry = w >> 26;
              this.words[i + shift] = w & 0x3ffffff;
            }

            if (carry === 0) return this.strip();

            // Subtraction overflow
            assert(carry === -1);
            carry = 0;
            for (i = 0; i < this.length; i++) {
              w = -(this.words[i] | 0) + carry;
              carry = w >> 26;
              this.words[i] = w & 0x3ffffff;
            }
            this.negative = 1;

            return this.strip();
          };

          BN.prototype._wordDiv = function _wordDiv(num, mode) {
            var shift = this.length - num.length;

            var a = this.clone();
            var b = num;

            // Normalize
            var bhi = b.words[b.length - 1] | 0;
            var bhiBits = this._countBits(bhi);
            shift = 26 - bhiBits;
            if (shift !== 0) {
              b = b.ushln(shift);
              a.iushln(shift);
              bhi = b.words[b.length - 1] | 0;
            }

            // Initialize quotient
            var m = a.length - b.length;
            var q;

            if (mode !== 'mod') {
              q = new BN(null);
              q.length = m + 1;
              q.words = new Array(q.length);
              for (var i = 0; i < q.length; i++) {
                q.words[i] = 0;
              }
            }

            var diff = a.clone()._ishlnsubmul(b, 1, m);
            if (diff.negative === 0) {
              a = diff;
              if (q) {
                q.words[m] = 1;
              }
            }

            for (var j = m - 1; j >= 0; j--) {
              var qj = (a.words[b.length + j] | 0) * 0x4000000 +
                (a.words[b.length + j - 1] | 0);

              // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
              // (0x7ffffff)
              qj = Math.min((qj / bhi) | 0, 0x3ffffff);

              a._ishlnsubmul(b, qj, j);
              while (a.negative !== 0) {
                qj--;
                a.negative = 0;
                a._ishlnsubmul(b, 1, j);
                if (!a.isZero()) {
                  a.negative ^= 1;
                }
              }
              if (q) {
                q.words[j] = qj;
              }
            }
            if (q) {
              q.strip();
            }
            a.strip();

            // Denormalize
            if (mode !== 'div' && shift !== 0) {
              a.iushrn(shift);
            }

            return {
              div: q || null,
              mod: a
            };
          };

          // NOTE: 1) `mode` can be set to `mod` to request mod only,
          //       to `div` to request div only, or be absent to
          //       request both div & mod
          //       2) `positive` is true if unsigned mod is requested
          BN.prototype.divmod = function divmod(num, mode, positive) {
            assert(!num.isZero());

            if (this.isZero()) {
              return {
                div: new BN(0),
                mod: new BN(0)
              };
            }

            var div, mod, res;
            if (this.negative !== 0 && num.negative === 0) {
              res = this.neg().divmod(num, mode);

              if (mode !== 'mod') {
                div = res.div.neg();
              }

              if (mode !== 'div') {
                mod = res.mod.neg();
                if (positive && mod.negative !== 0) {
                  mod.iadd(num);
                }
              }

              return {
                div: div,
                mod: mod
              };
            }

            if (this.negative === 0 && num.negative !== 0) {
              res = this.divmod(num.neg(), mode);

              if (mode !== 'mod') {
                div = res.div.neg();
              }

              return {
                div: div,
                mod: res.mod
              };
            }

            if ((this.negative & num.negative) !== 0) {
              res = this.neg().divmod(num.neg(), mode);

              if (mode !== 'div') {
                mod = res.mod.neg();
                if (positive && mod.negative !== 0) {
                  mod.isub(num);
                }
              }

              return {
                div: res.div,
                mod: mod
              };
            }

            // Both numbers are positive at this point

            // Strip both numbers to approximate shift value
            if (num.length > this.length || this.cmp(num) < 0) {
              return {
                div: new BN(0),
                mod: this
              };
            }

            // Very short reduction
            if (num.length === 1) {
              if (mode === 'div') {
                return {
                  div: this.divn(num.words[0]),
                  mod: null
                };
              }

              if (mode === 'mod') {
                return {
                  div: null,
                  mod: new BN(this.modn(num.words[0]))
                };
              }

              return {
                div: this.divn(num.words[0]),
                mod: new BN(this.modn(num.words[0]))
              };
            }

            return this._wordDiv(num, mode);
          };

          // Find `this` / `num`
          BN.prototype.div = function div(num) {
            return this.divmod(num, 'div', false).div;
          };

          // Find `this` % `num`
          BN.prototype.mod = function mod(num) {
            return this.divmod(num, 'mod', false).mod;
          };

          BN.prototype.umod = function umod(num) {
            return this.divmod(num, 'mod', true).mod;
          };

          // Find Round(`this` / `num`)
          BN.prototype.divRound = function divRound(num) {
            var dm = this.divmod(num);

            // Fast case - exact division
            if (dm.mod.isZero()) return dm.div;

            var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;

            var half = num.ushrn(1);
            var r2 = num.andln(1);
            var cmp = mod.cmp(half);

            // Round down
            if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;

            // Round up
            return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
          };

          BN.prototype.modn = function modn(num) {
            assert(num <= 0x3ffffff);
            var p = (1 << 26) % num;

            var acc = 0;
            for (var i = this.length - 1; i >= 0; i--) {
              acc = (p * acc + (this.words[i] | 0)) % num;
            }

            return acc;
          };

          // In-place division by number
          BN.prototype.idivn = function idivn(num) {
            assert(num <= 0x3ffffff);

            var carry = 0;
            for (var i = this.length - 1; i >= 0; i--) {
              var w = (this.words[i] | 0) + carry * 0x4000000;
              this.words[i] = (w / num) | 0;
              carry = w % num;
            }

            return this.strip();
          };

          BN.prototype.divn = function divn(num) {
            return this.clone().idivn(num);
          };

          BN.prototype.egcd = function egcd(p) {
            assert(p.negative === 0);
            assert(!p.isZero());

            var x = this;
            var y = p.clone();

            if (x.negative !== 0) {
              x = x.umod(p);
            } else {
              x = x.clone();
            }

            // A * x + B * y = x
            var A = new BN(1);
            var B = new BN(0);

            // C * x + D * y = y
            var C = new BN(0);
            var D = new BN(1);

            var g = 0;

            while (x.isEven() && y.isEven()) {
              x.iushrn(1);
              y.iushrn(1);
              ++g;
            }

            var yp = y.clone();
            var xp = x.clone();

            while (!x.isZero()) {
              for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
              if (i > 0) {
                x.iushrn(i);
                while (i-- > 0) {
                  if (A.isOdd() || B.isOdd()) {
                    A.iadd(yp);
                    B.isub(xp);
                  }

                  A.iushrn(1);
                  B.iushrn(1);
                }
              }

              for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
              if (j > 0) {
                y.iushrn(j);
                while (j-- > 0) {
                  if (C.isOdd() || D.isOdd()) {
                    C.iadd(yp);
                    D.isub(xp);
                  }

                  C.iushrn(1);
                  D.iushrn(1);
                }
              }

              if (x.cmp(y) >= 0) {
                x.isub(y);
                A.isub(C);
                B.isub(D);
              } else {
                y.isub(x);
                C.isub(A);
                D.isub(B);
              }
            }

            return {
              a: C,
              b: D,
              gcd: y.iushln(g)
            };
          };

          // This is reduced incarnation of the binary EEA
          // above, designated to invert members of the
          // _prime_ fields F(p) at a maximal speed
          BN.prototype._invmp = function _invmp(p) {
            assert(p.negative === 0);
            assert(!p.isZero());

            var a = this;
            var b = p.clone();

            if (a.negative !== 0) {
              a = a.umod(p);
            } else {
              a = a.clone();
            }

            var x1 = new BN(1);
            var x2 = new BN(0);

            var delta = b.clone();

            while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
              for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
              if (i > 0) {
                a.iushrn(i);
                while (i-- > 0) {
                  if (x1.isOdd()) {
                    x1.iadd(delta);
                  }

                  x1.iushrn(1);
                }
              }

              for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
              if (j > 0) {
                b.iushrn(j);
                while (j-- > 0) {
                  if (x2.isOdd()) {
                    x2.iadd(delta);
                  }

                  x2.iushrn(1);
                }
              }

              if (a.cmp(b) >= 0) {
                a.isub(b);
                x1.isub(x2);
              } else {
                b.isub(a);
                x2.isub(x1);
              }
            }

            var res;
            if (a.cmpn(1) === 0) {
              res = x1;
            } else {
              res = x2;
            }

            if (res.cmpn(0) < 0) {
              res.iadd(p);
            }

            return res;
          };

          BN.prototype.gcd = function gcd(num) {
            if (this.isZero()) return num.abs();
            if (num.isZero()) return this.abs();

            var a = this.clone();
            var b = num.clone();
            a.negative = 0;
            b.negative = 0;

            // Remove common factor of two
            for (var shift = 0; a.isEven() && b.isEven(); shift++) {
              a.iushrn(1);
              b.iushrn(1);
            }

            do {
              while (a.isEven()) {
                a.iushrn(1);
              }
              while (b.isEven()) {
                b.iushrn(1);
              }

              var r = a.cmp(b);
              if (r < 0) {
                // Swap `a` and `b` to make `a` always bigger than `b`
                var t = a;
                a = b;
                b = t;
              } else if (r === 0 || b.cmpn(1) === 0) {
                break;
              }

              a.isub(b);
            } while (true);

            return b.iushln(shift);
          };

          // Invert number in the field F(num)
          BN.prototype.invm = function invm(num) {
            return this.egcd(num).a.umod(num);
          };

          BN.prototype.isEven = function isEven() {
            return (this.words[0] & 1) === 0;
          };

          BN.prototype.isOdd = function isOdd() {
            return (this.words[0] & 1) === 1;
          };

          // And first word and num
          BN.prototype.andln = function andln(num) {
            return this.words[0] & num;
          };

          // Increment at the bit position in-line
          BN.prototype.bincn = function bincn(bit) {
            assert(typeof bit === 'number');
            var r = bit % 26;
            var s = (bit - r) / 26;
            var q = 1 << r;

            // Fast case: bit is much higher than all existing words
            if (this.length <= s) {
              this._expand(s + 1);
              this.words[s] |= q;
              return this;
            }

            // Add bit and propagate, if needed
            var carry = q;
            for (var i = s; carry !== 0 && i < this.length; i++) {
              var w = this.words[i] | 0;
              w += carry;
              carry = w >>> 26;
              w &= 0x3ffffff;
              this.words[i] = w;
            }
            if (carry !== 0) {
              this.words[i] = carry;
              this.length++;
            }
            return this;
          };

          BN.prototype.isZero = function isZero() {
            return this.length === 1 && this.words[0] === 0;
          };

          BN.prototype.cmpn = function cmpn(num) {
            var negative = num < 0;

            if (this.negative !== 0 && !negative) return -1;
            if (this.negative === 0 && negative) return 1;

            this.strip();

            var res;
            if (this.length > 1) {
              res = 1;
            } else {
              if (negative) {
                num = -num;
              }

              assert(num <= 0x3ffffff, 'Number is too big');

              var w = this.words[0] | 0;
              res = w === num ? 0 : w < num ? -1 : 1;
            }
            if (this.negative !== 0) return -res | 0;
            return res;
          };

          // Compare two numbers and return:
          // 1 - if `this` > `num`
          // 0 - if `this` == `num`
          // -1 - if `this` < `num`
          BN.prototype.cmp = function cmp(num) {
            if (this.negative !== 0 && num.negative === 0) return -1;
            if (this.negative === 0 && num.negative !== 0) return 1;

            var res = this.ucmp(num);
            if (this.negative !== 0) return -res | 0;
            return res;
          };

          // Unsigned comparison
          BN.prototype.ucmp = function ucmp(num) {
            // At this point both numbers have the same sign
            if (this.length > num.length) return 1;
            if (this.length < num.length) return -1;

            var res = 0;
            for (var i = this.length - 1; i >= 0; i--) {
              var a = this.words[i] | 0;
              var b = num.words[i] | 0;

              if (a === b) continue;
              if (a < b) {
                res = -1;
              } else if (a > b) {
                res = 1;
              }
              break;
            }
            return res;
          };

          BN.prototype.gtn = function gtn(num) {
            return this.cmpn(num) === 1;
          };

          BN.prototype.gt = function gt(num) {
            return this.cmp(num) === 1;
          };

          BN.prototype.gten = function gten(num) {
            return this.cmpn(num) >= 0;
          };

          BN.prototype.gte = function gte(num) {
            return this.cmp(num) >= 0;
          };

          BN.prototype.ltn = function ltn(num) {
            return this.cmpn(num) === -1;
          };

          BN.prototype.lt = function lt(num) {
            return this.cmp(num) === -1;
          };

          BN.prototype.lten = function lten(num) {
            return this.cmpn(num) <= 0;
          };

          BN.prototype.lte = function lte(num) {
            return this.cmp(num) <= 0;
          };

          BN.prototype.eqn = function eqn(num) {
            return this.cmpn(num) === 0;
          };

          BN.prototype.eq = function eq(num) {
            return this.cmp(num) === 0;
          };

          //
          // A reduce context, could be using montgomery or something better, depending
          // on the `m` itself.
          //
          BN.red = function red(num) {
            return new Red(num);
          };

          BN.prototype.toRed = function toRed(ctx) {
            assert(!this.red, 'Already a number in reduction context');
            assert(this.negative === 0, 'red works only with positives');
            return ctx.convertTo(this)._forceRed(ctx);
          };

          BN.prototype.fromRed = function fromRed() {
            assert(this.red, 'fromRed works only with numbers in reduction context');
            return this.red.convertFrom(this);
          };

          BN.prototype._forceRed = function _forceRed(ctx) {
            this.red = ctx;
            return this;
          };

          BN.prototype.forceRed = function forceRed(ctx) {
            assert(!this.red, 'Already a number in reduction context');
            return this._forceRed(ctx);
          };

          BN.prototype.redAdd = function redAdd(num) {
            assert(this.red, 'redAdd works only with red numbers');
            return this.red.add(this, num);
          };

          BN.prototype.redIAdd = function redIAdd(num) {
            assert(this.red, 'redIAdd works only with red numbers');
            return this.red.iadd(this, num);
          };

          BN.prototype.redSub = function redSub(num) {
            assert(this.red, 'redSub works only with red numbers');
            return this.red.sub(this, num);
          };

          BN.prototype.redISub = function redISub(num) {
            assert(this.red, 'redISub works only with red numbers');
            return this.red.isub(this, num);
          };

          BN.prototype.redShl = function redShl(num) {
            assert(this.red, 'redShl works only with red numbers');
            return this.red.shl(this, num);
          };

          BN.prototype.redMul = function redMul(num) {
            assert(this.red, 'redMul works only with red numbers');
            this.red._verify2(this, num);
            return this.red.mul(this, num);
          };

          BN.prototype.redIMul = function redIMul(num) {
            assert(this.red, 'redMul works only with red numbers');
            this.red._verify2(this, num);
            return this.red.imul(this, num);
          };

          BN.prototype.redSqr = function redSqr() {
            assert(this.red, 'redSqr works only with red numbers');
            this.red._verify1(this);
            return this.red.sqr(this);
          };

          BN.prototype.redISqr = function redISqr() {
            assert(this.red, 'redISqr works only with red numbers');
            this.red._verify1(this);
            return this.red.isqr(this);
          };

          // Square root over p
          BN.prototype.redSqrt = function redSqrt() {
            assert(this.red, 'redSqrt works only with red numbers');
            this.red._verify1(this);
            return this.red.sqrt(this);
          };

          BN.prototype.redInvm = function redInvm() {
            assert(this.red, 'redInvm works only with red numbers');
            this.red._verify1(this);
            return this.red.invm(this);
          };

          // Return negative clone of `this` % `red modulo`
          BN.prototype.redNeg = function redNeg() {
            assert(this.red, 'redNeg works only with red numbers');
            this.red._verify1(this);
            return this.red.neg(this);
          };

          BN.prototype.redPow = function redPow(num) {
            assert(this.red && !num.red, 'redPow(normalNum)');
            this.red._verify1(this);
            return this.red.pow(this, num);
          };

          // Prime numbers with efficient reduction
          var primes = {
            k256: null,
            p224: null,
            p192: null,
            p25519: null
          };

          // Pseudo-Mersenne prime
          function MPrime(name, p) {
            // P = 2 ^ N - K
            this.name = name;
            this.p = new BN(p, 16);
            this.n = this.p.bitLength();
            this.k = new BN(1).iushln(this.n).isub(this.p);

            this.tmp = this._tmp();
          }

          MPrime.prototype._tmp = function _tmp() {
            var tmp = new BN(null);
            tmp.words = new Array(Math.ceil(this.n / 13));
            return tmp;
          };

          MPrime.prototype.ireduce = function ireduce(num) {
            // Assumes that `num` is less than `P^2`
            // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
            var r = num;
            var rlen;

            do {
              this.split(r, this.tmp);
              r = this.imulK(r);
              r = r.iadd(this.tmp);
              rlen = r.bitLength();
            } while (rlen > this.n);

            var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
            if (cmp === 0) {
              r.words[0] = 0;
              r.length = 1;
            } else if (cmp > 0) {
              r.isub(this.p);
            } else {
              r.strip();
            }

            return r;
          };

          MPrime.prototype.split = function split(input, out) {
            input.iushrn(this.n, 0, out);
          };

          MPrime.prototype.imulK = function imulK(num) {
            return num.imul(this.k);
          };

          function K256() {
            MPrime.call(
              this,
              'k256',
              'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
          }
          inherits(K256, MPrime);

          K256.prototype.split = function split(input, output) {
            // 256 = 9 * 26 + 22
            var mask = 0x3fffff;

            var outLen = Math.min(input.length, 9);
            for (var i = 0; i < outLen; i++) {
              output.words[i] = input.words[i];
            }
            output.length = outLen;

            if (input.length <= 9) {
              input.words[0] = 0;
              input.length = 1;
              return;
            }

            // Shift by 9 limbs
            var prev = input.words[9];
            output.words[output.length++] = prev & mask;

            for (i = 10; i < input.length; i++) {
              var next = input.words[i] | 0;
              input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);
              prev = next;
            }
            prev >>>= 22;
            input.words[i - 10] = prev;
            if (prev === 0 && input.length > 10) {
              input.length -= 10;
            } else {
              input.length -= 9;
            }
          };

          K256.prototype.imulK = function imulK(num) {
            // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
            num.words[num.length] = 0;
            num.words[num.length + 1] = 0;
            num.length += 2;

            // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
            var lo = 0;
            for (var i = 0; i < num.length; i++) {
              var w = num.words[i] | 0;
              lo += w * 0x3d1;
              num.words[i] = lo & 0x3ffffff;
              lo = w * 0x40 + ((lo / 0x4000000) | 0);
            }

            // Fast length reduction
            if (num.words[num.length - 1] === 0) {
              num.length--;
              if (num.words[num.length - 1] === 0) {
                num.length--;
              }
            }
            return num;
          };

          function P224() {
            MPrime.call(
              this,
              'p224',
              'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
          }
          inherits(P224, MPrime);

          function P192() {
            MPrime.call(
              this,
              'p192',
              'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
          }
          inherits(P192, MPrime);

          function P25519() {
            // 2 ^ 255 - 19
            MPrime.call(
              this,
              '25519',
              '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
          }
          inherits(P25519, MPrime);

          P25519.prototype.imulK = function imulK(num) {
            // K = 0x13
            var carry = 0;
            for (var i = 0; i < num.length; i++) {
              var hi = (num.words[i] | 0) * 0x13 + carry;
              var lo = hi & 0x3ffffff;
              hi >>>= 26;

              num.words[i] = lo;
              carry = hi;
            }
            if (carry !== 0) {
              num.words[num.length++] = carry;
            }
            return num;
          };

          // Exported mostly for testing purposes, use plain name instead
          BN._prime = function prime(name) {
            // Cached version of prime
            if (primes[name]) return primes[name];

            var prime;
            if (name === 'k256') {
              prime = new K256();
            } else if (name === 'p224') {
              prime = new P224();
            } else if (name === 'p192') {
              prime = new P192();
            } else if (name === 'p25519') {
              prime = new P25519();
            } else {
              throw new Error('Unknown prime ' + name);
            }
            primes[name] = prime;

            return prime;
          };

          //
          // Base reduction engine
          //
          function Red(m) {
            if (typeof m === 'string') {
              var prime = BN._prime(m);
              this.m = prime.p;
              this.prime = prime;
            } else {
              assert(m.gtn(1), 'modulus must be greater than 1');
              this.m = m;
              this.prime = null;
            }
          }

          Red.prototype._verify1 = function _verify1(a) {
            assert(a.negative === 0, 'red works only with positives');
            assert(a.red, 'red works only with red numbers');
          };

          Red.prototype._verify2 = function _verify2(a, b) {
            assert((a.negative | b.negative) === 0, 'red works only with positives');
            assert(a.red && a.red === b.red,
              'red works only with red numbers');
          };

          Red.prototype.imod = function imod(a) {
            if (this.prime) return this.prime.ireduce(a)._forceRed(this);
            return a.umod(this.m)._forceRed(this);
          };

          Red.prototype.neg = function neg(a) {
            if (a.isZero()) {
              return a.clone();
            }

            return this.m.sub(a)._forceRed(this);
          };

          Red.prototype.add = function add(a, b) {
            this._verify2(a, b);

            var res = a.add(b);
            if (res.cmp(this.m) >= 0) {
              res.isub(this.m);
            }
            return res._forceRed(this);
          };

          Red.prototype.iadd = function iadd(a, b) {
            this._verify2(a, b);

            var res = a.iadd(b);
            if (res.cmp(this.m) >= 0) {
              res.isub(this.m);
            }
            return res;
          };

          Red.prototype.sub = function sub(a, b) {
            this._verify2(a, b);

            var res = a.sub(b);
            if (res.cmpn(0) < 0) {
              res.iadd(this.m);
            }
            return res._forceRed(this);
          };

          Red.prototype.isub = function isub(a, b) {
            this._verify2(a, b);

            var res = a.isub(b);
            if (res.cmpn(0) < 0) {
              res.iadd(this.m);
            }
            return res;
          };

          Red.prototype.shl = function shl(a, num) {
            this._verify1(a);
            return this.imod(a.ushln(num));
          };

          Red.prototype.imul = function imul(a, b) {
            this._verify2(a, b);
            return this.imod(a.imul(b));
          };

          Red.prototype.mul = function mul(a, b) {
            this._verify2(a, b);
            return this.imod(a.mul(b));
          };

          Red.prototype.isqr = function isqr(a) {
            return this.imul(a, a.clone());
          };

          Red.prototype.sqr = function sqr(a) {
            return this.mul(a, a);
          };

          Red.prototype.sqrt = function sqrt(a) {
            if (a.isZero()) return a.clone();

            var mod3 = this.m.andln(3);
            assert(mod3 % 2 === 1);

            // Fast case
            if (mod3 === 3) {
              var pow = this.m.add(new BN(1)).iushrn(2);
              return this.pow(a, pow);
            }

            // Tonelli-Shanks algorithm (Totally unoptimized and slow)
            //
            // Find Q and S, that Q * 2 ^ S = (P - 1)
            var q = this.m.subn(1);
            var s = 0;
            while (!q.isZero() && q.andln(1) === 0) {
              s++;
              q.iushrn(1);
            }
            assert(!q.isZero());

            var one = new BN(1).toRed(this);
            var nOne = one.redNeg();

            // Find quadratic non-residue
            // NOTE: Max is such because of generalized Riemann hypothesis.
            var lpow = this.m.subn(1).iushrn(1);
            var z = this.m.bitLength();
            z = new BN(2 * z * z).toRed(this);

            while (this.pow(z, lpow).cmp(nOne) !== 0) {
              z.redIAdd(nOne);
            }

            var c = this.pow(z, q);
            var r = this.pow(a, q.addn(1).iushrn(1));
            var t = this.pow(a, q);
            var m = s;
            while (t.cmp(one) !== 0) {
              var tmp = t;
              for (var i = 0; tmp.cmp(one) !== 0; i++) {
                tmp = tmp.redSqr();
              }
              assert(i < m);
              var b = this.pow(c, new BN(1).iushln(m - i - 1));

              r = r.redMul(b);
              c = b.redSqr();
              t = t.redMul(c);
              m = i;
            }

            return r;
          };

          Red.prototype.invm = function invm(a) {
            var inv = a._invmp(this.m);
            if (inv.negative !== 0) {
              inv.negative = 0;
              return this.imod(inv).redNeg();
            } else {
              return this.imod(inv);
            }
          };

          Red.prototype.pow = function pow(a, num) {
            if (num.isZero()) return new BN(1);
            if (num.cmpn(1) === 0) return a.clone();

            var windowSize = 4;
            var wnd = new Array(1 << windowSize);
            wnd[0] = new BN(1).toRed(this);
            wnd[1] = a;
            for (var i = 2; i < wnd.length; i++) {
              wnd[i] = this.mul(wnd[i - 1], a);
            }

            var res = wnd[0];
            var current = 0;
            var currentLen = 0;
            var start = num.bitLength() % 26;
            if (start === 0) {
              start = 26;
            }

            for (i = num.length - 1; i >= 0; i--) {
              var word = num.words[i];
              for (var j = start - 1; j >= 0; j--) {
                var bit = (word >> j) & 1;
                if (res !== wnd[0]) {
                  res = this.sqr(res);
                }

                if (bit === 0 && current === 0) {
                  currentLen = 0;
                  continue;
                }

                current <<= 1;
                current |= bit;
                currentLen++;
                if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;

                res = this.mul(res, wnd[current]);
                currentLen = 0;
                current = 0;
              }
              start = 26;
            }

            return res;
          };

          Red.prototype.convertTo = function convertTo(num) {
            var r = num.umod(this.m);

            return r === num ? r.clone() : r;
          };

          Red.prototype.convertFrom = function convertFrom(num) {
            var res = num.clone();
            res.red = null;
            return res;
          };

          //
          // Montgomery method engine
          //

          BN.mont = function mont(num) {
            return new Mont(num);
          };

          function Mont(m) {
            Red.call(this, m);

            this.shift = this.m.bitLength();
            if (this.shift % 26 !== 0) {
              this.shift += 26 - (this.shift % 26);
            }

            this.r = new BN(1).iushln(this.shift);
            this.r2 = this.imod(this.r.sqr());
            this.rinv = this.r._invmp(this.m);

            this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
            this.minv = this.minv.umod(this.r);
            this.minv = this.r.sub(this.minv);
          }
          inherits(Mont, Red);

          Mont.prototype.convertTo = function convertTo(num) {
            return this.imod(num.ushln(this.shift));
          };

          Mont.prototype.convertFrom = function convertFrom(num) {
            var r = this.imod(num.mul(this.rinv));
            r.red = null;
            return r;
          };

          Mont.prototype.imul = function imul(a, b) {
            if (a.isZero() || b.isZero()) {
              a.words[0] = 0;
              a.length = 1;
              return a;
            }

            var t = a.imul(b);
            var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
            var u = t.isub(c).iushrn(this.shift);
            var res = u;

            if (u.cmp(this.m) >= 0) {
              res = u.isub(this.m);
            } else if (u.cmpn(0) < 0) {
              res = u.iadd(this.m);
            }

            return res._forceRed(this);
          };

          Mont.prototype.mul = function mul(a, b) {
            if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);

            var t = a.mul(b);
            var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
            var u = t.isub(c).iushrn(this.shift);
            var res = u;
            if (u.cmp(this.m) >= 0) {
              res = u.isub(this.m);
            } else if (u.cmpn(0) < 0) {
              res = u.iadd(this.m);
            }

            return res._forceRed(this);
          };

          Mont.prototype.invm = function invm(a) {
            // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
            var res = this.imod(a._invmp(this.m).mul(this.r2));
            return res._forceRed(this);
          };
        })(typeof module === 'undefined' || module, this);

        /* WEBPACK VAR INJECTION */
      }.call(this, __webpack_require__(/*! ./../../../../../../../../AppData/Roaming/npm/node_modules/webpack/buildin/module.js */ "../../../../../AppData/Roaming/npm/node_modules/webpack/buildin/module.js")(module)))

      /***/
    }),

/***/ "../is-buffer/index.js":
/*!*****************************!*\
  !*** ../is-buffer/index.js ***!
  \*****************************/
/*! no static exports found */
/***/ (function (module, exports) {

      /*!
       * Determine if an object is a Buffer
       *
       * @author   Feross Aboukhadijeh <https://feross.org>
       * @license  MIT
       */

      // The _isBuffer check is for Safari 5-7 support, because it's missing
      // Object.prototype.constructor. Remove this eventually
      module.exports = function (obj) {
        return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer)
      }

      function isBuffer(obj) {
        return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)
      }

      // For Node v0.10 support. Remove this eventually.
      function isSlowBuffer(obj) {
        return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isBuffer(obj.slice(0, 0))
      }


      /***/
    }),

/***/ "../is-hex-prefixed/src/index.js":
/*!***************************************!*\
  !*** ../is-hex-prefixed/src/index.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function (module, exports) {

      /**
       * Returns a `Boolean` on whether or not the a `String` starts with '0x'
       * @param {String} str the string input value
       * @return {Boolean} a boolean if it is or is not hex prefixed
       * @throws if the str input is not a string
       */
      module.exports = function isHexPrefixed(str) {
        if (typeof str !== 'string') {
          throw new Error("[is-hex-prefixed] value must be type 'string', is currently type " + (typeof str) + ", while checking isHexPrefixed.");
        }

        return str.slice(0, 2) === '0x';
      }


      /***/
    }),

/***/ "../js-sha3/src/sha3.js":
/*!******************************!*\
  !*** ../js-sha3/src/sha3.js ***!
  \******************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function (process, global) {/**
 * [js-sha3]{@link https://github.com/emn178/js-sha3}
 *
 * @version 0.5.5
 * @author Chen, Yi-Cyuan [emn178@gmail.com]
 * @copyright Chen, Yi-Cyuan 2015-2016
 * @license MIT
 */
        (function (root) {
          'use strict';

          var NODE_JS = typeof process == 'object' && process.versions && process.versions.node;
          if (NODE_JS) {
            root = global;
          }
          var COMMON_JS = !root.JS_SHA3_TEST && typeof module == 'object' && module.exports;
          var HEX_CHARS = '0123456789abcdef'.split('');
          var SHAKE_PADDING = [31, 7936, 2031616, 520093696];
          var KECCAK_PADDING = [1, 256, 65536, 16777216];
          var PADDING = [6, 1536, 393216, 100663296];
          var SHIFT = [0, 8, 16, 24];
          var RC = [1, 0, 32898, 0, 32906, 2147483648, 2147516416, 2147483648, 32907, 0, 2147483649,
            0, 2147516545, 2147483648, 32777, 2147483648, 138, 0, 136, 0, 2147516425, 0,
            2147483658, 0, 2147516555, 0, 139, 2147483648, 32905, 2147483648, 32771,
            2147483648, 32770, 2147483648, 128, 2147483648, 32778, 0, 2147483658, 2147483648,
            2147516545, 2147483648, 32896, 2147483648, 2147483649, 0, 2147516424, 2147483648];
          var BITS = [224, 256, 384, 512];
          var SHAKE_BITS = [128, 256];
          var OUTPUT_TYPES = ['hex', 'buffer', 'arrayBuffer', 'array'];

          var createOutputMethod = function (bits, padding, outputType) {
            return function (message) {
              return new Keccak(bits, padding, bits).update(message)[outputType]();
            }
          };

          var createShakeOutputMethod = function (bits, padding, outputType) {
            return function (message, outputBits) {
              return new Keccak(bits, padding, outputBits).update(message)[outputType]();
            }
          };

          var createMethod = function (bits, padding) {
            var method = createOutputMethod(bits, padding, 'hex');
            method.create = function () {
              return new Keccak(bits, padding, bits);
            };
            method.update = function (message) {
              return method.create().update(message);
            };
            for (var i = 0; i < OUTPUT_TYPES.length; ++i) {
              var type = OUTPUT_TYPES[i];
              method[type] = createOutputMethod(bits, padding, type);
            }
            return method;
          };

          var createShakeMethod = function (bits, padding) {
            var method = createShakeOutputMethod(bits, padding, 'hex');
            method.create = function (outputBits) {
              return new Keccak(bits, padding, outputBits);
            };
            method.update = function (message, outputBits) {
              return method.create(outputBits).update(message);
            };
            for (var i = 0; i < OUTPUT_TYPES.length; ++i) {
              var type = OUTPUT_TYPES[i];
              method[type] = createShakeOutputMethod(bits, padding, type);
            }
            return method;
          };

          var algorithms = [
            { name: 'keccak', padding: KECCAK_PADDING, bits: BITS, createMethod: createMethod },
            { name: 'sha3', padding: PADDING, bits: BITS, createMethod: createMethod },
            { name: 'shake', padding: SHAKE_PADDING, bits: SHAKE_BITS, createMethod: createShakeMethod }
          ];

          var methods = {};

          for (var i = 0; i < algorithms.length; ++i) {
            var algorithm = algorithms[i];
            var bits = algorithm.bits;
            for (var j = 0; j < bits.length; ++j) {
              methods[algorithm.name + '_' + bits[j]] = algorithm.createMethod(bits[j], algorithm.padding);
            }
          }

          function Keccak(bits, padding, outputBits) {
            this.blocks = [];
            this.s = [];
            this.padding = padding;
            this.outputBits = outputBits;
            this.reset = true;
            this.block = 0;
            this.start = 0;
            this.blockCount = (1600 - (bits << 1)) >> 5;
            this.byteCount = this.blockCount << 2;
            this.outputBlocks = outputBits >> 5;
            this.extraBytes = (outputBits & 31) >> 3;

            for (var i = 0; i < 50; ++i) {
              this.s[i] = 0;
            }
          };

          Keccak.prototype.update = function (message) {
            var notString = typeof message != 'string';
            if (notString && message.constructor == root.ArrayBuffer) {
              message = new Uint8Array(message);
            }
            var length = message.length, blocks = this.blocks, byteCount = this.byteCount,
              blockCount = this.blockCount, index = 0, s = this.s, i, code;

            while (index < length) {
              if (this.reset) {
                this.reset = false;
                blocks[0] = this.block;
                for (i = 1; i < blockCount + 1; ++i) {
                  blocks[i] = 0;
                }
              }
              if (notString) {
                for (i = this.start; index < length && i < byteCount; ++index) {
                  blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];
                }
              } else {
                for (i = this.start; index < length && i < byteCount; ++index) {
                  code = message.charCodeAt(index);
                  if (code < 0x80) {
                    blocks[i >> 2] |= code << SHIFT[i++ & 3];
                  } else if (code < 0x800) {
                    blocks[i >> 2] |= (0xc0 | (code >> 6)) << SHIFT[i++ & 3];
                    blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
                  } else if (code < 0xd800 || code >= 0xe000) {
                    blocks[i >> 2] |= (0xe0 | (code >> 12)) << SHIFT[i++ & 3];
                    blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];
                    blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
                  } else {
                    code = 0x10000 + (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff));
                    blocks[i >> 2] |= (0xf0 | (code >> 18)) << SHIFT[i++ & 3];
                    blocks[i >> 2] |= (0x80 | ((code >> 12) & 0x3f)) << SHIFT[i++ & 3];
                    blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];
                    blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
                  }
                }
              }
              this.lastByteIndex = i;
              if (i >= byteCount) {
                this.start = i - byteCount;
                this.block = blocks[blockCount];
                for (i = 0; i < blockCount; ++i) {
                  s[i] ^= blocks[i];
                }
                f(s);
                this.reset = true;
              } else {
                this.start = i;
              }
            }
            return this;
          };

          Keccak.prototype.finalize = function () {
            var blocks = this.blocks, i = this.lastByteIndex, blockCount = this.blockCount, s = this.s;
            blocks[i >> 2] |= this.padding[i & 3];
            if (this.lastByteIndex == this.byteCount) {
              blocks[0] = blocks[blockCount];
              for (i = 1; i < blockCount + 1; ++i) {
                blocks[i] = 0;
              }
            }
            blocks[blockCount - 1] |= 0x80000000;
            for (i = 0; i < blockCount; ++i) {
              s[i] ^= blocks[i];
            }
            f(s);
          };

          Keccak.prototype.toString = Keccak.prototype.hex = function () {
            this.finalize();

            var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks,
              extraBytes = this.extraBytes, i = 0, j = 0;
            var hex = '', block;
            while (j < outputBlocks) {
              for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {
                block = s[i];
                hex += HEX_CHARS[(block >> 4) & 0x0F] + HEX_CHARS[block & 0x0F] +
                  HEX_CHARS[(block >> 12) & 0x0F] + HEX_CHARS[(block >> 8) & 0x0F] +
                  HEX_CHARS[(block >> 20) & 0x0F] + HEX_CHARS[(block >> 16) & 0x0F] +
                  HEX_CHARS[(block >> 28) & 0x0F] + HEX_CHARS[(block >> 24) & 0x0F];
              }
              if (j % blockCount == 0) {
                f(s);
                i = 0;
              }
            }
            if (extraBytes) {
              block = s[i];
              if (extraBytes > 0) {
                hex += HEX_CHARS[(block >> 4) & 0x0F] + HEX_CHARS[block & 0x0F];
              }
              if (extraBytes > 1) {
                hex += HEX_CHARS[(block >> 12) & 0x0F] + HEX_CHARS[(block >> 8) & 0x0F];
              }
              if (extraBytes > 2) {
                hex += HEX_CHARS[(block >> 20) & 0x0F] + HEX_CHARS[(block >> 16) & 0x0F];
              }
            }
            return hex;
          };

          Keccak.prototype.arrayBuffer = function () {
            this.finalize();

            var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks,
              extraBytes = this.extraBytes, i = 0, j = 0;
            var bytes = this.outputBits >> 3;
            var buffer;
            if (extraBytes) {
              buffer = new ArrayBuffer((outputBlocks + 1) << 2);
            } else {
              buffer = new ArrayBuffer(bytes);
            }
            var array = new Uint32Array(buffer);
            while (j < outputBlocks) {
              for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {
                array[j] = s[i];
              }
              if (j % blockCount == 0) {
                f(s);
              }
            }
            if (extraBytes) {
              array[i] = s[i];
              buffer = buffer.slice(0, bytes);
            }
            return buffer;
          };

          Keccak.prototype.buffer = Keccak.prototype.arrayBuffer;

          Keccak.prototype.digest = Keccak.prototype.array = function () {
            this.finalize();

            var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks,
              extraBytes = this.extraBytes, i = 0, j = 0;
            var array = [], offset, block;
            while (j < outputBlocks) {
              for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {
                offset = j << 2;
                block = s[i];
                array[offset] = block & 0xFF;
                array[offset + 1] = (block >> 8) & 0xFF;
                array[offset + 2] = (block >> 16) & 0xFF;
                array[offset + 3] = (block >> 24) & 0xFF;
              }
              if (j % blockCount == 0) {
                f(s);
              }
            }
            if (extraBytes) {
              offset = j << 2;
              block = s[i];
              if (extraBytes > 0) {
                array[offset] = block & 0xFF;
              }
              if (extraBytes > 1) {
                array[offset + 1] = (block >> 8) & 0xFF;
              }
              if (extraBytes > 2) {
                array[offset + 2] = (block >> 16) & 0xFF;
              }
            }
            return array;
          };

          var f = function (s) {
            var h, l, n, c0, c1, c2, c3, c4, c5, c6, c7, c8, c9,
              b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, b10, b11, b12, b13, b14, b15, b16, b17,
              b18, b19, b20, b21, b22, b23, b24, b25, b26, b27, b28, b29, b30, b31, b32, b33,
              b34, b35, b36, b37, b38, b39, b40, b41, b42, b43, b44, b45, b46, b47, b48, b49;
            for (n = 0; n < 48; n += 2) {
              c0 = s[0] ^ s[10] ^ s[20] ^ s[30] ^ s[40];
              c1 = s[1] ^ s[11] ^ s[21] ^ s[31] ^ s[41];
              c2 = s[2] ^ s[12] ^ s[22] ^ s[32] ^ s[42];
              c3 = s[3] ^ s[13] ^ s[23] ^ s[33] ^ s[43];
              c4 = s[4] ^ s[14] ^ s[24] ^ s[34] ^ s[44];
              c5 = s[5] ^ s[15] ^ s[25] ^ s[35] ^ s[45];
              c6 = s[6] ^ s[16] ^ s[26] ^ s[36] ^ s[46];
              c7 = s[7] ^ s[17] ^ s[27] ^ s[37] ^ s[47];
              c8 = s[8] ^ s[18] ^ s[28] ^ s[38] ^ s[48];
              c9 = s[9] ^ s[19] ^ s[29] ^ s[39] ^ s[49];

              h = c8 ^ ((c2 << 1) | (c3 >>> 31));
              l = c9 ^ ((c3 << 1) | (c2 >>> 31));
              s[0] ^= h;
              s[1] ^= l;
              s[10] ^= h;
              s[11] ^= l;
              s[20] ^= h;
              s[21] ^= l;
              s[30] ^= h;
              s[31] ^= l;
              s[40] ^= h;
              s[41] ^= l;
              h = c0 ^ ((c4 << 1) | (c5 >>> 31));
              l = c1 ^ ((c5 << 1) | (c4 >>> 31));
              s[2] ^= h;
              s[3] ^= l;
              s[12] ^= h;
              s[13] ^= l;
              s[22] ^= h;
              s[23] ^= l;
              s[32] ^= h;
              s[33] ^= l;
              s[42] ^= h;
              s[43] ^= l;
              h = c2 ^ ((c6 << 1) | (c7 >>> 31));
              l = c3 ^ ((c7 << 1) | (c6 >>> 31));
              s[4] ^= h;
              s[5] ^= l;
              s[14] ^= h;
              s[15] ^= l;
              s[24] ^= h;
              s[25] ^= l;
              s[34] ^= h;
              s[35] ^= l;
              s[44] ^= h;
              s[45] ^= l;
              h = c4 ^ ((c8 << 1) | (c9 >>> 31));
              l = c5 ^ ((c9 << 1) | (c8 >>> 31));
              s[6] ^= h;
              s[7] ^= l;
              s[16] ^= h;
              s[17] ^= l;
              s[26] ^= h;
              s[27] ^= l;
              s[36] ^= h;
              s[37] ^= l;
              s[46] ^= h;
              s[47] ^= l;
              h = c6 ^ ((c0 << 1) | (c1 >>> 31));
              l = c7 ^ ((c1 << 1) | (c0 >>> 31));
              s[8] ^= h;
              s[9] ^= l;
              s[18] ^= h;
              s[19] ^= l;
              s[28] ^= h;
              s[29] ^= l;
              s[38] ^= h;
              s[39] ^= l;
              s[48] ^= h;
              s[49] ^= l;

              b0 = s[0];
              b1 = s[1];
              b32 = (s[11] << 4) | (s[10] >>> 28);
              b33 = (s[10] << 4) | (s[11] >>> 28);
              b14 = (s[20] << 3) | (s[21] >>> 29);
              b15 = (s[21] << 3) | (s[20] >>> 29);
              b46 = (s[31] << 9) | (s[30] >>> 23);
              b47 = (s[30] << 9) | (s[31] >>> 23);
              b28 = (s[40] << 18) | (s[41] >>> 14);
              b29 = (s[41] << 18) | (s[40] >>> 14);
              b20 = (s[2] << 1) | (s[3] >>> 31);
              b21 = (s[3] << 1) | (s[2] >>> 31);
              b2 = (s[13] << 12) | (s[12] >>> 20);
              b3 = (s[12] << 12) | (s[13] >>> 20);
              b34 = (s[22] << 10) | (s[23] >>> 22);
              b35 = (s[23] << 10) | (s[22] >>> 22);
              b16 = (s[33] << 13) | (s[32] >>> 19);
              b17 = (s[32] << 13) | (s[33] >>> 19);
              b48 = (s[42] << 2) | (s[43] >>> 30);
              b49 = (s[43] << 2) | (s[42] >>> 30);
              b40 = (s[5] << 30) | (s[4] >>> 2);
              b41 = (s[4] << 30) | (s[5] >>> 2);
              b22 = (s[14] << 6) | (s[15] >>> 26);
              b23 = (s[15] << 6) | (s[14] >>> 26);
              b4 = (s[25] << 11) | (s[24] >>> 21);
              b5 = (s[24] << 11) | (s[25] >>> 21);
              b36 = (s[34] << 15) | (s[35] >>> 17);
              b37 = (s[35] << 15) | (s[34] >>> 17);
              b18 = (s[45] << 29) | (s[44] >>> 3);
              b19 = (s[44] << 29) | (s[45] >>> 3);
              b10 = (s[6] << 28) | (s[7] >>> 4);
              b11 = (s[7] << 28) | (s[6] >>> 4);
              b42 = (s[17] << 23) | (s[16] >>> 9);
              b43 = (s[16] << 23) | (s[17] >>> 9);
              b24 = (s[26] << 25) | (s[27] >>> 7);
              b25 = (s[27] << 25) | (s[26] >>> 7);
              b6 = (s[36] << 21) | (s[37] >>> 11);
              b7 = (s[37] << 21) | (s[36] >>> 11);
              b38 = (s[47] << 24) | (s[46] >>> 8);
              b39 = (s[46] << 24) | (s[47] >>> 8);
              b30 = (s[8] << 27) | (s[9] >>> 5);
              b31 = (s[9] << 27) | (s[8] >>> 5);
              b12 = (s[18] << 20) | (s[19] >>> 12);
              b13 = (s[19] << 20) | (s[18] >>> 12);
              b44 = (s[29] << 7) | (s[28] >>> 25);
              b45 = (s[28] << 7) | (s[29] >>> 25);
              b26 = (s[38] << 8) | (s[39] >>> 24);
              b27 = (s[39] << 8) | (s[38] >>> 24);
              b8 = (s[48] << 14) | (s[49] >>> 18);
              b9 = (s[49] << 14) | (s[48] >>> 18);

              s[0] = b0 ^ (~b2 & b4);
              s[1] = b1 ^ (~b3 & b5);
              s[10] = b10 ^ (~b12 & b14);
              s[11] = b11 ^ (~b13 & b15);
              s[20] = b20 ^ (~b22 & b24);
              s[21] = b21 ^ (~b23 & b25);
              s[30] = b30 ^ (~b32 & b34);
              s[31] = b31 ^ (~b33 & b35);
              s[40] = b40 ^ (~b42 & b44);
              s[41] = b41 ^ (~b43 & b45);
              s[2] = b2 ^ (~b4 & b6);
              s[3] = b3 ^ (~b5 & b7);
              s[12] = b12 ^ (~b14 & b16);
              s[13] = b13 ^ (~b15 & b17);
              s[22] = b22 ^ (~b24 & b26);
              s[23] = b23 ^ (~b25 & b27);
              s[32] = b32 ^ (~b34 & b36);
              s[33] = b33 ^ (~b35 & b37);
              s[42] = b42 ^ (~b44 & b46);
              s[43] = b43 ^ (~b45 & b47);
              s[4] = b4 ^ (~b6 & b8);
              s[5] = b5 ^ (~b7 & b9);
              s[14] = b14 ^ (~b16 & b18);
              s[15] = b15 ^ (~b17 & b19);
              s[24] = b24 ^ (~b26 & b28);
              s[25] = b25 ^ (~b27 & b29);
              s[34] = b34 ^ (~b36 & b38);
              s[35] = b35 ^ (~b37 & b39);
              s[44] = b44 ^ (~b46 & b48);
              s[45] = b45 ^ (~b47 & b49);
              s[6] = b6 ^ (~b8 & b0);
              s[7] = b7 ^ (~b9 & b1);
              s[16] = b16 ^ (~b18 & b10);
              s[17] = b17 ^ (~b19 & b11);
              s[26] = b26 ^ (~b28 & b20);
              s[27] = b27 ^ (~b29 & b21);
              s[36] = b36 ^ (~b38 & b30);
              s[37] = b37 ^ (~b39 & b31);
              s[46] = b46 ^ (~b48 & b40);
              s[47] = b47 ^ (~b49 & b41);
              s[8] = b8 ^ (~b0 & b2);
              s[9] = b9 ^ (~b1 & b3);
              s[18] = b18 ^ (~b10 & b12);
              s[19] = b19 ^ (~b11 & b13);
              s[28] = b28 ^ (~b20 & b22);
              s[29] = b29 ^ (~b21 & b23);
              s[38] = b38 ^ (~b30 & b32);
              s[39] = b39 ^ (~b31 & b33);
              s[48] = b48 ^ (~b40 & b42);
              s[49] = b49 ^ (~b41 & b43);

              s[0] ^= RC[n];
              s[1] ^= RC[n + 1];
            }
          }

          if (COMMON_JS) {
            module.exports = methods;
          } else if (root) {
            for (var key in methods) {
              root[key] = methods[key];
            }
          }
        } (this));

        /* WEBPACK VAR INJECTION */
      }.call(this, __webpack_require__(/*! ./../../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/process/browser.js */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/process/browser.js"), __webpack_require__(/*! ./../../../../../../AppData/Roaming/npm/node_modules/webpack/buildin/global.js */ "../../../../../AppData/Roaming/npm/node_modules/webpack/buildin/global.js")))

      /***/
    }),

/***/ "../lodash/lodash.js":
/*!***************************!*\
  !*** ../lodash/lodash.js ***!
  \***************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function (global, module) {
        var __WEBPACK_AMD_DEFINE_RESULT__;/**
 * @license
 * Lodash <https://lodash.com/>
 * Copyright JS Foundation and other contributors <https://js.foundation/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */
        ; (function () {

          /** Used as a safe reference for `undefined` in pre-ES5 environments. */
          var undefined;

          /** Used as the semantic version number. */
          var VERSION = '4.17.10';

          /** Used as the size to enable large array optimizations. */
          var LARGE_ARRAY_SIZE = 200;

          /** Error message constants. */
          var CORE_ERROR_TEXT = 'Unsupported core-js use. Try https://npms.io/search?q=ponyfill.',
            FUNC_ERROR_TEXT = 'Expected a function';

          /** Used to stand-in for `undefined` hash values. */
          var HASH_UNDEFINED = '__lodash_hash_undefined__';

          /** Used as the maximum memoize cache size. */
          var MAX_MEMOIZE_SIZE = 500;

          /** Used as the internal argument placeholder. */
          var PLACEHOLDER = '__lodash_placeholder__';

          /** Used to compose bitmasks for cloning. */
          var CLONE_DEEP_FLAG = 1,
            CLONE_FLAT_FLAG = 2,
            CLONE_SYMBOLS_FLAG = 4;

          /** Used to compose bitmasks for value comparisons. */
          var COMPARE_PARTIAL_FLAG = 1,
            COMPARE_UNORDERED_FLAG = 2;

          /** Used to compose bitmasks for function metadata. */
          var WRAP_BIND_FLAG = 1,
            WRAP_BIND_KEY_FLAG = 2,
            WRAP_CURRY_BOUND_FLAG = 4,
            WRAP_CURRY_FLAG = 8,
            WRAP_CURRY_RIGHT_FLAG = 16,
            WRAP_PARTIAL_FLAG = 32,
            WRAP_PARTIAL_RIGHT_FLAG = 64,
            WRAP_ARY_FLAG = 128,
            WRAP_REARG_FLAG = 256,
            WRAP_FLIP_FLAG = 512;

          /** Used as default options for `_.truncate`. */
          var DEFAULT_TRUNC_LENGTH = 30,
            DEFAULT_TRUNC_OMISSION = '...';

          /** Used to detect hot functions by number of calls within a span of milliseconds. */
          var HOT_COUNT = 800,
            HOT_SPAN = 16;

          /** Used to indicate the type of lazy iteratees. */
          var LAZY_FILTER_FLAG = 1,
            LAZY_MAP_FLAG = 2,
            LAZY_WHILE_FLAG = 3;

          /** Used as references for various `Number` constants. */
          var INFINITY = 1 / 0,
            MAX_SAFE_INTEGER = 9007199254740991,
            MAX_INTEGER = 1.7976931348623157e+308,
            NAN = 0 / 0;

          /** Used as references for the maximum length and index of an array. */
          var MAX_ARRAY_LENGTH = 4294967295,
            MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,
            HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;

          /** Used to associate wrap methods with their bit flags. */
          var wrapFlags = [
            ['ary', WRAP_ARY_FLAG],
            ['bind', WRAP_BIND_FLAG],
            ['bindKey', WRAP_BIND_KEY_FLAG],
            ['curry', WRAP_CURRY_FLAG],
            ['curryRight', WRAP_CURRY_RIGHT_FLAG],
            ['flip', WRAP_FLIP_FLAG],
            ['partial', WRAP_PARTIAL_FLAG],
            ['partialRight', WRAP_PARTIAL_RIGHT_FLAG],
            ['rearg', WRAP_REARG_FLAG]
          ];

          /** `Object#toString` result references. */
          var argsTag = '[object Arguments]',
            arrayTag = '[object Array]',
            asyncTag = '[object AsyncFunction]',
            boolTag = '[object Boolean]',
            dateTag = '[object Date]',
            domExcTag = '[object DOMException]',
            errorTag = '[object Error]',
            funcTag = '[object Function]',
            genTag = '[object GeneratorFunction]',
            mapTag = '[object Map]',
            numberTag = '[object Number]',
            nullTag = '[object Null]',
            objectTag = '[object Object]',
            promiseTag = '[object Promise]',
            proxyTag = '[object Proxy]',
            regexpTag = '[object RegExp]',
            setTag = '[object Set]',
            stringTag = '[object String]',
            symbolTag = '[object Symbol]',
            undefinedTag = '[object Undefined]',
            weakMapTag = '[object WeakMap]',
            weakSetTag = '[object WeakSet]';

          var arrayBufferTag = '[object ArrayBuffer]',
            dataViewTag = '[object DataView]',
            float32Tag = '[object Float32Array]',
            float64Tag = '[object Float64Array]',
            int8Tag = '[object Int8Array]',
            int16Tag = '[object Int16Array]',
            int32Tag = '[object Int32Array]',
            uint8Tag = '[object Uint8Array]',
            uint8ClampedTag = '[object Uint8ClampedArray]',
            uint16Tag = '[object Uint16Array]',
            uint32Tag = '[object Uint32Array]';

          /** Used to match empty string literals in compiled template source. */
          var reEmptyStringLeading = /\b__p \+= '';/g,
            reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
            reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;

          /** Used to match HTML entities and HTML characters. */
          var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g,
            reUnescapedHtml = /[&<>"']/g,
            reHasEscapedHtml = RegExp(reEscapedHtml.source),
            reHasUnescapedHtml = RegExp(reUnescapedHtml.source);

          /** Used to match template delimiters. */
          var reEscape = /<%-([\s\S]+?)%>/g,
            reEvaluate = /<%([\s\S]+?)%>/g,
            reInterpolate = /<%=([\s\S]+?)%>/g;

          /** Used to match property names within property paths. */
          var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
            reIsPlainProp = /^\w*$/,
            rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

          /**
           * Used to match `RegExp`
           * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
           */
          var reRegExpChar = /[\\^$.*+?()[\]{}|]/g,
            reHasRegExpChar = RegExp(reRegExpChar.source);

          /** Used to match leading and trailing whitespace. */
          var reTrim = /^\s+|\s+$/g,
            reTrimStart = /^\s+/,
            reTrimEnd = /\s+$/;

          /** Used to match wrap detail comments. */
          var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,
            reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/,
            reSplitDetails = /,? & /;

          /** Used to match words composed of alphanumeric characters. */
          var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;

          /** Used to match backslashes in property paths. */
          var reEscapeChar = /\\(\\)?/g;

          /**
           * Used to match
           * [ES template delimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).
           */
          var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;

          /** Used to match `RegExp` flags from their coerced string values. */
          var reFlags = /\w*$/;

          /** Used to detect bad signed hexadecimal string values. */
          var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

          /** Used to detect binary string values. */
          var reIsBinary = /^0b[01]+$/i;

          /** Used to detect host constructors (Safari). */
          var reIsHostCtor = /^\[object .+?Constructor\]$/;

          /** Used to detect octal string values. */
          var reIsOctal = /^0o[0-7]+$/i;

          /** Used to detect unsigned integer values. */
          var reIsUint = /^(?:0|[1-9]\d*)$/;

          /** Used to match Latin Unicode letters (excluding mathematical operators). */
          var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;

          /** Used to ensure capturing order of template delimiters. */
          var reNoMatch = /($^)/;

          /** Used to match unescaped characters in compiled string literals. */
          var reUnescapedString = /['\n\r\u2028\u2029\\]/g;

          /** Used to compose unicode character classes. */
          var rsAstralRange = '\\ud800-\\udfff',
            rsComboMarksRange = '\\u0300-\\u036f',
            reComboHalfMarksRange = '\\ufe20-\\ufe2f',
            rsComboSymbolsRange = '\\u20d0-\\u20ff',
            rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
            rsDingbatRange = '\\u2700-\\u27bf',
            rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
            rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
            rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
            rsPunctuationRange = '\\u2000-\\u206f',
            rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000',
            rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
            rsVarRange = '\\ufe0e\\ufe0f',
            rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;

          /** Used to compose unicode capture groups. */
          var rsApos = "['\u2019]",
            rsAstral = '[' + rsAstralRange + ']',
            rsBreak = '[' + rsBreakRange + ']',
            rsCombo = '[' + rsComboRange + ']',
            rsDigits = '\\d+',
            rsDingbat = '[' + rsDingbatRange + ']',
            rsLower = '[' + rsLowerRange + ']',
            rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
            rsFitz = '\\ud83c[\\udffb-\\udfff]',
            rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
            rsNonAstral = '[^' + rsAstralRange + ']',
            rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
            rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
            rsUpper = '[' + rsUpperRange + ']',
            rsZWJ = '\\u200d';

          /** Used to compose unicode regexes. */
          var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',
            rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',
            rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',
            rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',
            reOptMod = rsModifier + '?',
            rsOptVar = '[' + rsVarRange + ']?',
            rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
            rsOrdLower = '\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])',
            rsOrdUpper = '\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])',
            rsSeq = rsOptVar + reOptMod + rsOptJoin,
            rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,
            rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';

          /** Used to match apostrophes. */
          var reApos = RegExp(rsApos, 'g');

          /**
           * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
           * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
           */
          var reComboMark = RegExp(rsCombo, 'g');

          /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
          var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');

          /** Used to match complex or compound words. */
          var reUnicodeWord = RegExp([
            rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',
            rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')',
            rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower,
            rsUpper + '+' + rsOptContrUpper,
            rsOrdUpper,
            rsOrdLower,
            rsDigits,
            rsEmoji
          ].join('|'), 'g');

          /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
          var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange + rsComboRange + rsVarRange + ']');

          /** Used to detect strings that need a more robust regexp to match words. */
          var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2,}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;

          /** Used to assign default `context` object properties. */
          var contextProps = [
            'Array', 'Buffer', 'DataView', 'Date', 'Error', 'Float32Array', 'Float64Array',
            'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Map', 'Math', 'Object',
            'Promise', 'RegExp', 'Set', 'String', 'Symbol', 'TypeError', 'Uint8Array',
            'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap',
            '_', 'clearTimeout', 'isFinite', 'parseInt', 'setTimeout'
          ];

          /** Used to make template sourceURLs easier to identify. */
          var templateCounter = -1;

          /** Used to identify `toStringTag` values of typed arrays. */
          var typedArrayTags = {};
          typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
            typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
            typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
            typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
            typedArrayTags[uint32Tag] = true;
          typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
            typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
            typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
            typedArrayTags[errorTag] = typedArrayTags[funcTag] =
            typedArrayTags[mapTag] = typedArrayTags[numberTag] =
            typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
            typedArrayTags[setTag] = typedArrayTags[stringTag] =
            typedArrayTags[weakMapTag] = false;

          /** Used to identify `toStringTag` values supported by `_.clone`. */
          var cloneableTags = {};
          cloneableTags[argsTag] = cloneableTags[arrayTag] =
            cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =
            cloneableTags[boolTag] = cloneableTags[dateTag] =
            cloneableTags[float32Tag] = cloneableTags[float64Tag] =
            cloneableTags[int8Tag] = cloneableTags[int16Tag] =
            cloneableTags[int32Tag] = cloneableTags[mapTag] =
            cloneableTags[numberTag] = cloneableTags[objectTag] =
            cloneableTags[regexpTag] = cloneableTags[setTag] =
            cloneableTags[stringTag] = cloneableTags[symbolTag] =
            cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
            cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
          cloneableTags[errorTag] = cloneableTags[funcTag] =
            cloneableTags[weakMapTag] = false;

          /** Used to map Latin Unicode letters to basic Latin letters. */
          var deburredLetters = {
            // Latin-1 Supplement block.
            '\xc0': 'A', '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
            '\xe0': 'a', '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
            '\xc7': 'C', '\xe7': 'c',
            '\xd0': 'D', '\xf0': 'd',
            '\xc8': 'E', '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
            '\xe8': 'e', '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
            '\xcc': 'I', '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
            '\xec': 'i', '\xed': 'i', '\xee': 'i', '\xef': 'i',
            '\xd1': 'N', '\xf1': 'n',
            '\xd2': 'O', '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
            '\xf2': 'o', '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
            '\xd9': 'U', '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
            '\xf9': 'u', '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
            '\xdd': 'Y', '\xfd': 'y', '\xff': 'y',
            '\xc6': 'Ae', '\xe6': 'ae',
            '\xde': 'Th', '\xfe': 'th',
            '\xdf': 'ss',
            // Latin Extended-A block.
            '\u0100': 'A', '\u0102': 'A', '\u0104': 'A',
            '\u0101': 'a', '\u0103': 'a', '\u0105': 'a',
            '\u0106': 'C', '\u0108': 'C', '\u010a': 'C', '\u010c': 'C',
            '\u0107': 'c', '\u0109': 'c', '\u010b': 'c', '\u010d': 'c',
            '\u010e': 'D', '\u0110': 'D', '\u010f': 'd', '\u0111': 'd',
            '\u0112': 'E', '\u0114': 'E', '\u0116': 'E', '\u0118': 'E', '\u011a': 'E',
            '\u0113': 'e', '\u0115': 'e', '\u0117': 'e', '\u0119': 'e', '\u011b': 'e',
            '\u011c': 'G', '\u011e': 'G', '\u0120': 'G', '\u0122': 'G',
            '\u011d': 'g', '\u011f': 'g', '\u0121': 'g', '\u0123': 'g',
            '\u0124': 'H', '\u0126': 'H', '\u0125': 'h', '\u0127': 'h',
            '\u0128': 'I', '\u012a': 'I', '\u012c': 'I', '\u012e': 'I', '\u0130': 'I',
            '\u0129': 'i', '\u012b': 'i', '\u012d': 'i', '\u012f': 'i', '\u0131': 'i',
            '\u0134': 'J', '\u0135': 'j',
            '\u0136': 'K', '\u0137': 'k', '\u0138': 'k',
            '\u0139': 'L', '\u013b': 'L', '\u013d': 'L', '\u013f': 'L', '\u0141': 'L',
            '\u013a': 'l', '\u013c': 'l', '\u013e': 'l', '\u0140': 'l', '\u0142': 'l',
            '\u0143': 'N', '\u0145': 'N', '\u0147': 'N', '\u014a': 'N',
            '\u0144': 'n', '\u0146': 'n', '\u0148': 'n', '\u014b': 'n',
            '\u014c': 'O', '\u014e': 'O', '\u0150': 'O',
            '\u014d': 'o', '\u014f': 'o', '\u0151': 'o',
            '\u0154': 'R', '\u0156': 'R', '\u0158': 'R',
            '\u0155': 'r', '\u0157': 'r', '\u0159': 'r',
            '\u015a': 'S', '\u015c': 'S', '\u015e': 'S', '\u0160': 'S',
            '\u015b': 's', '\u015d': 's', '\u015f': 's', '\u0161': 's',
            '\u0162': 'T', '\u0164': 'T', '\u0166': 'T',
            '\u0163': 't', '\u0165': 't', '\u0167': 't',
            '\u0168': 'U', '\u016a': 'U', '\u016c': 'U', '\u016e': 'U', '\u0170': 'U', '\u0172': 'U',
            '\u0169': 'u', '\u016b': 'u', '\u016d': 'u', '\u016f': 'u', '\u0171': 'u', '\u0173': 'u',
            '\u0174': 'W', '\u0175': 'w',
            '\u0176': 'Y', '\u0177': 'y', '\u0178': 'Y',
            '\u0179': 'Z', '\u017b': 'Z', '\u017d': 'Z',
            '\u017a': 'z', '\u017c': 'z', '\u017e': 'z',
            '\u0132': 'IJ', '\u0133': 'ij',
            '\u0152': 'Oe', '\u0153': 'oe',
            '\u0149': "'n", '\u017f': 's'
          };

          /** Used to map characters to HTML entities. */
          var htmlEscapes = {
            '&': '&amp;',
            '<': '&lt;',
            '>': '&gt;',
            '"': '&quot;',
            "'": '&#39;'
          };

          /** Used to map HTML entities to characters. */
          var htmlUnescapes = {
            '&amp;': '&',
            '&lt;': '<',
            '&gt;': '>',
            '&quot;': '"',
            '&#39;': "'"
          };

          /** Used to escape characters for inclusion in compiled string literals. */
          var stringEscapes = {
            '\\': '\\',
            "'": "'",
            '\n': 'n',
            '\r': 'r',
            '\u2028': 'u2028',
            '\u2029': 'u2029'
          };

          /** Built-in method references without a dependency on `root`. */
          var freeParseFloat = parseFloat,
            freeParseInt = parseInt;

          /** Detect free variable `global` from Node.js. */
          var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

          /** Detect free variable `self`. */
          var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

          /** Used as a reference to the global object. */
          var root = freeGlobal || freeSelf || Function('return this')();

          /** Detect free variable `exports`. */
          var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

          /** Detect free variable `module`. */
          var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

          /** Detect the popular CommonJS extension `module.exports`. */
          var moduleExports = freeModule && freeModule.exports === freeExports;

          /** Detect free variable `process` from Node.js. */
          var freeProcess = moduleExports && freeGlobal.process;

          /** Used to access faster Node.js helpers. */
          var nodeUtil = (function () {
            try {
              // Use `util.types` for Node.js 10+.
              var types = freeModule && freeModule.require && freeModule.require('util').types;

              if (types) {
                return types;
              }

              // Legacy `process.binding('util')` for Node.js < 10.
              return freeProcess && freeProcess.binding && freeProcess.binding('util');
            } catch (e) { }
          } ());

          /* Node.js helper references. */
          var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer,
            nodeIsDate = nodeUtil && nodeUtil.isDate,
            nodeIsMap = nodeUtil && nodeUtil.isMap,
            nodeIsRegExp = nodeUtil && nodeUtil.isRegExp,
            nodeIsSet = nodeUtil && nodeUtil.isSet,
            nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

          /*--------------------------------------------------------------------------*/

          /**
           * A faster alternative to `Function#apply`, this function invokes `func`
           * with the `this` binding of `thisArg` and the arguments of `args`.
           *
           * @private
           * @param {Function} func The function to invoke.
           * @param {*} thisArg The `this` binding of `func`.
           * @param {Array} args The arguments to invoke `func` with.
           * @returns {*} Returns the result of `func`.
           */
          function apply(func, thisArg, args) {
            switch (args.length) {
              case 0: return func.call(thisArg);
              case 1: return func.call(thisArg, args[0]);
              case 2: return func.call(thisArg, args[0], args[1]);
              case 3: return func.call(thisArg, args[0], args[1], args[2]);
            }
            return func.apply(thisArg, args);
          }

          /**
           * A specialized version of `baseAggregator` for arrays.
           *
           * @private
           * @param {Array} [array] The array to iterate over.
           * @param {Function} setter The function to set `accumulator` values.
           * @param {Function} iteratee The iteratee to transform keys.
           * @param {Object} accumulator The initial aggregated object.
           * @returns {Function} Returns `accumulator`.
           */
          function arrayAggregator(array, setter, iteratee, accumulator) {
            var index = -1,
              length = array == null ? 0 : array.length;

            while (++index < length) {
              var value = array[index];
              setter(accumulator, value, iteratee(value), array);
            }
            return accumulator;
          }

          /**
           * A specialized version of `_.forEach` for arrays without support for
           * iteratee shorthands.
           *
           * @private
           * @param {Array} [array] The array to iterate over.
           * @param {Function} iteratee The function invoked per iteration.
           * @returns {Array} Returns `array`.
           */
          function arrayEach(array, iteratee) {
            var index = -1,
              length = array == null ? 0 : array.length;

            while (++index < length) {
              if (iteratee(array[index], index, array) === false) {
                break;
              }
            }
            return array;
          }

          /**
           * A specialized version of `_.forEachRight` for arrays without support for
           * iteratee shorthands.
           *
           * @private
           * @param {Array} [array] The array to iterate over.
           * @param {Function} iteratee The function invoked per iteration.
           * @returns {Array} Returns `array`.
           */
          function arrayEachRight(array, iteratee) {
            var length = array == null ? 0 : array.length;

            while (length--) {
              if (iteratee(array[length], length, array) === false) {
                break;
              }
            }
            return array;
          }

          /**
           * A specialized version of `_.every` for arrays without support for
           * iteratee shorthands.
           *
           * @private
           * @param {Array} [array] The array to iterate over.
           * @param {Function} predicate The function invoked per iteration.
           * @returns {boolean} Returns `true` if all elements pass the predicate check,
           *  else `false`.
           */
          function arrayEvery(array, predicate) {
            var index = -1,
              length = array == null ? 0 : array.length;

            while (++index < length) {
              if (!predicate(array[index], index, array)) {
                return false;
              }
            }
            return true;
          }

          /**
           * A specialized version of `_.filter` for arrays without support for
           * iteratee shorthands.
           *
           * @private
           * @param {Array} [array] The array to iterate over.
           * @param {Function} predicate The function invoked per iteration.
           * @returns {Array} Returns the new filtered array.
           */
          function arrayFilter(array, predicate) {
            var index = -1,
              length = array == null ? 0 : array.length,
              resIndex = 0,
              result = [];

            while (++index < length) {
              var value = array[index];
              if (predicate(value, index, array)) {
                result[resIndex++] = value;
              }
            }
            return result;
          }

          /**
           * A specialized version of `_.includes` for arrays without support for
           * specifying an index to search from.
           *
           * @private
           * @param {Array} [array] The array to inspect.
           * @param {*} target The value to search for.
           * @returns {boolean} Returns `true` if `target` is found, else `false`.
           */
          function arrayIncludes(array, value) {
            var length = array == null ? 0 : array.length;
            return !!length && baseIndexOf(array, value, 0) > -1;
          }

          /**
           * This function is like `arrayIncludes` except that it accepts a comparator.
           *
           * @private
           * @param {Array} [array] The array to inspect.
           * @param {*} target The value to search for.
           * @param {Function} comparator The comparator invoked per element.
           * @returns {boolean} Returns `true` if `target` is found, else `false`.
           */
          function arrayIncludesWith(array, value, comparator) {
            var index = -1,
              length = array == null ? 0 : array.length;

            while (++index < length) {
              if (comparator(value, array[index])) {
                return true;
              }
            }
            return false;
          }

          /**
           * A specialized version of `_.map` for arrays without support for iteratee
           * shorthands.
           *
           * @private
           * @param {Array} [array] The array to iterate over.
           * @param {Function} iteratee The function invoked per iteration.
           * @returns {Array} Returns the new mapped array.
           */
          function arrayMap(array, iteratee) {
            var index = -1,
              length = array == null ? 0 : array.length,
              result = Array(length);

            while (++index < length) {
              result[index] = iteratee(array[index], index, array);
            }
            return result;
          }

          /**
           * Appends the elements of `values` to `array`.
           *
           * @private
           * @param {Array} array The array to modify.
           * @param {Array} values The values to append.
           * @returns {Array} Returns `array`.
           */
          function arrayPush(array, values) {
            var index = -1,
              length = values.length,
              offset = array.length;

            while (++index < length) {
              array[offset + index] = values[index];
            }
            return array;
          }

          /**
           * A specialized version of `_.reduce` for arrays without support for
           * iteratee shorthands.
           *
           * @private
           * @param {Array} [array] The array to iterate over.
           * @param {Function} iteratee The function invoked per iteration.
           * @param {*} [accumulator] The initial value.
           * @param {boolean} [initAccum] Specify using the first element of `array` as
           *  the initial value.
           * @returns {*} Returns the accumulated value.
           */
          function arrayReduce(array, iteratee, accumulator, initAccum) {
            var index = -1,
              length = array == null ? 0 : array.length;

            if (initAccum && length) {
              accumulator = array[++index];
            }
            while (++index < length) {
              accumulator = iteratee(accumulator, array[index], index, array);
            }
            return accumulator;
          }

          /**
           * A specialized version of `_.reduceRight` for arrays without support for
           * iteratee shorthands.
           *
           * @private
           * @param {Array} [array] The array to iterate over.
           * @param {Function} iteratee The function invoked per iteration.
           * @param {*} [accumulator] The initial value.
           * @param {boolean} [initAccum] Specify using the last element of `array` as
           *  the initial value.
           * @returns {*} Returns the accumulated value.
           */
          function arrayReduceRight(array, iteratee, accumulator, initAccum) {
            var length = array == null ? 0 : array.length;
            if (initAccum && length) {
              accumulator = array[--length];
            }
            while (length--) {
              accumulator = iteratee(accumulator, array[length], length, array);
            }
            return accumulator;
          }

          /**
           * A specialized version of `_.some` for arrays without support for iteratee
           * shorthands.
           *
           * @private
           * @param {Array} [array] The array to iterate over.
           * @param {Function} predicate The function invoked per iteration.
           * @returns {boolean} Returns `true` if any element passes the predicate check,
           *  else `false`.
           */
          function arraySome(array, predicate) {
            var index = -1,
              length = array == null ? 0 : array.length;

            while (++index < length) {
              if (predicate(array[index], index, array)) {
                return true;
              }
            }
            return false;
          }

          /**
           * Gets the size of an ASCII `string`.
           *
           * @private
           * @param {string} string The string inspect.
           * @returns {number} Returns the string size.
           */
          var asciiSize = baseProperty('length');

          /**
           * Converts an ASCII `string` to an array.
           *
           * @private
           * @param {string} string The string to convert.
           * @returns {Array} Returns the converted array.
           */
          function asciiToArray(string) {
            return string.split('');
          }

          /**
           * Splits an ASCII `string` into an array of its words.
           *
           * @private
           * @param {string} The string to inspect.
           * @returns {Array} Returns the words of `string`.
           */
          function asciiWords(string) {
            return string.match(reAsciiWord) || [];
          }

          /**
           * The base implementation of methods like `_.findKey` and `_.findLastKey`,
           * without support for iteratee shorthands, which iterates over `collection`
           * using `eachFunc`.
           *
           * @private
           * @param {Array|Object} collection The collection to inspect.
           * @param {Function} predicate The function invoked per iteration.
           * @param {Function} eachFunc The function to iterate over `collection`.
           * @returns {*} Returns the found element or its key, else `undefined`.
           */
          function baseFindKey(collection, predicate, eachFunc) {
            var result;
            eachFunc(collection, function (value, key, collection) {
              if (predicate(value, key, collection)) {
                result = key;
                return false;
              }
            });
            return result;
          }

          /**
           * The base implementation of `_.findIndex` and `_.findLastIndex` without
           * support for iteratee shorthands.
           *
           * @private
           * @param {Array} array The array to inspect.
           * @param {Function} predicate The function invoked per iteration.
           * @param {number} fromIndex The index to search from.
           * @param {boolean} [fromRight] Specify iterating from right to left.
           * @returns {number} Returns the index of the matched value, else `-1`.
           */
          function baseFindIndex(array, predicate, fromIndex, fromRight) {
            var length = array.length,
              index = fromIndex + (fromRight ? 1 : -1);

            while ((fromRight ? index-- : ++index < length)) {
              if (predicate(array[index], index, array)) {
                return index;
              }
            }
            return -1;
          }

          /**
           * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
           *
           * @private
           * @param {Array} array The array to inspect.
           * @param {*} value The value to search for.
           * @param {number} fromIndex The index to search from.
           * @returns {number} Returns the index of the matched value, else `-1`.
           */
          function baseIndexOf(array, value, fromIndex) {
            return value === value
              ? strictIndexOf(array, value, fromIndex)
              : baseFindIndex(array, baseIsNaN, fromIndex);
          }

          /**
           * This function is like `baseIndexOf` except that it accepts a comparator.
           *
           * @private
           * @param {Array} array The array to inspect.
           * @param {*} value The value to search for.
           * @param {number} fromIndex The index to search from.
           * @param {Function} comparator The comparator invoked per element.
           * @returns {number} Returns the index of the matched value, else `-1`.
           */
          function baseIndexOfWith(array, value, fromIndex, comparator) {
            var index = fromIndex - 1,
              length = array.length;

            while (++index < length) {
              if (comparator(array[index], value)) {
                return index;
              }
            }
            return -1;
          }

          /**
           * The base implementation of `_.isNaN` without support for number objects.
           *
           * @private
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
           */
          function baseIsNaN(value) {
            return value !== value;
          }

          /**
           * The base implementation of `_.mean` and `_.meanBy` without support for
           * iteratee shorthands.
           *
           * @private
           * @param {Array} array The array to iterate over.
           * @param {Function} iteratee The function invoked per iteration.
           * @returns {number} Returns the mean.
           */
          function baseMean(array, iteratee) {
            var length = array == null ? 0 : array.length;
            return length ? (baseSum(array, iteratee) / length) : NAN;
          }

          /**
           * The base implementation of `_.property` without support for deep paths.
           *
           * @private
           * @param {string} key The key of the property to get.
           * @returns {Function} Returns the new accessor function.
           */
          function baseProperty(key) {
            return function (object) {
              return object == null ? undefined : object[key];
            };
          }

          /**
           * The base implementation of `_.propertyOf` without support for deep paths.
           *
           * @private
           * @param {Object} object The object to query.
           * @returns {Function} Returns the new accessor function.
           */
          function basePropertyOf(object) {
            return function (key) {
              return object == null ? undefined : object[key];
            };
          }

          /**
           * The base implementation of `_.reduce` and `_.reduceRight`, without support
           * for iteratee shorthands, which iterates over `collection` using `eachFunc`.
           *
           * @private
           * @param {Array|Object} collection The collection to iterate over.
           * @param {Function} iteratee The function invoked per iteration.
           * @param {*} accumulator The initial value.
           * @param {boolean} initAccum Specify using the first or last element of
           *  `collection` as the initial value.
           * @param {Function} eachFunc The function to iterate over `collection`.
           * @returns {*} Returns the accumulated value.
           */
          function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
            eachFunc(collection, function (value, index, collection) {
              accumulator = initAccum
                ? (initAccum = false, value)
                : iteratee(accumulator, value, index, collection);
            });
            return accumulator;
          }

          /**
           * The base implementation of `_.sortBy` which uses `comparer` to define the
           * sort order of `array` and replaces criteria objects with their corresponding
           * values.
           *
           * @private
           * @param {Array} array The array to sort.
           * @param {Function} comparer The function to define sort order.
           * @returns {Array} Returns `array`.
           */
          function baseSortBy(array, comparer) {
            var length = array.length;

            array.sort(comparer);
            while (length--) {
              array[length] = array[length].value;
            }
            return array;
          }

          /**
           * The base implementation of `_.sum` and `_.sumBy` without support for
           * iteratee shorthands.
           *
           * @private
           * @param {Array} array The array to iterate over.
           * @param {Function} iteratee The function invoked per iteration.
           * @returns {number} Returns the sum.
           */
          function baseSum(array, iteratee) {
            var result,
              index = -1,
              length = array.length;

            while (++index < length) {
              var current = iteratee(array[index]);
              if (current !== undefined) {
                result = result === undefined ? current : (result + current);
              }
            }
            return result;
          }

          /**
           * The base implementation of `_.times` without support for iteratee shorthands
           * or max array length checks.
           *
           * @private
           * @param {number} n The number of times to invoke `iteratee`.
           * @param {Function} iteratee The function invoked per iteration.
           * @returns {Array} Returns the array of results.
           */
          function baseTimes(n, iteratee) {
            var index = -1,
              result = Array(n);

            while (++index < n) {
              result[index] = iteratee(index);
            }
            return result;
          }

          /**
           * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array
           * of key-value pairs for `object` corresponding to the property names of `props`.
           *
           * @private
           * @param {Object} object The object to query.
           * @param {Array} props The property names to get values for.
           * @returns {Object} Returns the key-value pairs.
           */
          function baseToPairs(object, props) {
            return arrayMap(props, function (key) {
              return [key, object[key]];
            });
          }

          /**
           * The base implementation of `_.unary` without support for storing metadata.
           *
           * @private
           * @param {Function} func The function to cap arguments for.
           * @returns {Function} Returns the new capped function.
           */
          function baseUnary(func) {
            return function (value) {
              return func(value);
            };
          }

          /**
           * The base implementation of `_.values` and `_.valuesIn` which creates an
           * array of `object` property values corresponding to the property names
           * of `props`.
           *
           * @private
           * @param {Object} object The object to query.
           * @param {Array} props The property names to get values for.
           * @returns {Object} Returns the array of property values.
           */
          function baseValues(object, props) {
            return arrayMap(props, function (key) {
              return object[key];
            });
          }

          /**
           * Checks if a `cache` value for `key` exists.
           *
           * @private
           * @param {Object} cache The cache to query.
           * @param {string} key The key of the entry to check.
           * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
           */
          function cacheHas(cache, key) {
            return cache.has(key);
          }

          /**
           * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol
           * that is not found in the character symbols.
           *
           * @private
           * @param {Array} strSymbols The string symbols to inspect.
           * @param {Array} chrSymbols The character symbols to find.
           * @returns {number} Returns the index of the first unmatched string symbol.
           */
          function charsStartIndex(strSymbols, chrSymbols) {
            var index = -1,
              length = strSymbols.length;

            while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) { }
            return index;
          }

          /**
           * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol
           * that is not found in the character symbols.
           *
           * @private
           * @param {Array} strSymbols The string symbols to inspect.
           * @param {Array} chrSymbols The character symbols to find.
           * @returns {number} Returns the index of the last unmatched string symbol.
           */
          function charsEndIndex(strSymbols, chrSymbols) {
            var index = strSymbols.length;

            while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) { }
            return index;
          }

          /**
           * Gets the number of `placeholder` occurrences in `array`.
           *
           * @private
           * @param {Array} array The array to inspect.
           * @param {*} placeholder The placeholder to search for.
           * @returns {number} Returns the placeholder count.
           */
          function countHolders(array, placeholder) {
            var length = array.length,
              result = 0;

            while (length--) {
              if (array[length] === placeholder) {
                ++result;
              }
            }
            return result;
          }

          /**
           * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
           * letters to basic Latin letters.
           *
           * @private
           * @param {string} letter The matched letter to deburr.
           * @returns {string} Returns the deburred letter.
           */
          var deburrLetter = basePropertyOf(deburredLetters);

          /**
           * Used by `_.escape` to convert characters to HTML entities.
           *
           * @private
           * @param {string} chr The matched character to escape.
           * @returns {string} Returns the escaped character.
           */
          var escapeHtmlChar = basePropertyOf(htmlEscapes);

          /**
           * Used by `_.template` to escape characters for inclusion in compiled string literals.
           *
           * @private
           * @param {string} chr The matched character to escape.
           * @returns {string} Returns the escaped character.
           */
          function escapeStringChar(chr) {
            return '\\' + stringEscapes[chr];
          }

          /**
           * Gets the value at `key` of `object`.
           *
           * @private
           * @param {Object} [object] The object to query.
           * @param {string} key The key of the property to get.
           * @returns {*} Returns the property value.
           */
          function getValue(object, key) {
            return object == null ? undefined : object[key];
          }

          /**
           * Checks if `string` contains Unicode symbols.
           *
           * @private
           * @param {string} string The string to inspect.
           * @returns {boolean} Returns `true` if a symbol is found, else `false`.
           */
          function hasUnicode(string) {
            return reHasUnicode.test(string);
          }

          /**
           * Checks if `string` contains a word composed of Unicode symbols.
           *
           * @private
           * @param {string} string The string to inspect.
           * @returns {boolean} Returns `true` if a word is found, else `false`.
           */
          function hasUnicodeWord(string) {
            return reHasUnicodeWord.test(string);
          }

          /**
           * Converts `iterator` to an array.
           *
           * @private
           * @param {Object} iterator The iterator to convert.
           * @returns {Array} Returns the converted array.
           */
          function iteratorToArray(iterator) {
            var data,
              result = [];

            while (!(data = iterator.next()).done) {
              result.push(data.value);
            }
            return result;
          }

          /**
           * Converts `map` to its key-value pairs.
           *
           * @private
           * @param {Object} map The map to convert.
           * @returns {Array} Returns the key-value pairs.
           */
          function mapToArray(map) {
            var index = -1,
              result = Array(map.size);

            map.forEach(function (value, key) {
              result[++index] = [key, value];
            });
            return result;
          }

          /**
           * Creates a unary function that invokes `func` with its argument transformed.
           *
           * @private
           * @param {Function} func The function to wrap.
           * @param {Function} transform The argument transform.
           * @returns {Function} Returns the new function.
           */
          function overArg(func, transform) {
            return function (arg) {
              return func(transform(arg));
            };
          }

          /**
           * Replaces all `placeholder` elements in `array` with an internal placeholder
           * and returns an array of their indexes.
           *
           * @private
           * @param {Array} array The array to modify.
           * @param {*} placeholder The placeholder to replace.
           * @returns {Array} Returns the new array of placeholder indexes.
           */
          function replaceHolders(array, placeholder) {
            var index = -1,
              length = array.length,
              resIndex = 0,
              result = [];

            while (++index < length) {
              var value = array[index];
              if (value === placeholder || value === PLACEHOLDER) {
                array[index] = PLACEHOLDER;
                result[resIndex++] = index;
              }
            }
            return result;
          }

          /**
           * Gets the value at `key`, unless `key` is "__proto__".
           *
           * @private
           * @param {Object} object The object to query.
           * @param {string} key The key of the property to get.
           * @returns {*} Returns the property value.
           */
          function safeGet(object, key) {
            return key == '__proto__'
              ? undefined
              : object[key];
          }

          /**
           * Converts `set` to an array of its values.
           *
           * @private
           * @param {Object} set The set to convert.
           * @returns {Array} Returns the values.
           */
          function setToArray(set) {
            var index = -1,
              result = Array(set.size);

            set.forEach(function (value) {
              result[++index] = value;
            });
            return result;
          }

          /**
           * Converts `set` to its value-value pairs.
           *
           * @private
           * @param {Object} set The set to convert.
           * @returns {Array} Returns the value-value pairs.
           */
          function setToPairs(set) {
            var index = -1,
              result = Array(set.size);

            set.forEach(function (value) {
              result[++index] = [value, value];
            });
            return result;
          }

          /**
           * A specialized version of `_.indexOf` which performs strict equality
           * comparisons of values, i.e. `===`.
           *
           * @private
           * @param {Array} array The array to inspect.
           * @param {*} value The value to search for.
           * @param {number} fromIndex The index to search from.
           * @returns {number} Returns the index of the matched value, else `-1`.
           */
          function strictIndexOf(array, value, fromIndex) {
            var index = fromIndex - 1,
              length = array.length;

            while (++index < length) {
              if (array[index] === value) {
                return index;
              }
            }
            return -1;
          }

          /**
           * A specialized version of `_.lastIndexOf` which performs strict equality
           * comparisons of values, i.e. `===`.
           *
           * @private
           * @param {Array} array The array to inspect.
           * @param {*} value The value to search for.
           * @param {number} fromIndex The index to search from.
           * @returns {number} Returns the index of the matched value, else `-1`.
           */
          function strictLastIndexOf(array, value, fromIndex) {
            var index = fromIndex + 1;
            while (index--) {
              if (array[index] === value) {
                return index;
              }
            }
            return index;
          }

          /**
           * Gets the number of symbols in `string`.
           *
           * @private
           * @param {string} string The string to inspect.
           * @returns {number} Returns the string size.
           */
          function stringSize(string) {
            return hasUnicode(string)
              ? unicodeSize(string)
              : asciiSize(string);
          }

          /**
           * Converts `string` to an array.
           *
           * @private
           * @param {string} string The string to convert.
           * @returns {Array} Returns the converted array.
           */
          function stringToArray(string) {
            return hasUnicode(string)
              ? unicodeToArray(string)
              : asciiToArray(string);
          }

          /**
           * Used by `_.unescape` to convert HTML entities to characters.
           *
           * @private
           * @param {string} chr The matched character to unescape.
           * @returns {string} Returns the unescaped character.
           */
          var unescapeHtmlChar = basePropertyOf(htmlUnescapes);

          /**
           * Gets the size of a Unicode `string`.
           *
           * @private
           * @param {string} string The string inspect.
           * @returns {number} Returns the string size.
           */
          function unicodeSize(string) {
            var result = reUnicode.lastIndex = 0;
            while (reUnicode.test(string)) {
              ++result;
            }
            return result;
          }

          /**
           * Converts a Unicode `string` to an array.
           *
           * @private
           * @param {string} string The string to convert.
           * @returns {Array} Returns the converted array.
           */
          function unicodeToArray(string) {
            return string.match(reUnicode) || [];
          }

          /**
           * Splits a Unicode `string` into an array of its words.
           *
           * @private
           * @param {string} The string to inspect.
           * @returns {Array} Returns the words of `string`.
           */
          function unicodeWords(string) {
            return string.match(reUnicodeWord) || [];
          }

          /*--------------------------------------------------------------------------*/

          /**
           * Create a new pristine `lodash` function using the `context` object.
           *
           * @static
           * @memberOf _
           * @since 1.1.0
           * @category Util
           * @param {Object} [context=root] The context object.
           * @returns {Function} Returns a new `lodash` function.
           * @example
           *
           * _.mixin({ 'foo': _.constant('foo') });
           *
           * var lodash = _.runInContext();
           * lodash.mixin({ 'bar': lodash.constant('bar') });
           *
           * _.isFunction(_.foo);
           * // => true
           * _.isFunction(_.bar);
           * // => false
           *
           * lodash.isFunction(lodash.foo);
           * // => false
           * lodash.isFunction(lodash.bar);
           * // => true
           *
           * // Create a suped-up `defer` in Node.js.
           * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
           */
          var runInContext = (function runInContext(context) {
            context = context == null ? root : _.defaults(root.Object(), context, _.pick(root, contextProps));

            /** Built-in constructor references. */
            var Array = context.Array,
              Date = context.Date,
              Error = context.Error,
              Function = context.Function,
              Math = context.Math,
              Object = context.Object,
              RegExp = context.RegExp,
              String = context.String,
              TypeError = context.TypeError;

            /** Used for built-in method references. */
            var arrayProto = Array.prototype,
              funcProto = Function.prototype,
              objectProto = Object.prototype;

            /** Used to detect overreaching core-js shims. */
            var coreJsData = context['__core-js_shared__'];

            /** Used to resolve the decompiled source of functions. */
            var funcToString = funcProto.toString;

            /** Used to check objects for own properties. */
            var hasOwnProperty = objectProto.hasOwnProperty;

            /** Used to generate unique IDs. */
            var idCounter = 0;

            /** Used to detect methods masquerading as native. */
            var maskSrcKey = (function () {
              var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
              return uid ? ('Symbol(src)_1.' + uid) : '';
            } ());

            /**
             * Used to resolve the
             * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
             * of values.
             */
            var nativeObjectToString = objectProto.toString;

            /** Used to infer the `Object` constructor. */
            var objectCtorString = funcToString.call(Object);

            /** Used to restore the original `_` reference in `_.noConflict`. */
            var oldDash = root._;

            /** Used to detect if a method is native. */
            var reIsNative = RegExp('^' +
              funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
                .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
            );

            /** Built-in value references. */
            var Buffer = moduleExports ? context.Buffer : undefined,
              Symbol = context.Symbol,
              Uint8Array = context.Uint8Array,
              allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined,
              getPrototype = overArg(Object.getPrototypeOf, Object),
              objectCreate = Object.create,
              propertyIsEnumerable = objectProto.propertyIsEnumerable,
              splice = arrayProto.splice,
              spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined,
              symIterator = Symbol ? Symbol.iterator : undefined,
              symToStringTag = Symbol ? Symbol.toStringTag : undefined;

            var defineProperty = (function () {
              try {
                var func = getNative(Object, 'defineProperty');
                func({}, '', {});
                return func;
              } catch (e) { }
            } ());

            /** Mocked built-ins. */
            var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout,
              ctxNow = Date && Date.now !== root.Date.now && Date.now,
              ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;

            /* Built-in method references for those with the same name as other `lodash` methods. */
            var nativeCeil = Math.ceil,
              nativeFloor = Math.floor,
              nativeGetSymbols = Object.getOwnPropertySymbols,
              nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,
              nativeIsFinite = context.isFinite,
              nativeJoin = arrayProto.join,
              nativeKeys = overArg(Object.keys, Object),
              nativeMax = Math.max,
              nativeMin = Math.min,
              nativeNow = Date.now,
              nativeParseInt = context.parseInt,
              nativeRandom = Math.random,
              nativeReverse = arrayProto.reverse;

            /* Built-in method references that are verified to be native. */
            var DataView = getNative(context, 'DataView'),
              Map = getNative(context, 'Map'),
              Promise = getNative(context, 'Promise'),
              Set = getNative(context, 'Set'),
              WeakMap = getNative(context, 'WeakMap'),
              nativeCreate = getNative(Object, 'create');

            /** Used to store function metadata. */
            var metaMap = WeakMap && new WeakMap;

            /** Used to lookup unminified function names. */
            var realNames = {};

            /** Used to detect maps, sets, and weakmaps. */
            var dataViewCtorString = toSource(DataView),
              mapCtorString = toSource(Map),
              promiseCtorString = toSource(Promise),
              setCtorString = toSource(Set),
              weakMapCtorString = toSource(WeakMap);

            /** Used to convert symbols to primitives and strings. */
            var symbolProto = Symbol ? Symbol.prototype : undefined,
              symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,
              symbolToString = symbolProto ? symbolProto.toString : undefined;

            /*------------------------------------------------------------------------*/

            /**
             * Creates a `lodash` object which wraps `value` to enable implicit method
             * chain sequences. Methods that operate on and return arrays, collections,
             * and functions can be chained together. Methods that retrieve a single value
             * or may return a primitive value will automatically end the chain sequence
             * and return the unwrapped value. Otherwise, the value must be unwrapped
             * with `_#value`.
             *
             * Explicit chain sequences, which must be unwrapped with `_#value`, may be
             * enabled using `_.chain`.
             *
             * The execution of chained methods is lazy, that is, it's deferred until
             * `_#value` is implicitly or explicitly called.
             *
             * Lazy evaluation allows several methods to support shortcut fusion.
             * Shortcut fusion is an optimization to merge iteratee calls; this avoids
             * the creation of intermediate arrays and can greatly reduce the number of
             * iteratee executions. Sections of a chain sequence qualify for shortcut
             * fusion if the section is applied to an array and iteratees accept only
             * one argument. The heuristic for whether a section qualifies for shortcut
             * fusion is subject to change.
             *
             * Chaining is supported in custom builds as long as the `_#value` method is
             * directly or indirectly included in the build.
             *
             * In addition to lodash methods, wrappers have `Array` and `String` methods.
             *
             * The wrapper `Array` methods are:
             * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`
             *
             * The wrapper `String` methods are:
             * `replace` and `split`
             *
             * The wrapper methods that support shortcut fusion are:
             * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,
             * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,
             * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`
             *
             * The chainable wrapper methods are:
             * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,
             * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,
             * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,
             * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,
             * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,
             * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,
             * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,
             * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,
             * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,
             * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,
             * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,
             * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,
             * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,
             * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,
             * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,
             * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,
             * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,
             * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,
             * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,
             * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,
             * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,
             * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,
             * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,
             * `zipObject`, `zipObjectDeep`, and `zipWith`
             *
             * The wrapper methods that are **not** chainable by default are:
             * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,
             * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,
             * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,
             * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,
             * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,
             * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,
             * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,
             * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,
             * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,
             * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,
             * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,
             * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,
             * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,
             * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,
             * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,
             * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,
             * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,
             * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,
             * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,
             * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,
             * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,
             * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,
             * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,
             * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,
             * `upperFirst`, `value`, and `words`
             *
             * @name _
             * @constructor
             * @category Seq
             * @param {*} value The value to wrap in a `lodash` instance.
             * @returns {Object} Returns the new `lodash` wrapper instance.
             * @example
             *
             * function square(n) {
             *   return n * n;
             * }
             *
             * var wrapped = _([1, 2, 3]);
             *
             * // Returns an unwrapped value.
             * wrapped.reduce(_.add);
             * // => 6
             *
             * // Returns a wrapped value.
             * var squares = wrapped.map(square);
             *
             * _.isArray(squares);
             * // => false
             *
             * _.isArray(squares.value());
             * // => true
             */
            function lodash(value) {
              if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
                if (value instanceof LodashWrapper) {
                  return value;
                }
                if (hasOwnProperty.call(value, '__wrapped__')) {
                  return wrapperClone(value);
                }
              }
              return new LodashWrapper(value);
            }

            /**
             * The base implementation of `_.create` without support for assigning
             * properties to the created object.
             *
             * @private
             * @param {Object} proto The object to inherit from.
             * @returns {Object} Returns the new object.
             */
            var baseCreate = (function () {
              function object() { }
              return function (proto) {
                if (!isObject(proto)) {
                  return {};
                }
                if (objectCreate) {
                  return objectCreate(proto);
                }
                object.prototype = proto;
                var result = new object;
                object.prototype = undefined;
                return result;
              };
            } ());

            /**
             * The function whose prototype chain sequence wrappers inherit from.
             *
             * @private
             */
            function baseLodash() {
              // No operation performed.
            }

            /**
             * The base constructor for creating `lodash` wrapper objects.
             *
             * @private
             * @param {*} value The value to wrap.
             * @param {boolean} [chainAll] Enable explicit method chain sequences.
             */
            function LodashWrapper(value, chainAll) {
              this.__wrapped__ = value;
              this.__actions__ = [];
              this.__chain__ = !!chainAll;
              this.__index__ = 0;
              this.__values__ = undefined;
            }

            /**
             * By default, the template delimiters used by lodash are like those in
             * embedded Ruby (ERB) as well as ES2015 template strings. Change the
             * following template settings to use alternative delimiters.
             *
             * @static
             * @memberOf _
             * @type {Object}
             */
            lodash.templateSettings = {

              /**
               * Used to detect `data` property values to be HTML-escaped.
               *
               * @memberOf _.templateSettings
               * @type {RegExp}
               */
              'escape': reEscape,

              /**
               * Used to detect code to be evaluated.
               *
               * @memberOf _.templateSettings
               * @type {RegExp}
               */
              'evaluate': reEvaluate,

              /**
               * Used to detect `data` property values to inject.
               *
               * @memberOf _.templateSettings
               * @type {RegExp}
               */
              'interpolate': reInterpolate,

              /**
               * Used to reference the data object in the template text.
               *
               * @memberOf _.templateSettings
               * @type {string}
               */
              'variable': '',

              /**
               * Used to import variables into the compiled template.
               *
               * @memberOf _.templateSettings
               * @type {Object}
               */
              'imports': {

                /**
                 * A reference to the `lodash` function.
                 *
                 * @memberOf _.templateSettings.imports
                 * @type {Function}
                 */
                '_': lodash
              }
            };

            // Ensure wrappers are instances of `baseLodash`.
            lodash.prototype = baseLodash.prototype;
            lodash.prototype.constructor = lodash;

            LodashWrapper.prototype = baseCreate(baseLodash.prototype);
            LodashWrapper.prototype.constructor = LodashWrapper;

            /*------------------------------------------------------------------------*/

            /**
             * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
             *
             * @private
             * @constructor
             * @param {*} value The value to wrap.
             */
            function LazyWrapper(value) {
              this.__wrapped__ = value;
              this.__actions__ = [];
              this.__dir__ = 1;
              this.__filtered__ = false;
              this.__iteratees__ = [];
              this.__takeCount__ = MAX_ARRAY_LENGTH;
              this.__views__ = [];
            }

            /**
             * Creates a clone of the lazy wrapper object.
             *
             * @private
             * @name clone
             * @memberOf LazyWrapper
             * @returns {Object} Returns the cloned `LazyWrapper` object.
             */
            function lazyClone() {
              var result = new LazyWrapper(this.__wrapped__);
              result.__actions__ = copyArray(this.__actions__);
              result.__dir__ = this.__dir__;
              result.__filtered__ = this.__filtered__;
              result.__iteratees__ = copyArray(this.__iteratees__);
              result.__takeCount__ = this.__takeCount__;
              result.__views__ = copyArray(this.__views__);
              return result;
            }

            /**
             * Reverses the direction of lazy iteration.
             *
             * @private
             * @name reverse
             * @memberOf LazyWrapper
             * @returns {Object} Returns the new reversed `LazyWrapper` object.
             */
            function lazyReverse() {
              if (this.__filtered__) {
                var result = new LazyWrapper(this);
                result.__dir__ = -1;
                result.__filtered__ = true;
              } else {
                result = this.clone();
                result.__dir__ *= -1;
              }
              return result;
            }

            /**
             * Extracts the unwrapped value from its lazy wrapper.
             *
             * @private
             * @name value
             * @memberOf LazyWrapper
             * @returns {*} Returns the unwrapped value.
             */
            function lazyValue() {
              var array = this.__wrapped__.value(),
                dir = this.__dir__,
                isArr = isArray(array),
                isRight = dir < 0,
                arrLength = isArr ? array.length : 0,
                view = getView(0, arrLength, this.__views__),
                start = view.start,
                end = view.end,
                length = end - start,
                index = isRight ? end : (start - 1),
                iteratees = this.__iteratees__,
                iterLength = iteratees.length,
                resIndex = 0,
                takeCount = nativeMin(length, this.__takeCount__);

              if (!isArr || (!isRight && arrLength == length && takeCount == length)) {
                return baseWrapperValue(array, this.__actions__);
              }
              var result = [];

              outer:
              while (length-- && resIndex < takeCount) {
                index += dir;

                var iterIndex = -1,
                  value = array[index];

                while (++iterIndex < iterLength) {
                  var data = iteratees[iterIndex],
                    iteratee = data.iteratee,
                    type = data.type,
                    computed = iteratee(value);

                  if (type == LAZY_MAP_FLAG) {
                    value = computed;
                  } else if (!computed) {
                    if (type == LAZY_FILTER_FLAG) {
                      continue outer;
                    } else {
                      break outer;
                    }
                  }
                }
                result[resIndex++] = value;
              }
              return result;
            }

            // Ensure `LazyWrapper` is an instance of `baseLodash`.
            LazyWrapper.prototype = baseCreate(baseLodash.prototype);
            LazyWrapper.prototype.constructor = LazyWrapper;

            /*------------------------------------------------------------------------*/

            /**
             * Creates a hash object.
             *
             * @private
             * @constructor
             * @param {Array} [entries] The key-value pairs to cache.
             */
            function Hash(entries) {
              var index = -1,
                length = entries == null ? 0 : entries.length;

              this.clear();
              while (++index < length) {
                var entry = entries[index];
                this.set(entry[0], entry[1]);
              }
            }

            /**
             * Removes all key-value entries from the hash.
             *
             * @private
             * @name clear
             * @memberOf Hash
             */
            function hashClear() {
              this.__data__ = nativeCreate ? nativeCreate(null) : {};
              this.size = 0;
            }

            /**
             * Removes `key` and its value from the hash.
             *
             * @private
             * @name delete
             * @memberOf Hash
             * @param {Object} hash The hash to modify.
             * @param {string} key The key of the value to remove.
             * @returns {boolean} Returns `true` if the entry was removed, else `false`.
             */
            function hashDelete(key) {
              var result = this.has(key) && delete this.__data__[key];
              this.size -= result ? 1 : 0;
              return result;
            }

            /**
             * Gets the hash value for `key`.
             *
             * @private
             * @name get
             * @memberOf Hash
             * @param {string} key The key of the value to get.
             * @returns {*} Returns the entry value.
             */
            function hashGet(key) {
              var data = this.__data__;
              if (nativeCreate) {
                var result = data[key];
                return result === HASH_UNDEFINED ? undefined : result;
              }
              return hasOwnProperty.call(data, key) ? data[key] : undefined;
            }

            /**
             * Checks if a hash value for `key` exists.
             *
             * @private
             * @name has
             * @memberOf Hash
             * @param {string} key The key of the entry to check.
             * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
             */
            function hashHas(key) {
              var data = this.__data__;
              return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);
            }

            /**
             * Sets the hash `key` to `value`.
             *
             * @private
             * @name set
             * @memberOf Hash
             * @param {string} key The key of the value to set.
             * @param {*} value The value to set.
             * @returns {Object} Returns the hash instance.
             */
            function hashSet(key, value) {
              var data = this.__data__;
              this.size += this.has(key) ? 0 : 1;
              data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
              return this;
            }

            // Add methods to `Hash`.
            Hash.prototype.clear = hashClear;
            Hash.prototype['delete'] = hashDelete;
            Hash.prototype.get = hashGet;
            Hash.prototype.has = hashHas;
            Hash.prototype.set = hashSet;

            /*------------------------------------------------------------------------*/

            /**
             * Creates an list cache object.
             *
             * @private
             * @constructor
             * @param {Array} [entries] The key-value pairs to cache.
             */
            function ListCache(entries) {
              var index = -1,
                length = entries == null ? 0 : entries.length;

              this.clear();
              while (++index < length) {
                var entry = entries[index];
                this.set(entry[0], entry[1]);
              }
            }

            /**
             * Removes all key-value entries from the list cache.
             *
             * @private
             * @name clear
             * @memberOf ListCache
             */
            function listCacheClear() {
              this.__data__ = [];
              this.size = 0;
            }

            /**
             * Removes `key` and its value from the list cache.
             *
             * @private
             * @name delete
             * @memberOf ListCache
             * @param {string} key The key of the value to remove.
             * @returns {boolean} Returns `true` if the entry was removed, else `false`.
             */
            function listCacheDelete(key) {
              var data = this.__data__,
                index = assocIndexOf(data, key);

              if (index < 0) {
                return false;
              }
              var lastIndex = data.length - 1;
              if (index == lastIndex) {
                data.pop();
              } else {
                splice.call(data, index, 1);
              }
              --this.size;
              return true;
            }

            /**
             * Gets the list cache value for `key`.
             *
             * @private
             * @name get
             * @memberOf ListCache
             * @param {string} key The key of the value to get.
             * @returns {*} Returns the entry value.
             */
            function listCacheGet(key) {
              var data = this.__data__,
                index = assocIndexOf(data, key);

              return index < 0 ? undefined : data[index][1];
            }

            /**
             * Checks if a list cache value for `key` exists.
             *
             * @private
             * @name has
             * @memberOf ListCache
             * @param {string} key The key of the entry to check.
             * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
             */
            function listCacheHas(key) {
              return assocIndexOf(this.__data__, key) > -1;
            }

            /**
             * Sets the list cache `key` to `value`.
             *
             * @private
             * @name set
             * @memberOf ListCache
             * @param {string} key The key of the value to set.
             * @param {*} value The value to set.
             * @returns {Object} Returns the list cache instance.
             */
            function listCacheSet(key, value) {
              var data = this.__data__,
                index = assocIndexOf(data, key);

              if (index < 0) {
                ++this.size;
                data.push([key, value]);
              } else {
                data[index][1] = value;
              }
              return this;
            }

            // Add methods to `ListCache`.
            ListCache.prototype.clear = listCacheClear;
            ListCache.prototype['delete'] = listCacheDelete;
            ListCache.prototype.get = listCacheGet;
            ListCache.prototype.has = listCacheHas;
            ListCache.prototype.set = listCacheSet;

            /*------------------------------------------------------------------------*/

            /**
             * Creates a map cache object to store key-value pairs.
             *
             * @private
             * @constructor
             * @param {Array} [entries] The key-value pairs to cache.
             */
            function MapCache(entries) {
              var index = -1,
                length = entries == null ? 0 : entries.length;

              this.clear();
              while (++index < length) {
                var entry = entries[index];
                this.set(entry[0], entry[1]);
              }
            }

            /**
             * Removes all key-value entries from the map.
             *
             * @private
             * @name clear
             * @memberOf MapCache
             */
            function mapCacheClear() {
              this.size = 0;
              this.__data__ = {
                'hash': new Hash,
                'map': new (Map || ListCache),
                'string': new Hash
              };
            }

            /**
             * Removes `key` and its value from the map.
             *
             * @private
             * @name delete
             * @memberOf MapCache
             * @param {string} key The key of the value to remove.
             * @returns {boolean} Returns `true` if the entry was removed, else `false`.
             */
            function mapCacheDelete(key) {
              var result = getMapData(this, key)['delete'](key);
              this.size -= result ? 1 : 0;
              return result;
            }

            /**
             * Gets the map value for `key`.
             *
             * @private
             * @name get
             * @memberOf MapCache
             * @param {string} key The key of the value to get.
             * @returns {*} Returns the entry value.
             */
            function mapCacheGet(key) {
              return getMapData(this, key).get(key);
            }

            /**
             * Checks if a map value for `key` exists.
             *
             * @private
             * @name has
             * @memberOf MapCache
             * @param {string} key The key of the entry to check.
             * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
             */
            function mapCacheHas(key) {
              return getMapData(this, key).has(key);
            }

            /**
             * Sets the map `key` to `value`.
             *
             * @private
             * @name set
             * @memberOf MapCache
             * @param {string} key The key of the value to set.
             * @param {*} value The value to set.
             * @returns {Object} Returns the map cache instance.
             */
            function mapCacheSet(key, value) {
              var data = getMapData(this, key),
                size = data.size;

              data.set(key, value);
              this.size += data.size == size ? 0 : 1;
              return this;
            }

            // Add methods to `MapCache`.
            MapCache.prototype.clear = mapCacheClear;
            MapCache.prototype['delete'] = mapCacheDelete;
            MapCache.prototype.get = mapCacheGet;
            MapCache.prototype.has = mapCacheHas;
            MapCache.prototype.set = mapCacheSet;

            /*------------------------------------------------------------------------*/

            /**
             *
             * Creates an array cache object to store unique values.
             *
             * @private
             * @constructor
             * @param {Array} [values] The values to cache.
             */
            function SetCache(values) {
              var index = -1,
                length = values == null ? 0 : values.length;

              this.__data__ = new MapCache;
              while (++index < length) {
                this.add(values[index]);
              }
            }

            /**
             * Adds `value` to the array cache.
             *
             * @private
             * @name add
             * @memberOf SetCache
             * @alias push
             * @param {*} value The value to cache.
             * @returns {Object} Returns the cache instance.
             */
            function setCacheAdd(value) {
              this.__data__.set(value, HASH_UNDEFINED);
              return this;
            }

            /**
             * Checks if `value` is in the array cache.
             *
             * @private
             * @name has
             * @memberOf SetCache
             * @param {*} value The value to search for.
             * @returns {number} Returns `true` if `value` is found, else `false`.
             */
            function setCacheHas(value) {
              return this.__data__.has(value);
            }

            // Add methods to `SetCache`.
            SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
            SetCache.prototype.has = setCacheHas;

            /*------------------------------------------------------------------------*/

            /**
             * Creates a stack cache object to store key-value pairs.
             *
             * @private
             * @constructor
             * @param {Array} [entries] The key-value pairs to cache.
             */
            function Stack(entries) {
              var data = this.__data__ = new ListCache(entries);
              this.size = data.size;
            }

            /**
             * Removes all key-value entries from the stack.
             *
             * @private
             * @name clear
             * @memberOf Stack
             */
            function stackClear() {
              this.__data__ = new ListCache;
              this.size = 0;
            }

            /**
             * Removes `key` and its value from the stack.
             *
             * @private
             * @name delete
             * @memberOf Stack
             * @param {string} key The key of the value to remove.
             * @returns {boolean} Returns `true` if the entry was removed, else `false`.
             */
            function stackDelete(key) {
              var data = this.__data__,
                result = data['delete'](key);

              this.size = data.size;
              return result;
            }

            /**
             * Gets the stack value for `key`.
             *
             * @private
             * @name get
             * @memberOf Stack
             * @param {string} key The key of the value to get.
             * @returns {*} Returns the entry value.
             */
            function stackGet(key) {
              return this.__data__.get(key);
            }

            /**
             * Checks if a stack value for `key` exists.
             *
             * @private
             * @name has
             * @memberOf Stack
             * @param {string} key The key of the entry to check.
             * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
             */
            function stackHas(key) {
              return this.__data__.has(key);
            }

            /**
             * Sets the stack `key` to `value`.
             *
             * @private
             * @name set
             * @memberOf Stack
             * @param {string} key The key of the value to set.
             * @param {*} value The value to set.
             * @returns {Object} Returns the stack cache instance.
             */
            function stackSet(key, value) {
              var data = this.__data__;
              if (data instanceof ListCache) {
                var pairs = data.__data__;
                if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
                  pairs.push([key, value]);
                  this.size = ++data.size;
                  return this;
                }
                data = this.__data__ = new MapCache(pairs);
              }
              data.set(key, value);
              this.size = data.size;
              return this;
            }

            // Add methods to `Stack`.
            Stack.prototype.clear = stackClear;
            Stack.prototype['delete'] = stackDelete;
            Stack.prototype.get = stackGet;
            Stack.prototype.has = stackHas;
            Stack.prototype.set = stackSet;

            /*------------------------------------------------------------------------*/

            /**
             * Creates an array of the enumerable property names of the array-like `value`.
             *
             * @private
             * @param {*} value The value to query.
             * @param {boolean} inherited Specify returning inherited property names.
             * @returns {Array} Returns the array of property names.
             */
            function arrayLikeKeys(value, inherited) {
              var isArr = isArray(value),
                isArg = !isArr && isArguments(value),
                isBuff = !isArr && !isArg && isBuffer(value),
                isType = !isArr && !isArg && !isBuff && isTypedArray(value),
                skipIndexes = isArr || isArg || isBuff || isType,
                result = skipIndexes ? baseTimes(value.length, String) : [],
                length = result.length;

              for (var key in value) {
                if ((inherited || hasOwnProperty.call(value, key)) &&
                  !(skipIndexes && (
                    // Safari 9 has enumerable `arguments.length` in strict mode.
                    key == 'length' ||
                    // Node.js 0.10 has enumerable non-index properties on buffers.
                    (isBuff && (key == 'offset' || key == 'parent')) ||
                    // PhantomJS 2 has enumerable non-index properties on typed arrays.
                    (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
                    // Skip index properties.
                    isIndex(key, length)
                  ))) {
                  result.push(key);
                }
              }
              return result;
            }

            /**
             * A specialized version of `_.sample` for arrays.
             *
             * @private
             * @param {Array} array The array to sample.
             * @returns {*} Returns the random element.
             */
            function arraySample(array) {
              var length = array.length;
              return length ? array[baseRandom(0, length - 1)] : undefined;
            }

            /**
             * A specialized version of `_.sampleSize` for arrays.
             *
             * @private
             * @param {Array} array The array to sample.
             * @param {number} n The number of elements to sample.
             * @returns {Array} Returns the random elements.
             */
            function arraySampleSize(array, n) {
              return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));
            }

            /**
             * A specialized version of `_.shuffle` for arrays.
             *
             * @private
             * @param {Array} array The array to shuffle.
             * @returns {Array} Returns the new shuffled array.
             */
            function arrayShuffle(array) {
              return shuffleSelf(copyArray(array));
            }

            /**
             * This function is like `assignValue` except that it doesn't assign
             * `undefined` values.
             *
             * @private
             * @param {Object} object The object to modify.
             * @param {string} key The key of the property to assign.
             * @param {*} value The value to assign.
             */
            function assignMergeValue(object, key, value) {
              if ((value !== undefined && !eq(object[key], value)) ||
                (value === undefined && !(key in object))) {
                baseAssignValue(object, key, value);
              }
            }

            /**
             * Assigns `value` to `key` of `object` if the existing value is not equivalent
             * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
             * for equality comparisons.
             *
             * @private
             * @param {Object} object The object to modify.
             * @param {string} key The key of the property to assign.
             * @param {*} value The value to assign.
             */
            function assignValue(object, key, value) {
              var objValue = object[key];
              if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
                (value === undefined && !(key in object))) {
                baseAssignValue(object, key, value);
              }
            }

            /**
             * Gets the index at which the `key` is found in `array` of key-value pairs.
             *
             * @private
             * @param {Array} array The array to inspect.
             * @param {*} key The key to search for.
             * @returns {number} Returns the index of the matched value, else `-1`.
             */
            function assocIndexOf(array, key) {
              var length = array.length;
              while (length--) {
                if (eq(array[length][0], key)) {
                  return length;
                }
              }
              return -1;
            }

            /**
             * Aggregates elements of `collection` on `accumulator` with keys transformed
             * by `iteratee` and values set by `setter`.
             *
             * @private
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} setter The function to set `accumulator` values.
             * @param {Function} iteratee The iteratee to transform keys.
             * @param {Object} accumulator The initial aggregated object.
             * @returns {Function} Returns `accumulator`.
             */
            function baseAggregator(collection, setter, iteratee, accumulator) {
              baseEach(collection, function (value, key, collection) {
                setter(accumulator, value, iteratee(value), collection);
              });
              return accumulator;
            }

            /**
             * The base implementation of `_.assign` without support for multiple sources
             * or `customizer` functions.
             *
             * @private
             * @param {Object} object The destination object.
             * @param {Object} source The source object.
             * @returns {Object} Returns `object`.
             */
            function baseAssign(object, source) {
              return object && copyObject(source, keys(source), object);
            }

            /**
             * The base implementation of `_.assignIn` without support for multiple sources
             * or `customizer` functions.
             *
             * @private
             * @param {Object} object The destination object.
             * @param {Object} source The source object.
             * @returns {Object} Returns `object`.
             */
            function baseAssignIn(object, source) {
              return object && copyObject(source, keysIn(source), object);
            }

            /**
             * The base implementation of `assignValue` and `assignMergeValue` without
             * value checks.
             *
             * @private
             * @param {Object} object The object to modify.
             * @param {string} key The key of the property to assign.
             * @param {*} value The value to assign.
             */
            function baseAssignValue(object, key, value) {
              if (key == '__proto__' && defineProperty) {
                defineProperty(object, key, {
                  'configurable': true,
                  'enumerable': true,
                  'value': value,
                  'writable': true
                });
              } else {
                object[key] = value;
              }
            }

            /**
             * The base implementation of `_.at` without support for individual paths.
             *
             * @private
             * @param {Object} object The object to iterate over.
             * @param {string[]} paths The property paths to pick.
             * @returns {Array} Returns the picked elements.
             */
            function baseAt(object, paths) {
              var index = -1,
                length = paths.length,
                result = Array(length),
                skip = object == null;

              while (++index < length) {
                result[index] = skip ? undefined : get(object, paths[index]);
              }
              return result;
            }

            /**
             * The base implementation of `_.clamp` which doesn't coerce arguments.
             *
             * @private
             * @param {number} number The number to clamp.
             * @param {number} [lower] The lower bound.
             * @param {number} upper The upper bound.
             * @returns {number} Returns the clamped number.
             */
            function baseClamp(number, lower, upper) {
              if (number === number) {
                if (upper !== undefined) {
                  number = number <= upper ? number : upper;
                }
                if (lower !== undefined) {
                  number = number >= lower ? number : lower;
                }
              }
              return number;
            }

            /**
             * The base implementation of `_.clone` and `_.cloneDeep` which tracks
             * traversed objects.
             *
             * @private
             * @param {*} value The value to clone.
             * @param {boolean} bitmask The bitmask flags.
             *  1 - Deep clone
             *  2 - Flatten inherited properties
             *  4 - Clone symbols
             * @param {Function} [customizer] The function to customize cloning.
             * @param {string} [key] The key of `value`.
             * @param {Object} [object] The parent object of `value`.
             * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
             * @returns {*} Returns the cloned value.
             */
            function baseClone(value, bitmask, customizer, key, object, stack) {
              var result,
                isDeep = bitmask & CLONE_DEEP_FLAG,
                isFlat = bitmask & CLONE_FLAT_FLAG,
                isFull = bitmask & CLONE_SYMBOLS_FLAG;

              if (customizer) {
                result = object ? customizer(value, key, object, stack) : customizer(value);
              }
              if (result !== undefined) {
                return result;
              }
              if (!isObject(value)) {
                return value;
              }
              var isArr = isArray(value);
              if (isArr) {
                result = initCloneArray(value);
                if (!isDeep) {
                  return copyArray(value, result);
                }
              } else {
                var tag = getTag(value),
                  isFunc = tag == funcTag || tag == genTag;

                if (isBuffer(value)) {
                  return cloneBuffer(value, isDeep);
                }
                if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
                  result = (isFlat || isFunc) ? {} : initCloneObject(value);
                  if (!isDeep) {
                    return isFlat
                      ? copySymbolsIn(value, baseAssignIn(result, value))
                      : copySymbols(value, baseAssign(result, value));
                  }
                } else {
                  if (!cloneableTags[tag]) {
                    return object ? value : {};
                  }
                  result = initCloneByTag(value, tag, isDeep);
                }
              }
              // Check for circular references and return its corresponding clone.
              stack || (stack = new Stack);
              var stacked = stack.get(value);
              if (stacked) {
                return stacked;
              }
              stack.set(value, result);

              if (isSet(value)) {
                value.forEach(function (subValue) {
                  result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
                });

                return result;
              }

              if (isMap(value)) {
                value.forEach(function (subValue, key) {
                  result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));
                });

                return result;
              }

              var keysFunc = isFull
                ? (isFlat ? getAllKeysIn : getAllKeys)
                : (isFlat ? keysIn : keys);

              var props = isArr ? undefined : keysFunc(value);
              arrayEach(props || value, function (subValue, key) {
                if (props) {
                  key = subValue;
                  subValue = value[key];
                }
                // Recursively populate clone (susceptible to call stack limits).
                assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
              });
              return result;
            }

            /**
             * The base implementation of `_.conforms` which doesn't clone `source`.
             *
             * @private
             * @param {Object} source The object of property predicates to conform to.
             * @returns {Function} Returns the new spec function.
             */
            function baseConforms(source) {
              var props = keys(source);
              return function (object) {
                return baseConformsTo(object, source, props);
              };
            }

            /**
             * The base implementation of `_.conformsTo` which accepts `props` to check.
             *
             * @private
             * @param {Object} object The object to inspect.
             * @param {Object} source The object of property predicates to conform to.
             * @returns {boolean} Returns `true` if `object` conforms, else `false`.
             */
            function baseConformsTo(object, source, props) {
              var length = props.length;
              if (object == null) {
                return !length;
              }
              object = Object(object);
              while (length--) {
                var key = props[length],
                  predicate = source[key],
                  value = object[key];

                if ((value === undefined && !(key in object)) || !predicate(value)) {
                  return false;
                }
              }
              return true;
            }

            /**
             * The base implementation of `_.delay` and `_.defer` which accepts `args`
             * to provide to `func`.
             *
             * @private
             * @param {Function} func The function to delay.
             * @param {number} wait The number of milliseconds to delay invocation.
             * @param {Array} args The arguments to provide to `func`.
             * @returns {number|Object} Returns the timer id or timeout object.
             */
            function baseDelay(func, wait, args) {
              if (typeof func != 'function') {
                throw new TypeError(FUNC_ERROR_TEXT);
              }
              return setTimeout(function () { func.apply(undefined, args); }, wait);
            }

            /**
             * The base implementation of methods like `_.difference` without support
             * for excluding multiple arrays or iteratee shorthands.
             *
             * @private
             * @param {Array} array The array to inspect.
             * @param {Array} values The values to exclude.
             * @param {Function} [iteratee] The iteratee invoked per element.
             * @param {Function} [comparator] The comparator invoked per element.
             * @returns {Array} Returns the new array of filtered values.
             */
            function baseDifference(array, values, iteratee, comparator) {
              var index = -1,
                includes = arrayIncludes,
                isCommon = true,
                length = array.length,
                result = [],
                valuesLength = values.length;

              if (!length) {
                return result;
              }
              if (iteratee) {
                values = arrayMap(values, baseUnary(iteratee));
              }
              if (comparator) {
                includes = arrayIncludesWith;
                isCommon = false;
              }
              else if (values.length >= LARGE_ARRAY_SIZE) {
                includes = cacheHas;
                isCommon = false;
                values = new SetCache(values);
              }
              outer:
              while (++index < length) {
                var value = array[index],
                  computed = iteratee == null ? value : iteratee(value);

                value = (comparator || value !== 0) ? value : 0;
                if (isCommon && computed === computed) {
                  var valuesIndex = valuesLength;
                  while (valuesIndex--) {
                    if (values[valuesIndex] === computed) {
                      continue outer;
                    }
                  }
                  result.push(value);
                }
                else if (!includes(values, computed, comparator)) {
                  result.push(value);
                }
              }
              return result;
            }

            /**
             * The base implementation of `_.forEach` without support for iteratee shorthands.
             *
             * @private
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} iteratee The function invoked per iteration.
             * @returns {Array|Object} Returns `collection`.
             */
            var baseEach = createBaseEach(baseForOwn);

            /**
             * The base implementation of `_.forEachRight` without support for iteratee shorthands.
             *
             * @private
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} iteratee The function invoked per iteration.
             * @returns {Array|Object} Returns `collection`.
             */
            var baseEachRight = createBaseEach(baseForOwnRight, true);

            /**
             * The base implementation of `_.every` without support for iteratee shorthands.
             *
             * @private
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} predicate The function invoked per iteration.
             * @returns {boolean} Returns `true` if all elements pass the predicate check,
             *  else `false`
             */
            function baseEvery(collection, predicate) {
              var result = true;
              baseEach(collection, function (value, index, collection) {
                result = !!predicate(value, index, collection);
                return result;
              });
              return result;
            }

            /**
             * The base implementation of methods like `_.max` and `_.min` which accepts a
             * `comparator` to determine the extremum value.
             *
             * @private
             * @param {Array} array The array to iterate over.
             * @param {Function} iteratee The iteratee invoked per iteration.
             * @param {Function} comparator The comparator used to compare values.
             * @returns {*} Returns the extremum value.
             */
            function baseExtremum(array, iteratee, comparator) {
              var index = -1,
                length = array.length;

              while (++index < length) {
                var value = array[index],
                  current = iteratee(value);

                if (current != null && (computed === undefined
                  ? (current === current && !isSymbol(current))
                  : comparator(current, computed)
                )) {
                  var computed = current,
                    result = value;
                }
              }
              return result;
            }

            /**
             * The base implementation of `_.fill` without an iteratee call guard.
             *
             * @private
             * @param {Array} array The array to fill.
             * @param {*} value The value to fill `array` with.
             * @param {number} [start=0] The start position.
             * @param {number} [end=array.length] The end position.
             * @returns {Array} Returns `array`.
             */
            function baseFill(array, value, start, end) {
              var length = array.length;

              start = toInteger(start);
              if (start < 0) {
                start = -start > length ? 0 : (length + start);
              }
              end = (end === undefined || end > length) ? length : toInteger(end);
              if (end < 0) {
                end += length;
              }
              end = start > end ? 0 : toLength(end);
              while (start < end) {
                array[start++] = value;
              }
              return array;
            }

            /**
             * The base implementation of `_.filter` without support for iteratee shorthands.
             *
             * @private
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} predicate The function invoked per iteration.
             * @returns {Array} Returns the new filtered array.
             */
            function baseFilter(collection, predicate) {
              var result = [];
              baseEach(collection, function (value, index, collection) {
                if (predicate(value, index, collection)) {
                  result.push(value);
                }
              });
              return result;
            }

            /**
             * The base implementation of `_.flatten` with support for restricting flattening.
             *
             * @private
             * @param {Array} array The array to flatten.
             * @param {number} depth The maximum recursion depth.
             * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
             * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
             * @param {Array} [result=[]] The initial result value.
             * @returns {Array} Returns the new flattened array.
             */
            function baseFlatten(array, depth, predicate, isStrict, result) {
              var index = -1,
                length = array.length;

              predicate || (predicate = isFlattenable);
              result || (result = []);

              while (++index < length) {
                var value = array[index];
                if (depth > 0 && predicate(value)) {
                  if (depth > 1) {
                    // Recursively flatten arrays (susceptible to call stack limits).
                    baseFlatten(value, depth - 1, predicate, isStrict, result);
                  } else {
                    arrayPush(result, value);
                  }
                } else if (!isStrict) {
                  result[result.length] = value;
                }
              }
              return result;
            }

            /**
             * The base implementation of `baseForOwn` which iterates over `object`
             * properties returned by `keysFunc` and invokes `iteratee` for each property.
             * Iteratee functions may exit iteration early by explicitly returning `false`.
             *
             * @private
             * @param {Object} object The object to iterate over.
             * @param {Function} iteratee The function invoked per iteration.
             * @param {Function} keysFunc The function to get the keys of `object`.
             * @returns {Object} Returns `object`.
             */
            var baseFor = createBaseFor();

            /**
             * This function is like `baseFor` except that it iterates over properties
             * in the opposite order.
             *
             * @private
             * @param {Object} object The object to iterate over.
             * @param {Function} iteratee The function invoked per iteration.
             * @param {Function} keysFunc The function to get the keys of `object`.
             * @returns {Object} Returns `object`.
             */
            var baseForRight = createBaseFor(true);

            /**
             * The base implementation of `_.forOwn` without support for iteratee shorthands.
             *
             * @private
             * @param {Object} object The object to iterate over.
             * @param {Function} iteratee The function invoked per iteration.
             * @returns {Object} Returns `object`.
             */
            function baseForOwn(object, iteratee) {
              return object && baseFor(object, iteratee, keys);
            }

            /**
             * The base implementation of `_.forOwnRight` without support for iteratee shorthands.
             *
             * @private
             * @param {Object} object The object to iterate over.
             * @param {Function} iteratee The function invoked per iteration.
             * @returns {Object} Returns `object`.
             */
            function baseForOwnRight(object, iteratee) {
              return object && baseForRight(object, iteratee, keys);
            }

            /**
             * The base implementation of `_.functions` which creates an array of
             * `object` function property names filtered from `props`.
             *
             * @private
             * @param {Object} object The object to inspect.
             * @param {Array} props The property names to filter.
             * @returns {Array} Returns the function names.
             */
            function baseFunctions(object, props) {
              return arrayFilter(props, function (key) {
                return isFunction(object[key]);
              });
            }

            /**
             * The base implementation of `_.get` without support for default values.
             *
             * @private
             * @param {Object} object The object to query.
             * @param {Array|string} path The path of the property to get.
             * @returns {*} Returns the resolved value.
             */
            function baseGet(object, path) {
              path = castPath(path, object);

              var index = 0,
                length = path.length;

              while (object != null && index < length) {
                object = object[toKey(path[index++])];
              }
              return (index && index == length) ? object : undefined;
            }

            /**
             * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
             * `keysFunc` and `symbolsFunc` to get the enumerable property names and
             * symbols of `object`.
             *
             * @private
             * @param {Object} object The object to query.
             * @param {Function} keysFunc The function to get the keys of `object`.
             * @param {Function} symbolsFunc The function to get the symbols of `object`.
             * @returns {Array} Returns the array of property names and symbols.
             */
            function baseGetAllKeys(object, keysFunc, symbolsFunc) {
              var result = keysFunc(object);
              return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
            }

            /**
             * The base implementation of `getTag` without fallbacks for buggy environments.
             *
             * @private
             * @param {*} value The value to query.
             * @returns {string} Returns the `toStringTag`.
             */
            function baseGetTag(value) {
              if (value == null) {
                return value === undefined ? undefinedTag : nullTag;
              }
              return (symToStringTag && symToStringTag in Object(value))
                ? getRawTag(value)
                : objectToString(value);
            }

            /**
             * The base implementation of `_.gt` which doesn't coerce arguments.
             *
             * @private
             * @param {*} value The value to compare.
             * @param {*} other The other value to compare.
             * @returns {boolean} Returns `true` if `value` is greater than `other`,
             *  else `false`.
             */
            function baseGt(value, other) {
              return value > other;
            }

            /**
             * The base implementation of `_.has` without support for deep paths.
             *
             * @private
             * @param {Object} [object] The object to query.
             * @param {Array|string} key The key to check.
             * @returns {boolean} Returns `true` if `key` exists, else `false`.
             */
            function baseHas(object, key) {
              return object != null && hasOwnProperty.call(object, key);
            }

            /**
             * The base implementation of `_.hasIn` without support for deep paths.
             *
             * @private
             * @param {Object} [object] The object to query.
             * @param {Array|string} key The key to check.
             * @returns {boolean} Returns `true` if `key` exists, else `false`.
             */
            function baseHasIn(object, key) {
              return object != null && key in Object(object);
            }

            /**
             * The base implementation of `_.inRange` which doesn't coerce arguments.
             *
             * @private
             * @param {number} number The number to check.
             * @param {number} start The start of the range.
             * @param {number} end The end of the range.
             * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
             */
            function baseInRange(number, start, end) {
              return number >= nativeMin(start, end) && number < nativeMax(start, end);
            }

            /**
             * The base implementation of methods like `_.intersection`, without support
             * for iteratee shorthands, that accepts an array of arrays to inspect.
             *
             * @private
             * @param {Array} arrays The arrays to inspect.
             * @param {Function} [iteratee] The iteratee invoked per element.
             * @param {Function} [comparator] The comparator invoked per element.
             * @returns {Array} Returns the new array of shared values.
             */
            function baseIntersection(arrays, iteratee, comparator) {
              var includes = comparator ? arrayIncludesWith : arrayIncludes,
                length = arrays[0].length,
                othLength = arrays.length,
                othIndex = othLength,
                caches = Array(othLength),
                maxLength = Infinity,
                result = [];

              while (othIndex--) {
                var array = arrays[othIndex];
                if (othIndex && iteratee) {
                  array = arrayMap(array, baseUnary(iteratee));
                }
                maxLength = nativeMin(array.length, maxLength);
                caches[othIndex] = !comparator && (iteratee || (length >= 120 && array.length >= 120))
                  ? new SetCache(othIndex && array)
                  : undefined;
              }
              array = arrays[0];

              var index = -1,
                seen = caches[0];

              outer:
              while (++index < length && result.length < maxLength) {
                var value = array[index],
                  computed = iteratee ? iteratee(value) : value;

                value = (comparator || value !== 0) ? value : 0;
                if (!(seen
                  ? cacheHas(seen, computed)
                  : includes(result, computed, comparator)
                )) {
                  othIndex = othLength;
                  while (--othIndex) {
                    var cache = caches[othIndex];
                    if (!(cache
                      ? cacheHas(cache, computed)
                      : includes(arrays[othIndex], computed, comparator))
                    ) {
                      continue outer;
                    }
                  }
                  if (seen) {
                    seen.push(computed);
                  }
                  result.push(value);
                }
              }
              return result;
            }

            /**
             * The base implementation of `_.invert` and `_.invertBy` which inverts
             * `object` with values transformed by `iteratee` and set by `setter`.
             *
             * @private
             * @param {Object} object The object to iterate over.
             * @param {Function} setter The function to set `accumulator` values.
             * @param {Function} iteratee The iteratee to transform values.
             * @param {Object} accumulator The initial inverted object.
             * @returns {Function} Returns `accumulator`.
             */
            function baseInverter(object, setter, iteratee, accumulator) {
              baseForOwn(object, function (value, key, object) {
                setter(accumulator, iteratee(value), key, object);
              });
              return accumulator;
            }

            /**
             * The base implementation of `_.invoke` without support for individual
             * method arguments.
             *
             * @private
             * @param {Object} object The object to query.
             * @param {Array|string} path The path of the method to invoke.
             * @param {Array} args The arguments to invoke the method with.
             * @returns {*} Returns the result of the invoked method.
             */
            function baseInvoke(object, path, args) {
              path = castPath(path, object);
              object = parent(object, path);
              var func = object == null ? object : object[toKey(last(path))];
              return func == null ? undefined : apply(func, object, args);
            }

            /**
             * The base implementation of `_.isArguments`.
             *
             * @private
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is an `arguments` object,
             */
            function baseIsArguments(value) {
              return isObjectLike(value) && baseGetTag(value) == argsTag;
            }

            /**
             * The base implementation of `_.isArrayBuffer` without Node.js optimizations.
             *
             * @private
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
             */
            function baseIsArrayBuffer(value) {
              return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;
            }

            /**
             * The base implementation of `_.isDate` without Node.js optimizations.
             *
             * @private
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
             */
            function baseIsDate(value) {
              return isObjectLike(value) && baseGetTag(value) == dateTag;
            }

            /**
             * The base implementation of `_.isEqual` which supports partial comparisons
             * and tracks traversed objects.
             *
             * @private
             * @param {*} value The value to compare.
             * @param {*} other The other value to compare.
             * @param {boolean} bitmask The bitmask flags.
             *  1 - Unordered comparison
             *  2 - Partial comparison
             * @param {Function} [customizer] The function to customize comparisons.
             * @param {Object} [stack] Tracks traversed `value` and `other` objects.
             * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
             */
            function baseIsEqual(value, other, bitmask, customizer, stack) {
              if (value === other) {
                return true;
              }
              if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {
                return value !== value && other !== other;
              }
              return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
            }

            /**
             * A specialized version of `baseIsEqual` for arrays and objects which performs
             * deep comparisons and tracks traversed objects enabling objects with circular
             * references to be compared.
             *
             * @private
             * @param {Object} object The object to compare.
             * @param {Object} other The other object to compare.
             * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
             * @param {Function} customizer The function to customize comparisons.
             * @param {Function} equalFunc The function to determine equivalents of values.
             * @param {Object} [stack] Tracks traversed `object` and `other` objects.
             * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
             */
            function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
              var objIsArr = isArray(object),
                othIsArr = isArray(other),
                objTag = objIsArr ? arrayTag : getTag(object),
                othTag = othIsArr ? arrayTag : getTag(other);

              objTag = objTag == argsTag ? objectTag : objTag;
              othTag = othTag == argsTag ? objectTag : othTag;

              var objIsObj = objTag == objectTag,
                othIsObj = othTag == objectTag,
                isSameTag = objTag == othTag;

              if (isSameTag && isBuffer(object)) {
                if (!isBuffer(other)) {
                  return false;
                }
                objIsArr = true;
                objIsObj = false;
              }
              if (isSameTag && !objIsObj) {
                stack || (stack = new Stack);
                return (objIsArr || isTypedArray(object))
                  ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)
                  : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
              }
              if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
                var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
                  othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

                if (objIsWrapped || othIsWrapped) {
                  var objUnwrapped = objIsWrapped ? object.value() : object,
                    othUnwrapped = othIsWrapped ? other.value() : other;

                  stack || (stack = new Stack);
                  return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
                }
              }
              if (!isSameTag) {
                return false;
              }
              stack || (stack = new Stack);
              return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
            }

            /**
             * The base implementation of `_.isMap` without Node.js optimizations.
             *
             * @private
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a map, else `false`.
             */
            function baseIsMap(value) {
              return isObjectLike(value) && getTag(value) == mapTag;
            }

            /**
             * The base implementation of `_.isMatch` without support for iteratee shorthands.
             *
             * @private
             * @param {Object} object The object to inspect.
             * @param {Object} source The object of property values to match.
             * @param {Array} matchData The property names, values, and compare flags to match.
             * @param {Function} [customizer] The function to customize comparisons.
             * @returns {boolean} Returns `true` if `object` is a match, else `false`.
             */
            function baseIsMatch(object, source, matchData, customizer) {
              var index = matchData.length,
                length = index,
                noCustomizer = !customizer;

              if (object == null) {
                return !length;
              }
              object = Object(object);
              while (index--) {
                var data = matchData[index];
                if ((noCustomizer && data[2])
                  ? data[1] !== object[data[0]]
                  : !(data[0] in object)
                ) {
                  return false;
                }
              }
              while (++index < length) {
                data = matchData[index];
                var key = data[0],
                  objValue = object[key],
                  srcValue = data[1];

                if (noCustomizer && data[2]) {
                  if (objValue === undefined && !(key in object)) {
                    return false;
                  }
                } else {
                  var stack = new Stack;
                  if (customizer) {
                    var result = customizer(objValue, srcValue, key, object, source, stack);
                  }
                  if (!(result === undefined
                    ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)
                    : result
                  )) {
                    return false;
                  }
                }
              }
              return true;
            }

            /**
             * The base implementation of `_.isNative` without bad shim checks.
             *
             * @private
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a native function,
             *  else `false`.
             */
            function baseIsNative(value) {
              if (!isObject(value) || isMasked(value)) {
                return false;
              }
              var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
              return pattern.test(toSource(value));
            }

            /**
             * The base implementation of `_.isRegExp` without Node.js optimizations.
             *
             * @private
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
             */
            function baseIsRegExp(value) {
              return isObjectLike(value) && baseGetTag(value) == regexpTag;
            }

            /**
             * The base implementation of `_.isSet` without Node.js optimizations.
             *
             * @private
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a set, else `false`.
             */
            function baseIsSet(value) {
              return isObjectLike(value) && getTag(value) == setTag;
            }

            /**
             * The base implementation of `_.isTypedArray` without Node.js optimizations.
             *
             * @private
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
             */
            function baseIsTypedArray(value) {
              return isObjectLike(value) &&
                isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
            }

            /**
             * The base implementation of `_.iteratee`.
             *
             * @private
             * @param {*} [value=_.identity] The value to convert to an iteratee.
             * @returns {Function} Returns the iteratee.
             */
            function baseIteratee(value) {
              // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
              // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
              if (typeof value == 'function') {
                return value;
              }
              if (value == null) {
                return identity;
              }
              if (typeof value == 'object') {
                return isArray(value)
                  ? baseMatchesProperty(value[0], value[1])
                  : baseMatches(value);
              }
              return property(value);
            }

            /**
             * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
             *
             * @private
             * @param {Object} object The object to query.
             * @returns {Array} Returns the array of property names.
             */
            function baseKeys(object) {
              if (!isPrototype(object)) {
                return nativeKeys(object);
              }
              var result = [];
              for (var key in Object(object)) {
                if (hasOwnProperty.call(object, key) && key != 'constructor') {
                  result.push(key);
                }
              }
              return result;
            }

            /**
             * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
             *
             * @private
             * @param {Object} object The object to query.
             * @returns {Array} Returns the array of property names.
             */
            function baseKeysIn(object) {
              if (!isObject(object)) {
                return nativeKeysIn(object);
              }
              var isProto = isPrototype(object),
                result = [];

              for (var key in object) {
                if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
                  result.push(key);
                }
              }
              return result;
            }

            /**
             * The base implementation of `_.lt` which doesn't coerce arguments.
             *
             * @private
             * @param {*} value The value to compare.
             * @param {*} other The other value to compare.
             * @returns {boolean} Returns `true` if `value` is less than `other`,
             *  else `false`.
             */
            function baseLt(value, other) {
              return value < other;
            }

            /**
             * The base implementation of `_.map` without support for iteratee shorthands.
             *
             * @private
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} iteratee The function invoked per iteration.
             * @returns {Array} Returns the new mapped array.
             */
            function baseMap(collection, iteratee) {
              var index = -1,
                result = isArrayLike(collection) ? Array(collection.length) : [];

              baseEach(collection, function (value, key, collection) {
                result[++index] = iteratee(value, key, collection);
              });
              return result;
            }

            /**
             * The base implementation of `_.matches` which doesn't clone `source`.
             *
             * @private
             * @param {Object} source The object of property values to match.
             * @returns {Function} Returns the new spec function.
             */
            function baseMatches(source) {
              var matchData = getMatchData(source);
              if (matchData.length == 1 && matchData[0][2]) {
                return matchesStrictComparable(matchData[0][0], matchData[0][1]);
              }
              return function (object) {
                return object === source || baseIsMatch(object, source, matchData);
              };
            }

            /**
             * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
             *
             * @private
             * @param {string} path The path of the property to get.
             * @param {*} srcValue The value to match.
             * @returns {Function} Returns the new spec function.
             */
            function baseMatchesProperty(path, srcValue) {
              if (isKey(path) && isStrictComparable(srcValue)) {
                return matchesStrictComparable(toKey(path), srcValue);
              }
              return function (object) {
                var objValue = get(object, path);
                return (objValue === undefined && objValue === srcValue)
                  ? hasIn(object, path)
                  : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
              };
            }

            /**
             * The base implementation of `_.merge` without support for multiple sources.
             *
             * @private
             * @param {Object} object The destination object.
             * @param {Object} source The source object.
             * @param {number} srcIndex The index of `source`.
             * @param {Function} [customizer] The function to customize merged values.
             * @param {Object} [stack] Tracks traversed source values and their merged
             *  counterparts.
             */
            function baseMerge(object, source, srcIndex, customizer, stack) {
              if (object === source) {
                return;
              }
              baseFor(source, function (srcValue, key) {
                if (isObject(srcValue)) {
                  stack || (stack = new Stack);
                  baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
                }
                else {
                  var newValue = customizer
                    ? customizer(safeGet(object, key), srcValue, (key + ''), object, source, stack)
                    : undefined;

                  if (newValue === undefined) {
                    newValue = srcValue;
                  }
                  assignMergeValue(object, key, newValue);
                }
              }, keysIn);
            }

            /**
             * A specialized version of `baseMerge` for arrays and objects which performs
             * deep merges and tracks traversed objects enabling objects with circular
             * references to be merged.
             *
             * @private
             * @param {Object} object The destination object.
             * @param {Object} source The source object.
             * @param {string} key The key of the value to merge.
             * @param {number} srcIndex The index of `source`.
             * @param {Function} mergeFunc The function to merge values.
             * @param {Function} [customizer] The function to customize assigned values.
             * @param {Object} [stack] Tracks traversed source values and their merged
             *  counterparts.
             */
            function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
              var objValue = safeGet(object, key),
                srcValue = safeGet(source, key),
                stacked = stack.get(srcValue);

              if (stacked) {
                assignMergeValue(object, key, stacked);
                return;
              }
              var newValue = customizer
                ? customizer(objValue, srcValue, (key + ''), object, source, stack)
                : undefined;

              var isCommon = newValue === undefined;

              if (isCommon) {
                var isArr = isArray(srcValue),
                  isBuff = !isArr && isBuffer(srcValue),
                  isTyped = !isArr && !isBuff && isTypedArray(srcValue);

                newValue = srcValue;
                if (isArr || isBuff || isTyped) {
                  if (isArray(objValue)) {
                    newValue = objValue;
                  }
                  else if (isArrayLikeObject(objValue)) {
                    newValue = copyArray(objValue);
                  }
                  else if (isBuff) {
                    isCommon = false;
                    newValue = cloneBuffer(srcValue, true);
                  }
                  else if (isTyped) {
                    isCommon = false;
                    newValue = cloneTypedArray(srcValue, true);
                  }
                  else {
                    newValue = [];
                  }
                }
                else if (isPlainObject(srcValue) || isArguments(srcValue)) {
                  newValue = objValue;
                  if (isArguments(objValue)) {
                    newValue = toPlainObject(objValue);
                  }
                  else if (!isObject(objValue) || (srcIndex && isFunction(objValue))) {
                    newValue = initCloneObject(srcValue);
                  }
                }
                else {
                  isCommon = false;
                }
              }
              if (isCommon) {
                // Recursively merge objects and arrays (susceptible to call stack limits).
                stack.set(srcValue, newValue);
                mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
                stack['delete'](srcValue);
              }
              assignMergeValue(object, key, newValue);
            }

            /**
             * The base implementation of `_.nth` which doesn't coerce arguments.
             *
             * @private
             * @param {Array} array The array to query.
             * @param {number} n The index of the element to return.
             * @returns {*} Returns the nth element of `array`.
             */
            function baseNth(array, n) {
              var length = array.length;
              if (!length) {
                return;
              }
              n += n < 0 ? length : 0;
              return isIndex(n, length) ? array[n] : undefined;
            }

            /**
             * The base implementation of `_.orderBy` without param guards.
             *
             * @private
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
             * @param {string[]} orders The sort orders of `iteratees`.
             * @returns {Array} Returns the new sorted array.
             */
            function baseOrderBy(collection, iteratees, orders) {
              var index = -1;
              iteratees = arrayMap(iteratees.length ? iteratees : [identity], baseUnary(getIteratee()));

              var result = baseMap(collection, function (value, key, collection) {
                var criteria = arrayMap(iteratees, function (iteratee) {
                  return iteratee(value);
                });
                return { 'criteria': criteria, 'index': ++index, 'value': value };
              });

              return baseSortBy(result, function (object, other) {
                return compareMultiple(object, other, orders);
              });
            }

            /**
             * The base implementation of `_.pick` without support for individual
             * property identifiers.
             *
             * @private
             * @param {Object} object The source object.
             * @param {string[]} paths The property paths to pick.
             * @returns {Object} Returns the new object.
             */
            function basePick(object, paths) {
              return basePickBy(object, paths, function (value, path) {
                return hasIn(object, path);
              });
            }

            /**
             * The base implementation of  `_.pickBy` without support for iteratee shorthands.
             *
             * @private
             * @param {Object} object The source object.
             * @param {string[]} paths The property paths to pick.
             * @param {Function} predicate The function invoked per property.
             * @returns {Object} Returns the new object.
             */
            function basePickBy(object, paths, predicate) {
              var index = -1,
                length = paths.length,
                result = {};

              while (++index < length) {
                var path = paths[index],
                  value = baseGet(object, path);

                if (predicate(value, path)) {
                  baseSet(result, castPath(path, object), value);
                }
              }
              return result;
            }

            /**
             * A specialized version of `baseProperty` which supports deep paths.
             *
             * @private
             * @param {Array|string} path The path of the property to get.
             * @returns {Function} Returns the new accessor function.
             */
            function basePropertyDeep(path) {
              return function (object) {
                return baseGet(object, path);
              };
            }

            /**
             * The base implementation of `_.pullAllBy` without support for iteratee
             * shorthands.
             *
             * @private
             * @param {Array} array The array to modify.
             * @param {Array} values The values to remove.
             * @param {Function} [iteratee] The iteratee invoked per element.
             * @param {Function} [comparator] The comparator invoked per element.
             * @returns {Array} Returns `array`.
             */
            function basePullAll(array, values, iteratee, comparator) {
              var indexOf = comparator ? baseIndexOfWith : baseIndexOf,
                index = -1,
                length = values.length,
                seen = array;

              if (array === values) {
                values = copyArray(values);
              }
              if (iteratee) {
                seen = arrayMap(array, baseUnary(iteratee));
              }
              while (++index < length) {
                var fromIndex = 0,
                  value = values[index],
                  computed = iteratee ? iteratee(value) : value;

                while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {
                  if (seen !== array) {
                    splice.call(seen, fromIndex, 1);
                  }
                  splice.call(array, fromIndex, 1);
                }
              }
              return array;
            }

            /**
             * The base implementation of `_.pullAt` without support for individual
             * indexes or capturing the removed elements.
             *
             * @private
             * @param {Array} array The array to modify.
             * @param {number[]} indexes The indexes of elements to remove.
             * @returns {Array} Returns `array`.
             */
            function basePullAt(array, indexes) {
              var length = array ? indexes.length : 0,
                lastIndex = length - 1;

              while (length--) {
                var index = indexes[length];
                if (length == lastIndex || index !== previous) {
                  var previous = index;
                  if (isIndex(index)) {
                    splice.call(array, index, 1);
                  } else {
                    baseUnset(array, index);
                  }
                }
              }
              return array;
            }

            /**
             * The base implementation of `_.random` without support for returning
             * floating-point numbers.
             *
             * @private
             * @param {number} lower The lower bound.
             * @param {number} upper The upper bound.
             * @returns {number} Returns the random number.
             */
            function baseRandom(lower, upper) {
              return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
            }

            /**
             * The base implementation of `_.range` and `_.rangeRight` which doesn't
             * coerce arguments.
             *
             * @private
             * @param {number} start The start of the range.
             * @param {number} end The end of the range.
             * @param {number} step The value to increment or decrement by.
             * @param {boolean} [fromRight] Specify iterating from right to left.
             * @returns {Array} Returns the range of numbers.
             */
            function baseRange(start, end, step, fromRight) {
              var index = -1,
                length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
                result = Array(length);

              while (length--) {
                result[fromRight ? length : ++index] = start;
                start += step;
              }
              return result;
            }

            /**
             * The base implementation of `_.repeat` which doesn't coerce arguments.
             *
             * @private
             * @param {string} string The string to repeat.
             * @param {number} n The number of times to repeat the string.
             * @returns {string} Returns the repeated string.
             */
            function baseRepeat(string, n) {
              var result = '';
              if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
                return result;
              }
              // Leverage the exponentiation by squaring algorithm for a faster repeat.
              // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
              do {
                if (n % 2) {
                  result += string;
                }
                n = nativeFloor(n / 2);
                if (n) {
                  string += string;
                }
              } while (n);

              return result;
            }

            /**
             * The base implementation of `_.rest` which doesn't validate or coerce arguments.
             *
             * @private
             * @param {Function} func The function to apply a rest parameter to.
             * @param {number} [start=func.length-1] The start position of the rest parameter.
             * @returns {Function} Returns the new function.
             */
            function baseRest(func, start) {
              return setToString(overRest(func, start, identity), func + '');
            }

            /**
             * The base implementation of `_.sample`.
             *
             * @private
             * @param {Array|Object} collection The collection to sample.
             * @returns {*} Returns the random element.
             */
            function baseSample(collection) {
              return arraySample(values(collection));
            }

            /**
             * The base implementation of `_.sampleSize` without param guards.
             *
             * @private
             * @param {Array|Object} collection The collection to sample.
             * @param {number} n The number of elements to sample.
             * @returns {Array} Returns the random elements.
             */
            function baseSampleSize(collection, n) {
              var array = values(collection);
              return shuffleSelf(array, baseClamp(n, 0, array.length));
            }

            /**
             * The base implementation of `_.set`.
             *
             * @private
             * @param {Object} object The object to modify.
             * @param {Array|string} path The path of the property to set.
             * @param {*} value The value to set.
             * @param {Function} [customizer] The function to customize path creation.
             * @returns {Object} Returns `object`.
             */
            function baseSet(object, path, value, customizer) {
              if (!isObject(object)) {
                return object;
              }
              path = castPath(path, object);

              var index = -1,
                length = path.length,
                lastIndex = length - 1,
                nested = object;

              while (nested != null && ++index < length) {
                var key = toKey(path[index]),
                  newValue = value;

                if (index != lastIndex) {
                  var objValue = nested[key];
                  newValue = customizer ? customizer(objValue, key, nested) : undefined;
                  if (newValue === undefined) {
                    newValue = isObject(objValue)
                      ? objValue
                      : (isIndex(path[index + 1]) ? [] : {});
                  }
                }
                assignValue(nested, key, newValue);
                nested = nested[key];
              }
              return object;
            }

            /**
             * The base implementation of `setData` without support for hot loop shorting.
             *
             * @private
             * @param {Function} func The function to associate metadata with.
             * @param {*} data The metadata.
             * @returns {Function} Returns `func`.
             */
            var baseSetData = !metaMap ? identity : function (func, data) {
              metaMap.set(func, data);
              return func;
            };

            /**
             * The base implementation of `setToString` without support for hot loop shorting.
             *
             * @private
             * @param {Function} func The function to modify.
             * @param {Function} string The `toString` result.
             * @returns {Function} Returns `func`.
             */
            var baseSetToString = !defineProperty ? identity : function (func, string) {
              return defineProperty(func, 'toString', {
                'configurable': true,
                'enumerable': false,
                'value': constant(string),
                'writable': true
              });
            };

            /**
             * The base implementation of `_.shuffle`.
             *
             * @private
             * @param {Array|Object} collection The collection to shuffle.
             * @returns {Array} Returns the new shuffled array.
             */
            function baseShuffle(collection) {
              return shuffleSelf(values(collection));
            }

            /**
             * The base implementation of `_.slice` without an iteratee call guard.
             *
             * @private
             * @param {Array} array The array to slice.
             * @param {number} [start=0] The start position.
             * @param {number} [end=array.length] The end position.
             * @returns {Array} Returns the slice of `array`.
             */
            function baseSlice(array, start, end) {
              var index = -1,
                length = array.length;

              if (start < 0) {
                start = -start > length ? 0 : (length + start);
              }
              end = end > length ? length : end;
              if (end < 0) {
                end += length;
              }
              length = start > end ? 0 : ((end - start) >>> 0);
              start >>>= 0;

              var result = Array(length);
              while (++index < length) {
                result[index] = array[index + start];
              }
              return result;
            }

            /**
             * The base implementation of `_.some` without support for iteratee shorthands.
             *
             * @private
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} predicate The function invoked per iteration.
             * @returns {boolean} Returns `true` if any element passes the predicate check,
             *  else `false`.
             */
            function baseSome(collection, predicate) {
              var result;

              baseEach(collection, function (value, index, collection) {
                result = predicate(value, index, collection);
                return !result;
              });
              return !!result;
            }

            /**
             * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which
             * performs a binary search of `array` to determine the index at which `value`
             * should be inserted into `array` in order to maintain its sort order.
             *
             * @private
             * @param {Array} array The sorted array to inspect.
             * @param {*} value The value to evaluate.
             * @param {boolean} [retHighest] Specify returning the highest qualified index.
             * @returns {number} Returns the index at which `value` should be inserted
             *  into `array`.
             */
            function baseSortedIndex(array, value, retHighest) {
              var low = 0,
                high = array == null ? low : array.length;

              if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
                while (low < high) {
                  var mid = (low + high) >>> 1,
                    computed = array[mid];

                  if (computed !== null && !isSymbol(computed) &&
                    (retHighest ? (computed <= value) : (computed < value))) {
                    low = mid + 1;
                  } else {
                    high = mid;
                  }
                }
                return high;
              }
              return baseSortedIndexBy(array, value, identity, retHighest);
            }

            /**
             * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`
             * which invokes `iteratee` for `value` and each element of `array` to compute
             * their sort ranking. The iteratee is invoked with one argument; (value).
             *
             * @private
             * @param {Array} array The sorted array to inspect.
             * @param {*} value The value to evaluate.
             * @param {Function} iteratee The iteratee invoked per element.
             * @param {boolean} [retHighest] Specify returning the highest qualified index.
             * @returns {number} Returns the index at which `value` should be inserted
             *  into `array`.
             */
            function baseSortedIndexBy(array, value, iteratee, retHighest) {
              value = iteratee(value);

              var low = 0,
                high = array == null ? 0 : array.length,
                valIsNaN = value !== value,
                valIsNull = value === null,
                valIsSymbol = isSymbol(value),
                valIsUndefined = value === undefined;

              while (low < high) {
                var mid = nativeFloor((low + high) / 2),
                  computed = iteratee(array[mid]),
                  othIsDefined = computed !== undefined,
                  othIsNull = computed === null,
                  othIsReflexive = computed === computed,
                  othIsSymbol = isSymbol(computed);

                if (valIsNaN) {
                  var setLow = retHighest || othIsReflexive;
                } else if (valIsUndefined) {
                  setLow = othIsReflexive && (retHighest || othIsDefined);
                } else if (valIsNull) {
                  setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
                } else if (valIsSymbol) {
                  setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
                } else if (othIsNull || othIsSymbol) {
                  setLow = false;
                } else {
                  setLow = retHighest ? (computed <= value) : (computed < value);
                }
                if (setLow) {
                  low = mid + 1;
                } else {
                  high = mid;
                }
              }
              return nativeMin(high, MAX_ARRAY_INDEX);
            }

            /**
             * The base implementation of `_.sortedUniq` and `_.sortedUniqBy` without
             * support for iteratee shorthands.
             *
             * @private
             * @param {Array} array The array to inspect.
             * @param {Function} [iteratee] The iteratee invoked per element.
             * @returns {Array} Returns the new duplicate free array.
             */
            function baseSortedUniq(array, iteratee) {
              var index = -1,
                length = array.length,
                resIndex = 0,
                result = [];

              while (++index < length) {
                var value = array[index],
                  computed = iteratee ? iteratee(value) : value;

                if (!index || !eq(computed, seen)) {
                  var seen = computed;
                  result[resIndex++] = value === 0 ? 0 : value;
                }
              }
              return result;
            }

            /**
             * The base implementation of `_.toNumber` which doesn't ensure correct
             * conversions of binary, hexadecimal, or octal string values.
             *
             * @private
             * @param {*} value The value to process.
             * @returns {number} Returns the number.
             */
            function baseToNumber(value) {
              if (typeof value == 'number') {
                return value;
              }
              if (isSymbol(value)) {
                return NAN;
              }
              return +value;
            }

            /**
             * The base implementation of `_.toString` which doesn't convert nullish
             * values to empty strings.
             *
             * @private
             * @param {*} value The value to process.
             * @returns {string} Returns the string.
             */
            function baseToString(value) {
              // Exit early for strings to avoid a performance hit in some environments.
              if (typeof value == 'string') {
                return value;
              }
              if (isArray(value)) {
                // Recursively convert values (susceptible to call stack limits).
                return arrayMap(value, baseToString) + '';
              }
              if (isSymbol(value)) {
                return symbolToString ? symbolToString.call(value) : '';
              }
              var result = (value + '');
              return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
            }

            /**
             * The base implementation of `_.uniqBy` without support for iteratee shorthands.
             *
             * @private
             * @param {Array} array The array to inspect.
             * @param {Function} [iteratee] The iteratee invoked per element.
             * @param {Function} [comparator] The comparator invoked per element.
             * @returns {Array} Returns the new duplicate free array.
             */
            function baseUniq(array, iteratee, comparator) {
              var index = -1,
                includes = arrayIncludes,
                length = array.length,
                isCommon = true,
                result = [],
                seen = result;

              if (comparator) {
                isCommon = false;
                includes = arrayIncludesWith;
              }
              else if (length >= LARGE_ARRAY_SIZE) {
                var set = iteratee ? null : createSet(array);
                if (set) {
                  return setToArray(set);
                }
                isCommon = false;
                includes = cacheHas;
                seen = new SetCache;
              }
              else {
                seen = iteratee ? [] : result;
              }
              outer:
              while (++index < length) {
                var value = array[index],
                  computed = iteratee ? iteratee(value) : value;

                value = (comparator || value !== 0) ? value : 0;
                if (isCommon && computed === computed) {
                  var seenIndex = seen.length;
                  while (seenIndex--) {
                    if (seen[seenIndex] === computed) {
                      continue outer;
                    }
                  }
                  if (iteratee) {
                    seen.push(computed);
                  }
                  result.push(value);
                }
                else if (!includes(seen, computed, comparator)) {
                  if (seen !== result) {
                    seen.push(computed);
                  }
                  result.push(value);
                }
              }
              return result;
            }

            /**
             * The base implementation of `_.unset`.
             *
             * @private
             * @param {Object} object The object to modify.
             * @param {Array|string} path The property path to unset.
             * @returns {boolean} Returns `true` if the property is deleted, else `false`.
             */
            function baseUnset(object, path) {
              path = castPath(path, object);
              object = parent(object, path);
              return object == null || delete object[toKey(last(path))];
            }

            /**
             * The base implementation of `_.update`.
             *
             * @private
             * @param {Object} object The object to modify.
             * @param {Array|string} path The path of the property to update.
             * @param {Function} updater The function to produce the updated value.
             * @param {Function} [customizer] The function to customize path creation.
             * @returns {Object} Returns `object`.
             */
            function baseUpdate(object, path, updater, customizer) {
              return baseSet(object, path, updater(baseGet(object, path)), customizer);
            }

            /**
             * The base implementation of methods like `_.dropWhile` and `_.takeWhile`
             * without support for iteratee shorthands.
             *
             * @private
             * @param {Array} array The array to query.
             * @param {Function} predicate The function invoked per iteration.
             * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
             * @param {boolean} [fromRight] Specify iterating from right to left.
             * @returns {Array} Returns the slice of `array`.
             */
            function baseWhile(array, predicate, isDrop, fromRight) {
              var length = array.length,
                index = fromRight ? length : -1;

              while ((fromRight ? index-- : ++index < length) &&
                predicate(array[index], index, array)) { }

              return isDrop
                ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))
                : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));
            }

            /**
             * The base implementation of `wrapperValue` which returns the result of
             * performing a sequence of actions on the unwrapped `value`, where each
             * successive action is supplied the return value of the previous.
             *
             * @private
             * @param {*} value The unwrapped value.
             * @param {Array} actions Actions to perform to resolve the unwrapped value.
             * @returns {*} Returns the resolved value.
             */
            function baseWrapperValue(value, actions) {
              var result = value;
              if (result instanceof LazyWrapper) {
                result = result.value();
              }
              return arrayReduce(actions, function (result, action) {
                return action.func.apply(action.thisArg, arrayPush([result], action.args));
              }, result);
            }

            /**
             * The base implementation of methods like `_.xor`, without support for
             * iteratee shorthands, that accepts an array of arrays to inspect.
             *
             * @private
             * @param {Array} arrays The arrays to inspect.
             * @param {Function} [iteratee] The iteratee invoked per element.
             * @param {Function} [comparator] The comparator invoked per element.
             * @returns {Array} Returns the new array of values.
             */
            function baseXor(arrays, iteratee, comparator) {
              var length = arrays.length;
              if (length < 2) {
                return length ? baseUniq(arrays[0]) : [];
              }
              var index = -1,
                result = Array(length);

              while (++index < length) {
                var array = arrays[index],
                  othIndex = -1;

                while (++othIndex < length) {
                  if (othIndex != index) {
                    result[index] = baseDifference(result[index] || array, arrays[othIndex], iteratee, comparator);
                  }
                }
              }
              return baseUniq(baseFlatten(result, 1), iteratee, comparator);
            }

            /**
             * This base implementation of `_.zipObject` which assigns values using `assignFunc`.
             *
             * @private
             * @param {Array} props The property identifiers.
             * @param {Array} values The property values.
             * @param {Function} assignFunc The function to assign values.
             * @returns {Object} Returns the new object.
             */
            function baseZipObject(props, values, assignFunc) {
              var index = -1,
                length = props.length,
                valsLength = values.length,
                result = {};

              while (++index < length) {
                var value = index < valsLength ? values[index] : undefined;
                assignFunc(result, props[index], value);
              }
              return result;
            }

            /**
             * Casts `value` to an empty array if it's not an array like object.
             *
             * @private
             * @param {*} value The value to inspect.
             * @returns {Array|Object} Returns the cast array-like object.
             */
            function castArrayLikeObject(value) {
              return isArrayLikeObject(value) ? value : [];
            }

            /**
             * Casts `value` to `identity` if it's not a function.
             *
             * @private
             * @param {*} value The value to inspect.
             * @returns {Function} Returns cast function.
             */
            function castFunction(value) {
              return typeof value == 'function' ? value : identity;
            }

            /**
             * Casts `value` to a path array if it's not one.
             *
             * @private
             * @param {*} value The value to inspect.
             * @param {Object} [object] The object to query keys on.
             * @returns {Array} Returns the cast property path array.
             */
            function castPath(value, object) {
              if (isArray(value)) {
                return value;
              }
              return isKey(value, object) ? [value] : stringToPath(toString(value));
            }

            /**
             * A `baseRest` alias which can be replaced with `identity` by module
             * replacement plugins.
             *
             * @private
             * @type {Function}
             * @param {Function} func The function to apply a rest parameter to.
             * @returns {Function} Returns the new function.
             */
            var castRest = baseRest;

            /**
             * Casts `array` to a slice if it's needed.
             *
             * @private
             * @param {Array} array The array to inspect.
             * @param {number} start The start position.
             * @param {number} [end=array.length] The end position.
             * @returns {Array} Returns the cast slice.
             */
            function castSlice(array, start, end) {
              var length = array.length;
              end = end === undefined ? length : end;
              return (!start && end >= length) ? array : baseSlice(array, start, end);
            }

            /**
             * A simple wrapper around the global [`clearTimeout`](https://mdn.io/clearTimeout).
             *
             * @private
             * @param {number|Object} id The timer id or timeout object of the timer to clear.
             */
            var clearTimeout = ctxClearTimeout || function (id) {
              return root.clearTimeout(id);
            };

            /**
             * Creates a clone of  `buffer`.
             *
             * @private
             * @param {Buffer} buffer The buffer to clone.
             * @param {boolean} [isDeep] Specify a deep clone.
             * @returns {Buffer} Returns the cloned buffer.
             */
            function cloneBuffer(buffer, isDeep) {
              if (isDeep) {
                return buffer.slice();
              }
              var length = buffer.length,
                result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

              buffer.copy(result);
              return result;
            }

            /**
             * Creates a clone of `arrayBuffer`.
             *
             * @private
             * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
             * @returns {ArrayBuffer} Returns the cloned array buffer.
             */
            function cloneArrayBuffer(arrayBuffer) {
              var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
              new Uint8Array(result).set(new Uint8Array(arrayBuffer));
              return result;
            }

            /**
             * Creates a clone of `dataView`.
             *
             * @private
             * @param {Object} dataView The data view to clone.
             * @param {boolean} [isDeep] Specify a deep clone.
             * @returns {Object} Returns the cloned data view.
             */
            function cloneDataView(dataView, isDeep) {
              var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
              return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
            }

            /**
             * Creates a clone of `regexp`.
             *
             * @private
             * @param {Object} regexp The regexp to clone.
             * @returns {Object} Returns the cloned regexp.
             */
            function cloneRegExp(regexp) {
              var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
              result.lastIndex = regexp.lastIndex;
              return result;
            }

            /**
             * Creates a clone of the `symbol` object.
             *
             * @private
             * @param {Object} symbol The symbol object to clone.
             * @returns {Object} Returns the cloned symbol object.
             */
            function cloneSymbol(symbol) {
              return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
            }

            /**
             * Creates a clone of `typedArray`.
             *
             * @private
             * @param {Object} typedArray The typed array to clone.
             * @param {boolean} [isDeep] Specify a deep clone.
             * @returns {Object} Returns the cloned typed array.
             */
            function cloneTypedArray(typedArray, isDeep) {
              var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
              return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
            }

            /**
             * Compares values to sort them in ascending order.
             *
             * @private
             * @param {*} value The value to compare.
             * @param {*} other The other value to compare.
             * @returns {number} Returns the sort order indicator for `value`.
             */
            function compareAscending(value, other) {
              if (value !== other) {
                var valIsDefined = value !== undefined,
                  valIsNull = value === null,
                  valIsReflexive = value === value,
                  valIsSymbol = isSymbol(value);

                var othIsDefined = other !== undefined,
                  othIsNull = other === null,
                  othIsReflexive = other === other,
                  othIsSymbol = isSymbol(other);

                if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||
                  (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||
                  (valIsNull && othIsDefined && othIsReflexive) ||
                  (!valIsDefined && othIsReflexive) ||
                  !valIsReflexive) {
                  return 1;
                }
                if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||
                  (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||
                  (othIsNull && valIsDefined && valIsReflexive) ||
                  (!othIsDefined && valIsReflexive) ||
                  !othIsReflexive) {
                  return -1;
                }
              }
              return 0;
            }

            /**
             * Used by `_.orderBy` to compare multiple properties of a value to another
             * and stable sort them.
             *
             * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
             * specify an order of "desc" for descending or "asc" for ascending sort order
             * of corresponding values.
             *
             * @private
             * @param {Object} object The object to compare.
             * @param {Object} other The other object to compare.
             * @param {boolean[]|string[]} orders The order to sort by for each property.
             * @returns {number} Returns the sort order indicator for `object`.
             */
            function compareMultiple(object, other, orders) {
              var index = -1,
                objCriteria = object.criteria,
                othCriteria = other.criteria,
                length = objCriteria.length,
                ordersLength = orders.length;

              while (++index < length) {
                var result = compareAscending(objCriteria[index], othCriteria[index]);
                if (result) {
                  if (index >= ordersLength) {
                    return result;
                  }
                  var order = orders[index];
                  return result * (order == 'desc' ? -1 : 1);
                }
              }
              // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
              // that causes it, under certain circumstances, to provide the same value for
              // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
              // for more details.
              //
              // This also ensures a stable sort in V8 and other engines.
              // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.
              return object.index - other.index;
            }

            /**
             * Creates an array that is the composition of partially applied arguments,
             * placeholders, and provided arguments into a single array of arguments.
             *
             * @private
             * @param {Array} args The provided arguments.
             * @param {Array} partials The arguments to prepend to those provided.
             * @param {Array} holders The `partials` placeholder indexes.
             * @params {boolean} [isCurried] Specify composing for a curried function.
             * @returns {Array} Returns the new array of composed arguments.
             */
            function composeArgs(args, partials, holders, isCurried) {
              var argsIndex = -1,
                argsLength = args.length,
                holdersLength = holders.length,
                leftIndex = -1,
                leftLength = partials.length,
                rangeLength = nativeMax(argsLength - holdersLength, 0),
                result = Array(leftLength + rangeLength),
                isUncurried = !isCurried;

              while (++leftIndex < leftLength) {
                result[leftIndex] = partials[leftIndex];
              }
              while (++argsIndex < holdersLength) {
                if (isUncurried || argsIndex < argsLength) {
                  result[holders[argsIndex]] = args[argsIndex];
                }
              }
              while (rangeLength--) {
                result[leftIndex++] = args[argsIndex++];
              }
              return result;
            }

            /**
             * This function is like `composeArgs` except that the arguments composition
             * is tailored for `_.partialRight`.
             *
             * @private
             * @param {Array} args The provided arguments.
             * @param {Array} partials The arguments to append to those provided.
             * @param {Array} holders The `partials` placeholder indexes.
             * @params {boolean} [isCurried] Specify composing for a curried function.
             * @returns {Array} Returns the new array of composed arguments.
             */
            function composeArgsRight(args, partials, holders, isCurried) {
              var argsIndex = -1,
                argsLength = args.length,
                holdersIndex = -1,
                holdersLength = holders.length,
                rightIndex = -1,
                rightLength = partials.length,
                rangeLength = nativeMax(argsLength - holdersLength, 0),
                result = Array(rangeLength + rightLength),
                isUncurried = !isCurried;

              while (++argsIndex < rangeLength) {
                result[argsIndex] = args[argsIndex];
              }
              var offset = argsIndex;
              while (++rightIndex < rightLength) {
                result[offset + rightIndex] = partials[rightIndex];
              }
              while (++holdersIndex < holdersLength) {
                if (isUncurried || argsIndex < argsLength) {
                  result[offset + holders[holdersIndex]] = args[argsIndex++];
                }
              }
              return result;
            }

            /**
             * Copies the values of `source` to `array`.
             *
             * @private
             * @param {Array} source The array to copy values from.
             * @param {Array} [array=[]] The array to copy values to.
             * @returns {Array} Returns `array`.
             */
            function copyArray(source, array) {
              var index = -1,
                length = source.length;

              array || (array = Array(length));
              while (++index < length) {
                array[index] = source[index];
              }
              return array;
            }

            /**
             * Copies properties of `source` to `object`.
             *
             * @private
             * @param {Object} source The object to copy properties from.
             * @param {Array} props The property identifiers to copy.
             * @param {Object} [object={}] The object to copy properties to.
             * @param {Function} [customizer] The function to customize copied values.
             * @returns {Object} Returns `object`.
             */
            function copyObject(source, props, object, customizer) {
              var isNew = !object;
              object || (object = {});

              var index = -1,
                length = props.length;

              while (++index < length) {
                var key = props[index];

                var newValue = customizer
                  ? customizer(object[key], source[key], key, object, source)
                  : undefined;

                if (newValue === undefined) {
                  newValue = source[key];
                }
                if (isNew) {
                  baseAssignValue(object, key, newValue);
                } else {
                  assignValue(object, key, newValue);
                }
              }
              return object;
            }

            /**
             * Copies own symbols of `source` to `object`.
             *
             * @private
             * @param {Object} source The object to copy symbols from.
             * @param {Object} [object={}] The object to copy symbols to.
             * @returns {Object} Returns `object`.
             */
            function copySymbols(source, object) {
              return copyObject(source, getSymbols(source), object);
            }

            /**
             * Copies own and inherited symbols of `source` to `object`.
             *
             * @private
             * @param {Object} source The object to copy symbols from.
             * @param {Object} [object={}] The object to copy symbols to.
             * @returns {Object} Returns `object`.
             */
            function copySymbolsIn(source, object) {
              return copyObject(source, getSymbolsIn(source), object);
            }

            /**
             * Creates a function like `_.groupBy`.
             *
             * @private
             * @param {Function} setter The function to set accumulator values.
             * @param {Function} [initializer] The accumulator object initializer.
             * @returns {Function} Returns the new aggregator function.
             */
            function createAggregator(setter, initializer) {
              return function (collection, iteratee) {
                var func = isArray(collection) ? arrayAggregator : baseAggregator,
                  accumulator = initializer ? initializer() : {};

                return func(collection, setter, getIteratee(iteratee, 2), accumulator);
              };
            }

            /**
             * Creates a function like `_.assign`.
             *
             * @private
             * @param {Function} assigner The function to assign values.
             * @returns {Function} Returns the new assigner function.
             */
            function createAssigner(assigner) {
              return baseRest(function (object, sources) {
                var index = -1,
                  length = sources.length,
                  customizer = length > 1 ? sources[length - 1] : undefined,
                  guard = length > 2 ? sources[2] : undefined;

                customizer = (assigner.length > 3 && typeof customizer == 'function')
                  ? (length-- , customizer)
                  : undefined;

                if (guard && isIterateeCall(sources[0], sources[1], guard)) {
                  customizer = length < 3 ? undefined : customizer;
                  length = 1;
                }
                object = Object(object);
                while (++index < length) {
                  var source = sources[index];
                  if (source) {
                    assigner(object, source, index, customizer);
                  }
                }
                return object;
              });
            }

            /**
             * Creates a `baseEach` or `baseEachRight` function.
             *
             * @private
             * @param {Function} eachFunc The function to iterate over a collection.
             * @param {boolean} [fromRight] Specify iterating from right to left.
             * @returns {Function} Returns the new base function.
             */
            function createBaseEach(eachFunc, fromRight) {
              return function (collection, iteratee) {
                if (collection == null) {
                  return collection;
                }
                if (!isArrayLike(collection)) {
                  return eachFunc(collection, iteratee);
                }
                var length = collection.length,
                  index = fromRight ? length : -1,
                  iterable = Object(collection);

                while ((fromRight ? index-- : ++index < length)) {
                  if (iteratee(iterable[index], index, iterable) === false) {
                    break;
                  }
                }
                return collection;
              };
            }

            /**
             * Creates a base function for methods like `_.forIn` and `_.forOwn`.
             *
             * @private
             * @param {boolean} [fromRight] Specify iterating from right to left.
             * @returns {Function} Returns the new base function.
             */
            function createBaseFor(fromRight) {
              return function (object, iteratee, keysFunc) {
                var index = -1,
                  iterable = Object(object),
                  props = keysFunc(object),
                  length = props.length;

                while (length--) {
                  var key = props[fromRight ? length : ++index];
                  if (iteratee(iterable[key], key, iterable) === false) {
                    break;
                  }
                }
                return object;
              };
            }

            /**
             * Creates a function that wraps `func` to invoke it with the optional `this`
             * binding of `thisArg`.
             *
             * @private
             * @param {Function} func The function to wrap.
             * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
             * @param {*} [thisArg] The `this` binding of `func`.
             * @returns {Function} Returns the new wrapped function.
             */
            function createBind(func, bitmask, thisArg) {
              var isBind = bitmask & WRAP_BIND_FLAG,
                Ctor = createCtor(func);

              function wrapper() {
                var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
                return fn.apply(isBind ? thisArg : this, arguments);
              }
              return wrapper;
            }

            /**
             * Creates a function like `_.lowerFirst`.
             *
             * @private
             * @param {string} methodName The name of the `String` case method to use.
             * @returns {Function} Returns the new case function.
             */
            function createCaseFirst(methodName) {
              return function (string) {
                string = toString(string);

                var strSymbols = hasUnicode(string)
                  ? stringToArray(string)
                  : undefined;

                var chr = strSymbols
                  ? strSymbols[0]
                  : string.charAt(0);

                var trailing = strSymbols
                  ? castSlice(strSymbols, 1).join('')
                  : string.slice(1);

                return chr[methodName]() + trailing;
              };
            }

            /**
             * Creates a function like `_.camelCase`.
             *
             * @private
             * @param {Function} callback The function to combine each word.
             * @returns {Function} Returns the new compounder function.
             */
            function createCompounder(callback) {
              return function (string) {
                return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');
              };
            }

            /**
             * Creates a function that produces an instance of `Ctor` regardless of
             * whether it was invoked as part of a `new` expression or by `call` or `apply`.
             *
             * @private
             * @param {Function} Ctor The constructor to wrap.
             * @returns {Function} Returns the new wrapped function.
             */
            function createCtor(Ctor) {
              return function () {
                // Use a `switch` statement to work with class constructors. See
                // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
                // for more details.
                var args = arguments;
                switch (args.length) {
                  case 0: return new Ctor;
                  case 1: return new Ctor(args[0]);
                  case 2: return new Ctor(args[0], args[1]);
                  case 3: return new Ctor(args[0], args[1], args[2]);
                  case 4: return new Ctor(args[0], args[1], args[2], args[3]);
                  case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);
                  case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
                  case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
                }
                var thisBinding = baseCreate(Ctor.prototype),
                  result = Ctor.apply(thisBinding, args);

                // Mimic the constructor's `return` behavior.
                // See https://es5.github.io/#x13.2.2 for more details.
                return isObject(result) ? result : thisBinding;
              };
            }

            /**
             * Creates a function that wraps `func` to enable currying.
             *
             * @private
             * @param {Function} func The function to wrap.
             * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
             * @param {number} arity The arity of `func`.
             * @returns {Function} Returns the new wrapped function.
             */
            function createCurry(func, bitmask, arity) {
              var Ctor = createCtor(func);

              function wrapper() {
                var length = arguments.length,
                  args = Array(length),
                  index = length,
                  placeholder = getHolder(wrapper);

                while (index--) {
                  args[index] = arguments[index];
                }
                var holders = (length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder)
                  ? []
                  : replaceHolders(args, placeholder);

                length -= holders.length;
                if (length < arity) {
                  return createRecurry(
                    func, bitmask, createHybrid, wrapper.placeholder, undefined,
                    args, holders, undefined, undefined, arity - length);
                }
                var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
                return apply(fn, this, args);
              }
              return wrapper;
            }

            /**
             * Creates a `_.find` or `_.findLast` function.
             *
             * @private
             * @param {Function} findIndexFunc The function to find the collection index.
             * @returns {Function} Returns the new find function.
             */
            function createFind(findIndexFunc) {
              return function (collection, predicate, fromIndex) {
                var iterable = Object(collection);
                if (!isArrayLike(collection)) {
                  var iteratee = getIteratee(predicate, 3);
                  collection = keys(collection);
                  predicate = function (key) { return iteratee(iterable[key], key, iterable); };
                }
                var index = findIndexFunc(collection, predicate, fromIndex);
                return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;
              };
            }

            /**
             * Creates a `_.flow` or `_.flowRight` function.
             *
             * @private
             * @param {boolean} [fromRight] Specify iterating from right to left.
             * @returns {Function} Returns the new flow function.
             */
            function createFlow(fromRight) {
              return flatRest(function (funcs) {
                var length = funcs.length,
                  index = length,
                  prereq = LodashWrapper.prototype.thru;

                if (fromRight) {
                  funcs.reverse();
                }
                while (index--) {
                  var func = funcs[index];
                  if (typeof func != 'function') {
                    throw new TypeError(FUNC_ERROR_TEXT);
                  }
                  if (prereq && !wrapper && getFuncName(func) == 'wrapper') {
                    var wrapper = new LodashWrapper([], true);
                  }
                }
                index = wrapper ? index : length;
                while (++index < length) {
                  func = funcs[index];

                  var funcName = getFuncName(func),
                    data = funcName == 'wrapper' ? getData(func) : undefined;

                  if (data && isLaziable(data[0]) &&
                    data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) &&
                    !data[4].length && data[9] == 1
                  ) {
                    wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
                  } else {
                    wrapper = (func.length == 1 && isLaziable(func))
                      ? wrapper[funcName]()
                      : wrapper.thru(func);
                  }
                }
                return function () {
                  var args = arguments,
                    value = args[0];

                  if (wrapper && args.length == 1 && isArray(value)) {
                    return wrapper.plant(value).value();
                  }
                  var index = 0,
                    result = length ? funcs[index].apply(this, args) : value;

                  while (++index < length) {
                    result = funcs[index].call(this, result);
                  }
                  return result;
                };
              });
            }

            /**
             * Creates a function that wraps `func` to invoke it with optional `this`
             * binding of `thisArg`, partial application, and currying.
             *
             * @private
             * @param {Function|string} func The function or method name to wrap.
             * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
             * @param {*} [thisArg] The `this` binding of `func`.
             * @param {Array} [partials] The arguments to prepend to those provided to
             *  the new function.
             * @param {Array} [holders] The `partials` placeholder indexes.
             * @param {Array} [partialsRight] The arguments to append to those provided
             *  to the new function.
             * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
             * @param {Array} [argPos] The argument positions of the new function.
             * @param {number} [ary] The arity cap of `func`.
             * @param {number} [arity] The arity of `func`.
             * @returns {Function} Returns the new wrapped function.
             */
            function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
              var isAry = bitmask & WRAP_ARY_FLAG,
                isBind = bitmask & WRAP_BIND_FLAG,
                isBindKey = bitmask & WRAP_BIND_KEY_FLAG,
                isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG),
                isFlip = bitmask & WRAP_FLIP_FLAG,
                Ctor = isBindKey ? undefined : createCtor(func);

              function wrapper() {
                var length = arguments.length,
                  args = Array(length),
                  index = length;

                while (index--) {
                  args[index] = arguments[index];
                }
                if (isCurried) {
                  var placeholder = getHolder(wrapper),
                    holdersCount = countHolders(args, placeholder);
                }
                if (partials) {
                  args = composeArgs(args, partials, holders, isCurried);
                }
                if (partialsRight) {
                  args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
                }
                length -= holdersCount;
                if (isCurried && length < arity) {
                  var newHolders = replaceHolders(args, placeholder);
                  return createRecurry(
                    func, bitmask, createHybrid, wrapper.placeholder, thisArg,
                    args, newHolders, argPos, ary, arity - length
                  );
                }
                var thisBinding = isBind ? thisArg : this,
                  fn = isBindKey ? thisBinding[func] : func;

                length = args.length;
                if (argPos) {
                  args = reorder(args, argPos);
                } else if (isFlip && length > 1) {
                  args.reverse();
                }
                if (isAry && ary < length) {
                  args.length = ary;
                }
                if (this && this !== root && this instanceof wrapper) {
                  fn = Ctor || createCtor(fn);
                }
                return fn.apply(thisBinding, args);
              }
              return wrapper;
            }

            /**
             * Creates a function like `_.invertBy`.
             *
             * @private
             * @param {Function} setter The function to set accumulator values.
             * @param {Function} toIteratee The function to resolve iteratees.
             * @returns {Function} Returns the new inverter function.
             */
            function createInverter(setter, toIteratee) {
              return function (object, iteratee) {
                return baseInverter(object, setter, toIteratee(iteratee), {});
              };
            }

            /**
             * Creates a function that performs a mathematical operation on two values.
             *
             * @private
             * @param {Function} operator The function to perform the operation.
             * @param {number} [defaultValue] The value used for `undefined` arguments.
             * @returns {Function} Returns the new mathematical operation function.
             */
            function createMathOperation(operator, defaultValue) {
              return function (value, other) {
                var result;
                if (value === undefined && other === undefined) {
                  return defaultValue;
                }
                if (value !== undefined) {
                  result = value;
                }
                if (other !== undefined) {
                  if (result === undefined) {
                    return other;
                  }
                  if (typeof value == 'string' || typeof other == 'string') {
                    value = baseToString(value);
                    other = baseToString(other);
                  } else {
                    value = baseToNumber(value);
                    other = baseToNumber(other);
                  }
                  result = operator(value, other);
                }
                return result;
              };
            }

            /**
             * Creates a function like `_.over`.
             *
             * @private
             * @param {Function} arrayFunc The function to iterate over iteratees.
             * @returns {Function} Returns the new over function.
             */
            function createOver(arrayFunc) {
              return flatRest(function (iteratees) {
                iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
                return baseRest(function (args) {
                  var thisArg = this;
                  return arrayFunc(iteratees, function (iteratee) {
                    return apply(iteratee, thisArg, args);
                  });
                });
              });
            }

            /**
             * Creates the padding for `string` based on `length`. The `chars` string
             * is truncated if the number of characters exceeds `length`.
             *
             * @private
             * @param {number} length The padding length.
             * @param {string} [chars=' '] The string used as padding.
             * @returns {string} Returns the padding for `string`.
             */
            function createPadding(length, chars) {
              chars = chars === undefined ? ' ' : baseToString(chars);

              var charsLength = chars.length;
              if (charsLength < 2) {
                return charsLength ? baseRepeat(chars, length) : chars;
              }
              var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
              return hasUnicode(chars)
                ? castSlice(stringToArray(result), 0, length).join('')
                : result.slice(0, length);
            }

            /**
             * Creates a function that wraps `func` to invoke it with the `this` binding
             * of `thisArg` and `partials` prepended to the arguments it receives.
             *
             * @private
             * @param {Function} func The function to wrap.
             * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
             * @param {*} thisArg The `this` binding of `func`.
             * @param {Array} partials The arguments to prepend to those provided to
             *  the new function.
             * @returns {Function} Returns the new wrapped function.
             */
            function createPartial(func, bitmask, thisArg, partials) {
              var isBind = bitmask & WRAP_BIND_FLAG,
                Ctor = createCtor(func);

              function wrapper() {
                var argsIndex = -1,
                  argsLength = arguments.length,
                  leftIndex = -1,
                  leftLength = partials.length,
                  args = Array(leftLength + argsLength),
                  fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;

                while (++leftIndex < leftLength) {
                  args[leftIndex] = partials[leftIndex];
                }
                while (argsLength--) {
                  args[leftIndex++] = arguments[++argsIndex];
                }
                return apply(fn, isBind ? thisArg : this, args);
              }
              return wrapper;
            }

            /**
             * Creates a `_.range` or `_.rangeRight` function.
             *
             * @private
             * @param {boolean} [fromRight] Specify iterating from right to left.
             * @returns {Function} Returns the new range function.
             */
            function createRange(fromRight) {
              return function (start, end, step) {
                if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {
                  end = step = undefined;
                }
                // Ensure the sign of `-0` is preserved.
                start = toFinite(start);
                if (end === undefined) {
                  end = start;
                  start = 0;
                } else {
                  end = toFinite(end);
                }
                step = step === undefined ? (start < end ? 1 : -1) : toFinite(step);
                return baseRange(start, end, step, fromRight);
              };
            }

            /**
             * Creates a function that performs a relational operation on two values.
             *
             * @private
             * @param {Function} operator The function to perform the operation.
             * @returns {Function} Returns the new relational operation function.
             */
            function createRelationalOperation(operator) {
              return function (value, other) {
                if (!(typeof value == 'string' && typeof other == 'string')) {
                  value = toNumber(value);
                  other = toNumber(other);
                }
                return operator(value, other);
              };
            }

            /**
             * Creates a function that wraps `func` to continue currying.
             *
             * @private
             * @param {Function} func The function to wrap.
             * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
             * @param {Function} wrapFunc The function to create the `func` wrapper.
             * @param {*} placeholder The placeholder value.
             * @param {*} [thisArg] The `this` binding of `func`.
             * @param {Array} [partials] The arguments to prepend to those provided to
             *  the new function.
             * @param {Array} [holders] The `partials` placeholder indexes.
             * @param {Array} [argPos] The argument positions of the new function.
             * @param {number} [ary] The arity cap of `func`.
             * @param {number} [arity] The arity of `func`.
             * @returns {Function} Returns the new wrapped function.
             */
            function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {
              var isCurry = bitmask & WRAP_CURRY_FLAG,
                newHolders = isCurry ? holders : undefined,
                newHoldersRight = isCurry ? undefined : holders,
                newPartials = isCurry ? partials : undefined,
                newPartialsRight = isCurry ? undefined : partials;

              bitmask |= (isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG);
              bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);

              if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
                bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
              }
              var newData = [
                func, bitmask, thisArg, newPartials, newHolders, newPartialsRight,
                newHoldersRight, argPos, ary, arity
              ];

              var result = wrapFunc.apply(undefined, newData);
              if (isLaziable(func)) {
                setData(result, newData);
              }
              result.placeholder = placeholder;
              return setWrapToString(result, func, bitmask);
            }

            /**
             * Creates a function like `_.round`.
             *
             * @private
             * @param {string} methodName The name of the `Math` method to use when rounding.
             * @returns {Function} Returns the new round function.
             */
            function createRound(methodName) {
              var func = Math[methodName];
              return function (number, precision) {
                number = toNumber(number);
                precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);
                if (precision) {
                  // Shift with exponential notation to avoid floating-point issues.
                  // See [MDN](https://mdn.io/round#Examples) for more details.
                  var pair = (toString(number) + 'e').split('e'),
                    value = func(pair[0] + 'e' + (+pair[1] + precision));

                  pair = (toString(value) + 'e').split('e');
                  return +(pair[0] + 'e' + (+pair[1] - precision));
                }
                return func(number);
              };
            }

            /**
             * Creates a set object of `values`.
             *
             * @private
             * @param {Array} values The values to add to the set.
             * @returns {Object} Returns the new set.
             */
            var createSet = !(Set && (1 / setToArray(new Set([, -0]))[1]) == INFINITY) ? noop : function (values) {
              return new Set(values);
            };

            /**
             * Creates a `_.toPairs` or `_.toPairsIn` function.
             *
             * @private
             * @param {Function} keysFunc The function to get the keys of a given object.
             * @returns {Function} Returns the new pairs function.
             */
            function createToPairs(keysFunc) {
              return function (object) {
                var tag = getTag(object);
                if (tag == mapTag) {
                  return mapToArray(object);
                }
                if (tag == setTag) {
                  return setToPairs(object);
                }
                return baseToPairs(object, keysFunc(object));
              };
            }

            /**
             * Creates a function that either curries or invokes `func` with optional
             * `this` binding and partially applied arguments.
             *
             * @private
             * @param {Function|string} func The function or method name to wrap.
             * @param {number} bitmask The bitmask flags.
             *    1 - `_.bind`
             *    2 - `_.bindKey`
             *    4 - `_.curry` or `_.curryRight` of a bound function
             *    8 - `_.curry`
             *   16 - `_.curryRight`
             *   32 - `_.partial`
             *   64 - `_.partialRight`
             *  128 - `_.rearg`
             *  256 - `_.ary`
             *  512 - `_.flip`
             * @param {*} [thisArg] The `this` binding of `func`.
             * @param {Array} [partials] The arguments to be partially applied.
             * @param {Array} [holders] The `partials` placeholder indexes.
             * @param {Array} [argPos] The argument positions of the new function.
             * @param {number} [ary] The arity cap of `func`.
             * @param {number} [arity] The arity of `func`.
             * @returns {Function} Returns the new wrapped function.
             */
            function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
              var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
              if (!isBindKey && typeof func != 'function') {
                throw new TypeError(FUNC_ERROR_TEXT);
              }
              var length = partials ? partials.length : 0;
              if (!length) {
                bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
                partials = holders = undefined;
              }
              ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);
              arity = arity === undefined ? arity : toInteger(arity);
              length -= holders ? holders.length : 0;

              if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
                var partialsRight = partials,
                  holdersRight = holders;

                partials = holders = undefined;
              }
              var data = isBindKey ? undefined : getData(func);

              var newData = [
                func, bitmask, thisArg, partials, holders, partialsRight, holdersRight,
                argPos, ary, arity
              ];

              if (data) {
                mergeData(newData, data);
              }
              func = newData[0];
              bitmask = newData[1];
              thisArg = newData[2];
              partials = newData[3];
              holders = newData[4];
              arity = newData[9] = newData[9] === undefined
                ? (isBindKey ? 0 : func.length)
                : nativeMax(newData[9] - length, 0);

              if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {
                bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
              }
              if (!bitmask || bitmask == WRAP_BIND_FLAG) {
                var result = createBind(func, bitmask, thisArg);
              } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {
                result = createCurry(func, bitmask, arity);
              } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {
                result = createPartial(func, bitmask, thisArg, partials);
              } else {
                result = createHybrid.apply(undefined, newData);
              }
              var setter = data ? baseSetData : setData;
              return setWrapToString(setter(result, newData), func, bitmask);
            }

            /**
             * Used by `_.defaults` to customize its `_.assignIn` use to assign properties
             * of source objects to the destination object for all destination properties
             * that resolve to `undefined`.
             *
             * @private
             * @param {*} objValue The destination value.
             * @param {*} srcValue The source value.
             * @param {string} key The key of the property to assign.
             * @param {Object} object The parent object of `objValue`.
             * @returns {*} Returns the value to assign.
             */
            function customDefaultsAssignIn(objValue, srcValue, key, object) {
              if (objValue === undefined ||
                (eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key))) {
                return srcValue;
              }
              return objValue;
            }

            /**
             * Used by `_.defaultsDeep` to customize its `_.merge` use to merge source
             * objects into destination objects that are passed thru.
             *
             * @private
             * @param {*} objValue The destination value.
             * @param {*} srcValue The source value.
             * @param {string} key The key of the property to merge.
             * @param {Object} object The parent object of `objValue`.
             * @param {Object} source The parent object of `srcValue`.
             * @param {Object} [stack] Tracks traversed source values and their merged
             *  counterparts.
             * @returns {*} Returns the value to assign.
             */
            function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
              if (isObject(objValue) && isObject(srcValue)) {
                // Recursively merge objects and arrays (susceptible to call stack limits).
                stack.set(srcValue, objValue);
                baseMerge(objValue, srcValue, undefined, customDefaultsMerge, stack);
                stack['delete'](srcValue);
              }
              return objValue;
            }

            /**
             * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain
             * objects.
             *
             * @private
             * @param {*} value The value to inspect.
             * @param {string} key The key of the property to inspect.
             * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.
             */
            function customOmitClone(value) {
              return isPlainObject(value) ? undefined : value;
            }

            /**
             * A specialized version of `baseIsEqualDeep` for arrays with support for
             * partial deep comparisons.
             *
             * @private
             * @param {Array} array The array to compare.
             * @param {Array} other The other array to compare.
             * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
             * @param {Function} customizer The function to customize comparisons.
             * @param {Function} equalFunc The function to determine equivalents of values.
             * @param {Object} stack Tracks traversed `array` and `other` objects.
             * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
             */
            function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
              var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
                arrLength = array.length,
                othLength = other.length;

              if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
                return false;
              }
              // Assume cyclic values are equal.
              var stacked = stack.get(array);
              if (stacked && stack.get(other)) {
                return stacked == other;
              }
              var index = -1,
                result = true,
                seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;

              stack.set(array, other);
              stack.set(other, array);

              // Ignore non-index properties.
              while (++index < arrLength) {
                var arrValue = array[index],
                  othValue = other[index];

                if (customizer) {
                  var compared = isPartial
                    ? customizer(othValue, arrValue, index, other, array, stack)
                    : customizer(arrValue, othValue, index, array, other, stack);
                }
                if (compared !== undefined) {
                  if (compared) {
                    continue;
                  }
                  result = false;
                  break;
                }
                // Recursively compare arrays (susceptible to call stack limits).
                if (seen) {
                  if (!arraySome(other, function (othValue, othIndex) {
                    if (!cacheHas(seen, othIndex) &&
                      (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
                      return seen.push(othIndex);
                    }
                  })) {
                    result = false;
                    break;
                  }
                } else if (!(
                  arrValue === othValue ||
                  equalFunc(arrValue, othValue, bitmask, customizer, stack)
                )) {
                  result = false;
                  break;
                }
              }
              stack['delete'](array);
              stack['delete'](other);
              return result;
            }

            /**
             * A specialized version of `baseIsEqualDeep` for comparing objects of
             * the same `toStringTag`.
             *
             * **Note:** This function only supports comparing values with tags of
             * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
             *
             * @private
             * @param {Object} object The object to compare.
             * @param {Object} other The other object to compare.
             * @param {string} tag The `toStringTag` of the objects to compare.
             * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
             * @param {Function} customizer The function to customize comparisons.
             * @param {Function} equalFunc The function to determine equivalents of values.
             * @param {Object} stack Tracks traversed `object` and `other` objects.
             * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
             */
            function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
              switch (tag) {
                case dataViewTag:
                  if ((object.byteLength != other.byteLength) ||
                    (object.byteOffset != other.byteOffset)) {
                    return false;
                  }
                  object = object.buffer;
                  other = other.buffer;

                case arrayBufferTag:
                  if ((object.byteLength != other.byteLength) ||
                    !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
                    return false;
                  }
                  return true;

                case boolTag:
                case dateTag:
                case numberTag:
                  // Coerce booleans to `1` or `0` and dates to milliseconds.
                  // Invalid dates are coerced to `NaN`.
                  return eq(+object, +other);

                case errorTag:
                  return object.name == other.name && object.message == other.message;

                case regexpTag:
                case stringTag:
                  // Coerce regexes to strings and treat strings, primitives and objects,
                  // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
                  // for more details.
                  return object == (other + '');

                case mapTag:
                  var convert = mapToArray;

                case setTag:
                  var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
                  convert || (convert = setToArray);

                  if (object.size != other.size && !isPartial) {
                    return false;
                  }
                  // Assume cyclic values are equal.
                  var stacked = stack.get(object);
                  if (stacked) {
                    return stacked == other;
                  }
                  bitmask |= COMPARE_UNORDERED_FLAG;

                  // Recursively compare objects (susceptible to call stack limits).
                  stack.set(object, other);
                  var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
                  stack['delete'](object);
                  return result;

                case symbolTag:
                  if (symbolValueOf) {
                    return symbolValueOf.call(object) == symbolValueOf.call(other);
                  }
              }
              return false;
            }

            /**
             * A specialized version of `baseIsEqualDeep` for objects with support for
             * partial deep comparisons.
             *
             * @private
             * @param {Object} object The object to compare.
             * @param {Object} other The other object to compare.
             * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
             * @param {Function} customizer The function to customize comparisons.
             * @param {Function} equalFunc The function to determine equivalents of values.
             * @param {Object} stack Tracks traversed `object` and `other` objects.
             * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
             */
            function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
              var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
                objProps = getAllKeys(object),
                objLength = objProps.length,
                othProps = getAllKeys(other),
                othLength = othProps.length;

              if (objLength != othLength && !isPartial) {
                return false;
              }
              var index = objLength;
              while (index--) {
                var key = objProps[index];
                if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
                  return false;
                }
              }
              // Assume cyclic values are equal.
              var stacked = stack.get(object);
              if (stacked && stack.get(other)) {
                return stacked == other;
              }
              var result = true;
              stack.set(object, other);
              stack.set(other, object);

              var skipCtor = isPartial;
              while (++index < objLength) {
                key = objProps[index];
                var objValue = object[key],
                  othValue = other[key];

                if (customizer) {
                  var compared = isPartial
                    ? customizer(othValue, objValue, key, other, object, stack)
                    : customizer(objValue, othValue, key, object, other, stack);
                }
                // Recursively compare objects (susceptible to call stack limits).
                if (!(compared === undefined
                  ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
                  : compared
                )) {
                  result = false;
                  break;
                }
                skipCtor || (skipCtor = key == 'constructor');
              }
              if (result && !skipCtor) {
                var objCtor = object.constructor,
                  othCtor = other.constructor;

                // Non `Object` object instances with different constructors are not equal.
                if (objCtor != othCtor &&
                  ('constructor' in object && 'constructor' in other) &&
                  !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
                    typeof othCtor == 'function' && othCtor instanceof othCtor)) {
                  result = false;
                }
              }
              stack['delete'](object);
              stack['delete'](other);
              return result;
            }

            /**
             * A specialized version of `baseRest` which flattens the rest array.
             *
             * @private
             * @param {Function} func The function to apply a rest parameter to.
             * @returns {Function} Returns the new function.
             */
            function flatRest(func) {
              return setToString(overRest(func, undefined, flatten), func + '');
            }

            /**
             * Creates an array of own enumerable property names and symbols of `object`.
             *
             * @private
             * @param {Object} object The object to query.
             * @returns {Array} Returns the array of property names and symbols.
             */
            function getAllKeys(object) {
              return baseGetAllKeys(object, keys, getSymbols);
            }

            /**
             * Creates an array of own and inherited enumerable property names and
             * symbols of `object`.
             *
             * @private
             * @param {Object} object The object to query.
             * @returns {Array} Returns the array of property names and symbols.
             */
            function getAllKeysIn(object) {
              return baseGetAllKeys(object, keysIn, getSymbolsIn);
            }

            /**
             * Gets metadata for `func`.
             *
             * @private
             * @param {Function} func The function to query.
             * @returns {*} Returns the metadata for `func`.
             */
            var getData = !metaMap ? noop : function (func) {
              return metaMap.get(func);
            };

            /**
             * Gets the name of `func`.
             *
             * @private
             * @param {Function} func The function to query.
             * @returns {string} Returns the function name.
             */
            function getFuncName(func) {
              var result = (func.name + ''),
                array = realNames[result],
                length = hasOwnProperty.call(realNames, result) ? array.length : 0;

              while (length--) {
                var data = array[length],
                  otherFunc = data.func;
                if (otherFunc == null || otherFunc == func) {
                  return data.name;
                }
              }
              return result;
            }

            /**
             * Gets the argument placeholder value for `func`.
             *
             * @private
             * @param {Function} func The function to inspect.
             * @returns {*} Returns the placeholder value.
             */
            function getHolder(func) {
              var object = hasOwnProperty.call(lodash, 'placeholder') ? lodash : func;
              return object.placeholder;
            }

            /**
             * Gets the appropriate "iteratee" function. If `_.iteratee` is customized,
             * this function returns the custom method, otherwise it returns `baseIteratee`.
             * If arguments are provided, the chosen function is invoked with them and
             * its result is returned.
             *
             * @private
             * @param {*} [value] The value to convert to an iteratee.
             * @param {number} [arity] The arity of the created iteratee.
             * @returns {Function} Returns the chosen function or its result.
             */
            function getIteratee() {
              var result = lodash.iteratee || iteratee;
              result = result === iteratee ? baseIteratee : result;
              return arguments.length ? result(arguments[0], arguments[1]) : result;
            }

            /**
             * Gets the data for `map`.
             *
             * @private
             * @param {Object} map The map to query.
             * @param {string} key The reference key.
             * @returns {*} Returns the map data.
             */
            function getMapData(map, key) {
              var data = map.__data__;
              return isKeyable(key)
                ? data[typeof key == 'string' ? 'string' : 'hash']
                : data.map;
            }

            /**
             * Gets the property names, values, and compare flags of `object`.
             *
             * @private
             * @param {Object} object The object to query.
             * @returns {Array} Returns the match data of `object`.
             */
            function getMatchData(object) {
              var result = keys(object),
                length = result.length;

              while (length--) {
                var key = result[length],
                  value = object[key];

                result[length] = [key, value, isStrictComparable(value)];
              }
              return result;
            }

            /**
             * Gets the native function at `key` of `object`.
             *
             * @private
             * @param {Object} object The object to query.
             * @param {string} key The key of the method to get.
             * @returns {*} Returns the function if it's native, else `undefined`.
             */
            function getNative(object, key) {
              var value = getValue(object, key);
              return baseIsNative(value) ? value : undefined;
            }

            /**
             * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
             *
             * @private
             * @param {*} value The value to query.
             * @returns {string} Returns the raw `toStringTag`.
             */
            function getRawTag(value) {
              var isOwn = hasOwnProperty.call(value, symToStringTag),
                tag = value[symToStringTag];

              try {
                value[symToStringTag] = undefined;
                var unmasked = true;
              } catch (e) { }

              var result = nativeObjectToString.call(value);
              if (unmasked) {
                if (isOwn) {
                  value[symToStringTag] = tag;
                } else {
                  delete value[symToStringTag];
                }
              }
              return result;
            }

            /**
             * Creates an array of the own enumerable symbols of `object`.
             *
             * @private
             * @param {Object} object The object to query.
             * @returns {Array} Returns the array of symbols.
             */
            var getSymbols = !nativeGetSymbols ? stubArray : function (object) {
              if (object == null) {
                return [];
              }
              object = Object(object);
              return arrayFilter(nativeGetSymbols(object), function (symbol) {
                return propertyIsEnumerable.call(object, symbol);
              });
            };

            /**
             * Creates an array of the own and inherited enumerable symbols of `object`.
             *
             * @private
             * @param {Object} object The object to query.
             * @returns {Array} Returns the array of symbols.
             */
            var getSymbolsIn = !nativeGetSymbols ? stubArray : function (object) {
              var result = [];
              while (object) {
                arrayPush(result, getSymbols(object));
                object = getPrototype(object);
              }
              return result;
            };

            /**
             * Gets the `toStringTag` of `value`.
             *
             * @private
             * @param {*} value The value to query.
             * @returns {string} Returns the `toStringTag`.
             */
            var getTag = baseGetTag;

            // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
            if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
              (Map && getTag(new Map) != mapTag) ||
              (Promise && getTag(Promise.resolve()) != promiseTag) ||
              (Set && getTag(new Set) != setTag) ||
              (WeakMap && getTag(new WeakMap) != weakMapTag)) {
              getTag = function (value) {
                var result = baseGetTag(value),
                  Ctor = result == objectTag ? value.constructor : undefined,
                  ctorString = Ctor ? toSource(Ctor) : '';

                if (ctorString) {
                  switch (ctorString) {
                    case dataViewCtorString: return dataViewTag;
                    case mapCtorString: return mapTag;
                    case promiseCtorString: return promiseTag;
                    case setCtorString: return setTag;
                    case weakMapCtorString: return weakMapTag;
                  }
                }
                return result;
              };
            }

            /**
             * Gets the view, applying any `transforms` to the `start` and `end` positions.
             *
             * @private
             * @param {number} start The start of the view.
             * @param {number} end The end of the view.
             * @param {Array} transforms The transformations to apply to the view.
             * @returns {Object} Returns an object containing the `start` and `end`
             *  positions of the view.
             */
            function getView(start, end, transforms) {
              var index = -1,
                length = transforms.length;

              while (++index < length) {
                var data = transforms[index],
                  size = data.size;

                switch (data.type) {
                  case 'drop': start += size; break;
                  case 'dropRight': end -= size; break;
                  case 'take': end = nativeMin(end, start + size); break;
                  case 'takeRight': start = nativeMax(start, end - size); break;
                }
              }
              return { 'start': start, 'end': end };
            }

            /**
             * Extracts wrapper details from the `source` body comment.
             *
             * @private
             * @param {string} source The source to inspect.
             * @returns {Array} Returns the wrapper details.
             */
            function getWrapDetails(source) {
              var match = source.match(reWrapDetails);
              return match ? match[1].split(reSplitDetails) : [];
            }

            /**
             * Checks if `path` exists on `object`.
             *
             * @private
             * @param {Object} object The object to query.
             * @param {Array|string} path The path to check.
             * @param {Function} hasFunc The function to check properties.
             * @returns {boolean} Returns `true` if `path` exists, else `false`.
             */
            function hasPath(object, path, hasFunc) {
              path = castPath(path, object);

              var index = -1,
                length = path.length,
                result = false;

              while (++index < length) {
                var key = toKey(path[index]);
                if (!(result = object != null && hasFunc(object, key))) {
                  break;
                }
                object = object[key];
              }
              if (result || ++index != length) {
                return result;
              }
              length = object == null ? 0 : object.length;
              return !!length && isLength(length) && isIndex(key, length) &&
                (isArray(object) || isArguments(object));
            }

            /**
             * Initializes an array clone.
             *
             * @private
             * @param {Array} array The array to clone.
             * @returns {Array} Returns the initialized clone.
             */
            function initCloneArray(array) {
              var length = array.length,
                result = new array.constructor(length);

              // Add properties assigned by `RegExp#exec`.
              if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
                result.index = array.index;
                result.input = array.input;
              }
              return result;
            }

            /**
             * Initializes an object clone.
             *
             * @private
             * @param {Object} object The object to clone.
             * @returns {Object} Returns the initialized clone.
             */
            function initCloneObject(object) {
              return (typeof object.constructor == 'function' && !isPrototype(object))
                ? baseCreate(getPrototype(object))
                : {};
            }

            /**
             * Initializes an object clone based on its `toStringTag`.
             *
             * **Note:** This function only supports cloning values with tags of
             * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
             *
             * @private
             * @param {Object} object The object to clone.
             * @param {string} tag The `toStringTag` of the object to clone.
             * @param {boolean} [isDeep] Specify a deep clone.
             * @returns {Object} Returns the initialized clone.
             */
            function initCloneByTag(object, tag, isDeep) {
              var Ctor = object.constructor;
              switch (tag) {
                case arrayBufferTag:
                  return cloneArrayBuffer(object);

                case boolTag:
                case dateTag:
                  return new Ctor(+object);

                case dataViewTag:
                  return cloneDataView(object, isDeep);

                case float32Tag: case float64Tag:
                case int8Tag: case int16Tag: case int32Tag:
                case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
                  return cloneTypedArray(object, isDeep);

                case mapTag:
                  return new Ctor;

                case numberTag:
                case stringTag:
                  return new Ctor(object);

                case regexpTag:
                  return cloneRegExp(object);

                case setTag:
                  return new Ctor;

                case symbolTag:
                  return cloneSymbol(object);
              }
            }

            /**
             * Inserts wrapper `details` in a comment at the top of the `source` body.
             *
             * @private
             * @param {string} source The source to modify.
             * @returns {Array} details The details to insert.
             * @returns {string} Returns the modified source.
             */
            function insertWrapDetails(source, details) {
              var length = details.length;
              if (!length) {
                return source;
              }
              var lastIndex = length - 1;
              details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];
              details = details.join(length > 2 ? ', ' : ' ');
              return source.replace(reWrapComment, '{\n/* [wrapped with ' + details + '] */\n');
            }

            /**
             * Checks if `value` is a flattenable `arguments` object or array.
             *
             * @private
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
             */
            function isFlattenable(value) {
              return isArray(value) || isArguments(value) ||
                !!(spreadableSymbol && value && value[spreadableSymbol]);
            }

            /**
             * Checks if `value` is a valid array-like index.
             *
             * @private
             * @param {*} value The value to check.
             * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
             * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
             */
            function isIndex(value, length) {
              var type = typeof value;
              length = length == null ? MAX_SAFE_INTEGER : length;

              return !!length &&
                (type == 'number' ||
                  (type != 'symbol' && reIsUint.test(value))) &&
                (value > -1 && value % 1 == 0 && value < length);
            }

            /**
             * Checks if the given arguments are from an iteratee call.
             *
             * @private
             * @param {*} value The potential iteratee value argument.
             * @param {*} index The potential iteratee index or key argument.
             * @param {*} object The potential iteratee object argument.
             * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
             *  else `false`.
             */
            function isIterateeCall(value, index, object) {
              if (!isObject(object)) {
                return false;
              }
              var type = typeof index;
              if (type == 'number'
                ? (isArrayLike(object) && isIndex(index, object.length))
                : (type == 'string' && index in object)
              ) {
                return eq(object[index], value);
              }
              return false;
            }

            /**
             * Checks if `value` is a property name and not a property path.
             *
             * @private
             * @param {*} value The value to check.
             * @param {Object} [object] The object to query keys on.
             * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
             */
            function isKey(value, object) {
              if (isArray(value)) {
                return false;
              }
              var type = typeof value;
              if (type == 'number' || type == 'symbol' || type == 'boolean' ||
                value == null || isSymbol(value)) {
                return true;
              }
              return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
                (object != null && value in Object(object));
            }

            /**
             * Checks if `value` is suitable for use as unique object key.
             *
             * @private
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
             */
            function isKeyable(value) {
              var type = typeof value;
              return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
                ? (value !== '__proto__')
                : (value === null);
            }

            /**
             * Checks if `func` has a lazy counterpart.
             *
             * @private
             * @param {Function} func The function to check.
             * @returns {boolean} Returns `true` if `func` has a lazy counterpart,
             *  else `false`.
             */
            function isLaziable(func) {
              var funcName = getFuncName(func),
                other = lodash[funcName];

              if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {
                return false;
              }
              if (func === other) {
                return true;
              }
              var data = getData(other);
              return !!data && func === data[0];
            }

            /**
             * Checks if `func` has its source masked.
             *
             * @private
             * @param {Function} func The function to check.
             * @returns {boolean} Returns `true` if `func` is masked, else `false`.
             */
            function isMasked(func) {
              return !!maskSrcKey && (maskSrcKey in func);
            }

            /**
             * Checks if `func` is capable of being masked.
             *
             * @private
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `func` is maskable, else `false`.
             */
            var isMaskable = coreJsData ? isFunction : stubFalse;

            /**
             * Checks if `value` is likely a prototype object.
             *
             * @private
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
             */
            function isPrototype(value) {
              var Ctor = value && value.constructor,
                proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

              return value === proto;
            }

            /**
             * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
             *
             * @private
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` if suitable for strict
             *  equality comparisons, else `false`.
             */
            function isStrictComparable(value) {
              return value === value && !isObject(value);
            }

            /**
             * A specialized version of `matchesProperty` for source values suitable
             * for strict equality comparisons, i.e. `===`.
             *
             * @private
             * @param {string} key The key of the property to get.
             * @param {*} srcValue The value to match.
             * @returns {Function} Returns the new spec function.
             */
            function matchesStrictComparable(key, srcValue) {
              return function (object) {
                if (object == null) {
                  return false;
                }
                return object[key] === srcValue &&
                  (srcValue !== undefined || (key in Object(object)));
              };
            }

            /**
             * A specialized version of `_.memoize` which clears the memoized function's
             * cache when it exceeds `MAX_MEMOIZE_SIZE`.
             *
             * @private
             * @param {Function} func The function to have its output memoized.
             * @returns {Function} Returns the new memoized function.
             */
            function memoizeCapped(func) {
              var result = memoize(func, function (key) {
                if (cache.size === MAX_MEMOIZE_SIZE) {
                  cache.clear();
                }
                return key;
              });

              var cache = result.cache;
              return result;
            }

            /**
             * Merges the function metadata of `source` into `data`.
             *
             * Merging metadata reduces the number of wrappers used to invoke a function.
             * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
             * may be applied regardless of execution order. Methods like `_.ary` and
             * `_.rearg` modify function arguments, making the order in which they are
             * executed important, preventing the merging of metadata. However, we make
             * an exception for a safe combined case where curried functions have `_.ary`
             * and or `_.rearg` applied.
             *
             * @private
             * @param {Array} data The destination metadata.
             * @param {Array} source The source metadata.
             * @returns {Array} Returns `data`.
             */
            function mergeData(data, source) {
              var bitmask = data[1],
                srcBitmask = source[1],
                newBitmask = bitmask | srcBitmask,
                isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);

              var isCombo =
                ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_CURRY_FLAG)) ||
                ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_REARG_FLAG) && (data[7].length <= source[8])) ||
                ((srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG)) && (source[7].length <= source[8]) && (bitmask == WRAP_CURRY_FLAG));

              // Exit early if metadata can't be merged.
              if (!(isCommon || isCombo)) {
                return data;
              }
              // Use source `thisArg` if available.
              if (srcBitmask & WRAP_BIND_FLAG) {
                data[2] = source[2];
                // Set when currying a bound function.
                newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
              }
              // Compose partial arguments.
              var value = source[3];
              if (value) {
                var partials = data[3];
                data[3] = partials ? composeArgs(partials, value, source[4]) : value;
                data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
              }
              // Compose partial right arguments.
              value = source[5];
              if (value) {
                partials = data[5];
                data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
                data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
              }
              // Use source `argPos` if available.
              value = source[7];
              if (value) {
                data[7] = value;
              }
              // Use source `ary` if it's smaller.
              if (srcBitmask & WRAP_ARY_FLAG) {
                data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
              }
              // Use source `arity` if one is not provided.
              if (data[9] == null) {
                data[9] = source[9];
              }
              // Use source `func` and merge bitmasks.
              data[0] = source[0];
              data[1] = newBitmask;

              return data;
            }

            /**
             * This function is like
             * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
             * except that it includes inherited enumerable properties.
             *
             * @private
             * @param {Object} object The object to query.
             * @returns {Array} Returns the array of property names.
             */
            function nativeKeysIn(object) {
              var result = [];
              if (object != null) {
                for (var key in Object(object)) {
                  result.push(key);
                }
              }
              return result;
            }

            /**
             * Converts `value` to a string using `Object.prototype.toString`.
             *
             * @private
             * @param {*} value The value to convert.
             * @returns {string} Returns the converted string.
             */
            function objectToString(value) {
              return nativeObjectToString.call(value);
            }

            /**
             * A specialized version of `baseRest` which transforms the rest array.
             *
             * @private
             * @param {Function} func The function to apply a rest parameter to.
             * @param {number} [start=func.length-1] The start position of the rest parameter.
             * @param {Function} transform The rest array transform.
             * @returns {Function} Returns the new function.
             */
            function overRest(func, start, transform) {
              start = nativeMax(start === undefined ? (func.length - 1) : start, 0);
              return function () {
                var args = arguments,
                  index = -1,
                  length = nativeMax(args.length - start, 0),
                  array = Array(length);

                while (++index < length) {
                  array[index] = args[start + index];
                }
                index = -1;
                var otherArgs = Array(start + 1);
                while (++index < start) {
                  otherArgs[index] = args[index];
                }
                otherArgs[start] = transform(array);
                return apply(func, this, otherArgs);
              };
            }

            /**
             * Gets the parent value at `path` of `object`.
             *
             * @private
             * @param {Object} object The object to query.
             * @param {Array} path The path to get the parent value of.
             * @returns {*} Returns the parent value.
             */
            function parent(object, path) {
              return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
            }

            /**
             * Reorder `array` according to the specified indexes where the element at
             * the first index is assigned as the first element, the element at
             * the second index is assigned as the second element, and so on.
             *
             * @private
             * @param {Array} array The array to reorder.
             * @param {Array} indexes The arranged array indexes.
             * @returns {Array} Returns `array`.
             */
            function reorder(array, indexes) {
              var arrLength = array.length,
                length = nativeMin(indexes.length, arrLength),
                oldArray = copyArray(array);

              while (length--) {
                var index = indexes[length];
                array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;
              }
              return array;
            }

            /**
             * Sets metadata for `func`.
             *
             * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
             * period of time, it will trip its breaker and transition to an identity
             * function to avoid garbage collection pauses in V8. See
             * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)
             * for more details.
             *
             * @private
             * @param {Function} func The function to associate metadata with.
             * @param {*} data The metadata.
             * @returns {Function} Returns `func`.
             */
            var setData = shortOut(baseSetData);

            /**
             * A simple wrapper around the global [`setTimeout`](https://mdn.io/setTimeout).
             *
             * @private
             * @param {Function} func The function to delay.
             * @param {number} wait The number of milliseconds to delay invocation.
             * @returns {number|Object} Returns the timer id or timeout object.
             */
            var setTimeout = ctxSetTimeout || function (func, wait) {
              return root.setTimeout(func, wait);
            };

            /**
             * Sets the `toString` method of `func` to return `string`.
             *
             * @private
             * @param {Function} func The function to modify.
             * @param {Function} string The `toString` result.
             * @returns {Function} Returns `func`.
             */
            var setToString = shortOut(baseSetToString);

            /**
             * Sets the `toString` method of `wrapper` to mimic the source of `reference`
             * with wrapper details in a comment at the top of the source body.
             *
             * @private
             * @param {Function} wrapper The function to modify.
             * @param {Function} reference The reference function.
             * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
             * @returns {Function} Returns `wrapper`.
             */
            function setWrapToString(wrapper, reference, bitmask) {
              var source = (reference + '');
              return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
            }

            /**
             * Creates a function that'll short out and invoke `identity` instead
             * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
             * milliseconds.
             *
             * @private
             * @param {Function} func The function to restrict.
             * @returns {Function} Returns the new shortable function.
             */
            function shortOut(func) {
              var count = 0,
                lastCalled = 0;

              return function () {
                var stamp = nativeNow(),
                  remaining = HOT_SPAN - (stamp - lastCalled);

                lastCalled = stamp;
                if (remaining > 0) {
                  if (++count >= HOT_COUNT) {
                    return arguments[0];
                  }
                } else {
                  count = 0;
                }
                return func.apply(undefined, arguments);
              };
            }

            /**
             * A specialized version of `_.shuffle` which mutates and sets the size of `array`.
             *
             * @private
             * @param {Array} array The array to shuffle.
             * @param {number} [size=array.length] The size of `array`.
             * @returns {Array} Returns `array`.
             */
            function shuffleSelf(array, size) {
              var index = -1,
                length = array.length,
                lastIndex = length - 1;

              size = size === undefined ? length : size;
              while (++index < size) {
                var rand = baseRandom(index, lastIndex),
                  value = array[rand];

                array[rand] = array[index];
                array[index] = value;
              }
              array.length = size;
              return array;
            }

            /**
             * Converts `string` to a property path array.
             *
             * @private
             * @param {string} string The string to convert.
             * @returns {Array} Returns the property path array.
             */
            var stringToPath = memoizeCapped(function (string) {
              var result = [];
              if (string.charCodeAt(0) === 46 /* . */) {
                result.push('');
              }
              string.replace(rePropName, function (match, number, quote, subString) {
                result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));
              });
              return result;
            });

            /**
             * Converts `value` to a string key if it's not a string or symbol.
             *
             * @private
             * @param {*} value The value to inspect.
             * @returns {string|symbol} Returns the key.
             */
            function toKey(value) {
              if (typeof value == 'string' || isSymbol(value)) {
                return value;
              }
              var result = (value + '');
              return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
            }

            /**
             * Converts `func` to its source code.
             *
             * @private
             * @param {Function} func The function to convert.
             * @returns {string} Returns the source code.
             */
            function toSource(func) {
              if (func != null) {
                try {
                  return funcToString.call(func);
                } catch (e) { }
                try {
                  return (func + '');
                } catch (e) { }
              }
              return '';
            }

            /**
             * Updates wrapper `details` based on `bitmask` flags.
             *
             * @private
             * @returns {Array} details The details to modify.
             * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
             * @returns {Array} Returns `details`.
             */
            function updateWrapDetails(details, bitmask) {
              arrayEach(wrapFlags, function (pair) {
                var value = '_.' + pair[0];
                if ((bitmask & pair[1]) && !arrayIncludes(details, value)) {
                  details.push(value);
                }
              });
              return details.sort();
            }

            /**
             * Creates a clone of `wrapper`.
             *
             * @private
             * @param {Object} wrapper The wrapper to clone.
             * @returns {Object} Returns the cloned wrapper.
             */
            function wrapperClone(wrapper) {
              if (wrapper instanceof LazyWrapper) {
                return wrapper.clone();
              }
              var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
              result.__actions__ = copyArray(wrapper.__actions__);
              result.__index__ = wrapper.__index__;
              result.__values__ = wrapper.__values__;
              return result;
            }

            /*------------------------------------------------------------------------*/

            /**
             * Creates an array of elements split into groups the length of `size`.
             * If `array` can't be split evenly, the final chunk will be the remaining
             * elements.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Array
             * @param {Array} array The array to process.
             * @param {number} [size=1] The length of each chunk
             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
             * @returns {Array} Returns the new array of chunks.
             * @example
             *
             * _.chunk(['a', 'b', 'c', 'd'], 2);
             * // => [['a', 'b'], ['c', 'd']]
             *
             * _.chunk(['a', 'b', 'c', 'd'], 3);
             * // => [['a', 'b', 'c'], ['d']]
             */
            function chunk(array, size, guard) {
              if ((guard ? isIterateeCall(array, size, guard) : size === undefined)) {
                size = 1;
              } else {
                size = nativeMax(toInteger(size), 0);
              }
              var length = array == null ? 0 : array.length;
              if (!length || size < 1) {
                return [];
              }
              var index = 0,
                resIndex = 0,
                result = Array(nativeCeil(length / size));

              while (index < length) {
                result[resIndex++] = baseSlice(array, index, (index += size));
              }
              return result;
            }

            /**
             * Creates an array with all falsey values removed. The values `false`, `null`,
             * `0`, `""`, `undefined`, and `NaN` are falsey.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Array
             * @param {Array} array The array to compact.
             * @returns {Array} Returns the new array of filtered values.
             * @example
             *
             * _.compact([0, 1, false, 2, '', 3]);
             * // => [1, 2, 3]
             */
            function compact(array) {
              var index = -1,
                length = array == null ? 0 : array.length,
                resIndex = 0,
                result = [];

              while (++index < length) {
                var value = array[index];
                if (value) {
                  result[resIndex++] = value;
                }
              }
              return result;
            }

            /**
             * Creates a new array concatenating `array` with any additional arrays
             * and/or values.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {Array} array The array to concatenate.
             * @param {...*} [values] The values to concatenate.
             * @returns {Array} Returns the new concatenated array.
             * @example
             *
             * var array = [1];
             * var other = _.concat(array, 2, [3], [[4]]);
             *
             * console.log(other);
             * // => [1, 2, 3, [4]]
             *
             * console.log(array);
             * // => [1]
             */
            function concat() {
              var length = arguments.length;
              if (!length) {
                return [];
              }
              var args = Array(length - 1),
                array = arguments[0],
                index = length;

              while (index--) {
                args[index - 1] = arguments[index];
              }
              return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));
            }

            /**
             * Creates an array of `array` values not included in the other given arrays
             * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
             * for equality comparisons. The order and references of result values are
             * determined by the first array.
             *
             * **Note:** Unlike `_.pullAll`, this method returns a new array.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Array
             * @param {Array} array The array to inspect.
             * @param {...Array} [values] The values to exclude.
             * @returns {Array} Returns the new array of filtered values.
             * @see _.without, _.xor
             * @example
             *
             * _.difference([2, 1], [2, 3]);
             * // => [1]
             */
            var difference = baseRest(function (array, values) {
              return isArrayLikeObject(array)
                ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true))
                : [];
            });

            /**
             * This method is like `_.difference` except that it accepts `iteratee` which
             * is invoked for each element of `array` and `values` to generate the criterion
             * by which they're compared. The order and references of result values are
             * determined by the first array. The iteratee is invoked with one argument:
             * (value).
             *
             * **Note:** Unlike `_.pullAllBy`, this method returns a new array.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {Array} array The array to inspect.
             * @param {...Array} [values] The values to exclude.
             * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
             * @returns {Array} Returns the new array of filtered values.
             * @example
             *
             * _.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);
             * // => [1.2]
             *
             * // The `_.property` iteratee shorthand.
             * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');
             * // => [{ 'x': 2 }]
             */
            var differenceBy = baseRest(function (array, values) {
              var iteratee = last(values);
              if (isArrayLikeObject(iteratee)) {
                iteratee = undefined;
              }
              return isArrayLikeObject(array)
                ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), getIteratee(iteratee, 2))
                : [];
            });

            /**
             * This method is like `_.difference` except that it accepts `comparator`
             * which is invoked to compare elements of `array` to `values`. The order and
             * references of result values are determined by the first array. The comparator
             * is invoked with two arguments: (arrVal, othVal).
             *
             * **Note:** Unlike `_.pullAllWith`, this method returns a new array.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {Array} array The array to inspect.
             * @param {...Array} [values] The values to exclude.
             * @param {Function} [comparator] The comparator invoked per element.
             * @returns {Array} Returns the new array of filtered values.
             * @example
             *
             * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
             *
             * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);
             * // => [{ 'x': 2, 'y': 1 }]
             */
            var differenceWith = baseRest(function (array, values) {
              var comparator = last(values);
              if (isArrayLikeObject(comparator)) {
                comparator = undefined;
              }
              return isArrayLikeObject(array)
                ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined, comparator)
                : [];
            });

            /**
             * Creates a slice of `array` with `n` elements dropped from the beginning.
             *
             * @static
             * @memberOf _
             * @since 0.5.0
             * @category Array
             * @param {Array} array The array to query.
             * @param {number} [n=1] The number of elements to drop.
             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
             * @returns {Array} Returns the slice of `array`.
             * @example
             *
             * _.drop([1, 2, 3]);
             * // => [2, 3]
             *
             * _.drop([1, 2, 3], 2);
             * // => [3]
             *
             * _.drop([1, 2, 3], 5);
             * // => []
             *
             * _.drop([1, 2, 3], 0);
             * // => [1, 2, 3]
             */
            function drop(array, n, guard) {
              var length = array == null ? 0 : array.length;
              if (!length) {
                return [];
              }
              n = (guard || n === undefined) ? 1 : toInteger(n);
              return baseSlice(array, n < 0 ? 0 : n, length);
            }

            /**
             * Creates a slice of `array` with `n` elements dropped from the end.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Array
             * @param {Array} array The array to query.
             * @param {number} [n=1] The number of elements to drop.
             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
             * @returns {Array} Returns the slice of `array`.
             * @example
             *
             * _.dropRight([1, 2, 3]);
             * // => [1, 2]
             *
             * _.dropRight([1, 2, 3], 2);
             * // => [1]
             *
             * _.dropRight([1, 2, 3], 5);
             * // => []
             *
             * _.dropRight([1, 2, 3], 0);
             * // => [1, 2, 3]
             */
            function dropRight(array, n, guard) {
              var length = array == null ? 0 : array.length;
              if (!length) {
                return [];
              }
              n = (guard || n === undefined) ? 1 : toInteger(n);
              n = length - n;
              return baseSlice(array, 0, n < 0 ? 0 : n);
            }

            /**
             * Creates a slice of `array` excluding elements dropped from the end.
             * Elements are dropped until `predicate` returns falsey. The predicate is
             * invoked with three arguments: (value, index, array).
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Array
             * @param {Array} array The array to query.
             * @param {Function} [predicate=_.identity] The function invoked per iteration.
             * @returns {Array} Returns the slice of `array`.
             * @example
             *
             * var users = [
             *   { 'user': 'barney',  'active': true },
             *   { 'user': 'fred',    'active': false },
             *   { 'user': 'pebbles', 'active': false }
             * ];
             *
             * _.dropRightWhile(users, function(o) { return !o.active; });
             * // => objects for ['barney']
             *
             * // The `_.matches` iteratee shorthand.
             * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });
             * // => objects for ['barney', 'fred']
             *
             * // The `_.matchesProperty` iteratee shorthand.
             * _.dropRightWhile(users, ['active', false]);
             * // => objects for ['barney']
             *
             * // The `_.property` iteratee shorthand.
             * _.dropRightWhile(users, 'active');
             * // => objects for ['barney', 'fred', 'pebbles']
             */
            function dropRightWhile(array, predicate) {
              return (array && array.length)
                ? baseWhile(array, getIteratee(predicate, 3), true, true)
                : [];
            }

            /**
             * Creates a slice of `array` excluding elements dropped from the beginning.
             * Elements are dropped until `predicate` returns falsey. The predicate is
             * invoked with three arguments: (value, index, array).
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Array
             * @param {Array} array The array to query.
             * @param {Function} [predicate=_.identity] The function invoked per iteration.
             * @returns {Array} Returns the slice of `array`.
             * @example
             *
             * var users = [
             *   { 'user': 'barney',  'active': false },
             *   { 'user': 'fred',    'active': false },
             *   { 'user': 'pebbles', 'active': true }
             * ];
             *
             * _.dropWhile(users, function(o) { return !o.active; });
             * // => objects for ['pebbles']
             *
             * // The `_.matches` iteratee shorthand.
             * _.dropWhile(users, { 'user': 'barney', 'active': false });
             * // => objects for ['fred', 'pebbles']
             *
             * // The `_.matchesProperty` iteratee shorthand.
             * _.dropWhile(users, ['active', false]);
             * // => objects for ['pebbles']
             *
             * // The `_.property` iteratee shorthand.
             * _.dropWhile(users, 'active');
             * // => objects for ['barney', 'fred', 'pebbles']
             */
            function dropWhile(array, predicate) {
              return (array && array.length)
                ? baseWhile(array, getIteratee(predicate, 3), true)
                : [];
            }

            /**
             * Fills elements of `array` with `value` from `start` up to, but not
             * including, `end`.
             *
             * **Note:** This method mutates `array`.
             *
             * @static
             * @memberOf _
             * @since 3.2.0
             * @category Array
             * @param {Array} array The array to fill.
             * @param {*} value The value to fill `array` with.
             * @param {number} [start=0] The start position.
             * @param {number} [end=array.length] The end position.
             * @returns {Array} Returns `array`.
             * @example
             *
             * var array = [1, 2, 3];
             *
             * _.fill(array, 'a');
             * console.log(array);
             * // => ['a', 'a', 'a']
             *
             * _.fill(Array(3), 2);
             * // => [2, 2, 2]
             *
             * _.fill([4, 6, 8, 10], '*', 1, 3);
             * // => [4, '*', '*', 10]
             */
            function fill(array, value, start, end) {
              var length = array == null ? 0 : array.length;
              if (!length) {
                return [];
              }
              if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
                start = 0;
                end = length;
              }
              return baseFill(array, value, start, end);
            }

            /**
             * This method is like `_.find` except that it returns the index of the first
             * element `predicate` returns truthy for instead of the element itself.
             *
             * @static
             * @memberOf _
             * @since 1.1.0
             * @category Array
             * @param {Array} array The array to inspect.
             * @param {Function} [predicate=_.identity] The function invoked per iteration.
             * @param {number} [fromIndex=0] The index to search from.
             * @returns {number} Returns the index of the found element, else `-1`.
             * @example
             *
             * var users = [
             *   { 'user': 'barney',  'active': false },
             *   { 'user': 'fred',    'active': false },
             *   { 'user': 'pebbles', 'active': true }
             * ];
             *
             * _.findIndex(users, function(o) { return o.user == 'barney'; });
             * // => 0
             *
             * // The `_.matches` iteratee shorthand.
             * _.findIndex(users, { 'user': 'fred', 'active': false });
             * // => 1
             *
             * // The `_.matchesProperty` iteratee shorthand.
             * _.findIndex(users, ['active', false]);
             * // => 0
             *
             * // The `_.property` iteratee shorthand.
             * _.findIndex(users, 'active');
             * // => 2
             */
            function findIndex(array, predicate, fromIndex) {
              var length = array == null ? 0 : array.length;
              if (!length) {
                return -1;
              }
              var index = fromIndex == null ? 0 : toInteger(fromIndex);
              if (index < 0) {
                index = nativeMax(length + index, 0);
              }
              return baseFindIndex(array, getIteratee(predicate, 3), index);
            }

            /**
             * This method is like `_.findIndex` except that it iterates over elements
             * of `collection` from right to left.
             *
             * @static
             * @memberOf _
             * @since 2.0.0
             * @category Array
             * @param {Array} array The array to inspect.
             * @param {Function} [predicate=_.identity] The function invoked per iteration.
             * @param {number} [fromIndex=array.length-1] The index to search from.
             * @returns {number} Returns the index of the found element, else `-1`.
             * @example
             *
             * var users = [
             *   { 'user': 'barney',  'active': true },
             *   { 'user': 'fred',    'active': false },
             *   { 'user': 'pebbles', 'active': false }
             * ];
             *
             * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });
             * // => 2
             *
             * // The `_.matches` iteratee shorthand.
             * _.findLastIndex(users, { 'user': 'barney', 'active': true });
             * // => 0
             *
             * // The `_.matchesProperty` iteratee shorthand.
             * _.findLastIndex(users, ['active', false]);
             * // => 2
             *
             * // The `_.property` iteratee shorthand.
             * _.findLastIndex(users, 'active');
             * // => 0
             */
            function findLastIndex(array, predicate, fromIndex) {
              var length = array == null ? 0 : array.length;
              if (!length) {
                return -1;
              }
              var index = length - 1;
              if (fromIndex !== undefined) {
                index = toInteger(fromIndex);
                index = fromIndex < 0
                  ? nativeMax(length + index, 0)
                  : nativeMin(index, length - 1);
              }
              return baseFindIndex(array, getIteratee(predicate, 3), index, true);
            }

            /**
             * Flattens `array` a single level deep.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Array
             * @param {Array} array The array to flatten.
             * @returns {Array} Returns the new flattened array.
             * @example
             *
             * _.flatten([1, [2, [3, [4]], 5]]);
             * // => [1, 2, [3, [4]], 5]
             */
            function flatten(array) {
              var length = array == null ? 0 : array.length;
              return length ? baseFlatten(array, 1) : [];
            }

            /**
             * Recursively flattens `array`.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Array
             * @param {Array} array The array to flatten.
             * @returns {Array} Returns the new flattened array.
             * @example
             *
             * _.flattenDeep([1, [2, [3, [4]], 5]]);
             * // => [1, 2, 3, 4, 5]
             */
            function flattenDeep(array) {
              var length = array == null ? 0 : array.length;
              return length ? baseFlatten(array, INFINITY) : [];
            }

            /**
             * Recursively flatten `array` up to `depth` times.
             *
             * @static
             * @memberOf _
             * @since 4.4.0
             * @category Array
             * @param {Array} array The array to flatten.
             * @param {number} [depth=1] The maximum recursion depth.
             * @returns {Array} Returns the new flattened array.
             * @example
             *
             * var array = [1, [2, [3, [4]], 5]];
             *
             * _.flattenDepth(array, 1);
             * // => [1, 2, [3, [4]], 5]
             *
             * _.flattenDepth(array, 2);
             * // => [1, 2, 3, [4], 5]
             */
            function flattenDepth(array, depth) {
              var length = array == null ? 0 : array.length;
              if (!length) {
                return [];
              }
              depth = depth === undefined ? 1 : toInteger(depth);
              return baseFlatten(array, depth);
            }

            /**
             * The inverse of `_.toPairs`; this method returns an object composed
             * from key-value `pairs`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {Array} pairs The key-value pairs.
             * @returns {Object} Returns the new object.
             * @example
             *
             * _.fromPairs([['a', 1], ['b', 2]]);
             * // => { 'a': 1, 'b': 2 }
             */
            function fromPairs(pairs) {
              var index = -1,
                length = pairs == null ? 0 : pairs.length,
                result = {};

              while (++index < length) {
                var pair = pairs[index];
                result[pair[0]] = pair[1];
              }
              return result;
            }

            /**
             * Gets the first element of `array`.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @alias first
             * @category Array
             * @param {Array} array The array to query.
             * @returns {*} Returns the first element of `array`.
             * @example
             *
             * _.head([1, 2, 3]);
             * // => 1
             *
             * _.head([]);
             * // => undefined
             */
            function head(array) {
              return (array && array.length) ? array[0] : undefined;
            }

            /**
             * Gets the index at which the first occurrence of `value` is found in `array`
             * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
             * for equality comparisons. If `fromIndex` is negative, it's used as the
             * offset from the end of `array`.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Array
             * @param {Array} array The array to inspect.
             * @param {*} value The value to search for.
             * @param {number} [fromIndex=0] The index to search from.
             * @returns {number} Returns the index of the matched value, else `-1`.
             * @example
             *
             * _.indexOf([1, 2, 1, 2], 2);
             * // => 1
             *
             * // Search from the `fromIndex`.
             * _.indexOf([1, 2, 1, 2], 2, 2);
             * // => 3
             */
            function indexOf(array, value, fromIndex) {
              var length = array == null ? 0 : array.length;
              if (!length) {
                return -1;
              }
              var index = fromIndex == null ? 0 : toInteger(fromIndex);
              if (index < 0) {
                index = nativeMax(length + index, 0);
              }
              return baseIndexOf(array, value, index);
            }

            /**
             * Gets all but the last element of `array`.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Array
             * @param {Array} array The array to query.
             * @returns {Array} Returns the slice of `array`.
             * @example
             *
             * _.initial([1, 2, 3]);
             * // => [1, 2]
             */
            function initial(array) {
              var length = array == null ? 0 : array.length;
              return length ? baseSlice(array, 0, -1) : [];
            }

            /**
             * Creates an array of unique values that are included in all given arrays
             * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
             * for equality comparisons. The order and references of result values are
             * determined by the first array.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Array
             * @param {...Array} [arrays] The arrays to inspect.
             * @returns {Array} Returns the new array of intersecting values.
             * @example
             *
             * _.intersection([2, 1], [2, 3]);
             * // => [2]
             */
            var intersection = baseRest(function (arrays) {
              var mapped = arrayMap(arrays, castArrayLikeObject);
              return (mapped.length && mapped[0] === arrays[0])
                ? baseIntersection(mapped)
                : [];
            });

            /**
             * This method is like `_.intersection` except that it accepts `iteratee`
             * which is invoked for each element of each `arrays` to generate the criterion
             * by which they're compared. The order and references of result values are
             * determined by the first array. The iteratee is invoked with one argument:
             * (value).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {...Array} [arrays] The arrays to inspect.
             * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
             * @returns {Array} Returns the new array of intersecting values.
             * @example
             *
             * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);
             * // => [2.1]
             *
             * // The `_.property` iteratee shorthand.
             * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
             * // => [{ 'x': 1 }]
             */
            var intersectionBy = baseRest(function (arrays) {
              var iteratee = last(arrays),
                mapped = arrayMap(arrays, castArrayLikeObject);

              if (iteratee === last(mapped)) {
                iteratee = undefined;
              } else {
                mapped.pop();
              }
              return (mapped.length && mapped[0] === arrays[0])
                ? baseIntersection(mapped, getIteratee(iteratee, 2))
                : [];
            });

            /**
             * This method is like `_.intersection` except that it accepts `comparator`
             * which is invoked to compare elements of `arrays`. The order and references
             * of result values are determined by the first array. The comparator is
             * invoked with two arguments: (arrVal, othVal).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {...Array} [arrays] The arrays to inspect.
             * @param {Function} [comparator] The comparator invoked per element.
             * @returns {Array} Returns the new array of intersecting values.
             * @example
             *
             * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
             * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
             *
             * _.intersectionWith(objects, others, _.isEqual);
             * // => [{ 'x': 1, 'y': 2 }]
             */
            var intersectionWith = baseRest(function (arrays) {
              var comparator = last(arrays),
                mapped = arrayMap(arrays, castArrayLikeObject);

              comparator = typeof comparator == 'function' ? comparator : undefined;
              if (comparator) {
                mapped.pop();
              }
              return (mapped.length && mapped[0] === arrays[0])
                ? baseIntersection(mapped, undefined, comparator)
                : [];
            });

            /**
             * Converts all elements in `array` into a string separated by `separator`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {Array} array The array to convert.
             * @param {string} [separator=','] The element separator.
             * @returns {string} Returns the joined string.
             * @example
             *
             * _.join(['a', 'b', 'c'], '~');
             * // => 'a~b~c'
             */
            function join(array, separator) {
              return array == null ? '' : nativeJoin.call(array, separator);
            }

            /**
             * Gets the last element of `array`.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Array
             * @param {Array} array The array to query.
             * @returns {*} Returns the last element of `array`.
             * @example
             *
             * _.last([1, 2, 3]);
             * // => 3
             */
            function last(array) {
              var length = array == null ? 0 : array.length;
              return length ? array[length - 1] : undefined;
            }

            /**
             * This method is like `_.indexOf` except that it iterates over elements of
             * `array` from right to left.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Array
             * @param {Array} array The array to inspect.
             * @param {*} value The value to search for.
             * @param {number} [fromIndex=array.length-1] The index to search from.
             * @returns {number} Returns the index of the matched value, else `-1`.
             * @example
             *
             * _.lastIndexOf([1, 2, 1, 2], 2);
             * // => 3
             *
             * // Search from the `fromIndex`.
             * _.lastIndexOf([1, 2, 1, 2], 2, 2);
             * // => 1
             */
            function lastIndexOf(array, value, fromIndex) {
              var length = array == null ? 0 : array.length;
              if (!length) {
                return -1;
              }
              var index = length;
              if (fromIndex !== undefined) {
                index = toInteger(fromIndex);
                index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
              }
              return value === value
                ? strictLastIndexOf(array, value, index)
                : baseFindIndex(array, baseIsNaN, index, true);
            }

            /**
             * Gets the element at index `n` of `array`. If `n` is negative, the nth
             * element from the end is returned.
             *
             * @static
             * @memberOf _
             * @since 4.11.0
             * @category Array
             * @param {Array} array The array to query.
             * @param {number} [n=0] The index of the element to return.
             * @returns {*} Returns the nth element of `array`.
             * @example
             *
             * var array = ['a', 'b', 'c', 'd'];
             *
             * _.nth(array, 1);
             * // => 'b'
             *
             * _.nth(array, -2);
             * // => 'c';
             */
            function nth(array, n) {
              return (array && array.length) ? baseNth(array, toInteger(n)) : undefined;
            }

            /**
             * Removes all given values from `array` using
             * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
             * for equality comparisons.
             *
             * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`
             * to remove elements from an array by predicate.
             *
             * @static
             * @memberOf _
             * @since 2.0.0
             * @category Array
             * @param {Array} array The array to modify.
             * @param {...*} [values] The values to remove.
             * @returns {Array} Returns `array`.
             * @example
             *
             * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
             *
             * _.pull(array, 'a', 'c');
             * console.log(array);
             * // => ['b', 'b']
             */
            var pull = baseRest(pullAll);

            /**
             * This method is like `_.pull` except that it accepts an array of values to remove.
             *
             * **Note:** Unlike `_.difference`, this method mutates `array`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {Array} array The array to modify.
             * @param {Array} values The values to remove.
             * @returns {Array} Returns `array`.
             * @example
             *
             * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
             *
             * _.pullAll(array, ['a', 'c']);
             * console.log(array);
             * // => ['b', 'b']
             */
            function pullAll(array, values) {
              return (array && array.length && values && values.length)
                ? basePullAll(array, values)
                : array;
            }

            /**
             * This method is like `_.pullAll` except that it accepts `iteratee` which is
             * invoked for each element of `array` and `values` to generate the criterion
             * by which they're compared. The iteratee is invoked with one argument: (value).
             *
             * **Note:** Unlike `_.differenceBy`, this method mutates `array`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {Array} array The array to modify.
             * @param {Array} values The values to remove.
             * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
             * @returns {Array} Returns `array`.
             * @example
             *
             * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];
             *
             * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');
             * console.log(array);
             * // => [{ 'x': 2 }]
             */
            function pullAllBy(array, values, iteratee) {
              return (array && array.length && values && values.length)
                ? basePullAll(array, values, getIteratee(iteratee, 2))
                : array;
            }

            /**
             * This method is like `_.pullAll` except that it accepts `comparator` which
             * is invoked to compare elements of `array` to `values`. The comparator is
             * invoked with two arguments: (arrVal, othVal).
             *
             * **Note:** Unlike `_.differenceWith`, this method mutates `array`.
             *
             * @static
             * @memberOf _
             * @since 4.6.0
             * @category Array
             * @param {Array} array The array to modify.
             * @param {Array} values The values to remove.
             * @param {Function} [comparator] The comparator invoked per element.
             * @returns {Array} Returns `array`.
             * @example
             *
             * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];
             *
             * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);
             * console.log(array);
             * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]
             */
            function pullAllWith(array, values, comparator) {
              return (array && array.length && values && values.length)
                ? basePullAll(array, values, undefined, comparator)
                : array;
            }

            /**
             * Removes elements from `array` corresponding to `indexes` and returns an
             * array of removed elements.
             *
             * **Note:** Unlike `_.at`, this method mutates `array`.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Array
             * @param {Array} array The array to modify.
             * @param {...(number|number[])} [indexes] The indexes of elements to remove.
             * @returns {Array} Returns the new array of removed elements.
             * @example
             *
             * var array = ['a', 'b', 'c', 'd'];
             * var pulled = _.pullAt(array, [1, 3]);
             *
             * console.log(array);
             * // => ['a', 'c']
             *
             * console.log(pulled);
             * // => ['b', 'd']
             */
            var pullAt = flatRest(function (array, indexes) {
              var length = array == null ? 0 : array.length,
                result = baseAt(array, indexes);

              basePullAt(array, arrayMap(indexes, function (index) {
                return isIndex(index, length) ? +index : index;
              }).sort(compareAscending));

              return result;
            });

            /**
             * Removes all elements from `array` that `predicate` returns truthy for
             * and returns an array of the removed elements. The predicate is invoked
             * with three arguments: (value, index, array).
             *
             * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`
             * to pull elements from an array by value.
             *
             * @static
             * @memberOf _
             * @since 2.0.0
             * @category Array
             * @param {Array} array The array to modify.
             * @param {Function} [predicate=_.identity] The function invoked per iteration.
             * @returns {Array} Returns the new array of removed elements.
             * @example
             *
             * var array = [1, 2, 3, 4];
             * var evens = _.remove(array, function(n) {
             *   return n % 2 == 0;
             * });
             *
             * console.log(array);
             * // => [1, 3]
             *
             * console.log(evens);
             * // => [2, 4]
             */
            function remove(array, predicate) {
              var result = [];
              if (!(array && array.length)) {
                return result;
              }
              var index = -1,
                indexes = [],
                length = array.length;

              predicate = getIteratee(predicate, 3);
              while (++index < length) {
                var value = array[index];
                if (predicate(value, index, array)) {
                  result.push(value);
                  indexes.push(index);
                }
              }
              basePullAt(array, indexes);
              return result;
            }

            /**
             * Reverses `array` so that the first element becomes the last, the second
             * element becomes the second to last, and so on.
             *
             * **Note:** This method mutates `array` and is based on
             * [`Array#reverse`](https://mdn.io/Array/reverse).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {Array} array The array to modify.
             * @returns {Array} Returns `array`.
             * @example
             *
             * var array = [1, 2, 3];
             *
             * _.reverse(array);
             * // => [3, 2, 1]
             *
             * console.log(array);
             * // => [3, 2, 1]
             */
            function reverse(array) {
              return array == null ? array : nativeReverse.call(array);
            }

            /**
             * Creates a slice of `array` from `start` up to, but not including, `end`.
             *
             * **Note:** This method is used instead of
             * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are
             * returned.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Array
             * @param {Array} array The array to slice.
             * @param {number} [start=0] The start position.
             * @param {number} [end=array.length] The end position.
             * @returns {Array} Returns the slice of `array`.
             */
            function slice(array, start, end) {
              var length = array == null ? 0 : array.length;
              if (!length) {
                return [];
              }
              if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
                start = 0;
                end = length;
              }
              else {
                start = start == null ? 0 : toInteger(start);
                end = end === undefined ? length : toInteger(end);
              }
              return baseSlice(array, start, end);
            }

            /**
             * Uses a binary search to determine the lowest index at which `value`
             * should be inserted into `array` in order to maintain its sort order.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Array
             * @param {Array} array The sorted array to inspect.
             * @param {*} value The value to evaluate.
             * @returns {number} Returns the index at which `value` should be inserted
             *  into `array`.
             * @example
             *
             * _.sortedIndex([30, 50], 40);
             * // => 1
             */
            function sortedIndex(array, value) {
              return baseSortedIndex(array, value);
            }

            /**
             * This method is like `_.sortedIndex` except that it accepts `iteratee`
             * which is invoked for `value` and each element of `array` to compute their
             * sort ranking. The iteratee is invoked with one argument: (value).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {Array} array The sorted array to inspect.
             * @param {*} value The value to evaluate.
             * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
             * @returns {number} Returns the index at which `value` should be inserted
             *  into `array`.
             * @example
             *
             * var objects = [{ 'x': 4 }, { 'x': 5 }];
             *
             * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
             * // => 0
             *
             * // The `_.property` iteratee shorthand.
             * _.sortedIndexBy(objects, { 'x': 4 }, 'x');
             * // => 0
             */
            function sortedIndexBy(array, value, iteratee) {
              return baseSortedIndexBy(array, value, getIteratee(iteratee, 2));
            }

            /**
             * This method is like `_.indexOf` except that it performs a binary
             * search on a sorted `array`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {Array} array The array to inspect.
             * @param {*} value The value to search for.
             * @returns {number} Returns the index of the matched value, else `-1`.
             * @example
             *
             * _.sortedIndexOf([4, 5, 5, 5, 6], 5);
             * // => 1
             */
            function sortedIndexOf(array, value) {
              var length = array == null ? 0 : array.length;
              if (length) {
                var index = baseSortedIndex(array, value);
                if (index < length && eq(array[index], value)) {
                  return index;
                }
              }
              return -1;
            }

            /**
             * This method is like `_.sortedIndex` except that it returns the highest
             * index at which `value` should be inserted into `array` in order to
             * maintain its sort order.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Array
             * @param {Array} array The sorted array to inspect.
             * @param {*} value The value to evaluate.
             * @returns {number} Returns the index at which `value` should be inserted
             *  into `array`.
             * @example
             *
             * _.sortedLastIndex([4, 5, 5, 5, 6], 5);
             * // => 4
             */
            function sortedLastIndex(array, value) {
              return baseSortedIndex(array, value, true);
            }

            /**
             * This method is like `_.sortedLastIndex` except that it accepts `iteratee`
             * which is invoked for `value` and each element of `array` to compute their
             * sort ranking. The iteratee is invoked with one argument: (value).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {Array} array The sorted array to inspect.
             * @param {*} value The value to evaluate.
             * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
             * @returns {number} Returns the index at which `value` should be inserted
             *  into `array`.
             * @example
             *
             * var objects = [{ 'x': 4 }, { 'x': 5 }];
             *
             * _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
             * // => 1
             *
             * // The `_.property` iteratee shorthand.
             * _.sortedLastIndexBy(objects, { 'x': 4 }, 'x');
             * // => 1
             */
            function sortedLastIndexBy(array, value, iteratee) {
              return baseSortedIndexBy(array, value, getIteratee(iteratee, 2), true);
            }

            /**
             * This method is like `_.lastIndexOf` except that it performs a binary
             * search on a sorted `array`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {Array} array The array to inspect.
             * @param {*} value The value to search for.
             * @returns {number} Returns the index of the matched value, else `-1`.
             * @example
             *
             * _.sortedLastIndexOf([4, 5, 5, 5, 6], 5);
             * // => 3
             */
            function sortedLastIndexOf(array, value) {
              var length = array == null ? 0 : array.length;
              if (length) {
                var index = baseSortedIndex(array, value, true) - 1;
                if (eq(array[index], value)) {
                  return index;
                }
              }
              return -1;
            }

            /**
             * This method is like `_.uniq` except that it's designed and optimized
             * for sorted arrays.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {Array} array The array to inspect.
             * @returns {Array} Returns the new duplicate free array.
             * @example
             *
             * _.sortedUniq([1, 1, 2]);
             * // => [1, 2]
             */
            function sortedUniq(array) {
              return (array && array.length)
                ? baseSortedUniq(array)
                : [];
            }

            /**
             * This method is like `_.uniqBy` except that it's designed and optimized
             * for sorted arrays.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {Array} array The array to inspect.
             * @param {Function} [iteratee] The iteratee invoked per element.
             * @returns {Array} Returns the new duplicate free array.
             * @example
             *
             * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);
             * // => [1.1, 2.3]
             */
            function sortedUniqBy(array, iteratee) {
              return (array && array.length)
                ? baseSortedUniq(array, getIteratee(iteratee, 2))
                : [];
            }

            /**
             * Gets all but the first element of `array`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {Array} array The array to query.
             * @returns {Array} Returns the slice of `array`.
             * @example
             *
             * _.tail([1, 2, 3]);
             * // => [2, 3]
             */
            function tail(array) {
              var length = array == null ? 0 : array.length;
              return length ? baseSlice(array, 1, length) : [];
            }

            /**
             * Creates a slice of `array` with `n` elements taken from the beginning.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Array
             * @param {Array} array The array to query.
             * @param {number} [n=1] The number of elements to take.
             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
             * @returns {Array} Returns the slice of `array`.
             * @example
             *
             * _.take([1, 2, 3]);
             * // => [1]
             *
             * _.take([1, 2, 3], 2);
             * // => [1, 2]
             *
             * _.take([1, 2, 3], 5);
             * // => [1, 2, 3]
             *
             * _.take([1, 2, 3], 0);
             * // => []
             */
            function take(array, n, guard) {
              if (!(array && array.length)) {
                return [];
              }
              n = (guard || n === undefined) ? 1 : toInteger(n);
              return baseSlice(array, 0, n < 0 ? 0 : n);
            }

            /**
             * Creates a slice of `array` with `n` elements taken from the end.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Array
             * @param {Array} array The array to query.
             * @param {number} [n=1] The number of elements to take.
             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
             * @returns {Array} Returns the slice of `array`.
             * @example
             *
             * _.takeRight([1, 2, 3]);
             * // => [3]
             *
             * _.takeRight([1, 2, 3], 2);
             * // => [2, 3]
             *
             * _.takeRight([1, 2, 3], 5);
             * // => [1, 2, 3]
             *
             * _.takeRight([1, 2, 3], 0);
             * // => []
             */
            function takeRight(array, n, guard) {
              var length = array == null ? 0 : array.length;
              if (!length) {
                return [];
              }
              n = (guard || n === undefined) ? 1 : toInteger(n);
              n = length - n;
              return baseSlice(array, n < 0 ? 0 : n, length);
            }

            /**
             * Creates a slice of `array` with elements taken from the end. Elements are
             * taken until `predicate` returns falsey. The predicate is invoked with
             * three arguments: (value, index, array).
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Array
             * @param {Array} array The array to query.
             * @param {Function} [predicate=_.identity] The function invoked per iteration.
             * @returns {Array} Returns the slice of `array`.
             * @example
             *
             * var users = [
             *   { 'user': 'barney',  'active': true },
             *   { 'user': 'fred',    'active': false },
             *   { 'user': 'pebbles', 'active': false }
             * ];
             *
             * _.takeRightWhile(users, function(o) { return !o.active; });
             * // => objects for ['fred', 'pebbles']
             *
             * // The `_.matches` iteratee shorthand.
             * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });
             * // => objects for ['pebbles']
             *
             * // The `_.matchesProperty` iteratee shorthand.
             * _.takeRightWhile(users, ['active', false]);
             * // => objects for ['fred', 'pebbles']
             *
             * // The `_.property` iteratee shorthand.
             * _.takeRightWhile(users, 'active');
             * // => []
             */
            function takeRightWhile(array, predicate) {
              return (array && array.length)
                ? baseWhile(array, getIteratee(predicate, 3), false, true)
                : [];
            }

            /**
             * Creates a slice of `array` with elements taken from the beginning. Elements
             * are taken until `predicate` returns falsey. The predicate is invoked with
             * three arguments: (value, index, array).
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Array
             * @param {Array} array The array to query.
             * @param {Function} [predicate=_.identity] The function invoked per iteration.
             * @returns {Array} Returns the slice of `array`.
             * @example
             *
             * var users = [
             *   { 'user': 'barney',  'active': false },
             *   { 'user': 'fred',    'active': false },
             *   { 'user': 'pebbles', 'active': true }
             * ];
             *
             * _.takeWhile(users, function(o) { return !o.active; });
             * // => objects for ['barney', 'fred']
             *
             * // The `_.matches` iteratee shorthand.
             * _.takeWhile(users, { 'user': 'barney', 'active': false });
             * // => objects for ['barney']
             *
             * // The `_.matchesProperty` iteratee shorthand.
             * _.takeWhile(users, ['active', false]);
             * // => objects for ['barney', 'fred']
             *
             * // The `_.property` iteratee shorthand.
             * _.takeWhile(users, 'active');
             * // => []
             */
            function takeWhile(array, predicate) {
              return (array && array.length)
                ? baseWhile(array, getIteratee(predicate, 3))
                : [];
            }

            /**
             * Creates an array of unique values, in order, from all given arrays using
             * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
             * for equality comparisons.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Array
             * @param {...Array} [arrays] The arrays to inspect.
             * @returns {Array} Returns the new array of combined values.
             * @example
             *
             * _.union([2], [1, 2]);
             * // => [2, 1]
             */
            var union = baseRest(function (arrays) {
              return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
            });

            /**
             * This method is like `_.union` except that it accepts `iteratee` which is
             * invoked for each element of each `arrays` to generate the criterion by
             * which uniqueness is computed. Result values are chosen from the first
             * array in which the value occurs. The iteratee is invoked with one argument:
             * (value).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {...Array} [arrays] The arrays to inspect.
             * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
             * @returns {Array} Returns the new array of combined values.
             * @example
             *
             * _.unionBy([2.1], [1.2, 2.3], Math.floor);
             * // => [2.1, 1.2]
             *
             * // The `_.property` iteratee shorthand.
             * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
             * // => [{ 'x': 1 }, { 'x': 2 }]
             */
            var unionBy = baseRest(function (arrays) {
              var iteratee = last(arrays);
              if (isArrayLikeObject(iteratee)) {
                iteratee = undefined;
              }
              return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee, 2));
            });

            /**
             * This method is like `_.union` except that it accepts `comparator` which
             * is invoked to compare elements of `arrays`. Result values are chosen from
             * the first array in which the value occurs. The comparator is invoked
             * with two arguments: (arrVal, othVal).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {...Array} [arrays] The arrays to inspect.
             * @param {Function} [comparator] The comparator invoked per element.
             * @returns {Array} Returns the new array of combined values.
             * @example
             *
             * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
             * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
             *
             * _.unionWith(objects, others, _.isEqual);
             * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
             */
            var unionWith = baseRest(function (arrays) {
              var comparator = last(arrays);
              comparator = typeof comparator == 'function' ? comparator : undefined;
              return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined, comparator);
            });

            /**
             * Creates a duplicate-free version of an array, using
             * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
             * for equality comparisons, in which only the first occurrence of each element
             * is kept. The order of result values is determined by the order they occur
             * in the array.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Array
             * @param {Array} array The array to inspect.
             * @returns {Array} Returns the new duplicate free array.
             * @example
             *
             * _.uniq([2, 1, 2]);
             * // => [2, 1]
             */
            function uniq(array) {
              return (array && array.length) ? baseUniq(array) : [];
            }

            /**
             * This method is like `_.uniq` except that it accepts `iteratee` which is
             * invoked for each element in `array` to generate the criterion by which
             * uniqueness is computed. The order of result values is determined by the
             * order they occur in the array. The iteratee is invoked with one argument:
             * (value).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {Array} array The array to inspect.
             * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
             * @returns {Array} Returns the new duplicate free array.
             * @example
             *
             * _.uniqBy([2.1, 1.2, 2.3], Math.floor);
             * // => [2.1, 1.2]
             *
             * // The `_.property` iteratee shorthand.
             * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
             * // => [{ 'x': 1 }, { 'x': 2 }]
             */
            function uniqBy(array, iteratee) {
              return (array && array.length) ? baseUniq(array, getIteratee(iteratee, 2)) : [];
            }

            /**
             * This method is like `_.uniq` except that it accepts `comparator` which
             * is invoked to compare elements of `array`. The order of result values is
             * determined by the order they occur in the array.The comparator is invoked
             * with two arguments: (arrVal, othVal).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {Array} array The array to inspect.
             * @param {Function} [comparator] The comparator invoked per element.
             * @returns {Array} Returns the new duplicate free array.
             * @example
             *
             * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];
             *
             * _.uniqWith(objects, _.isEqual);
             * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]
             */
            function uniqWith(array, comparator) {
              comparator = typeof comparator == 'function' ? comparator : undefined;
              return (array && array.length) ? baseUniq(array, undefined, comparator) : [];
            }

            /**
             * This method is like `_.zip` except that it accepts an array of grouped
             * elements and creates an array regrouping the elements to their pre-zip
             * configuration.
             *
             * @static
             * @memberOf _
             * @since 1.2.0
             * @category Array
             * @param {Array} array The array of grouped elements to process.
             * @returns {Array} Returns the new array of regrouped elements.
             * @example
             *
             * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);
             * // => [['a', 1, true], ['b', 2, false]]
             *
             * _.unzip(zipped);
             * // => [['a', 'b'], [1, 2], [true, false]]
             */
            function unzip(array) {
              if (!(array && array.length)) {
                return [];
              }
              var length = 0;
              array = arrayFilter(array, function (group) {
                if (isArrayLikeObject(group)) {
                  length = nativeMax(group.length, length);
                  return true;
                }
              });
              return baseTimes(length, function (index) {
                return arrayMap(array, baseProperty(index));
              });
            }

            /**
             * This method is like `_.unzip` except that it accepts `iteratee` to specify
             * how regrouped values should be combined. The iteratee is invoked with the
             * elements of each group: (...group).
             *
             * @static
             * @memberOf _
             * @since 3.8.0
             * @category Array
             * @param {Array} array The array of grouped elements to process.
             * @param {Function} [iteratee=_.identity] The function to combine
             *  regrouped values.
             * @returns {Array} Returns the new array of regrouped elements.
             * @example
             *
             * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
             * // => [[1, 10, 100], [2, 20, 200]]
             *
             * _.unzipWith(zipped, _.add);
             * // => [3, 30, 300]
             */
            function unzipWith(array, iteratee) {
              if (!(array && array.length)) {
                return [];
              }
              var result = unzip(array);
              if (iteratee == null) {
                return result;
              }
              return arrayMap(result, function (group) {
                return apply(iteratee, undefined, group);
              });
            }

            /**
             * Creates an array excluding all given values using
             * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
             * for equality comparisons.
             *
             * **Note:** Unlike `_.pull`, this method returns a new array.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Array
             * @param {Array} array The array to inspect.
             * @param {...*} [values] The values to exclude.
             * @returns {Array} Returns the new array of filtered values.
             * @see _.difference, _.xor
             * @example
             *
             * _.without([2, 1, 2, 3], 1, 2);
             * // => [3]
             */
            var without = baseRest(function (array, values) {
              return isArrayLikeObject(array)
                ? baseDifference(array, values)
                : [];
            });

            /**
             * Creates an array of unique values that is the
             * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
             * of the given arrays. The order of result values is determined by the order
             * they occur in the arrays.
             *
             * @static
             * @memberOf _
             * @since 2.4.0
             * @category Array
             * @param {...Array} [arrays] The arrays to inspect.
             * @returns {Array} Returns the new array of filtered values.
             * @see _.difference, _.without
             * @example
             *
             * _.xor([2, 1], [2, 3]);
             * // => [1, 3]
             */
            var xor = baseRest(function (arrays) {
              return baseXor(arrayFilter(arrays, isArrayLikeObject));
            });

            /**
             * This method is like `_.xor` except that it accepts `iteratee` which is
             * invoked for each element of each `arrays` to generate the criterion by
             * which by which they're compared. The order of result values is determined
             * by the order they occur in the arrays. The iteratee is invoked with one
             * argument: (value).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {...Array} [arrays] The arrays to inspect.
             * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
             * @returns {Array} Returns the new array of filtered values.
             * @example
             *
             * _.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);
             * // => [1.2, 3.4]
             *
             * // The `_.property` iteratee shorthand.
             * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
             * // => [{ 'x': 2 }]
             */
            var xorBy = baseRest(function (arrays) {
              var iteratee = last(arrays);
              if (isArrayLikeObject(iteratee)) {
                iteratee = undefined;
              }
              return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee, 2));
            });

            /**
             * This method is like `_.xor` except that it accepts `comparator` which is
             * invoked to compare elements of `arrays`. The order of result values is
             * determined by the order they occur in the arrays. The comparator is invoked
             * with two arguments: (arrVal, othVal).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {...Array} [arrays] The arrays to inspect.
             * @param {Function} [comparator] The comparator invoked per element.
             * @returns {Array} Returns the new array of filtered values.
             * @example
             *
             * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
             * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
             *
             * _.xorWith(objects, others, _.isEqual);
             * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
             */
            var xorWith = baseRest(function (arrays) {
              var comparator = last(arrays);
              comparator = typeof comparator == 'function' ? comparator : undefined;
              return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined, comparator);
            });

            /**
             * Creates an array of grouped elements, the first of which contains the
             * first elements of the given arrays, the second of which contains the
             * second elements of the given arrays, and so on.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Array
             * @param {...Array} [arrays] The arrays to process.
             * @returns {Array} Returns the new array of grouped elements.
             * @example
             *
             * _.zip(['a', 'b'], [1, 2], [true, false]);
             * // => [['a', 1, true], ['b', 2, false]]
             */
            var zip = baseRest(unzip);

            /**
             * This method is like `_.fromPairs` except that it accepts two arrays,
             * one of property identifiers and one of corresponding values.
             *
             * @static
             * @memberOf _
             * @since 0.4.0
             * @category Array
             * @param {Array} [props=[]] The property identifiers.
             * @param {Array} [values=[]] The property values.
             * @returns {Object} Returns the new object.
             * @example
             *
             * _.zipObject(['a', 'b'], [1, 2]);
             * // => { 'a': 1, 'b': 2 }
             */
            function zipObject(props, values) {
              return baseZipObject(props || [], values || [], assignValue);
            }

            /**
             * This method is like `_.zipObject` except that it supports property paths.
             *
             * @static
             * @memberOf _
             * @since 4.1.0
             * @category Array
             * @param {Array} [props=[]] The property identifiers.
             * @param {Array} [values=[]] The property values.
             * @returns {Object} Returns the new object.
             * @example
             *
             * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);
             * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }
             */
            function zipObjectDeep(props, values) {
              return baseZipObject(props || [], values || [], baseSet);
            }

            /**
             * This method is like `_.zip` except that it accepts `iteratee` to specify
             * how grouped values should be combined. The iteratee is invoked with the
             * elements of each group: (...group).
             *
             * @static
             * @memberOf _
             * @since 3.8.0
             * @category Array
             * @param {...Array} [arrays] The arrays to process.
             * @param {Function} [iteratee=_.identity] The function to combine
             *  grouped values.
             * @returns {Array} Returns the new array of grouped elements.
             * @example
             *
             * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {
             *   return a + b + c;
             * });
             * // => [111, 222]
             */
            var zipWith = baseRest(function (arrays) {
              var length = arrays.length,
                iteratee = length > 1 ? arrays[length - 1] : undefined;

              iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined;
              return unzipWith(arrays, iteratee);
            });

            /*------------------------------------------------------------------------*/

            /**
             * Creates a `lodash` wrapper instance that wraps `value` with explicit method
             * chain sequences enabled. The result of such sequences must be unwrapped
             * with `_#value`.
             *
             * @static
             * @memberOf _
             * @since 1.3.0
             * @category Seq
             * @param {*} value The value to wrap.
             * @returns {Object} Returns the new `lodash` wrapper instance.
             * @example
             *
             * var users = [
             *   { 'user': 'barney',  'age': 36 },
             *   { 'user': 'fred',    'age': 40 },
             *   { 'user': 'pebbles', 'age': 1 }
             * ];
             *
             * var youngest = _
             *   .chain(users)
             *   .sortBy('age')
             *   .map(function(o) {
             *     return o.user + ' is ' + o.age;
             *   })
             *   .head()
             *   .value();
             * // => 'pebbles is 1'
             */
            function chain(value) {
              var result = lodash(value);
              result.__chain__ = true;
              return result;
            }

            /**
             * This method invokes `interceptor` and returns `value`. The interceptor
             * is invoked with one argument; (value). The purpose of this method is to
             * "tap into" a method chain sequence in order to modify intermediate results.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Seq
             * @param {*} value The value to provide to `interceptor`.
             * @param {Function} interceptor The function to invoke.
             * @returns {*} Returns `value`.
             * @example
             *
             * _([1, 2, 3])
             *  .tap(function(array) {
             *    // Mutate input array.
             *    array.pop();
             *  })
             *  .reverse()
             *  .value();
             * // => [2, 1]
             */
            function tap(value, interceptor) {
              interceptor(value);
              return value;
            }

            /**
             * This method is like `_.tap` except that it returns the result of `interceptor`.
             * The purpose of this method is to "pass thru" values replacing intermediate
             * results in a method chain sequence.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Seq
             * @param {*} value The value to provide to `interceptor`.
             * @param {Function} interceptor The function to invoke.
             * @returns {*} Returns the result of `interceptor`.
             * @example
             *
             * _('  abc  ')
             *  .chain()
             *  .trim()
             *  .thru(function(value) {
             *    return [value];
             *  })
             *  .value();
             * // => ['abc']
             */
            function thru(value, interceptor) {
              return interceptor(value);
            }

            /**
             * This method is the wrapper version of `_.at`.
             *
             * @name at
             * @memberOf _
             * @since 1.0.0
             * @category Seq
             * @param {...(string|string[])} [paths] The property paths to pick.
             * @returns {Object} Returns the new `lodash` wrapper instance.
             * @example
             *
             * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
             *
             * _(object).at(['a[0].b.c', 'a[1]']).value();
             * // => [3, 4]
             */
            var wrapperAt = flatRest(function (paths) {
              var length = paths.length,
                start = length ? paths[0] : 0,
                value = this.__wrapped__,
                interceptor = function (object) { return baseAt(object, paths); };

              if (length > 1 || this.__actions__.length ||
                !(value instanceof LazyWrapper) || !isIndex(start)) {
                return this.thru(interceptor);
              }
              value = value.slice(start, +start + (length ? 1 : 0));
              value.__actions__.push({
                'func': thru,
                'args': [interceptor],
                'thisArg': undefined
              });
              return new LodashWrapper(value, this.__chain__).thru(function (array) {
                if (length && !array.length) {
                  array.push(undefined);
                }
                return array;
              });
            });

            /**
             * Creates a `lodash` wrapper instance with explicit method chain sequences enabled.
             *
             * @name chain
             * @memberOf _
             * @since 0.1.0
             * @category Seq
             * @returns {Object} Returns the new `lodash` wrapper instance.
             * @example
             *
             * var users = [
             *   { 'user': 'barney', 'age': 36 },
             *   { 'user': 'fred',   'age': 40 }
             * ];
             *
             * // A sequence without explicit chaining.
             * _(users).head();
             * // => { 'user': 'barney', 'age': 36 }
             *
             * // A sequence with explicit chaining.
             * _(users)
             *   .chain()
             *   .head()
             *   .pick('user')
             *   .value();
             * // => { 'user': 'barney' }
             */
            function wrapperChain() {
              return chain(this);
            }

            /**
             * Executes the chain sequence and returns the wrapped result.
             *
             * @name commit
             * @memberOf _
             * @since 3.2.0
             * @category Seq
             * @returns {Object} Returns the new `lodash` wrapper instance.
             * @example
             *
             * var array = [1, 2];
             * var wrapped = _(array).push(3);
             *
             * console.log(array);
             * // => [1, 2]
             *
             * wrapped = wrapped.commit();
             * console.log(array);
             * // => [1, 2, 3]
             *
             * wrapped.last();
             * // => 3
             *
             * console.log(array);
             * // => [1, 2, 3]
             */
            function wrapperCommit() {
              return new LodashWrapper(this.value(), this.__chain__);
            }

            /**
             * Gets the next value on a wrapped object following the
             * [iterator protocol](https://mdn.io/iteration_protocols#iterator).
             *
             * @name next
             * @memberOf _
             * @since 4.0.0
             * @category Seq
             * @returns {Object} Returns the next iterator value.
             * @example
             *
             * var wrapped = _([1, 2]);
             *
             * wrapped.next();
             * // => { 'done': false, 'value': 1 }
             *
             * wrapped.next();
             * // => { 'done': false, 'value': 2 }
             *
             * wrapped.next();
             * // => { 'done': true, 'value': undefined }
             */
            function wrapperNext() {
              if (this.__values__ === undefined) {
                this.__values__ = toArray(this.value());
              }
              var done = this.__index__ >= this.__values__.length,
                value = done ? undefined : this.__values__[this.__index__++];

              return { 'done': done, 'value': value };
            }

            /**
             * Enables the wrapper to be iterable.
             *
             * @name Symbol.iterator
             * @memberOf _
             * @since 4.0.0
             * @category Seq
             * @returns {Object} Returns the wrapper object.
             * @example
             *
             * var wrapped = _([1, 2]);
             *
             * wrapped[Symbol.iterator]() === wrapped;
             * // => true
             *
             * Array.from(wrapped);
             * // => [1, 2]
             */
            function wrapperToIterator() {
              return this;
            }

            /**
             * Creates a clone of the chain sequence planting `value` as the wrapped value.
             *
             * @name plant
             * @memberOf _
             * @since 3.2.0
             * @category Seq
             * @param {*} value The value to plant.
             * @returns {Object} Returns the new `lodash` wrapper instance.
             * @example
             *
             * function square(n) {
             *   return n * n;
             * }
             *
             * var wrapped = _([1, 2]).map(square);
             * var other = wrapped.plant([3, 4]);
             *
             * other.value();
             * // => [9, 16]
             *
             * wrapped.value();
             * // => [1, 4]
             */
            function wrapperPlant(value) {
              var result,
                parent = this;

              while (parent instanceof baseLodash) {
                var clone = wrapperClone(parent);
                clone.__index__ = 0;
                clone.__values__ = undefined;
                if (result) {
                  previous.__wrapped__ = clone;
                } else {
                  result = clone;
                }
                var previous = clone;
                parent = parent.__wrapped__;
              }
              previous.__wrapped__ = value;
              return result;
            }

            /**
             * This method is the wrapper version of `_.reverse`.
             *
             * **Note:** This method mutates the wrapped array.
             *
             * @name reverse
             * @memberOf _
             * @since 0.1.0
             * @category Seq
             * @returns {Object} Returns the new `lodash` wrapper instance.
             * @example
             *
             * var array = [1, 2, 3];
             *
             * _(array).reverse().value()
             * // => [3, 2, 1]
             *
             * console.log(array);
             * // => [3, 2, 1]
             */
            function wrapperReverse() {
              var value = this.__wrapped__;
              if (value instanceof LazyWrapper) {
                var wrapped = value;
                if (this.__actions__.length) {
                  wrapped = new LazyWrapper(this);
                }
                wrapped = wrapped.reverse();
                wrapped.__actions__.push({
                  'func': thru,
                  'args': [reverse],
                  'thisArg': undefined
                });
                return new LodashWrapper(wrapped, this.__chain__);
              }
              return this.thru(reverse);
            }

            /**
             * Executes the chain sequence to resolve the unwrapped value.
             *
             * @name value
             * @memberOf _
             * @since 0.1.0
             * @alias toJSON, valueOf
             * @category Seq
             * @returns {*} Returns the resolved unwrapped value.
             * @example
             *
             * _([1, 2, 3]).value();
             * // => [1, 2, 3]
             */
            function wrapperValue() {
              return baseWrapperValue(this.__wrapped__, this.__actions__);
            }

            /*------------------------------------------------------------------------*/

            /**
             * Creates an object composed of keys generated from the results of running
             * each element of `collection` thru `iteratee`. The corresponding value of
             * each key is the number of times the key was returned by `iteratee`. The
             * iteratee is invoked with one argument: (value).
             *
             * @static
             * @memberOf _
             * @since 0.5.0
             * @category Collection
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
             * @returns {Object} Returns the composed aggregate object.
             * @example
             *
             * _.countBy([6.1, 4.2, 6.3], Math.floor);
             * // => { '4': 1, '6': 2 }
             *
             * // The `_.property` iteratee shorthand.
             * _.countBy(['one', 'two', 'three'], 'length');
             * // => { '3': 2, '5': 1 }
             */
            var countBy = createAggregator(function (result, value, key) {
              if (hasOwnProperty.call(result, key)) {
                ++result[key];
              } else {
                baseAssignValue(result, key, 1);
              }
            });

            /**
             * Checks if `predicate` returns truthy for **all** elements of `collection`.
             * Iteration is stopped once `predicate` returns falsey. The predicate is
             * invoked with three arguments: (value, index|key, collection).
             *
             * **Note:** This method returns `true` for
             * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because
             * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of
             * elements of empty collections.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Collection
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} [predicate=_.identity] The function invoked per iteration.
             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
             * @returns {boolean} Returns `true` if all elements pass the predicate check,
             *  else `false`.
             * @example
             *
             * _.every([true, 1, null, 'yes'], Boolean);
             * // => false
             *
             * var users = [
             *   { 'user': 'barney', 'age': 36, 'active': false },
             *   { 'user': 'fred',   'age': 40, 'active': false }
             * ];
             *
             * // The `_.matches` iteratee shorthand.
             * _.every(users, { 'user': 'barney', 'active': false });
             * // => false
             *
             * // The `_.matchesProperty` iteratee shorthand.
             * _.every(users, ['active', false]);
             * // => true
             *
             * // The `_.property` iteratee shorthand.
             * _.every(users, 'active');
             * // => false
             */
            function every(collection, predicate, guard) {
              var func = isArray(collection) ? arrayEvery : baseEvery;
              if (guard && isIterateeCall(collection, predicate, guard)) {
                predicate = undefined;
              }
              return func(collection, getIteratee(predicate, 3));
            }

            /**
             * Iterates over elements of `collection`, returning an array of all elements
             * `predicate` returns truthy for. The predicate is invoked with three
             * arguments: (value, index|key, collection).
             *
             * **Note:** Unlike `_.remove`, this method returns a new array.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Collection
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} [predicate=_.identity] The function invoked per iteration.
             * @returns {Array} Returns the new filtered array.
             * @see _.reject
             * @example
             *
             * var users = [
             *   { 'user': 'barney', 'age': 36, 'active': true },
             *   { 'user': 'fred',   'age': 40, 'active': false }
             * ];
             *
             * _.filter(users, function(o) { return !o.active; });
             * // => objects for ['fred']
             *
             * // The `_.matches` iteratee shorthand.
             * _.filter(users, { 'age': 36, 'active': true });
             * // => objects for ['barney']
             *
             * // The `_.matchesProperty` iteratee shorthand.
             * _.filter(users, ['active', false]);
             * // => objects for ['fred']
             *
             * // The `_.property` iteratee shorthand.
             * _.filter(users, 'active');
             * // => objects for ['barney']
             */
            function filter(collection, predicate) {
              var func = isArray(collection) ? arrayFilter : baseFilter;
              return func(collection, getIteratee(predicate, 3));
            }

            /**
             * Iterates over elements of `collection`, returning the first element
             * `predicate` returns truthy for. The predicate is invoked with three
             * arguments: (value, index|key, collection).
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Collection
             * @param {Array|Object} collection The collection to inspect.
             * @param {Function} [predicate=_.identity] The function invoked per iteration.
             * @param {number} [fromIndex=0] The index to search from.
             * @returns {*} Returns the matched element, else `undefined`.
             * @example
             *
             * var users = [
             *   { 'user': 'barney',  'age': 36, 'active': true },
             *   { 'user': 'fred',    'age': 40, 'active': false },
             *   { 'user': 'pebbles', 'age': 1,  'active': true }
             * ];
             *
             * _.find(users, function(o) { return o.age < 40; });
             * // => object for 'barney'
             *
             * // The `_.matches` iteratee shorthand.
             * _.find(users, { 'age': 1, 'active': true });
             * // => object for 'pebbles'
             *
             * // The `_.matchesProperty` iteratee shorthand.
             * _.find(users, ['active', false]);
             * // => object for 'fred'
             *
             * // The `_.property` iteratee shorthand.
             * _.find(users, 'active');
             * // => object for 'barney'
             */
            var find = createFind(findIndex);

            /**
             * This method is like `_.find` except that it iterates over elements of
             * `collection` from right to left.
             *
             * @static
             * @memberOf _
             * @since 2.0.0
             * @category Collection
             * @param {Array|Object} collection The collection to inspect.
             * @param {Function} [predicate=_.identity] The function invoked per iteration.
             * @param {number} [fromIndex=collection.length-1] The index to search from.
             * @returns {*} Returns the matched element, else `undefined`.
             * @example
             *
             * _.findLast([1, 2, 3, 4], function(n) {
             *   return n % 2 == 1;
             * });
             * // => 3
             */
            var findLast = createFind(findLastIndex);

            /**
             * Creates a flattened array of values by running each element in `collection`
             * thru `iteratee` and flattening the mapped results. The iteratee is invoked
             * with three arguments: (value, index|key, collection).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Collection
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} [iteratee=_.identity] The function invoked per iteration.
             * @returns {Array} Returns the new flattened array.
             * @example
             *
             * function duplicate(n) {
             *   return [n, n];
             * }
             *
             * _.flatMap([1, 2], duplicate);
             * // => [1, 1, 2, 2]
             */
            function flatMap(collection, iteratee) {
              return baseFlatten(map(collection, iteratee), 1);
            }

            /**
             * This method is like `_.flatMap` except that it recursively flattens the
             * mapped results.
             *
             * @static
             * @memberOf _
             * @since 4.7.0
             * @category Collection
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} [iteratee=_.identity] The function invoked per iteration.
             * @returns {Array} Returns the new flattened array.
             * @example
             *
             * function duplicate(n) {
             *   return [[[n, n]]];
             * }
             *
             * _.flatMapDeep([1, 2], duplicate);
             * // => [1, 1, 2, 2]
             */
            function flatMapDeep(collection, iteratee) {
              return baseFlatten(map(collection, iteratee), INFINITY);
            }

            /**
             * This method is like `_.flatMap` except that it recursively flattens the
             * mapped results up to `depth` times.
             *
             * @static
             * @memberOf _
             * @since 4.7.0
             * @category Collection
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} [iteratee=_.identity] The function invoked per iteration.
             * @param {number} [depth=1] The maximum recursion depth.
             * @returns {Array} Returns the new flattened array.
             * @example
             *
             * function duplicate(n) {
             *   return [[[n, n]]];
             * }
             *
             * _.flatMapDepth([1, 2], duplicate, 2);
             * // => [[1, 1], [2, 2]]
             */
            function flatMapDepth(collection, iteratee, depth) {
              depth = depth === undefined ? 1 : toInteger(depth);
              return baseFlatten(map(collection, iteratee), depth);
            }

            /**
             * Iterates over elements of `collection` and invokes `iteratee` for each element.
             * The iteratee is invoked with three arguments: (value, index|key, collection).
             * Iteratee functions may exit iteration early by explicitly returning `false`.
             *
             * **Note:** As with other "Collections" methods, objects with a "length"
             * property are iterated like arrays. To avoid this behavior use `_.forIn`
             * or `_.forOwn` for object iteration.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @alias each
             * @category Collection
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} [iteratee=_.identity] The function invoked per iteration.
             * @returns {Array|Object} Returns `collection`.
             * @see _.forEachRight
             * @example
             *
             * _.forEach([1, 2], function(value) {
             *   console.log(value);
             * });
             * // => Logs `1` then `2`.
             *
             * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
             *   console.log(key);
             * });
             * // => Logs 'a' then 'b' (iteration order is not guaranteed).
             */
            function forEach(collection, iteratee) {
              var func = isArray(collection) ? arrayEach : baseEach;
              return func(collection, getIteratee(iteratee, 3));
            }

            /**
             * This method is like `_.forEach` except that it iterates over elements of
             * `collection` from right to left.
             *
             * @static
             * @memberOf _
             * @since 2.0.0
             * @alias eachRight
             * @category Collection
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} [iteratee=_.identity] The function invoked per iteration.
             * @returns {Array|Object} Returns `collection`.
             * @see _.forEach
             * @example
             *
             * _.forEachRight([1, 2], function(value) {
             *   console.log(value);
             * });
             * // => Logs `2` then `1`.
             */
            function forEachRight(collection, iteratee) {
              var func = isArray(collection) ? arrayEachRight : baseEachRight;
              return func(collection, getIteratee(iteratee, 3));
            }

            /**
             * Creates an object composed of keys generated from the results of running
             * each element of `collection` thru `iteratee`. The order of grouped values
             * is determined by the order they occur in `collection`. The corresponding
             * value of each key is an array of elements responsible for generating the
             * key. The iteratee is invoked with one argument: (value).
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Collection
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
             * @returns {Object} Returns the composed aggregate object.
             * @example
             *
             * _.groupBy([6.1, 4.2, 6.3], Math.floor);
             * // => { '4': [4.2], '6': [6.1, 6.3] }
             *
             * // The `_.property` iteratee shorthand.
             * _.groupBy(['one', 'two', 'three'], 'length');
             * // => { '3': ['one', 'two'], '5': ['three'] }
             */
            var groupBy = createAggregator(function (result, value, key) {
              if (hasOwnProperty.call(result, key)) {
                result[key].push(value);
              } else {
                baseAssignValue(result, key, [value]);
              }
            });

            /**
             * Checks if `value` is in `collection`. If `collection` is a string, it's
             * checked for a substring of `value`, otherwise
             * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
             * is used for equality comparisons. If `fromIndex` is negative, it's used as
             * the offset from the end of `collection`.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Collection
             * @param {Array|Object|string} collection The collection to inspect.
             * @param {*} value The value to search for.
             * @param {number} [fromIndex=0] The index to search from.
             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
             * @returns {boolean} Returns `true` if `value` is found, else `false`.
             * @example
             *
             * _.includes([1, 2, 3], 1);
             * // => true
             *
             * _.includes([1, 2, 3], 1, 2);
             * // => false
             *
             * _.includes({ 'a': 1, 'b': 2 }, 1);
             * // => true
             *
             * _.includes('abcd', 'bc');
             * // => true
             */
            function includes(collection, value, fromIndex, guard) {
              collection = isArrayLike(collection) ? collection : values(collection);
              fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;

              var length = collection.length;
              if (fromIndex < 0) {
                fromIndex = nativeMax(length + fromIndex, 0);
              }
              return isString(collection)
                ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)
                : (!!length && baseIndexOf(collection, value, fromIndex) > -1);
            }

            /**
             * Invokes the method at `path` of each element in `collection`, returning
             * an array of the results of each invoked method. Any additional arguments
             * are provided to each invoked method. If `path` is a function, it's invoked
             * for, and `this` bound to, each element in `collection`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Collection
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Array|Function|string} path The path of the method to invoke or
             *  the function invoked per iteration.
             * @param {...*} [args] The arguments to invoke each method with.
             * @returns {Array} Returns the array of results.
             * @example
             *
             * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');
             * // => [[1, 5, 7], [1, 2, 3]]
             *
             * _.invokeMap([123, 456], String.prototype.split, '');
             * // => [['1', '2', '3'], ['4', '5', '6']]
             */
            var invokeMap = baseRest(function (collection, path, args) {
              var index = -1,
                isFunc = typeof path == 'function',
                result = isArrayLike(collection) ? Array(collection.length) : [];

              baseEach(collection, function (value) {
                result[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);
              });
              return result;
            });

            /**
             * Creates an object composed of keys generated from the results of running
             * each element of `collection` thru `iteratee`. The corresponding value of
             * each key is the last element responsible for generating the key. The
             * iteratee is invoked with one argument: (value).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Collection
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
             * @returns {Object} Returns the composed aggregate object.
             * @example
             *
             * var array = [
             *   { 'dir': 'left', 'code': 97 },
             *   { 'dir': 'right', 'code': 100 }
             * ];
             *
             * _.keyBy(array, function(o) {
             *   return String.fromCharCode(o.code);
             * });
             * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
             *
             * _.keyBy(array, 'dir');
             * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
             */
            var keyBy = createAggregator(function (result, value, key) {
              baseAssignValue(result, key, value);
            });

            /**
             * Creates an array of values by running each element in `collection` thru
             * `iteratee`. The iteratee is invoked with three arguments:
             * (value, index|key, collection).
             *
             * Many lodash methods are guarded to work as iteratees for methods like
             * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
             *
             * The guarded methods are:
             * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
             * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
             * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
             * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Collection
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} [iteratee=_.identity] The function invoked per iteration.
             * @returns {Array} Returns the new mapped array.
             * @example
             *
             * function square(n) {
             *   return n * n;
             * }
             *
             * _.map([4, 8], square);
             * // => [16, 64]
             *
             * _.map({ 'a': 4, 'b': 8 }, square);
             * // => [16, 64] (iteration order is not guaranteed)
             *
             * var users = [
             *   { 'user': 'barney' },
             *   { 'user': 'fred' }
             * ];
             *
             * // The `_.property` iteratee shorthand.
             * _.map(users, 'user');
             * // => ['barney', 'fred']
             */
            function map(collection, iteratee) {
              var func = isArray(collection) ? arrayMap : baseMap;
              return func(collection, getIteratee(iteratee, 3));
            }

            /**
             * This method is like `_.sortBy` except that it allows specifying the sort
             * orders of the iteratees to sort by. If `orders` is unspecified, all values
             * are sorted in ascending order. Otherwise, specify an order of "desc" for
             * descending or "asc" for ascending sort order of corresponding values.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Collection
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]
             *  The iteratees to sort by.
             * @param {string[]} [orders] The sort orders of `iteratees`.
             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
             * @returns {Array} Returns the new sorted array.
             * @example
             *
             * var users = [
             *   { 'user': 'fred',   'age': 48 },
             *   { 'user': 'barney', 'age': 34 },
             *   { 'user': 'fred',   'age': 40 },
             *   { 'user': 'barney', 'age': 36 }
             * ];
             *
             * // Sort by `user` in ascending order and by `age` in descending order.
             * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);
             * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
             */
            function orderBy(collection, iteratees, orders, guard) {
              if (collection == null) {
                return [];
              }
              if (!isArray(iteratees)) {
                iteratees = iteratees == null ? [] : [iteratees];
              }
              orders = guard ? undefined : orders;
              if (!isArray(orders)) {
                orders = orders == null ? [] : [orders];
              }
              return baseOrderBy(collection, iteratees, orders);
            }

            /**
             * Creates an array of elements split into two groups, the first of which
             * contains elements `predicate` returns truthy for, the second of which
             * contains elements `predicate` returns falsey for. The predicate is
             * invoked with one argument: (value).
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Collection
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} [predicate=_.identity] The function invoked per iteration.
             * @returns {Array} Returns the array of grouped elements.
             * @example
             *
             * var users = [
             *   { 'user': 'barney',  'age': 36, 'active': false },
             *   { 'user': 'fred',    'age': 40, 'active': true },
             *   { 'user': 'pebbles', 'age': 1,  'active': false }
             * ];
             *
             * _.partition(users, function(o) { return o.active; });
             * // => objects for [['fred'], ['barney', 'pebbles']]
             *
             * // The `_.matches` iteratee shorthand.
             * _.partition(users, { 'age': 1, 'active': false });
             * // => objects for [['pebbles'], ['barney', 'fred']]
             *
             * // The `_.matchesProperty` iteratee shorthand.
             * _.partition(users, ['active', false]);
             * // => objects for [['barney', 'pebbles'], ['fred']]
             *
             * // The `_.property` iteratee shorthand.
             * _.partition(users, 'active');
             * // => objects for [['fred'], ['barney', 'pebbles']]
             */
            var partition = createAggregator(function (result, value, key) {
              result[key ? 0 : 1].push(value);
            }, function () { return [[], []]; });

            /**
             * Reduces `collection` to a value which is the accumulated result of running
             * each element in `collection` thru `iteratee`, where each successive
             * invocation is supplied the return value of the previous. If `accumulator`
             * is not given, the first element of `collection` is used as the initial
             * value. The iteratee is invoked with four arguments:
             * (accumulator, value, index|key, collection).
             *
             * Many lodash methods are guarded to work as iteratees for methods like
             * `_.reduce`, `_.reduceRight`, and `_.transform`.
             *
             * The guarded methods are:
             * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
             * and `sortBy`
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Collection
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} [iteratee=_.identity] The function invoked per iteration.
             * @param {*} [accumulator] The initial value.
             * @returns {*} Returns the accumulated value.
             * @see _.reduceRight
             * @example
             *
             * _.reduce([1, 2], function(sum, n) {
             *   return sum + n;
             * }, 0);
             * // => 3
             *
             * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
             *   (result[value] || (result[value] = [])).push(key);
             *   return result;
             * }, {});
             * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
             */
            function reduce(collection, iteratee, accumulator) {
              var func = isArray(collection) ? arrayReduce : baseReduce,
                initAccum = arguments.length < 3;

              return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEach);
            }

            /**
             * This method is like `_.reduce` except that it iterates over elements of
             * `collection` from right to left.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Collection
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} [iteratee=_.identity] The function invoked per iteration.
             * @param {*} [accumulator] The initial value.
             * @returns {*} Returns the accumulated value.
             * @see _.reduce
             * @example
             *
             * var array = [[0, 1], [2, 3], [4, 5]];
             *
             * _.reduceRight(array, function(flattened, other) {
             *   return flattened.concat(other);
             * }, []);
             * // => [4, 5, 2, 3, 0, 1]
             */
            function reduceRight(collection, iteratee, accumulator) {
              var func = isArray(collection) ? arrayReduceRight : baseReduce,
                initAccum = arguments.length < 3;

              return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEachRight);
            }

            /**
             * The opposite of `_.filter`; this method returns the elements of `collection`
             * that `predicate` does **not** return truthy for.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Collection
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} [predicate=_.identity] The function invoked per iteration.
             * @returns {Array} Returns the new filtered array.
             * @see _.filter
             * @example
             *
             * var users = [
             *   { 'user': 'barney', 'age': 36, 'active': false },
             *   { 'user': 'fred',   'age': 40, 'active': true }
             * ];
             *
             * _.reject(users, function(o) { return !o.active; });
             * // => objects for ['fred']
             *
             * // The `_.matches` iteratee shorthand.
             * _.reject(users, { 'age': 40, 'active': true });
             * // => objects for ['barney']
             *
             * // The `_.matchesProperty` iteratee shorthand.
             * _.reject(users, ['active', false]);
             * // => objects for ['fred']
             *
             * // The `_.property` iteratee shorthand.
             * _.reject(users, 'active');
             * // => objects for ['barney']
             */
            function reject(collection, predicate) {
              var func = isArray(collection) ? arrayFilter : baseFilter;
              return func(collection, negate(getIteratee(predicate, 3)));
            }

            /**
             * Gets a random element from `collection`.
             *
             * @static
             * @memberOf _
             * @since 2.0.0
             * @category Collection
             * @param {Array|Object} collection The collection to sample.
             * @returns {*} Returns the random element.
             * @example
             *
             * _.sample([1, 2, 3, 4]);
             * // => 2
             */
            function sample(collection) {
              var func = isArray(collection) ? arraySample : baseSample;
              return func(collection);
            }

            /**
             * Gets `n` random elements at unique keys from `collection` up to the
             * size of `collection`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Collection
             * @param {Array|Object} collection The collection to sample.
             * @param {number} [n=1] The number of elements to sample.
             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
             * @returns {Array} Returns the random elements.
             * @example
             *
             * _.sampleSize([1, 2, 3], 2);
             * // => [3, 1]
             *
             * _.sampleSize([1, 2, 3], 4);
             * // => [2, 3, 1]
             */
            function sampleSize(collection, n, guard) {
              if ((guard ? isIterateeCall(collection, n, guard) : n === undefined)) {
                n = 1;
              } else {
                n = toInteger(n);
              }
              var func = isArray(collection) ? arraySampleSize : baseSampleSize;
              return func(collection, n);
            }

            /**
             * Creates an array of shuffled values, using a version of the
             * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Collection
             * @param {Array|Object} collection The collection to shuffle.
             * @returns {Array} Returns the new shuffled array.
             * @example
             *
             * _.shuffle([1, 2, 3, 4]);
             * // => [4, 1, 3, 2]
             */
            function shuffle(collection) {
              var func = isArray(collection) ? arrayShuffle : baseShuffle;
              return func(collection);
            }

            /**
             * Gets the size of `collection` by returning its length for array-like
             * values or the number of own enumerable string keyed properties for objects.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Collection
             * @param {Array|Object|string} collection The collection to inspect.
             * @returns {number} Returns the collection size.
             * @example
             *
             * _.size([1, 2, 3]);
             * // => 3
             *
             * _.size({ 'a': 1, 'b': 2 });
             * // => 2
             *
             * _.size('pebbles');
             * // => 7
             */
            function size(collection) {
              if (collection == null) {
                return 0;
              }
              if (isArrayLike(collection)) {
                return isString(collection) ? stringSize(collection) : collection.length;
              }
              var tag = getTag(collection);
              if (tag == mapTag || tag == setTag) {
                return collection.size;
              }
              return baseKeys(collection).length;
            }

            /**
             * Checks if `predicate` returns truthy for **any** element of `collection`.
             * Iteration is stopped once `predicate` returns truthy. The predicate is
             * invoked with three arguments: (value, index|key, collection).
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Collection
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} [predicate=_.identity] The function invoked per iteration.
             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
             * @returns {boolean} Returns `true` if any element passes the predicate check,
             *  else `false`.
             * @example
             *
             * _.some([null, 0, 'yes', false], Boolean);
             * // => true
             *
             * var users = [
             *   { 'user': 'barney', 'active': true },
             *   { 'user': 'fred',   'active': false }
             * ];
             *
             * // The `_.matches` iteratee shorthand.
             * _.some(users, { 'user': 'barney', 'active': false });
             * // => false
             *
             * // The `_.matchesProperty` iteratee shorthand.
             * _.some(users, ['active', false]);
             * // => true
             *
             * // The `_.property` iteratee shorthand.
             * _.some(users, 'active');
             * // => true
             */
            function some(collection, predicate, guard) {
              var func = isArray(collection) ? arraySome : baseSome;
              if (guard && isIterateeCall(collection, predicate, guard)) {
                predicate = undefined;
              }
              return func(collection, getIteratee(predicate, 3));
            }

            /**
             * Creates an array of elements, sorted in ascending order by the results of
             * running each element in a collection thru each iteratee. This method
             * performs a stable sort, that is, it preserves the original sort order of
             * equal elements. The iteratees are invoked with one argument: (value).
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Collection
             * @param {Array|Object} collection The collection to iterate over.
             * @param {...(Function|Function[])} [iteratees=[_.identity]]
             *  The iteratees to sort by.
             * @returns {Array} Returns the new sorted array.
             * @example
             *
             * var users = [
             *   { 'user': 'fred',   'age': 48 },
             *   { 'user': 'barney', 'age': 36 },
             *   { 'user': 'fred',   'age': 40 },
             *   { 'user': 'barney', 'age': 34 }
             * ];
             *
             * _.sortBy(users, [function(o) { return o.user; }]);
             * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
             *
             * _.sortBy(users, ['user', 'age']);
             * // => objects for [['barney', 34], ['barney', 36], ['fred', 40], ['fred', 48]]
             */
            var sortBy = baseRest(function (collection, iteratees) {
              if (collection == null) {
                return [];
              }
              var length = iteratees.length;
              if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
                iteratees = [];
              } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
                iteratees = [iteratees[0]];
              }
              return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
            });

            /*------------------------------------------------------------------------*/

            /**
             * Gets the timestamp of the number of milliseconds that have elapsed since
             * the Unix epoch (1 January 1970 00:00:00 UTC).
             *
             * @static
             * @memberOf _
             * @since 2.4.0
             * @category Date
             * @returns {number} Returns the timestamp.
             * @example
             *
             * _.defer(function(stamp) {
             *   console.log(_.now() - stamp);
             * }, _.now());
             * // => Logs the number of milliseconds it took for the deferred invocation.
             */
            var now = ctxNow || function () {
              return root.Date.now();
            };

            /*------------------------------------------------------------------------*/

            /**
             * The opposite of `_.before`; this method creates a function that invokes
             * `func` once it's called `n` or more times.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Function
             * @param {number} n The number of calls before `func` is invoked.
             * @param {Function} func The function to restrict.
             * @returns {Function} Returns the new restricted function.
             * @example
             *
             * var saves = ['profile', 'settings'];
             *
             * var done = _.after(saves.length, function() {
             *   console.log('done saving!');
             * });
             *
             * _.forEach(saves, function(type) {
             *   asyncSave({ 'type': type, 'complete': done });
             * });
             * // => Logs 'done saving!' after the two async saves have completed.
             */
            function after(n, func) {
              if (typeof func != 'function') {
                throw new TypeError(FUNC_ERROR_TEXT);
              }
              n = toInteger(n);
              return function () {
                if (--n < 1) {
                  return func.apply(this, arguments);
                }
              };
            }

            /**
             * Creates a function that invokes `func`, with up to `n` arguments,
             * ignoring any additional arguments.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Function
             * @param {Function} func The function to cap arguments for.
             * @param {number} [n=func.length] The arity cap.
             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
             * @returns {Function} Returns the new capped function.
             * @example
             *
             * _.map(['6', '8', '10'], _.ary(parseInt, 1));
             * // => [6, 8, 10]
             */
            function ary(func, n, guard) {
              n = guard ? undefined : n;
              n = (func && n == null) ? func.length : n;
              return createWrap(func, WRAP_ARY_FLAG, undefined, undefined, undefined, undefined, n);
            }

            /**
             * Creates a function that invokes `func`, with the `this` binding and arguments
             * of the created function, while it's called less than `n` times. Subsequent
             * calls to the created function return the result of the last `func` invocation.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Function
             * @param {number} n The number of calls at which `func` is no longer invoked.
             * @param {Function} func The function to restrict.
             * @returns {Function} Returns the new restricted function.
             * @example
             *
             * jQuery(element).on('click', _.before(5, addContactToList));
             * // => Allows adding up to 4 contacts to the list.
             */
            function before(n, func) {
              var result;
              if (typeof func != 'function') {
                throw new TypeError(FUNC_ERROR_TEXT);
              }
              n = toInteger(n);
              return function () {
                if (--n > 0) {
                  result = func.apply(this, arguments);
                }
                if (n <= 1) {
                  func = undefined;
                }
                return result;
              };
            }

            /**
             * Creates a function that invokes `func` with the `this` binding of `thisArg`
             * and `partials` prepended to the arguments it receives.
             *
             * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
             * may be used as a placeholder for partially applied arguments.
             *
             * **Note:** Unlike native `Function#bind`, this method doesn't set the "length"
             * property of bound functions.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Function
             * @param {Function} func The function to bind.
             * @param {*} thisArg The `this` binding of `func`.
             * @param {...*} [partials] The arguments to be partially applied.
             * @returns {Function} Returns the new bound function.
             * @example
             *
             * function greet(greeting, punctuation) {
             *   return greeting + ' ' + this.user + punctuation;
             * }
             *
             * var object = { 'user': 'fred' };
             *
             * var bound = _.bind(greet, object, 'hi');
             * bound('!');
             * // => 'hi fred!'
             *
             * // Bound with placeholders.
             * var bound = _.bind(greet, object, _, '!');
             * bound('hi');
             * // => 'hi fred!'
             */
            var bind = baseRest(function (func, thisArg, partials) {
              var bitmask = WRAP_BIND_FLAG;
              if (partials.length) {
                var holders = replaceHolders(partials, getHolder(bind));
                bitmask |= WRAP_PARTIAL_FLAG;
              }
              return createWrap(func, bitmask, thisArg, partials, holders);
            });

            /**
             * Creates a function that invokes the method at `object[key]` with `partials`
             * prepended to the arguments it receives.
             *
             * This method differs from `_.bind` by allowing bound functions to reference
             * methods that may be redefined or don't yet exist. See
             * [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
             * for more details.
             *
             * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
             * builds, may be used as a placeholder for partially applied arguments.
             *
             * @static
             * @memberOf _
             * @since 0.10.0
             * @category Function
             * @param {Object} object The object to invoke the method on.
             * @param {string} key The key of the method.
             * @param {...*} [partials] The arguments to be partially applied.
             * @returns {Function} Returns the new bound function.
             * @example
             *
             * var object = {
             *   'user': 'fred',
             *   'greet': function(greeting, punctuation) {
             *     return greeting + ' ' + this.user + punctuation;
             *   }
             * };
             *
             * var bound = _.bindKey(object, 'greet', 'hi');
             * bound('!');
             * // => 'hi fred!'
             *
             * object.greet = function(greeting, punctuation) {
             *   return greeting + 'ya ' + this.user + punctuation;
             * };
             *
             * bound('!');
             * // => 'hiya fred!'
             *
             * // Bound with placeholders.
             * var bound = _.bindKey(object, 'greet', _, '!');
             * bound('hi');
             * // => 'hiya fred!'
             */
            var bindKey = baseRest(function (object, key, partials) {
              var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;
              if (partials.length) {
                var holders = replaceHolders(partials, getHolder(bindKey));
                bitmask |= WRAP_PARTIAL_FLAG;
              }
              return createWrap(key, bitmask, object, partials, holders);
            });

            /**
             * Creates a function that accepts arguments of `func` and either invokes
             * `func` returning its result, if at least `arity` number of arguments have
             * been provided, or returns a function that accepts the remaining `func`
             * arguments, and so on. The arity of `func` may be specified if `func.length`
             * is not sufficient.
             *
             * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
             * may be used as a placeholder for provided arguments.
             *
             * **Note:** This method doesn't set the "length" property of curried functions.
             *
             * @static
             * @memberOf _
             * @since 2.0.0
             * @category Function
             * @param {Function} func The function to curry.
             * @param {number} [arity=func.length] The arity of `func`.
             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
             * @returns {Function} Returns the new curried function.
             * @example
             *
             * var abc = function(a, b, c) {
             *   return [a, b, c];
             * };
             *
             * var curried = _.curry(abc);
             *
             * curried(1)(2)(3);
             * // => [1, 2, 3]
             *
             * curried(1, 2)(3);
             * // => [1, 2, 3]
             *
             * curried(1, 2, 3);
             * // => [1, 2, 3]
             *
             * // Curried with placeholders.
             * curried(1)(_, 3)(2);
             * // => [1, 2, 3]
             */
            function curry(func, arity, guard) {
              arity = guard ? undefined : arity;
              var result = createWrap(func, WRAP_CURRY_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
              result.placeholder = curry.placeholder;
              return result;
            }

            /**
             * This method is like `_.curry` except that arguments are applied to `func`
             * in the manner of `_.partialRight` instead of `_.partial`.
             *
             * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
             * builds, may be used as a placeholder for provided arguments.
             *
             * **Note:** This method doesn't set the "length" property of curried functions.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Function
             * @param {Function} func The function to curry.
             * @param {number} [arity=func.length] The arity of `func`.
             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
             * @returns {Function} Returns the new curried function.
             * @example
             *
             * var abc = function(a, b, c) {
             *   return [a, b, c];
             * };
             *
             * var curried = _.curryRight(abc);
             *
             * curried(3)(2)(1);
             * // => [1, 2, 3]
             *
             * curried(2, 3)(1);
             * // => [1, 2, 3]
             *
             * curried(1, 2, 3);
             * // => [1, 2, 3]
             *
             * // Curried with placeholders.
             * curried(3)(1, _)(2);
             * // => [1, 2, 3]
             */
            function curryRight(func, arity, guard) {
              arity = guard ? undefined : arity;
              var result = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
              result.placeholder = curryRight.placeholder;
              return result;
            }

            /**
             * Creates a debounced function that delays invoking `func` until after `wait`
             * milliseconds have elapsed since the last time the debounced function was
             * invoked. The debounced function comes with a `cancel` method to cancel
             * delayed `func` invocations and a `flush` method to immediately invoke them.
             * Provide `options` to indicate whether `func` should be invoked on the
             * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
             * with the last arguments provided to the debounced function. Subsequent
             * calls to the debounced function return the result of the last `func`
             * invocation.
             *
             * **Note:** If `leading` and `trailing` options are `true`, `func` is
             * invoked on the trailing edge of the timeout only if the debounced function
             * is invoked more than once during the `wait` timeout.
             *
             * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
             * until to the next tick, similar to `setTimeout` with a timeout of `0`.
             *
             * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
             * for details over the differences between `_.debounce` and `_.throttle`.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Function
             * @param {Function} func The function to debounce.
             * @param {number} [wait=0] The number of milliseconds to delay.
             * @param {Object} [options={}] The options object.
             * @param {boolean} [options.leading=false]
             *  Specify invoking on the leading edge of the timeout.
             * @param {number} [options.maxWait]
             *  The maximum time `func` is allowed to be delayed before it's invoked.
             * @param {boolean} [options.trailing=true]
             *  Specify invoking on the trailing edge of the timeout.
             * @returns {Function} Returns the new debounced function.
             * @example
             *
             * // Avoid costly calculations while the window size is in flux.
             * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
             *
             * // Invoke `sendMail` when clicked, debouncing subsequent calls.
             * jQuery(element).on('click', _.debounce(sendMail, 300, {
             *   'leading': true,
             *   'trailing': false
             * }));
             *
             * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
             * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
             * var source = new EventSource('/stream');
             * jQuery(source).on('message', debounced);
             *
             * // Cancel the trailing debounced invocation.
             * jQuery(window).on('popstate', debounced.cancel);
             */
            function debounce(func, wait, options) {
              var lastArgs,
                lastThis,
                maxWait,
                result,
                timerId,
                lastCallTime,
                lastInvokeTime = 0,
                leading = false,
                maxing = false,
                trailing = true;

              if (typeof func != 'function') {
                throw new TypeError(FUNC_ERROR_TEXT);
              }
              wait = toNumber(wait) || 0;
              if (isObject(options)) {
                leading = !!options.leading;
                maxing = 'maxWait' in options;
                maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
                trailing = 'trailing' in options ? !!options.trailing : trailing;
              }

              function invokeFunc(time) {
                var args = lastArgs,
                  thisArg = lastThis;

                lastArgs = lastThis = undefined;
                lastInvokeTime = time;
                result = func.apply(thisArg, args);
                return result;
              }

              function leadingEdge(time) {
                // Reset any `maxWait` timer.
                lastInvokeTime = time;
                // Start the timer for the trailing edge.
                timerId = setTimeout(timerExpired, wait);
                // Invoke the leading edge.
                return leading ? invokeFunc(time) : result;
              }

              function remainingWait(time) {
                var timeSinceLastCall = time - lastCallTime,
                  timeSinceLastInvoke = time - lastInvokeTime,
                  timeWaiting = wait - timeSinceLastCall;

                return maxing
                  ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)
                  : timeWaiting;
              }

              function shouldInvoke(time) {
                var timeSinceLastCall = time - lastCallTime,
                  timeSinceLastInvoke = time - lastInvokeTime;

                // Either this is the first call, activity has stopped and we're at the
                // trailing edge, the system time has gone backwards and we're treating
                // it as the trailing edge, or we've hit the `maxWait` limit.
                return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||
                  (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
              }

              function timerExpired() {
                var time = now();
                if (shouldInvoke(time)) {
                  return trailingEdge(time);
                }
                // Restart the timer.
                timerId = setTimeout(timerExpired, remainingWait(time));
              }

              function trailingEdge(time) {
                timerId = undefined;

                // Only invoke if we have `lastArgs` which means `func` has been
                // debounced at least once.
                if (trailing && lastArgs) {
                  return invokeFunc(time);
                }
                lastArgs = lastThis = undefined;
                return result;
              }

              function cancel() {
                if (timerId !== undefined) {
                  clearTimeout(timerId);
                }
                lastInvokeTime = 0;
                lastArgs = lastCallTime = lastThis = timerId = undefined;
              }

              function flush() {
                return timerId === undefined ? result : trailingEdge(now());
              }

              function debounced() {
                var time = now(),
                  isInvoking = shouldInvoke(time);

                lastArgs = arguments;
                lastThis = this;
                lastCallTime = time;

                if (isInvoking) {
                  if (timerId === undefined) {
                    return leadingEdge(lastCallTime);
                  }
                  if (maxing) {
                    // Handle invocations in a tight loop.
                    timerId = setTimeout(timerExpired, wait);
                    return invokeFunc(lastCallTime);
                  }
                }
                if (timerId === undefined) {
                  timerId = setTimeout(timerExpired, wait);
                }
                return result;
              }
              debounced.cancel = cancel;
              debounced.flush = flush;
              return debounced;
            }

            /**
             * Defers invoking the `func` until the current call stack has cleared. Any
             * additional arguments are provided to `func` when it's invoked.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Function
             * @param {Function} func The function to defer.
             * @param {...*} [args] The arguments to invoke `func` with.
             * @returns {number} Returns the timer id.
             * @example
             *
             * _.defer(function(text) {
             *   console.log(text);
             * }, 'deferred');
             * // => Logs 'deferred' after one millisecond.
             */
            var defer = baseRest(function (func, args) {
              return baseDelay(func, 1, args);
            });

            /**
             * Invokes `func` after `wait` milliseconds. Any additional arguments are
             * provided to `func` when it's invoked.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Function
             * @param {Function} func The function to delay.
             * @param {number} wait The number of milliseconds to delay invocation.
             * @param {...*} [args] The arguments to invoke `func` with.
             * @returns {number} Returns the timer id.
             * @example
             *
             * _.delay(function(text) {
             *   console.log(text);
             * }, 1000, 'later');
             * // => Logs 'later' after one second.
             */
            var delay = baseRest(function (func, wait, args) {
              return baseDelay(func, toNumber(wait) || 0, args);
            });

            /**
             * Creates a function that invokes `func` with arguments reversed.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Function
             * @param {Function} func The function to flip arguments for.
             * @returns {Function} Returns the new flipped function.
             * @example
             *
             * var flipped = _.flip(function() {
             *   return _.toArray(arguments);
             * });
             *
             * flipped('a', 'b', 'c', 'd');
             * // => ['d', 'c', 'b', 'a']
             */
            function flip(func) {
              return createWrap(func, WRAP_FLIP_FLAG);
            }

            /**
             * Creates a function that memoizes the result of `func`. If `resolver` is
             * provided, it determines the cache key for storing the result based on the
             * arguments provided to the memoized function. By default, the first argument
             * provided to the memoized function is used as the map cache key. The `func`
             * is invoked with the `this` binding of the memoized function.
             *
             * **Note:** The cache is exposed as the `cache` property on the memoized
             * function. Its creation may be customized by replacing the `_.memoize.Cache`
             * constructor with one whose instances implement the
             * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
             * method interface of `clear`, `delete`, `get`, `has`, and `set`.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Function
             * @param {Function} func The function to have its output memoized.
             * @param {Function} [resolver] The function to resolve the cache key.
             * @returns {Function} Returns the new memoized function.
             * @example
             *
             * var object = { 'a': 1, 'b': 2 };
             * var other = { 'c': 3, 'd': 4 };
             *
             * var values = _.memoize(_.values);
             * values(object);
             * // => [1, 2]
             *
             * values(other);
             * // => [3, 4]
             *
             * object.a = 2;
             * values(object);
             * // => [1, 2]
             *
             * // Modify the result cache.
             * values.cache.set(object, ['a', 'b']);
             * values(object);
             * // => ['a', 'b']
             *
             * // Replace `_.memoize.Cache`.
             * _.memoize.Cache = WeakMap;
             */
            function memoize(func, resolver) {
              if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
                throw new TypeError(FUNC_ERROR_TEXT);
              }
              var memoized = function () {
                var args = arguments,
                  key = resolver ? resolver.apply(this, args) : args[0],
                  cache = memoized.cache;

                if (cache.has(key)) {
                  return cache.get(key);
                }
                var result = func.apply(this, args);
                memoized.cache = cache.set(key, result) || cache;
                return result;
              };
              memoized.cache = new (memoize.Cache || MapCache);
              return memoized;
            }

            // Expose `MapCache`.
            memoize.Cache = MapCache;

            /**
             * Creates a function that negates the result of the predicate `func`. The
             * `func` predicate is invoked with the `this` binding and arguments of the
             * created function.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Function
             * @param {Function} predicate The predicate to negate.
             * @returns {Function} Returns the new negated function.
             * @example
             *
             * function isEven(n) {
             *   return n % 2 == 0;
             * }
             *
             * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
             * // => [1, 3, 5]
             */
            function negate(predicate) {
              if (typeof predicate != 'function') {
                throw new TypeError(FUNC_ERROR_TEXT);
              }
              return function () {
                var args = arguments;
                switch (args.length) {
                  case 0: return !predicate.call(this);
                  case 1: return !predicate.call(this, args[0]);
                  case 2: return !predicate.call(this, args[0], args[1]);
                  case 3: return !predicate.call(this, args[0], args[1], args[2]);
                }
                return !predicate.apply(this, args);
              };
            }

            /**
             * Creates a function that is restricted to invoking `func` once. Repeat calls
             * to the function return the value of the first invocation. The `func` is
             * invoked with the `this` binding and arguments of the created function.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Function
             * @param {Function} func The function to restrict.
             * @returns {Function} Returns the new restricted function.
             * @example
             *
             * var initialize = _.once(createApplication);
             * initialize();
             * initialize();
             * // => `createApplication` is invoked once
             */
            function once(func) {
              return before(2, func);
            }

            /**
             * Creates a function that invokes `func` with its arguments transformed.
             *
             * @static
             * @since 4.0.0
             * @memberOf _
             * @category Function
             * @param {Function} func The function to wrap.
             * @param {...(Function|Function[])} [transforms=[_.identity]]
             *  The argument transforms.
             * @returns {Function} Returns the new function.
             * @example
             *
             * function doubled(n) {
             *   return n * 2;
             * }
             *
             * function square(n) {
             *   return n * n;
             * }
             *
             * var func = _.overArgs(function(x, y) {
             *   return [x, y];
             * }, [square, doubled]);
             *
             * func(9, 3);
             * // => [81, 6]
             *
             * func(10, 5);
             * // => [100, 10]
             */
            var overArgs = castRest(function (func, transforms) {
              transforms = (transforms.length == 1 && isArray(transforms[0]))
                ? arrayMap(transforms[0], baseUnary(getIteratee()))
                : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));

              var funcsLength = transforms.length;
              return baseRest(function (args) {
                var index = -1,
                  length = nativeMin(args.length, funcsLength);

                while (++index < length) {
                  args[index] = transforms[index].call(this, args[index]);
                }
                return apply(func, this, args);
              });
            });

            /**
             * Creates a function that invokes `func` with `partials` prepended to the
             * arguments it receives. This method is like `_.bind` except it does **not**
             * alter the `this` binding.
             *
             * The `_.partial.placeholder` value, which defaults to `_` in monolithic
             * builds, may be used as a placeholder for partially applied arguments.
             *
             * **Note:** This method doesn't set the "length" property of partially
             * applied functions.
             *
             * @static
             * @memberOf _
             * @since 0.2.0
             * @category Function
             * @param {Function} func The function to partially apply arguments to.
             * @param {...*} [partials] The arguments to be partially applied.
             * @returns {Function} Returns the new partially applied function.
             * @example
             *
             * function greet(greeting, name) {
             *   return greeting + ' ' + name;
             * }
             *
             * var sayHelloTo = _.partial(greet, 'hello');
             * sayHelloTo('fred');
             * // => 'hello fred'
             *
             * // Partially applied with placeholders.
             * var greetFred = _.partial(greet, _, 'fred');
             * greetFred('hi');
             * // => 'hi fred'
             */
            var partial = baseRest(function (func, partials) {
              var holders = replaceHolders(partials, getHolder(partial));
              return createWrap(func, WRAP_PARTIAL_FLAG, undefined, partials, holders);
            });

            /**
             * This method is like `_.partial` except that partially applied arguments
             * are appended to the arguments it receives.
             *
             * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
             * builds, may be used as a placeholder for partially applied arguments.
             *
             * **Note:** This method doesn't set the "length" property of partially
             * applied functions.
             *
             * @static
             * @memberOf _
             * @since 1.0.0
             * @category Function
             * @param {Function} func The function to partially apply arguments to.
             * @param {...*} [partials] The arguments to be partially applied.
             * @returns {Function} Returns the new partially applied function.
             * @example
             *
             * function greet(greeting, name) {
             *   return greeting + ' ' + name;
             * }
             *
             * var greetFred = _.partialRight(greet, 'fred');
             * greetFred('hi');
             * // => 'hi fred'
             *
             * // Partially applied with placeholders.
             * var sayHelloTo = _.partialRight(greet, 'hello', _);
             * sayHelloTo('fred');
             * // => 'hello fred'
             */
            var partialRight = baseRest(function (func, partials) {
              var holders = replaceHolders(partials, getHolder(partialRight));
              return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined, partials, holders);
            });

            /**
             * Creates a function that invokes `func` with arguments arranged according
             * to the specified `indexes` where the argument value at the first index is
             * provided as the first argument, the argument value at the second index is
             * provided as the second argument, and so on.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Function
             * @param {Function} func The function to rearrange arguments for.
             * @param {...(number|number[])} indexes The arranged argument indexes.
             * @returns {Function} Returns the new function.
             * @example
             *
             * var rearged = _.rearg(function(a, b, c) {
             *   return [a, b, c];
             * }, [2, 0, 1]);
             *
             * rearged('b', 'c', 'a')
             * // => ['a', 'b', 'c']
             */
            var rearg = flatRest(function (func, indexes) {
              return createWrap(func, WRAP_REARG_FLAG, undefined, undefined, undefined, indexes);
            });

            /**
             * Creates a function that invokes `func` with the `this` binding of the
             * created function and arguments from `start` and beyond provided as
             * an array.
             *
             * **Note:** This method is based on the
             * [rest parameter](https://mdn.io/rest_parameters).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Function
             * @param {Function} func The function to apply a rest parameter to.
             * @param {number} [start=func.length-1] The start position of the rest parameter.
             * @returns {Function} Returns the new function.
             * @example
             *
             * var say = _.rest(function(what, names) {
             *   return what + ' ' + _.initial(names).join(', ') +
             *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
             * });
             *
             * say('hello', 'fred', 'barney', 'pebbles');
             * // => 'hello fred, barney, & pebbles'
             */
            function rest(func, start) {
              if (typeof func != 'function') {
                throw new TypeError(FUNC_ERROR_TEXT);
              }
              start = start === undefined ? start : toInteger(start);
              return baseRest(func, start);
            }

            /**
             * Creates a function that invokes `func` with the `this` binding of the
             * create function and an array of arguments much like
             * [`Function#apply`](http://www.ecma-international.org/ecma-262/7.0/#sec-function.prototype.apply).
             *
             * **Note:** This method is based on the
             * [spread operator](https://mdn.io/spread_operator).
             *
             * @static
             * @memberOf _
             * @since 3.2.0
             * @category Function
             * @param {Function} func The function to spread arguments over.
             * @param {number} [start=0] The start position of the spread.
             * @returns {Function} Returns the new function.
             * @example
             *
             * var say = _.spread(function(who, what) {
             *   return who + ' says ' + what;
             * });
             *
             * say(['fred', 'hello']);
             * // => 'fred says hello'
             *
             * var numbers = Promise.all([
             *   Promise.resolve(40),
             *   Promise.resolve(36)
             * ]);
             *
             * numbers.then(_.spread(function(x, y) {
             *   return x + y;
             * }));
             * // => a Promise of 76
             */
            function spread(func, start) {
              if (typeof func != 'function') {
                throw new TypeError(FUNC_ERROR_TEXT);
              }
              start = start == null ? 0 : nativeMax(toInteger(start), 0);
              return baseRest(function (args) {
                var array = args[start],
                  otherArgs = castSlice(args, 0, start);

                if (array) {
                  arrayPush(otherArgs, array);
                }
                return apply(func, this, otherArgs);
              });
            }

            /**
             * Creates a throttled function that only invokes `func` at most once per
             * every `wait` milliseconds. The throttled function comes with a `cancel`
             * method to cancel delayed `func` invocations and a `flush` method to
             * immediately invoke them. Provide `options` to indicate whether `func`
             * should be invoked on the leading and/or trailing edge of the `wait`
             * timeout. The `func` is invoked with the last arguments provided to the
             * throttled function. Subsequent calls to the throttled function return the
             * result of the last `func` invocation.
             *
             * **Note:** If `leading` and `trailing` options are `true`, `func` is
             * invoked on the trailing edge of the timeout only if the throttled function
             * is invoked more than once during the `wait` timeout.
             *
             * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
             * until to the next tick, similar to `setTimeout` with a timeout of `0`.
             *
             * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
             * for details over the differences between `_.throttle` and `_.debounce`.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Function
             * @param {Function} func The function to throttle.
             * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
             * @param {Object} [options={}] The options object.
             * @param {boolean} [options.leading=true]
             *  Specify invoking on the leading edge of the timeout.
             * @param {boolean} [options.trailing=true]
             *  Specify invoking on the trailing edge of the timeout.
             * @returns {Function} Returns the new throttled function.
             * @example
             *
             * // Avoid excessively updating the position while scrolling.
             * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
             *
             * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
             * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
             * jQuery(element).on('click', throttled);
             *
             * // Cancel the trailing throttled invocation.
             * jQuery(window).on('popstate', throttled.cancel);
             */
            function throttle(func, wait, options) {
              var leading = true,
                trailing = true;

              if (typeof func != 'function') {
                throw new TypeError(FUNC_ERROR_TEXT);
              }
              if (isObject(options)) {
                leading = 'leading' in options ? !!options.leading : leading;
                trailing = 'trailing' in options ? !!options.trailing : trailing;
              }
              return debounce(func, wait, {
                'leading': leading,
                'maxWait': wait,
                'trailing': trailing
              });
            }

            /**
             * Creates a function that accepts up to one argument, ignoring any
             * additional arguments.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Function
             * @param {Function} func The function to cap arguments for.
             * @returns {Function} Returns the new capped function.
             * @example
             *
             * _.map(['6', '8', '10'], _.unary(parseInt));
             * // => [6, 8, 10]
             */
            function unary(func) {
              return ary(func, 1);
            }

            /**
             * Creates a function that provides `value` to `wrapper` as its first
             * argument. Any additional arguments provided to the function are appended
             * to those provided to the `wrapper`. The wrapper is invoked with the `this`
             * binding of the created function.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Function
             * @param {*} value The value to wrap.
             * @param {Function} [wrapper=identity] The wrapper function.
             * @returns {Function} Returns the new function.
             * @example
             *
             * var p = _.wrap(_.escape, function(func, text) {
             *   return '<p>' + func(text) + '</p>';
             * });
             *
             * p('fred, barney, & pebbles');
             * // => '<p>fred, barney, &amp; pebbles</p>'
             */
            function wrap(value, wrapper) {
              return partial(castFunction(wrapper), value);
            }

            /*------------------------------------------------------------------------*/

            /**
             * Casts `value` as an array if it's not one.
             *
             * @static
             * @memberOf _
             * @since 4.4.0
             * @category Lang
             * @param {*} value The value to inspect.
             * @returns {Array} Returns the cast array.
             * @example
             *
             * _.castArray(1);
             * // => [1]
             *
             * _.castArray({ 'a': 1 });
             * // => [{ 'a': 1 }]
             *
             * _.castArray('abc');
             * // => ['abc']
             *
             * _.castArray(null);
             * // => [null]
             *
             * _.castArray(undefined);
             * // => [undefined]
             *
             * _.castArray();
             * // => []
             *
             * var array = [1, 2, 3];
             * console.log(_.castArray(array) === array);
             * // => true
             */
            function castArray() {
              if (!arguments.length) {
                return [];
              }
              var value = arguments[0];
              return isArray(value) ? value : [value];
            }

            /**
             * Creates a shallow clone of `value`.
             *
             * **Note:** This method is loosely based on the
             * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
             * and supports cloning arrays, array buffers, booleans, date objects, maps,
             * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
             * arrays. The own enumerable properties of `arguments` objects are cloned
             * as plain objects. An empty object is returned for uncloneable values such
             * as error objects, functions, DOM nodes, and WeakMaps.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Lang
             * @param {*} value The value to clone.
             * @returns {*} Returns the cloned value.
             * @see _.cloneDeep
             * @example
             *
             * var objects = [{ 'a': 1 }, { 'b': 2 }];
             *
             * var shallow = _.clone(objects);
             * console.log(shallow[0] === objects[0]);
             * // => true
             */
            function clone(value) {
              return baseClone(value, CLONE_SYMBOLS_FLAG);
            }

            /**
             * This method is like `_.clone` except that it accepts `customizer` which
             * is invoked to produce the cloned value. If `customizer` returns `undefined`,
             * cloning is handled by the method instead. The `customizer` is invoked with
             * up to four arguments; (value [, index|key, object, stack]).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to clone.
             * @param {Function} [customizer] The function to customize cloning.
             * @returns {*} Returns the cloned value.
             * @see _.cloneDeepWith
             * @example
             *
             * function customizer(value) {
             *   if (_.isElement(value)) {
             *     return value.cloneNode(false);
             *   }
             * }
             *
             * var el = _.cloneWith(document.body, customizer);
             *
             * console.log(el === document.body);
             * // => false
             * console.log(el.nodeName);
             * // => 'BODY'
             * console.log(el.childNodes.length);
             * // => 0
             */
            function cloneWith(value, customizer) {
              customizer = typeof customizer == 'function' ? customizer : undefined;
              return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
            }

            /**
             * This method is like `_.clone` except that it recursively clones `value`.
             *
             * @static
             * @memberOf _
             * @since 1.0.0
             * @category Lang
             * @param {*} value The value to recursively clone.
             * @returns {*} Returns the deep cloned value.
             * @see _.clone
             * @example
             *
             * var objects = [{ 'a': 1 }, { 'b': 2 }];
             *
             * var deep = _.cloneDeep(objects);
             * console.log(deep[0] === objects[0]);
             * // => false
             */
            function cloneDeep(value) {
              return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
            }

            /**
             * This method is like `_.cloneWith` except that it recursively clones `value`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to recursively clone.
             * @param {Function} [customizer] The function to customize cloning.
             * @returns {*} Returns the deep cloned value.
             * @see _.cloneWith
             * @example
             *
             * function customizer(value) {
             *   if (_.isElement(value)) {
             *     return value.cloneNode(true);
             *   }
             * }
             *
             * var el = _.cloneDeepWith(document.body, customizer);
             *
             * console.log(el === document.body);
             * // => false
             * console.log(el.nodeName);
             * // => 'BODY'
             * console.log(el.childNodes.length);
             * // => 20
             */
            function cloneDeepWith(value, customizer) {
              customizer = typeof customizer == 'function' ? customizer : undefined;
              return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);
            }

            /**
             * Checks if `object` conforms to `source` by invoking the predicate
             * properties of `source` with the corresponding property values of `object`.
             *
             * **Note:** This method is equivalent to `_.conforms` when `source` is
             * partially applied.
             *
             * @static
             * @memberOf _
             * @since 4.14.0
             * @category Lang
             * @param {Object} object The object to inspect.
             * @param {Object} source The object of property predicates to conform to.
             * @returns {boolean} Returns `true` if `object` conforms, else `false`.
             * @example
             *
             * var object = { 'a': 1, 'b': 2 };
             *
             * _.conformsTo(object, { 'b': function(n) { return n > 1; } });
             * // => true
             *
             * _.conformsTo(object, { 'b': function(n) { return n > 2; } });
             * // => false
             */
            function conformsTo(object, source) {
              return source == null || baseConformsTo(object, source, keys(source));
            }

            /**
             * Performs a
             * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
             * comparison between two values to determine if they are equivalent.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to compare.
             * @param {*} other The other value to compare.
             * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
             * @example
             *
             * var object = { 'a': 1 };
             * var other = { 'a': 1 };
             *
             * _.eq(object, object);
             * // => true
             *
             * _.eq(object, other);
             * // => false
             *
             * _.eq('a', 'a');
             * // => true
             *
             * _.eq('a', Object('a'));
             * // => false
             *
             * _.eq(NaN, NaN);
             * // => true
             */
            function eq(value, other) {
              return value === other || (value !== value && other !== other);
            }

            /**
             * Checks if `value` is greater than `other`.
             *
             * @static
             * @memberOf _
             * @since 3.9.0
             * @category Lang
             * @param {*} value The value to compare.
             * @param {*} other The other value to compare.
             * @returns {boolean} Returns `true` if `value` is greater than `other`,
             *  else `false`.
             * @see _.lt
             * @example
             *
             * _.gt(3, 1);
             * // => true
             *
             * _.gt(3, 3);
             * // => false
             *
             * _.gt(1, 3);
             * // => false
             */
            var gt = createRelationalOperation(baseGt);

            /**
             * Checks if `value` is greater than or equal to `other`.
             *
             * @static
             * @memberOf _
             * @since 3.9.0
             * @category Lang
             * @param {*} value The value to compare.
             * @param {*} other The other value to compare.
             * @returns {boolean} Returns `true` if `value` is greater than or equal to
             *  `other`, else `false`.
             * @see _.lte
             * @example
             *
             * _.gte(3, 1);
             * // => true
             *
             * _.gte(3, 3);
             * // => true
             *
             * _.gte(1, 3);
             * // => false
             */
            var gte = createRelationalOperation(function (value, other) {
              return value >= other;
            });

            /**
             * Checks if `value` is likely an `arguments` object.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is an `arguments` object,
             *  else `false`.
             * @example
             *
             * _.isArguments(function() { return arguments; }());
             * // => true
             *
             * _.isArguments([1, 2, 3]);
             * // => false
             */
            var isArguments = baseIsArguments(function () { return arguments; } ()) ? baseIsArguments : function (value) {
              return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&
                !propertyIsEnumerable.call(value, 'callee');
            };

            /**
             * Checks if `value` is classified as an `Array` object.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is an array, else `false`.
             * @example
             *
             * _.isArray([1, 2, 3]);
             * // => true
             *
             * _.isArray(document.body.children);
             * // => false
             *
             * _.isArray('abc');
             * // => false
             *
             * _.isArray(_.noop);
             * // => false
             */
            var isArray = Array.isArray;

            /**
             * Checks if `value` is classified as an `ArrayBuffer` object.
             *
             * @static
             * @memberOf _
             * @since 4.3.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
             * @example
             *
             * _.isArrayBuffer(new ArrayBuffer(2));
             * // => true
             *
             * _.isArrayBuffer(new Array(2));
             * // => false
             */
            var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;

            /**
             * Checks if `value` is array-like. A value is considered array-like if it's
             * not a function and has a `value.length` that's an integer greater than or
             * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
             * @example
             *
             * _.isArrayLike([1, 2, 3]);
             * // => true
             *
             * _.isArrayLike(document.body.children);
             * // => true
             *
             * _.isArrayLike('abc');
             * // => true
             *
             * _.isArrayLike(_.noop);
             * // => false
             */
            function isArrayLike(value) {
              return value != null && isLength(value.length) && !isFunction(value);
            }

            /**
             * This method is like `_.isArrayLike` except that it also checks if `value`
             * is an object.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is an array-like object,
             *  else `false`.
             * @example
             *
             * _.isArrayLikeObject([1, 2, 3]);
             * // => true
             *
             * _.isArrayLikeObject(document.body.children);
             * // => true
             *
             * _.isArrayLikeObject('abc');
             * // => false
             *
             * _.isArrayLikeObject(_.noop);
             * // => false
             */
            function isArrayLikeObject(value) {
              return isObjectLike(value) && isArrayLike(value);
            }

            /**
             * Checks if `value` is classified as a boolean primitive or object.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.
             * @example
             *
             * _.isBoolean(false);
             * // => true
             *
             * _.isBoolean(null);
             * // => false
             */
            function isBoolean(value) {
              return value === true || value === false ||
                (isObjectLike(value) && baseGetTag(value) == boolTag);
            }

            /**
             * Checks if `value` is a buffer.
             *
             * @static
             * @memberOf _
             * @since 4.3.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
             * @example
             *
             * _.isBuffer(new Buffer(2));
             * // => true
             *
             * _.isBuffer(new Uint8Array(2));
             * // => false
             */
            var isBuffer = nativeIsBuffer || stubFalse;

            /**
             * Checks if `value` is classified as a `Date` object.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
             * @example
             *
             * _.isDate(new Date);
             * // => true
             *
             * _.isDate('Mon April 23 2012');
             * // => false
             */
            var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;

            /**
             * Checks if `value` is likely a DOM element.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
             * @example
             *
             * _.isElement(document.body);
             * // => true
             *
             * _.isElement('<body>');
             * // => false
             */
            function isElement(value) {
              return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);
            }

            /**
             * Checks if `value` is an empty object, collection, map, or set.
             *
             * Objects are considered empty if they have no own enumerable string keyed
             * properties.
             *
             * Array-like values such as `arguments` objects, arrays, buffers, strings, or
             * jQuery-like collections are considered empty if they have a `length` of `0`.
             * Similarly, maps and sets are considered empty if they have a `size` of `0`.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is empty, else `false`.
             * @example
             *
             * _.isEmpty(null);
             * // => true
             *
             * _.isEmpty(true);
             * // => true
             *
             * _.isEmpty(1);
             * // => true
             *
             * _.isEmpty([1, 2, 3]);
             * // => false
             *
             * _.isEmpty({ 'a': 1 });
             * // => false
             */
            function isEmpty(value) {
              if (value == null) {
                return true;
              }
              if (isArrayLike(value) &&
                (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||
                  isBuffer(value) || isTypedArray(value) || isArguments(value))) {
                return !value.length;
              }
              var tag = getTag(value);
              if (tag == mapTag || tag == setTag) {
                return !value.size;
              }
              if (isPrototype(value)) {
                return !baseKeys(value).length;
              }
              for (var key in value) {
                if (hasOwnProperty.call(value, key)) {
                  return false;
                }
              }
              return true;
            }

            /**
             * Performs a deep comparison between two values to determine if they are
             * equivalent.
             *
             * **Note:** This method supports comparing arrays, array buffers, booleans,
             * date objects, error objects, maps, numbers, `Object` objects, regexes,
             * sets, strings, symbols, and typed arrays. `Object` objects are compared
             * by their own, not inherited, enumerable properties. Functions and DOM
             * nodes are compared by strict equality, i.e. `===`.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Lang
             * @param {*} value The value to compare.
             * @param {*} other The other value to compare.
             * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
             * @example
             *
             * var object = { 'a': 1 };
             * var other = { 'a': 1 };
             *
             * _.isEqual(object, other);
             * // => true
             *
             * object === other;
             * // => false
             */
            function isEqual(value, other) {
              return baseIsEqual(value, other);
            }

            /**
             * This method is like `_.isEqual` except that it accepts `customizer` which
             * is invoked to compare values. If `customizer` returns `undefined`, comparisons
             * are handled by the method instead. The `customizer` is invoked with up to
             * six arguments: (objValue, othValue [, index|key, object, other, stack]).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to compare.
             * @param {*} other The other value to compare.
             * @param {Function} [customizer] The function to customize comparisons.
             * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
             * @example
             *
             * function isGreeting(value) {
             *   return /^h(?:i|ello)$/.test(value);
             * }
             *
             * function customizer(objValue, othValue) {
             *   if (isGreeting(objValue) && isGreeting(othValue)) {
             *     return true;
             *   }
             * }
             *
             * var array = ['hello', 'goodbye'];
             * var other = ['hi', 'goodbye'];
             *
             * _.isEqualWith(array, other, customizer);
             * // => true
             */
            function isEqualWith(value, other, customizer) {
              customizer = typeof customizer == 'function' ? customizer : undefined;
              var result = customizer ? customizer(value, other) : undefined;
              return result === undefined ? baseIsEqual(value, other, undefined, customizer) : !!result;
            }

            /**
             * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
             * `SyntaxError`, `TypeError`, or `URIError` object.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
             * @example
             *
             * _.isError(new Error);
             * // => true
             *
             * _.isError(Error);
             * // => false
             */
            function isError(value) {
              if (!isObjectLike(value)) {
                return false;
              }
              var tag = baseGetTag(value);
              return tag == errorTag || tag == domExcTag ||
                (typeof value.message == 'string' && typeof value.name == 'string' && !isPlainObject(value));
            }

            /**
             * Checks if `value` is a finite primitive number.
             *
             * **Note:** This method is based on
             * [`Number.isFinite`](https://mdn.io/Number/isFinite).
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
             * @example
             *
             * _.isFinite(3);
             * // => true
             *
             * _.isFinite(Number.MIN_VALUE);
             * // => true
             *
             * _.isFinite(Infinity);
             * // => false
             *
             * _.isFinite('3');
             * // => false
             */
            function isFinite(value) {
              return typeof value == 'number' && nativeIsFinite(value);
            }

            /**
             * Checks if `value` is classified as a `Function` object.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a function, else `false`.
             * @example
             *
             * _.isFunction(_);
             * // => true
             *
             * _.isFunction(/abc/);
             * // => false
             */
            function isFunction(value) {
              if (!isObject(value)) {
                return false;
              }
              // The use of `Object#toString` avoids issues with the `typeof` operator
              // in Safari 9 which returns 'object' for typed arrays and other constructors.
              var tag = baseGetTag(value);
              return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
            }

            /**
             * Checks if `value` is an integer.
             *
             * **Note:** This method is based on
             * [`Number.isInteger`](https://mdn.io/Number/isInteger).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is an integer, else `false`.
             * @example
             *
             * _.isInteger(3);
             * // => true
             *
             * _.isInteger(Number.MIN_VALUE);
             * // => false
             *
             * _.isInteger(Infinity);
             * // => false
             *
             * _.isInteger('3');
             * // => false
             */
            function isInteger(value) {
              return typeof value == 'number' && value == toInteger(value);
            }

            /**
             * Checks if `value` is a valid array-like length.
             *
             * **Note:** This method is loosely based on
             * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
             * @example
             *
             * _.isLength(3);
             * // => true
             *
             * _.isLength(Number.MIN_VALUE);
             * // => false
             *
             * _.isLength(Infinity);
             * // => false
             *
             * _.isLength('3');
             * // => false
             */
            function isLength(value) {
              return typeof value == 'number' &&
                value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
            }

            /**
             * Checks if `value` is the
             * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
             * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is an object, else `false`.
             * @example
             *
             * _.isObject({});
             * // => true
             *
             * _.isObject([1, 2, 3]);
             * // => true
             *
             * _.isObject(_.noop);
             * // => true
             *
             * _.isObject(null);
             * // => false
             */
            function isObject(value) {
              var type = typeof value;
              return value != null && (type == 'object' || type == 'function');
            }

            /**
             * Checks if `value` is object-like. A value is object-like if it's not `null`
             * and has a `typeof` result of "object".
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
             * @example
             *
             * _.isObjectLike({});
             * // => true
             *
             * _.isObjectLike([1, 2, 3]);
             * // => true
             *
             * _.isObjectLike(_.noop);
             * // => false
             *
             * _.isObjectLike(null);
             * // => false
             */
            function isObjectLike(value) {
              return value != null && typeof value == 'object';
            }

            /**
             * Checks if `value` is classified as a `Map` object.
             *
             * @static
             * @memberOf _
             * @since 4.3.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a map, else `false`.
             * @example
             *
             * _.isMap(new Map);
             * // => true
             *
             * _.isMap(new WeakMap);
             * // => false
             */
            var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;

            /**
             * Performs a partial deep comparison between `object` and `source` to
             * determine if `object` contains equivalent property values.
             *
             * **Note:** This method is equivalent to `_.matches` when `source` is
             * partially applied.
             *
             * Partial comparisons will match empty array and empty object `source`
             * values against any array or object value, respectively. See `_.isEqual`
             * for a list of supported value comparisons.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Lang
             * @param {Object} object The object to inspect.
             * @param {Object} source The object of property values to match.
             * @returns {boolean} Returns `true` if `object` is a match, else `false`.
             * @example
             *
             * var object = { 'a': 1, 'b': 2 };
             *
             * _.isMatch(object, { 'b': 2 });
             * // => true
             *
             * _.isMatch(object, { 'b': 1 });
             * // => false
             */
            function isMatch(object, source) {
              return object === source || baseIsMatch(object, source, getMatchData(source));
            }

            /**
             * This method is like `_.isMatch` except that it accepts `customizer` which
             * is invoked to compare values. If `customizer` returns `undefined`, comparisons
             * are handled by the method instead. The `customizer` is invoked with five
             * arguments: (objValue, srcValue, index|key, object, source).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {Object} object The object to inspect.
             * @param {Object} source The object of property values to match.
             * @param {Function} [customizer] The function to customize comparisons.
             * @returns {boolean} Returns `true` if `object` is a match, else `false`.
             * @example
             *
             * function isGreeting(value) {
             *   return /^h(?:i|ello)$/.test(value);
             * }
             *
             * function customizer(objValue, srcValue) {
             *   if (isGreeting(objValue) && isGreeting(srcValue)) {
             *     return true;
             *   }
             * }
             *
             * var object = { 'greeting': 'hello' };
             * var source = { 'greeting': 'hi' };
             *
             * _.isMatchWith(object, source, customizer);
             * // => true
             */
            function isMatchWith(object, source, customizer) {
              customizer = typeof customizer == 'function' ? customizer : undefined;
              return baseIsMatch(object, source, getMatchData(source), customizer);
            }

            /**
             * Checks if `value` is `NaN`.
             *
             * **Note:** This method is based on
             * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as
             * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for
             * `undefined` and other non-number values.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
             * @example
             *
             * _.isNaN(NaN);
             * // => true
             *
             * _.isNaN(new Number(NaN));
             * // => true
             *
             * isNaN(undefined);
             * // => true
             *
             * _.isNaN(undefined);
             * // => false
             */
            function isNaN(value) {
              // An `NaN` primitive is the only value that is not equal to itself.
              // Perform the `toStringTag` check first to avoid errors with some
              // ActiveX objects in IE.
              return isNumber(value) && value != +value;
            }

            /**
             * Checks if `value` is a pristine native function.
             *
             * **Note:** This method can't reliably detect native functions in the presence
             * of the core-js package because core-js circumvents this kind of detection.
             * Despite multiple requests, the core-js maintainer has made it clear: any
             * attempt to fix the detection will be obstructed. As a result, we're left
             * with little choice but to throw an error. Unfortunately, this also affects
             * packages, like [babel-polyfill](https://www.npmjs.com/package/babel-polyfill),
             * which rely on core-js.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a native function,
             *  else `false`.
             * @example
             *
             * _.isNative(Array.prototype.push);
             * // => true
             *
             * _.isNative(_);
             * // => false
             */
            function isNative(value) {
              if (isMaskable(value)) {
                throw new Error(CORE_ERROR_TEXT);
              }
              return baseIsNative(value);
            }

            /**
             * Checks if `value` is `null`.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
             * @example
             *
             * _.isNull(null);
             * // => true
             *
             * _.isNull(void 0);
             * // => false
             */
            function isNull(value) {
              return value === null;
            }

            /**
             * Checks if `value` is `null` or `undefined`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
             * @example
             *
             * _.isNil(null);
             * // => true
             *
             * _.isNil(void 0);
             * // => true
             *
             * _.isNil(NaN);
             * // => false
             */
            function isNil(value) {
              return value == null;
            }

            /**
             * Checks if `value` is classified as a `Number` primitive or object.
             *
             * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
             * classified as numbers, use the `_.isFinite` method.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a number, else `false`.
             * @example
             *
             * _.isNumber(3);
             * // => true
             *
             * _.isNumber(Number.MIN_VALUE);
             * // => true
             *
             * _.isNumber(Infinity);
             * // => true
             *
             * _.isNumber('3');
             * // => false
             */
            function isNumber(value) {
              return typeof value == 'number' ||
                (isObjectLike(value) && baseGetTag(value) == numberTag);
            }

            /**
             * Checks if `value` is a plain object, that is, an object created by the
             * `Object` constructor or one with a `[[Prototype]]` of `null`.
             *
             * @static
             * @memberOf _
             * @since 0.8.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
             * @example
             *
             * function Foo() {
             *   this.a = 1;
             * }
             *
             * _.isPlainObject(new Foo);
             * // => false
             *
             * _.isPlainObject([1, 2, 3]);
             * // => false
             *
             * _.isPlainObject({ 'x': 0, 'y': 0 });
             * // => true
             *
             * _.isPlainObject(Object.create(null));
             * // => true
             */
            function isPlainObject(value) {
              if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
                return false;
              }
              var proto = getPrototype(value);
              if (proto === null) {
                return true;
              }
              var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
              return typeof Ctor == 'function' && Ctor instanceof Ctor &&
                funcToString.call(Ctor) == objectCtorString;
            }

            /**
             * Checks if `value` is classified as a `RegExp` object.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
             * @example
             *
             * _.isRegExp(/abc/);
             * // => true
             *
             * _.isRegExp('/abc/');
             * // => false
             */
            var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;

            /**
             * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754
             * double precision number which isn't the result of a rounded unsafe integer.
             *
             * **Note:** This method is based on
             * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.
             * @example
             *
             * _.isSafeInteger(3);
             * // => true
             *
             * _.isSafeInteger(Number.MIN_VALUE);
             * // => false
             *
             * _.isSafeInteger(Infinity);
             * // => false
             *
             * _.isSafeInteger('3');
             * // => false
             */
            function isSafeInteger(value) {
              return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
            }

            /**
             * Checks if `value` is classified as a `Set` object.
             *
             * @static
             * @memberOf _
             * @since 4.3.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a set, else `false`.
             * @example
             *
             * _.isSet(new Set);
             * // => true
             *
             * _.isSet(new WeakSet);
             * // => false
             */
            var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;

            /**
             * Checks if `value` is classified as a `String` primitive or object.
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a string, else `false`.
             * @example
             *
             * _.isString('abc');
             * // => true
             *
             * _.isString(1);
             * // => false
             */
            function isString(value) {
              return typeof value == 'string' ||
                (!isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag);
            }

            /**
             * Checks if `value` is classified as a `Symbol` primitive or object.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
             * @example
             *
             * _.isSymbol(Symbol.iterator);
             * // => true
             *
             * _.isSymbol('abc');
             * // => false
             */
            function isSymbol(value) {
              return typeof value == 'symbol' ||
                (isObjectLike(value) && baseGetTag(value) == symbolTag);
            }

            /**
             * Checks if `value` is classified as a typed array.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
             * @example
             *
             * _.isTypedArray(new Uint8Array);
             * // => true
             *
             * _.isTypedArray([]);
             * // => false
             */
            var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

            /**
             * Checks if `value` is `undefined`.
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
             * @example
             *
             * _.isUndefined(void 0);
             * // => true
             *
             * _.isUndefined(null);
             * // => false
             */
            function isUndefined(value) {
              return value === undefined;
            }

            /**
             * Checks if `value` is classified as a `WeakMap` object.
             *
             * @static
             * @memberOf _
             * @since 4.3.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.
             * @example
             *
             * _.isWeakMap(new WeakMap);
             * // => true
             *
             * _.isWeakMap(new Map);
             * // => false
             */
            function isWeakMap(value) {
              return isObjectLike(value) && getTag(value) == weakMapTag;
            }

            /**
             * Checks if `value` is classified as a `WeakSet` object.
             *
             * @static
             * @memberOf _
             * @since 4.3.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a weak set, else `false`.
             * @example
             *
             * _.isWeakSet(new WeakSet);
             * // => true
             *
             * _.isWeakSet(new Set);
             * // => false
             */
            function isWeakSet(value) {
              return isObjectLike(value) && baseGetTag(value) == weakSetTag;
            }

            /**
             * Checks if `value` is less than `other`.
             *
             * @static
             * @memberOf _
             * @since 3.9.0
             * @category Lang
             * @param {*} value The value to compare.
             * @param {*} other The other value to compare.
             * @returns {boolean} Returns `true` if `value` is less than `other`,
             *  else `false`.
             * @see _.gt
             * @example
             *
             * _.lt(1, 3);
             * // => true
             *
             * _.lt(3, 3);
             * // => false
             *
             * _.lt(3, 1);
             * // => false
             */
            var lt = createRelationalOperation(baseLt);

            /**
             * Checks if `value` is less than or equal to `other`.
             *
             * @static
             * @memberOf _
             * @since 3.9.0
             * @category Lang
             * @param {*} value The value to compare.
             * @param {*} other The other value to compare.
             * @returns {boolean} Returns `true` if `value` is less than or equal to
             *  `other`, else `false`.
             * @see _.gte
             * @example
             *
             * _.lte(1, 3);
             * // => true
             *
             * _.lte(3, 3);
             * // => true
             *
             * _.lte(3, 1);
             * // => false
             */
            var lte = createRelationalOperation(function (value, other) {
              return value <= other;
            });

            /**
             * Converts `value` to an array.
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category Lang
             * @param {*} value The value to convert.
             * @returns {Array} Returns the converted array.
             * @example
             *
             * _.toArray({ 'a': 1, 'b': 2 });
             * // => [1, 2]
             *
             * _.toArray('abc');
             * // => ['a', 'b', 'c']
             *
             * _.toArray(1);
             * // => []
             *
             * _.toArray(null);
             * // => []
             */
            function toArray(value) {
              if (!value) {
                return [];
              }
              if (isArrayLike(value)) {
                return isString(value) ? stringToArray(value) : copyArray(value);
              }
              if (symIterator && value[symIterator]) {
                return iteratorToArray(value[symIterator]());
              }
              var tag = getTag(value),
                func = tag == mapTag ? mapToArray : (tag == setTag ? setToArray : values);

              return func(value);
            }

            /**
             * Converts `value` to a finite number.
             *
             * @static
             * @memberOf _
             * @since 4.12.0
             * @category Lang
             * @param {*} value The value to convert.
             * @returns {number} Returns the converted number.
             * @example
             *
             * _.toFinite(3.2);
             * // => 3.2
             *
             * _.toFinite(Number.MIN_VALUE);
             * // => 5e-324
             *
             * _.toFinite(Infinity);
             * // => 1.7976931348623157e+308
             *
             * _.toFinite('3.2');
             * // => 3.2
             */
            function toFinite(value) {
              if (!value) {
                return value === 0 ? value : 0;
              }
              value = toNumber(value);
              if (value === INFINITY || value === -INFINITY) {
                var sign = (value < 0 ? -1 : 1);
                return sign * MAX_INTEGER;
              }
              return value === value ? value : 0;
            }

            /**
             * Converts `value` to an integer.
             *
             * **Note:** This method is loosely based on
             * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to convert.
             * @returns {number} Returns the converted integer.
             * @example
             *
             * _.toInteger(3.2);
             * // => 3
             *
             * _.toInteger(Number.MIN_VALUE);
             * // => 0
             *
             * _.toInteger(Infinity);
             * // => 1.7976931348623157e+308
             *
             * _.toInteger('3.2');
             * // => 3
             */
            function toInteger(value) {
              var result = toFinite(value),
                remainder = result % 1;

              return result === result ? (remainder ? result - remainder : result) : 0;
            }

            /**
             * Converts `value` to an integer suitable for use as the length of an
             * array-like object.
             *
             * **Note:** This method is based on
             * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to convert.
             * @returns {number} Returns the converted integer.
             * @example
             *
             * _.toLength(3.2);
             * // => 3
             *
             * _.toLength(Number.MIN_VALUE);
             * // => 0
             *
             * _.toLength(Infinity);
             * // => 4294967295
             *
             * _.toLength('3.2');
             * // => 3
             */
            function toLength(value) {
              return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
            }

            /**
             * Converts `value` to a number.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to process.
             * @returns {number} Returns the number.
             * @example
             *
             * _.toNumber(3.2);
             * // => 3.2
             *
             * _.toNumber(Number.MIN_VALUE);
             * // => 5e-324
             *
             * _.toNumber(Infinity);
             * // => Infinity
             *
             * _.toNumber('3.2');
             * // => 3.2
             */
            function toNumber(value) {
              if (typeof value == 'number') {
                return value;
              }
              if (isSymbol(value)) {
                return NAN;
              }
              if (isObject(value)) {
                var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
                value = isObject(other) ? (other + '') : other;
              }
              if (typeof value != 'string') {
                return value === 0 ? value : +value;
              }
              value = value.replace(reTrim, '');
              var isBinary = reIsBinary.test(value);
              return (isBinary || reIsOctal.test(value))
                ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
                : (reIsBadHex.test(value) ? NAN : +value);
            }

            /**
             * Converts `value` to a plain object flattening inherited enumerable string
             * keyed properties of `value` to own properties of the plain object.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Lang
             * @param {*} value The value to convert.
             * @returns {Object} Returns the converted plain object.
             * @example
             *
             * function Foo() {
             *   this.b = 2;
             * }
             *
             * Foo.prototype.c = 3;
             *
             * _.assign({ 'a': 1 }, new Foo);
             * // => { 'a': 1, 'b': 2 }
             *
             * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
             * // => { 'a': 1, 'b': 2, 'c': 3 }
             */
            function toPlainObject(value) {
              return copyObject(value, keysIn(value));
            }

            /**
             * Converts `value` to a safe integer. A safe integer can be compared and
             * represented correctly.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to convert.
             * @returns {number} Returns the converted integer.
             * @example
             *
             * _.toSafeInteger(3.2);
             * // => 3
             *
             * _.toSafeInteger(Number.MIN_VALUE);
             * // => 0
             *
             * _.toSafeInteger(Infinity);
             * // => 9007199254740991
             *
             * _.toSafeInteger('3.2');
             * // => 3
             */
            function toSafeInteger(value) {
              return value
                ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER)
                : (value === 0 ? value : 0);
            }

            /**
             * Converts `value` to a string. An empty string is returned for `null`
             * and `undefined` values. The sign of `-0` is preserved.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to convert.
             * @returns {string} Returns the converted string.
             * @example
             *
             * _.toString(null);
             * // => ''
             *
             * _.toString(-0);
             * // => '-0'
             *
             * _.toString([1, 2, 3]);
             * // => '1,2,3'
             */
            function toString(value) {
              return value == null ? '' : baseToString(value);
            }

            /*------------------------------------------------------------------------*/

            /**
             * Assigns own enumerable string keyed properties of source objects to the
             * destination object. Source objects are applied from left to right.
             * Subsequent sources overwrite property assignments of previous sources.
             *
             * **Note:** This method mutates `object` and is loosely based on
             * [`Object.assign`](https://mdn.io/Object/assign).
             *
             * @static
             * @memberOf _
             * @since 0.10.0
             * @category Object
             * @param {Object} object The destination object.
             * @param {...Object} [sources] The source objects.
             * @returns {Object} Returns `object`.
             * @see _.assignIn
             * @example
             *
             * function Foo() {
             *   this.a = 1;
             * }
             *
             * function Bar() {
             *   this.c = 3;
             * }
             *
             * Foo.prototype.b = 2;
             * Bar.prototype.d = 4;
             *
             * _.assign({ 'a': 0 }, new Foo, new Bar);
             * // => { 'a': 1, 'c': 3 }
             */
            var assign = createAssigner(function (object, source) {
              if (isPrototype(source) || isArrayLike(source)) {
                copyObject(source, keys(source), object);
                return;
              }
              for (var key in source) {
                if (hasOwnProperty.call(source, key)) {
                  assignValue(object, key, source[key]);
                }
              }
            });

            /**
             * This method is like `_.assign` except that it iterates over own and
             * inherited source properties.
             *
             * **Note:** This method mutates `object`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @alias extend
             * @category Object
             * @param {Object} object The destination object.
             * @param {...Object} [sources] The source objects.
             * @returns {Object} Returns `object`.
             * @see _.assign
             * @example
             *
             * function Foo() {
             *   this.a = 1;
             * }
             *
             * function Bar() {
             *   this.c = 3;
             * }
             *
             * Foo.prototype.b = 2;
             * Bar.prototype.d = 4;
             *
             * _.assignIn({ 'a': 0 }, new Foo, new Bar);
             * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }
             */
            var assignIn = createAssigner(function (object, source) {
              copyObject(source, keysIn(source), object);
            });

            /**
             * This method is like `_.assignIn` except that it accepts `customizer`
             * which is invoked to produce the assigned values. If `customizer` returns
             * `undefined`, assignment is handled by the method instead. The `customizer`
             * is invoked with five arguments: (objValue, srcValue, key, object, source).
             *
             * **Note:** This method mutates `object`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @alias extendWith
             * @category Object
             * @param {Object} object The destination object.
             * @param {...Object} sources The source objects.
             * @param {Function} [customizer] The function to customize assigned values.
             * @returns {Object} Returns `object`.
             * @see _.assignWith
             * @example
             *
             * function customizer(objValue, srcValue) {
             *   return _.isUndefined(objValue) ? srcValue : objValue;
             * }
             *
             * var defaults = _.partialRight(_.assignInWith, customizer);
             *
             * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
             * // => { 'a': 1, 'b': 2 }
             */
            var assignInWith = createAssigner(function (object, source, srcIndex, customizer) {
              copyObject(source, keysIn(source), object, customizer);
            });

            /**
             * This method is like `_.assign` except that it accepts `customizer`
             * which is invoked to produce the assigned values. If `customizer` returns
             * `undefined`, assignment is handled by the method instead. The `customizer`
             * is invoked with five arguments: (objValue, srcValue, key, object, source).
             *
             * **Note:** This method mutates `object`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Object
             * @param {Object} object The destination object.
             * @param {...Object} sources The source objects.
             * @param {Function} [customizer] The function to customize assigned values.
             * @returns {Object} Returns `object`.
             * @see _.assignInWith
             * @example
             *
             * function customizer(objValue, srcValue) {
             *   return _.isUndefined(objValue) ? srcValue : objValue;
             * }
             *
             * var defaults = _.partialRight(_.assignWith, customizer);
             *
             * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
             * // => { 'a': 1, 'b': 2 }
             */
            var assignWith = createAssigner(function (object, source, srcIndex, customizer) {
              copyObject(source, keys(source), object, customizer);
            });

            /**
             * Creates an array of values corresponding to `paths` of `object`.
             *
             * @static
             * @memberOf _
             * @since 1.0.0
             * @category Object
             * @param {Object} object The object to iterate over.
             * @param {...(string|string[])} [paths] The property paths to pick.
             * @returns {Array} Returns the picked values.
             * @example
             *
             * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
             *
             * _.at(object, ['a[0].b.c', 'a[1]']);
             * // => [3, 4]
             */
            var at = flatRest(baseAt);

            /**
             * Creates an object that inherits from the `prototype` object. If a
             * `properties` object is given, its own enumerable string keyed properties
             * are assigned to the created object.
             *
             * @static
             * @memberOf _
             * @since 2.3.0
             * @category Object
             * @param {Object} prototype The object to inherit from.
             * @param {Object} [properties] The properties to assign to the object.
             * @returns {Object} Returns the new object.
             * @example
             *
             * function Shape() {
             *   this.x = 0;
             *   this.y = 0;
             * }
             *
             * function Circle() {
             *   Shape.call(this);
             * }
             *
             * Circle.prototype = _.create(Shape.prototype, {
             *   'constructor': Circle
             * });
             *
             * var circle = new Circle;
             * circle instanceof Circle;
             * // => true
             *
             * circle instanceof Shape;
             * // => true
             */
            function create(prototype, properties) {
              var result = baseCreate(prototype);
              return properties == null ? result : baseAssign(result, properties);
            }

            /**
             * Assigns own and inherited enumerable string keyed properties of source
             * objects to the destination object for all destination properties that
             * resolve to `undefined`. Source objects are applied from left to right.
             * Once a property is set, additional values of the same property are ignored.
             *
             * **Note:** This method mutates `object`.
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category Object
             * @param {Object} object The destination object.
             * @param {...Object} [sources] The source objects.
             * @returns {Object} Returns `object`.
             * @see _.defaultsDeep
             * @example
             *
             * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
             * // => { 'a': 1, 'b': 2 }
             */
            var defaults = baseRest(function (object, sources) {
              object = Object(object);

              var index = -1;
              var length = sources.length;
              var guard = length > 2 ? sources[2] : undefined;

              if (guard && isIterateeCall(sources[0], sources[1], guard)) {
                length = 1;
              }

              while (++index < length) {
                var source = sources[index];
                var props = keysIn(source);
                var propsIndex = -1;
                var propsLength = props.length;

                while (++propsIndex < propsLength) {
                  var key = props[propsIndex];
                  var value = object[key];

                  if (value === undefined ||
                    (eq(value, objectProto[key]) && !hasOwnProperty.call(object, key))) {
                    object[key] = source[key];
                  }
                }
              }

              return object;
            });

            /**
             * This method is like `_.defaults` except that it recursively assigns
             * default properties.
             *
             * **Note:** This method mutates `object`.
             *
             * @static
             * @memberOf _
             * @since 3.10.0
             * @category Object
             * @param {Object} object The destination object.
             * @param {...Object} [sources] The source objects.
             * @returns {Object} Returns `object`.
             * @see _.defaults
             * @example
             *
             * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });
             * // => { 'a': { 'b': 2, 'c': 3 } }
             */
            var defaultsDeep = baseRest(function (args) {
              args.push(undefined, customDefaultsMerge);
              return apply(mergeWith, undefined, args);
            });

            /**
             * This method is like `_.find` except that it returns the key of the first
             * element `predicate` returns truthy for instead of the element itself.
             *
             * @static
             * @memberOf _
             * @since 1.1.0
             * @category Object
             * @param {Object} object The object to inspect.
             * @param {Function} [predicate=_.identity] The function invoked per iteration.
             * @returns {string|undefined} Returns the key of the matched element,
             *  else `undefined`.
             * @example
             *
             * var users = {
             *   'barney':  { 'age': 36, 'active': true },
             *   'fred':    { 'age': 40, 'active': false },
             *   'pebbles': { 'age': 1,  'active': true }
             * };
             *
             * _.findKey(users, function(o) { return o.age < 40; });
             * // => 'barney' (iteration order is not guaranteed)
             *
             * // The `_.matches` iteratee shorthand.
             * _.findKey(users, { 'age': 1, 'active': true });
             * // => 'pebbles'
             *
             * // The `_.matchesProperty` iteratee shorthand.
             * _.findKey(users, ['active', false]);
             * // => 'fred'
             *
             * // The `_.property` iteratee shorthand.
             * _.findKey(users, 'active');
             * // => 'barney'
             */
            function findKey(object, predicate) {
              return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
            }

            /**
             * This method is like `_.findKey` except that it iterates over elements of
             * a collection in the opposite order.
             *
             * @static
             * @memberOf _
             * @since 2.0.0
             * @category Object
             * @param {Object} object The object to inspect.
             * @param {Function} [predicate=_.identity] The function invoked per iteration.
             * @returns {string|undefined} Returns the key of the matched element,
             *  else `undefined`.
             * @example
             *
             * var users = {
             *   'barney':  { 'age': 36, 'active': true },
             *   'fred':    { 'age': 40, 'active': false },
             *   'pebbles': { 'age': 1,  'active': true }
             * };
             *
             * _.findLastKey(users, function(o) { return o.age < 40; });
             * // => returns 'pebbles' assuming `_.findKey` returns 'barney'
             *
             * // The `_.matches` iteratee shorthand.
             * _.findLastKey(users, { 'age': 36, 'active': true });
             * // => 'barney'
             *
             * // The `_.matchesProperty` iteratee shorthand.
             * _.findLastKey(users, ['active', false]);
             * // => 'fred'
             *
             * // The `_.property` iteratee shorthand.
             * _.findLastKey(users, 'active');
             * // => 'pebbles'
             */
            function findLastKey(object, predicate) {
              return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);
            }

            /**
             * Iterates over own and inherited enumerable string keyed properties of an
             * object and invokes `iteratee` for each property. The iteratee is invoked
             * with three arguments: (value, key, object). Iteratee functions may exit
             * iteration early by explicitly returning `false`.
             *
             * @static
             * @memberOf _
             * @since 0.3.0
             * @category Object
             * @param {Object} object The object to iterate over.
             * @param {Function} [iteratee=_.identity] The function invoked per iteration.
             * @returns {Object} Returns `object`.
             * @see _.forInRight
             * @example
             *
             * function Foo() {
             *   this.a = 1;
             *   this.b = 2;
             * }
             *
             * Foo.prototype.c = 3;
             *
             * _.forIn(new Foo, function(value, key) {
             *   console.log(key);
             * });
             * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).
             */
            function forIn(object, iteratee) {
              return object == null
                ? object
                : baseFor(object, getIteratee(iteratee, 3), keysIn);
            }

            /**
             * This method is like `_.forIn` except that it iterates over properties of
             * `object` in the opposite order.
             *
             * @static
             * @memberOf _
             * @since 2.0.0
             * @category Object
             * @param {Object} object The object to iterate over.
             * @param {Function} [iteratee=_.identity] The function invoked per iteration.
             * @returns {Object} Returns `object`.
             * @see _.forIn
             * @example
             *
             * function Foo() {
             *   this.a = 1;
             *   this.b = 2;
             * }
             *
             * Foo.prototype.c = 3;
             *
             * _.forInRight(new Foo, function(value, key) {
             *   console.log(key);
             * });
             * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.
             */
            function forInRight(object, iteratee) {
              return object == null
                ? object
                : baseForRight(object, getIteratee(iteratee, 3), keysIn);
            }

            /**
             * Iterates over own enumerable string keyed properties of an object and
             * invokes `iteratee` for each property. The iteratee is invoked with three
             * arguments: (value, key, object). Iteratee functions may exit iteration
             * early by explicitly returning `false`.
             *
             * @static
             * @memberOf _
             * @since 0.3.0
             * @category Object
             * @param {Object} object The object to iterate over.
             * @param {Function} [iteratee=_.identity] The function invoked per iteration.
             * @returns {Object} Returns `object`.
             * @see _.forOwnRight
             * @example
             *
             * function Foo() {
             *   this.a = 1;
             *   this.b = 2;
             * }
             *
             * Foo.prototype.c = 3;
             *
             * _.forOwn(new Foo, function(value, key) {
             *   console.log(key);
             * });
             * // => Logs 'a' then 'b' (iteration order is not guaranteed).
             */
            function forOwn(object, iteratee) {
              return object && baseForOwn(object, getIteratee(iteratee, 3));
            }

            /**
             * This method is like `_.forOwn` except that it iterates over properties of
             * `object` in the opposite order.
             *
             * @static
             * @memberOf _
             * @since 2.0.0
             * @category Object
             * @param {Object} object The object to iterate over.
             * @param {Function} [iteratee=_.identity] The function invoked per iteration.
             * @returns {Object} Returns `object`.
             * @see _.forOwn
             * @example
             *
             * function Foo() {
             *   this.a = 1;
             *   this.b = 2;
             * }
             *
             * Foo.prototype.c = 3;
             *
             * _.forOwnRight(new Foo, function(value, key) {
             *   console.log(key);
             * });
             * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.
             */
            function forOwnRight(object, iteratee) {
              return object && baseForOwnRight(object, getIteratee(iteratee, 3));
            }

            /**
             * Creates an array of function property names from own enumerable properties
             * of `object`.
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category Object
             * @param {Object} object The object to inspect.
             * @returns {Array} Returns the function names.
             * @see _.functionsIn
             * @example
             *
             * function Foo() {
             *   this.a = _.constant('a');
             *   this.b = _.constant('b');
             * }
             *
             * Foo.prototype.c = _.constant('c');
             *
             * _.functions(new Foo);
             * // => ['a', 'b']
             */
            function functions(object) {
              return object == null ? [] : baseFunctions(object, keys(object));
            }

            /**
             * Creates an array of function property names from own and inherited
             * enumerable properties of `object`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Object
             * @param {Object} object The object to inspect.
             * @returns {Array} Returns the function names.
             * @see _.functions
             * @example
             *
             * function Foo() {
             *   this.a = _.constant('a');
             *   this.b = _.constant('b');
             * }
             *
             * Foo.prototype.c = _.constant('c');
             *
             * _.functionsIn(new Foo);
             * // => ['a', 'b', 'c']
             */
            function functionsIn(object) {
              return object == null ? [] : baseFunctions(object, keysIn(object));
            }

            /**
             * Gets the value at `path` of `object`. If the resolved value is
             * `undefined`, the `defaultValue` is returned in its place.
             *
             * @static
             * @memberOf _
             * @since 3.7.0
             * @category Object
             * @param {Object} object The object to query.
             * @param {Array|string} path The path of the property to get.
             * @param {*} [defaultValue] The value returned for `undefined` resolved values.
             * @returns {*} Returns the resolved value.
             * @example
             *
             * var object = { 'a': [{ 'b': { 'c': 3 } }] };
             *
             * _.get(object, 'a[0].b.c');
             * // => 3
             *
             * _.get(object, ['a', '0', 'b', 'c']);
             * // => 3
             *
             * _.get(object, 'a.b.c', 'default');
             * // => 'default'
             */
            function get(object, path, defaultValue) {
              var result = object == null ? undefined : baseGet(object, path);
              return result === undefined ? defaultValue : result;
            }

            /**
             * Checks if `path` is a direct property of `object`.
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category Object
             * @param {Object} object The object to query.
             * @param {Array|string} path The path to check.
             * @returns {boolean} Returns `true` if `path` exists, else `false`.
             * @example
             *
             * var object = { 'a': { 'b': 2 } };
             * var other = _.create({ 'a': _.create({ 'b': 2 }) });
             *
             * _.has(object, 'a');
             * // => true
             *
             * _.has(object, 'a.b');
             * // => true
             *
             * _.has(object, ['a', 'b']);
             * // => true
             *
             * _.has(other, 'a');
             * // => false
             */
            function has(object, path) {
              return object != null && hasPath(object, path, baseHas);
            }

            /**
             * Checks if `path` is a direct or inherited property of `object`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Object
             * @param {Object} object The object to query.
             * @param {Array|string} path The path to check.
             * @returns {boolean} Returns `true` if `path` exists, else `false`.
             * @example
             *
             * var object = _.create({ 'a': _.create({ 'b': 2 }) });
             *
             * _.hasIn(object, 'a');
             * // => true
             *
             * _.hasIn(object, 'a.b');
             * // => true
             *
             * _.hasIn(object, ['a', 'b']);
             * // => true
             *
             * _.hasIn(object, 'b');
             * // => false
             */
            function hasIn(object, path) {
              return object != null && hasPath(object, path, baseHasIn);
            }

            /**
             * Creates an object composed of the inverted keys and values of `object`.
             * If `object` contains duplicate values, subsequent values overwrite
             * property assignments of previous values.
             *
             * @static
             * @memberOf _
             * @since 0.7.0
             * @category Object
             * @param {Object} object The object to invert.
             * @returns {Object} Returns the new inverted object.
             * @example
             *
             * var object = { 'a': 1, 'b': 2, 'c': 1 };
             *
             * _.invert(object);
             * // => { '1': 'c', '2': 'b' }
             */
            var invert = createInverter(function (result, value, key) {
              if (value != null &&
                typeof value.toString != 'function') {
                value = nativeObjectToString.call(value);
              }

              result[value] = key;
            }, constant(identity));

            /**
             * This method is like `_.invert` except that the inverted object is generated
             * from the results of running each element of `object` thru `iteratee`. The
             * corresponding inverted value of each inverted key is an array of keys
             * responsible for generating the inverted value. The iteratee is invoked
             * with one argument: (value).
             *
             * @static
             * @memberOf _
             * @since 4.1.0
             * @category Object
             * @param {Object} object The object to invert.
             * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
             * @returns {Object} Returns the new inverted object.
             * @example
             *
             * var object = { 'a': 1, 'b': 2, 'c': 1 };
             *
             * _.invertBy(object);
             * // => { '1': ['a', 'c'], '2': ['b'] }
             *
             * _.invertBy(object, function(value) {
             *   return 'group' + value;
             * });
             * // => { 'group1': ['a', 'c'], 'group2': ['b'] }
             */
            var invertBy = createInverter(function (result, value, key) {
              if (value != null &&
                typeof value.toString != 'function') {
                value = nativeObjectToString.call(value);
              }

              if (hasOwnProperty.call(result, value)) {
                result[value].push(key);
              } else {
                result[value] = [key];
              }
            }, getIteratee);

            /**
             * Invokes the method at `path` of `object`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Object
             * @param {Object} object The object to query.
             * @param {Array|string} path The path of the method to invoke.
             * @param {...*} [args] The arguments to invoke the method with.
             * @returns {*} Returns the result of the invoked method.
             * @example
             *
             * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };
             *
             * _.invoke(object, 'a[0].b.c.slice', 1, 3);
             * // => [2, 3]
             */
            var invoke = baseRest(baseInvoke);

            /**
             * Creates an array of the own enumerable property names of `object`.
             *
             * **Note:** Non-object values are coerced to objects. See the
             * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
             * for more details.
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category Object
             * @param {Object} object The object to query.
             * @returns {Array} Returns the array of property names.
             * @example
             *
             * function Foo() {
             *   this.a = 1;
             *   this.b = 2;
             * }
             *
             * Foo.prototype.c = 3;
             *
             * _.keys(new Foo);
             * // => ['a', 'b'] (iteration order is not guaranteed)
             *
             * _.keys('hi');
             * // => ['0', '1']
             */
            function keys(object) {
              return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
            }

            /**
             * Creates an array of the own and inherited enumerable property names of `object`.
             *
             * **Note:** Non-object values are coerced to objects.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Object
             * @param {Object} object The object to query.
             * @returns {Array} Returns the array of property names.
             * @example
             *
             * function Foo() {
             *   this.a = 1;
             *   this.b = 2;
             * }
             *
             * Foo.prototype.c = 3;
             *
             * _.keysIn(new Foo);
             * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
             */
            function keysIn(object) {
              return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
            }

            /**
             * The opposite of `_.mapValues`; this method creates an object with the
             * same values as `object` and keys generated by running each own enumerable
             * string keyed property of `object` thru `iteratee`. The iteratee is invoked
             * with three arguments: (value, key, object).
             *
             * @static
             * @memberOf _
             * @since 3.8.0
             * @category Object
             * @param {Object} object The object to iterate over.
             * @param {Function} [iteratee=_.identity] The function invoked per iteration.
             * @returns {Object} Returns the new mapped object.
             * @see _.mapValues
             * @example
             *
             * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
             *   return key + value;
             * });
             * // => { 'a1': 1, 'b2': 2 }
             */
            function mapKeys(object, iteratee) {
              var result = {};
              iteratee = getIteratee(iteratee, 3);

              baseForOwn(object, function (value, key, object) {
                baseAssignValue(result, iteratee(value, key, object), value);
              });
              return result;
            }

            /**
             * Creates an object with the same keys as `object` and values generated
             * by running each own enumerable string keyed property of `object` thru
             * `iteratee`. The iteratee is invoked with three arguments:
             * (value, key, object).
             *
             * @static
             * @memberOf _
             * @since 2.4.0
             * @category Object
             * @param {Object} object The object to iterate over.
             * @param {Function} [iteratee=_.identity] The function invoked per iteration.
             * @returns {Object} Returns the new mapped object.
             * @see _.mapKeys
             * @example
             *
             * var users = {
             *   'fred':    { 'user': 'fred',    'age': 40 },
             *   'pebbles': { 'user': 'pebbles', 'age': 1 }
             * };
             *
             * _.mapValues(users, function(o) { return o.age; });
             * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
             *
             * // The `_.property` iteratee shorthand.
             * _.mapValues(users, 'age');
             * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
             */
            function mapValues(object, iteratee) {
              var result = {};
              iteratee = getIteratee(iteratee, 3);

              baseForOwn(object, function (value, key, object) {
                baseAssignValue(result, key, iteratee(value, key, object));
              });
              return result;
            }

            /**
             * This method is like `_.assign` except that it recursively merges own and
             * inherited enumerable string keyed properties of source objects into the
             * destination object. Source properties that resolve to `undefined` are
             * skipped if a destination value exists. Array and plain object properties
             * are merged recursively. Other objects and value types are overridden by
             * assignment. Source objects are applied from left to right. Subsequent
             * sources overwrite property assignments of previous sources.
             *
             * **Note:** This method mutates `object`.
             *
             * @static
             * @memberOf _
             * @since 0.5.0
             * @category Object
             * @param {Object} object The destination object.
             * @param {...Object} [sources] The source objects.
             * @returns {Object} Returns `object`.
             * @example
             *
             * var object = {
             *   'a': [{ 'b': 2 }, { 'd': 4 }]
             * };
             *
             * var other = {
             *   'a': [{ 'c': 3 }, { 'e': 5 }]
             * };
             *
             * _.merge(object, other);
             * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
             */
            var merge = createAssigner(function (object, source, srcIndex) {
              baseMerge(object, source, srcIndex);
            });

            /**
             * This method is like `_.merge` except that it accepts `customizer` which
             * is invoked to produce the merged values of the destination and source
             * properties. If `customizer` returns `undefined`, merging is handled by the
             * method instead. The `customizer` is invoked with six arguments:
             * (objValue, srcValue, key, object, source, stack).
             *
             * **Note:** This method mutates `object`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Object
             * @param {Object} object The destination object.
             * @param {...Object} sources The source objects.
             * @param {Function} customizer The function to customize assigned values.
             * @returns {Object} Returns `object`.
             * @example
             *
             * function customizer(objValue, srcValue) {
             *   if (_.isArray(objValue)) {
             *     return objValue.concat(srcValue);
             *   }
             * }
             *
             * var object = { 'a': [1], 'b': [2] };
             * var other = { 'a': [3], 'b': [4] };
             *
             * _.mergeWith(object, other, customizer);
             * // => { 'a': [1, 3], 'b': [2, 4] }
             */
            var mergeWith = createAssigner(function (object, source, srcIndex, customizer) {
              baseMerge(object, source, srcIndex, customizer);
            });

            /**
             * The opposite of `_.pick`; this method creates an object composed of the
             * own and inherited enumerable property paths of `object` that are not omitted.
             *
             * **Note:** This method is considerably slower than `_.pick`.
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category Object
             * @param {Object} object The source object.
             * @param {...(string|string[])} [paths] The property paths to omit.
             * @returns {Object} Returns the new object.
             * @example
             *
             * var object = { 'a': 1, 'b': '2', 'c': 3 };
             *
             * _.omit(object, ['a', 'c']);
             * // => { 'b': '2' }
             */
            var omit = flatRest(function (object, paths) {
              var result = {};
              if (object == null) {
                return result;
              }
              var isDeep = false;
              paths = arrayMap(paths, function (path) {
                path = castPath(path, object);
                isDeep || (isDeep = path.length > 1);
                return path;
              });
              copyObject(object, getAllKeysIn(object), result);
              if (isDeep) {
                result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
              }
              var length = paths.length;
              while (length--) {
                baseUnset(result, paths[length]);
              }
              return result;
            });

            /**
             * The opposite of `_.pickBy`; this method creates an object composed of
             * the own and inherited enumerable string keyed properties of `object` that
             * `predicate` doesn't return truthy for. The predicate is invoked with two
             * arguments: (value, key).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Object
             * @param {Object} object The source object.
             * @param {Function} [predicate=_.identity] The function invoked per property.
             * @returns {Object} Returns the new object.
             * @example
             *
             * var object = { 'a': 1, 'b': '2', 'c': 3 };
             *
             * _.omitBy(object, _.isNumber);
             * // => { 'b': '2' }
             */
            function omitBy(object, predicate) {
              return pickBy(object, negate(getIteratee(predicate)));
            }

            /**
             * Creates an object composed of the picked `object` properties.
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category Object
             * @param {Object} object The source object.
             * @param {...(string|string[])} [paths] The property paths to pick.
             * @returns {Object} Returns the new object.
             * @example
             *
             * var object = { 'a': 1, 'b': '2', 'c': 3 };
             *
             * _.pick(object, ['a', 'c']);
             * // => { 'a': 1, 'c': 3 }
             */
            var pick = flatRest(function (object, paths) {
              return object == null ? {} : basePick(object, paths);
            });

            /**
             * Creates an object composed of the `object` properties `predicate` returns
             * truthy for. The predicate is invoked with two arguments: (value, key).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Object
             * @param {Object} object The source object.
             * @param {Function} [predicate=_.identity] The function invoked per property.
             * @returns {Object} Returns the new object.
             * @example
             *
             * var object = { 'a': 1, 'b': '2', 'c': 3 };
             *
             * _.pickBy(object, _.isNumber);
             * // => { 'a': 1, 'c': 3 }
             */
            function pickBy(object, predicate) {
              if (object == null) {
                return {};
              }
              var props = arrayMap(getAllKeysIn(object), function (prop) {
                return [prop];
              });
              predicate = getIteratee(predicate);
              return basePickBy(object, props, function (value, path) {
                return predicate(value, path[0]);
              });
            }

            /**
             * This method is like `_.get` except that if the resolved value is a
             * function it's invoked with the `this` binding of its parent object and
             * its result is returned.
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category Object
             * @param {Object} object The object to query.
             * @param {Array|string} path The path of the property to resolve.
             * @param {*} [defaultValue] The value returned for `undefined` resolved values.
             * @returns {*} Returns the resolved value.
             * @example
             *
             * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
             *
             * _.result(object, 'a[0].b.c1');
             * // => 3
             *
             * _.result(object, 'a[0].b.c2');
             * // => 4
             *
             * _.result(object, 'a[0].b.c3', 'default');
             * // => 'default'
             *
             * _.result(object, 'a[0].b.c3', _.constant('default'));
             * // => 'default'
             */
            function result(object, path, defaultValue) {
              path = castPath(path, object);

              var index = -1,
                length = path.length;

              // Ensure the loop is entered when path is empty.
              if (!length) {
                length = 1;
                object = undefined;
              }
              while (++index < length) {
                var value = object == null ? undefined : object[toKey(path[index])];
                if (value === undefined) {
                  index = length;
                  value = defaultValue;
                }
                object = isFunction(value) ? value.call(object) : value;
              }
              return object;
            }

            /**
             * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
             * it's created. Arrays are created for missing index properties while objects
             * are created for all other missing properties. Use `_.setWith` to customize
             * `path` creation.
             *
             * **Note:** This method mutates `object`.
             *
             * @static
             * @memberOf _
             * @since 3.7.0
             * @category Object
             * @param {Object} object The object to modify.
             * @param {Array|string} path The path of the property to set.
             * @param {*} value The value to set.
             * @returns {Object} Returns `object`.
             * @example
             *
             * var object = { 'a': [{ 'b': { 'c': 3 } }] };
             *
             * _.set(object, 'a[0].b.c', 4);
             * console.log(object.a[0].b.c);
             * // => 4
             *
             * _.set(object, ['x', '0', 'y', 'z'], 5);
             * console.log(object.x[0].y.z);
             * // => 5
             */
            function set(object, path, value) {
              return object == null ? object : baseSet(object, path, value);
            }

            /**
             * This method is like `_.set` except that it accepts `customizer` which is
             * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
             * path creation is handled by the method instead. The `customizer` is invoked
             * with three arguments: (nsValue, key, nsObject).
             *
             * **Note:** This method mutates `object`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Object
             * @param {Object} object The object to modify.
             * @param {Array|string} path The path of the property to set.
             * @param {*} value The value to set.
             * @param {Function} [customizer] The function to customize assigned values.
             * @returns {Object} Returns `object`.
             * @example
             *
             * var object = {};
             *
             * _.setWith(object, '[0][1]', 'a', Object);
             * // => { '0': { '1': 'a' } }
             */
            function setWith(object, path, value, customizer) {
              customizer = typeof customizer == 'function' ? customizer : undefined;
              return object == null ? object : baseSet(object, path, value, customizer);
            }

            /**
             * Creates an array of own enumerable string keyed-value pairs for `object`
             * which can be consumed by `_.fromPairs`. If `object` is a map or set, its
             * entries are returned.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @alias entries
             * @category Object
             * @param {Object} object The object to query.
             * @returns {Array} Returns the key-value pairs.
             * @example
             *
             * function Foo() {
             *   this.a = 1;
             *   this.b = 2;
             * }
             *
             * Foo.prototype.c = 3;
             *
             * _.toPairs(new Foo);
             * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)
             */
            var toPairs = createToPairs(keys);

            /**
             * Creates an array of own and inherited enumerable string keyed-value pairs
             * for `object` which can be consumed by `_.fromPairs`. If `object` is a map
             * or set, its entries are returned.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @alias entriesIn
             * @category Object
             * @param {Object} object The object to query.
             * @returns {Array} Returns the key-value pairs.
             * @example
             *
             * function Foo() {
             *   this.a = 1;
             *   this.b = 2;
             * }
             *
             * Foo.prototype.c = 3;
             *
             * _.toPairsIn(new Foo);
             * // => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)
             */
            var toPairsIn = createToPairs(keysIn);

            /**
             * An alternative to `_.reduce`; this method transforms `object` to a new
             * `accumulator` object which is the result of running each of its own
             * enumerable string keyed properties thru `iteratee`, with each invocation
             * potentially mutating the `accumulator` object. If `accumulator` is not
             * provided, a new object with the same `[[Prototype]]` will be used. The
             * iteratee is invoked with four arguments: (accumulator, value, key, object).
             * Iteratee functions may exit iteration early by explicitly returning `false`.
             *
             * @static
             * @memberOf _
             * @since 1.3.0
             * @category Object
             * @param {Object} object The object to iterate over.
             * @param {Function} [iteratee=_.identity] The function invoked per iteration.
             * @param {*} [accumulator] The custom accumulator value.
             * @returns {*} Returns the accumulated value.
             * @example
             *
             * _.transform([2, 3, 4], function(result, n) {
             *   result.push(n *= n);
             *   return n % 2 == 0;
             * }, []);
             * // => [4, 9]
             *
             * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
             *   (result[value] || (result[value] = [])).push(key);
             * }, {});
             * // => { '1': ['a', 'c'], '2': ['b'] }
             */
            function transform(object, iteratee, accumulator) {
              var isArr = isArray(object),
                isArrLike = isArr || isBuffer(object) || isTypedArray(object);

              iteratee = getIteratee(iteratee, 4);
              if (accumulator == null) {
                var Ctor = object && object.constructor;
                if (isArrLike) {
                  accumulator = isArr ? new Ctor : [];
                }
                else if (isObject(object)) {
                  accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
                }
                else {
                  accumulator = {};
                }
              }
              (isArrLike ? arrayEach : baseForOwn)(object, function (value, index, object) {
                return iteratee(accumulator, value, index, object);
              });
              return accumulator;
            }

            /**
             * Removes the property at `path` of `object`.
             *
             * **Note:** This method mutates `object`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Object
             * @param {Object} object The object to modify.
             * @param {Array|string} path The path of the property to unset.
             * @returns {boolean} Returns `true` if the property is deleted, else `false`.
             * @example
             *
             * var object = { 'a': [{ 'b': { 'c': 7 } }] };
             * _.unset(object, 'a[0].b.c');
             * // => true
             *
             * console.log(object);
             * // => { 'a': [{ 'b': {} }] };
             *
             * _.unset(object, ['a', '0', 'b', 'c']);
             * // => true
             *
             * console.log(object);
             * // => { 'a': [{ 'b': {} }] };
             */
            function unset(object, path) {
              return object == null ? true : baseUnset(object, path);
            }

            /**
             * This method is like `_.set` except that accepts `updater` to produce the
             * value to set. Use `_.updateWith` to customize `path` creation. The `updater`
             * is invoked with one argument: (value).
             *
             * **Note:** This method mutates `object`.
             *
             * @static
             * @memberOf _
             * @since 4.6.0
             * @category Object
             * @param {Object} object The object to modify.
             * @param {Array|string} path The path of the property to set.
             * @param {Function} updater The function to produce the updated value.
             * @returns {Object} Returns `object`.
             * @example
             *
             * var object = { 'a': [{ 'b': { 'c': 3 } }] };
             *
             * _.update(object, 'a[0].b.c', function(n) { return n * n; });
             * console.log(object.a[0].b.c);
             * // => 9
             *
             * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });
             * console.log(object.x[0].y.z);
             * // => 0
             */
            function update(object, path, updater) {
              return object == null ? object : baseUpdate(object, path, castFunction(updater));
            }

            /**
             * This method is like `_.update` except that it accepts `customizer` which is
             * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
             * path creation is handled by the method instead. The `customizer` is invoked
             * with three arguments: (nsValue, key, nsObject).
             *
             * **Note:** This method mutates `object`.
             *
             * @static
             * @memberOf _
             * @since 4.6.0
             * @category Object
             * @param {Object} object The object to modify.
             * @param {Array|string} path The path of the property to set.
             * @param {Function} updater The function to produce the updated value.
             * @param {Function} [customizer] The function to customize assigned values.
             * @returns {Object} Returns `object`.
             * @example
             *
             * var object = {};
             *
             * _.updateWith(object, '[0][1]', _.constant('a'), Object);
             * // => { '0': { '1': 'a' } }
             */
            function updateWith(object, path, updater, customizer) {
              customizer = typeof customizer == 'function' ? customizer : undefined;
              return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);
            }

            /**
             * Creates an array of the own enumerable string keyed property values of `object`.
             *
             * **Note:** Non-object values are coerced to objects.
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category Object
             * @param {Object} object The object to query.
             * @returns {Array} Returns the array of property values.
             * @example
             *
             * function Foo() {
             *   this.a = 1;
             *   this.b = 2;
             * }
             *
             * Foo.prototype.c = 3;
             *
             * _.values(new Foo);
             * // => [1, 2] (iteration order is not guaranteed)
             *
             * _.values('hi');
             * // => ['h', 'i']
             */
            function values(object) {
              return object == null ? [] : baseValues(object, keys(object));
            }

            /**
             * Creates an array of the own and inherited enumerable string keyed property
             * values of `object`.
             *
             * **Note:** Non-object values are coerced to objects.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Object
             * @param {Object} object The object to query.
             * @returns {Array} Returns the array of property values.
             * @example
             *
             * function Foo() {
             *   this.a = 1;
             *   this.b = 2;
             * }
             *
             * Foo.prototype.c = 3;
             *
             * _.valuesIn(new Foo);
             * // => [1, 2, 3] (iteration order is not guaranteed)
             */
            function valuesIn(object) {
              return object == null ? [] : baseValues(object, keysIn(object));
            }

            /*------------------------------------------------------------------------*/

            /**
             * Clamps `number` within the inclusive `lower` and `upper` bounds.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Number
             * @param {number} number The number to clamp.
             * @param {number} [lower] The lower bound.
             * @param {number} upper The upper bound.
             * @returns {number} Returns the clamped number.
             * @example
             *
             * _.clamp(-10, -5, 5);
             * // => -5
             *
             * _.clamp(10, -5, 5);
             * // => 5
             */
            function clamp(number, lower, upper) {
              if (upper === undefined) {
                upper = lower;
                lower = undefined;
              }
              if (upper !== undefined) {
                upper = toNumber(upper);
                upper = upper === upper ? upper : 0;
              }
              if (lower !== undefined) {
                lower = toNumber(lower);
                lower = lower === lower ? lower : 0;
              }
              return baseClamp(toNumber(number), lower, upper);
            }

            /**
             * Checks if `n` is between `start` and up to, but not including, `end`. If
             * `end` is not specified, it's set to `start` with `start` then set to `0`.
             * If `start` is greater than `end` the params are swapped to support
             * negative ranges.
             *
             * @static
             * @memberOf _
             * @since 3.3.0
             * @category Number
             * @param {number} number The number to check.
             * @param {number} [start=0] The start of the range.
             * @param {number} end The end of the range.
             * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
             * @see _.range, _.rangeRight
             * @example
             *
             * _.inRange(3, 2, 4);
             * // => true
             *
             * _.inRange(4, 8);
             * // => true
             *
             * _.inRange(4, 2);
             * // => false
             *
             * _.inRange(2, 2);
             * // => false
             *
             * _.inRange(1.2, 2);
             * // => true
             *
             * _.inRange(5.2, 4);
             * // => false
             *
             * _.inRange(-3, -2, -6);
             * // => true
             */
            function inRange(number, start, end) {
              start = toFinite(start);
              if (end === undefined) {
                end = start;
                start = 0;
              } else {
                end = toFinite(end);
              }
              number = toNumber(number);
              return baseInRange(number, start, end);
            }

            /**
             * Produces a random number between the inclusive `lower` and `upper` bounds.
             * If only one argument is provided a number between `0` and the given number
             * is returned. If `floating` is `true`, or either `lower` or `upper` are
             * floats, a floating-point number is returned instead of an integer.
             *
             * **Note:** JavaScript follows the IEEE-754 standard for resolving
             * floating-point values which can produce unexpected results.
             *
             * @static
             * @memberOf _
             * @since 0.7.0
             * @category Number
             * @param {number} [lower=0] The lower bound.
             * @param {number} [upper=1] The upper bound.
             * @param {boolean} [floating] Specify returning a floating-point number.
             * @returns {number} Returns the random number.
             * @example
             *
             * _.random(0, 5);
             * // => an integer between 0 and 5
             *
             * _.random(5);
             * // => also an integer between 0 and 5
             *
             * _.random(5, true);
             * // => a floating-point number between 0 and 5
             *
             * _.random(1.2, 5.2);
             * // => a floating-point number between 1.2 and 5.2
             */
            function random(lower, upper, floating) {
              if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {
                upper = floating = undefined;
              }
              if (floating === undefined) {
                if (typeof upper == 'boolean') {
                  floating = upper;
                  upper = undefined;
                }
                else if (typeof lower == 'boolean') {
                  floating = lower;
                  lower = undefined;
                }
              }
              if (lower === undefined && upper === undefined) {
                lower = 0;
                upper = 1;
              }
              else {
                lower = toFinite(lower);
                if (upper === undefined) {
                  upper = lower;
                  lower = 0;
                } else {
                  upper = toFinite(upper);
                }
              }
              if (lower > upper) {
                var temp = lower;
                lower = upper;
                upper = temp;
              }
              if (floating || lower % 1 || upper % 1) {
                var rand = nativeRandom();
                return nativeMin(lower + (rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1)))), upper);
              }
              return baseRandom(lower, upper);
            }

            /*------------------------------------------------------------------------*/

            /**
             * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category String
             * @param {string} [string=''] The string to convert.
             * @returns {string} Returns the camel cased string.
             * @example
             *
             * _.camelCase('Foo Bar');
             * // => 'fooBar'
             *
             * _.camelCase('--foo-bar--');
             * // => 'fooBar'
             *
             * _.camelCase('__FOO_BAR__');
             * // => 'fooBar'
             */
            var camelCase = createCompounder(function (result, word, index) {
              word = word.toLowerCase();
              return result + (index ? capitalize(word) : word);
            });

            /**
             * Converts the first character of `string` to upper case and the remaining
             * to lower case.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category String
             * @param {string} [string=''] The string to capitalize.
             * @returns {string} Returns the capitalized string.
             * @example
             *
             * _.capitalize('FRED');
             * // => 'Fred'
             */
            function capitalize(string) {
              return upperFirst(toString(string).toLowerCase());
            }

            /**
             * Deburrs `string` by converting
             * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
             * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
             * letters to basic Latin letters and removing
             * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category String
             * @param {string} [string=''] The string to deburr.
             * @returns {string} Returns the deburred string.
             * @example
             *
             * _.deburr('déjà vu');
             * // => 'deja vu'
             */
            function deburr(string) {
              string = toString(string);
              return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');
            }

            /**
             * Checks if `string` ends with the given target string.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category String
             * @param {string} [string=''] The string to inspect.
             * @param {string} [target] The string to search for.
             * @param {number} [position=string.length] The position to search up to.
             * @returns {boolean} Returns `true` if `string` ends with `target`,
             *  else `false`.
             * @example
             *
             * _.endsWith('abc', 'c');
             * // => true
             *
             * _.endsWith('abc', 'b');
             * // => false
             *
             * _.endsWith('abc', 'b', 2);
             * // => true
             */
            function endsWith(string, target, position) {
              string = toString(string);
              target = baseToString(target);

              var length = string.length;
              position = position === undefined
                ? length
                : baseClamp(toInteger(position), 0, length);

              var end = position;
              position -= target.length;
              return position >= 0 && string.slice(position, end) == target;
            }

            /**
             * Converts the characters "&", "<", ">", '"', and "'" in `string` to their
             * corresponding HTML entities.
             *
             * **Note:** No other characters are escaped. To escape additional
             * characters use a third-party library like [_he_](https://mths.be/he).
             *
             * Though the ">" character is escaped for symmetry, characters like
             * ">" and "/" don't need escaping in HTML and have no special meaning
             * unless they're part of a tag or unquoted attribute value. See
             * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
             * (under "semi-related fun fact") for more details.
             *
             * When working with HTML you should always
             * [quote attribute values](http://wonko.com/post/html-escaping) to reduce
             * XSS vectors.
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category String
             * @param {string} [string=''] The string to escape.
             * @returns {string} Returns the escaped string.
             * @example
             *
             * _.escape('fred, barney, & pebbles');
             * // => 'fred, barney, &amp; pebbles'
             */
            function escape(string) {
              string = toString(string);
              return (string && reHasUnescapedHtml.test(string))
                ? string.replace(reUnescapedHtml, escapeHtmlChar)
                : string;
            }

            /**
             * Escapes the `RegExp` special characters "^", "$", "\", ".", "*", "+",
             * "?", "(", ")", "[", "]", "{", "}", and "|" in `string`.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category String
             * @param {string} [string=''] The string to escape.
             * @returns {string} Returns the escaped string.
             * @example
             *
             * _.escapeRegExp('[lodash](https://lodash.com/)');
             * // => '\[lodash\]\(https://lodash\.com/\)'
             */
            function escapeRegExp(string) {
              string = toString(string);
              return (string && reHasRegExpChar.test(string))
                ? string.replace(reRegExpChar, '\\$&')
                : string;
            }

            /**
             * Converts `string` to
             * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category String
             * @param {string} [string=''] The string to convert.
             * @returns {string} Returns the kebab cased string.
             * @example
             *
             * _.kebabCase('Foo Bar');
             * // => 'foo-bar'
             *
             * _.kebabCase('fooBar');
             * // => 'foo-bar'
             *
             * _.kebabCase('__FOO_BAR__');
             * // => 'foo-bar'
             */
            var kebabCase = createCompounder(function (result, word, index) {
              return result + (index ? '-' : '') + word.toLowerCase();
            });

            /**
             * Converts `string`, as space separated words, to lower case.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category String
             * @param {string} [string=''] The string to convert.
             * @returns {string} Returns the lower cased string.
             * @example
             *
             * _.lowerCase('--Foo-Bar--');
             * // => 'foo bar'
             *
             * _.lowerCase('fooBar');
             * // => 'foo bar'
             *
             * _.lowerCase('__FOO_BAR__');
             * // => 'foo bar'
             */
            var lowerCase = createCompounder(function (result, word, index) {
              return result + (index ? ' ' : '') + word.toLowerCase();
            });

            /**
             * Converts the first character of `string` to lower case.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category String
             * @param {string} [string=''] The string to convert.
             * @returns {string} Returns the converted string.
             * @example
             *
             * _.lowerFirst('Fred');
             * // => 'fred'
             *
             * _.lowerFirst('FRED');
             * // => 'fRED'
             */
            var lowerFirst = createCaseFirst('toLowerCase');

            /**
             * Pads `string` on the left and right sides if it's shorter than `length`.
             * Padding characters are truncated if they can't be evenly divided by `length`.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category String
             * @param {string} [string=''] The string to pad.
             * @param {number} [length=0] The padding length.
             * @param {string} [chars=' '] The string used as padding.
             * @returns {string} Returns the padded string.
             * @example
             *
             * _.pad('abc', 8);
             * // => '  abc   '
             *
             * _.pad('abc', 8, '_-');
             * // => '_-abc_-_'
             *
             * _.pad('abc', 3);
             * // => 'abc'
             */
            function pad(string, length, chars) {
              string = toString(string);
              length = toInteger(length);

              var strLength = length ? stringSize(string) : 0;
              if (!length || strLength >= length) {
                return string;
              }
              var mid = (length - strLength) / 2;
              return (
                createPadding(nativeFloor(mid), chars) +
                string +
                createPadding(nativeCeil(mid), chars)
              );
            }

            /**
             * Pads `string` on the right side if it's shorter than `length`. Padding
             * characters are truncated if they exceed `length`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category String
             * @param {string} [string=''] The string to pad.
             * @param {number} [length=0] The padding length.
             * @param {string} [chars=' '] The string used as padding.
             * @returns {string} Returns the padded string.
             * @example
             *
             * _.padEnd('abc', 6);
             * // => 'abc   '
             *
             * _.padEnd('abc', 6, '_-');
             * // => 'abc_-_'
             *
             * _.padEnd('abc', 3);
             * // => 'abc'
             */
            function padEnd(string, length, chars) {
              string = toString(string);
              length = toInteger(length);

              var strLength = length ? stringSize(string) : 0;
              return (length && strLength < length)
                ? (string + createPadding(length - strLength, chars))
                : string;
            }

            /**
             * Pads `string` on the left side if it's shorter than `length`. Padding
             * characters are truncated if they exceed `length`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category String
             * @param {string} [string=''] The string to pad.
             * @param {number} [length=0] The padding length.
             * @param {string} [chars=' '] The string used as padding.
             * @returns {string} Returns the padded string.
             * @example
             *
             * _.padStart('abc', 6);
             * // => '   abc'
             *
             * _.padStart('abc', 6, '_-');
             * // => '_-_abc'
             *
             * _.padStart('abc', 3);
             * // => 'abc'
             */
            function padStart(string, length, chars) {
              string = toString(string);
              length = toInteger(length);

              var strLength = length ? stringSize(string) : 0;
              return (length && strLength < length)
                ? (createPadding(length - strLength, chars) + string)
                : string;
            }

            /**
             * Converts `string` to an integer of the specified radix. If `radix` is
             * `undefined` or `0`, a `radix` of `10` is used unless `value` is a
             * hexadecimal, in which case a `radix` of `16` is used.
             *
             * **Note:** This method aligns with the
             * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.
             *
             * @static
             * @memberOf _
             * @since 1.1.0
             * @category String
             * @param {string} string The string to convert.
             * @param {number} [radix=10] The radix to interpret `value` by.
             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
             * @returns {number} Returns the converted integer.
             * @example
             *
             * _.parseInt('08');
             * // => 8
             *
             * _.map(['6', '08', '10'], _.parseInt);
             * // => [6, 8, 10]
             */
            function parseInt(string, radix, guard) {
              if (guard || radix == null) {
                radix = 0;
              } else if (radix) {
                radix = +radix;
              }
              return nativeParseInt(toString(string).replace(reTrimStart, ''), radix || 0);
            }

            /**
             * Repeats the given string `n` times.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category String
             * @param {string} [string=''] The string to repeat.
             * @param {number} [n=1] The number of times to repeat the string.
             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
             * @returns {string} Returns the repeated string.
             * @example
             *
             * _.repeat('*', 3);
             * // => '***'
             *
             * _.repeat('abc', 2);
             * // => 'abcabc'
             *
             * _.repeat('abc', 0);
             * // => ''
             */
            function repeat(string, n, guard) {
              if ((guard ? isIterateeCall(string, n, guard) : n === undefined)) {
                n = 1;
              } else {
                n = toInteger(n);
              }
              return baseRepeat(toString(string), n);
            }

            /**
             * Replaces matches for `pattern` in `string` with `replacement`.
             *
             * **Note:** This method is based on
             * [`String#replace`](https://mdn.io/String/replace).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category String
             * @param {string} [string=''] The string to modify.
             * @param {RegExp|string} pattern The pattern to replace.
             * @param {Function|string} replacement The match replacement.
             * @returns {string} Returns the modified string.
             * @example
             *
             * _.replace('Hi Fred', 'Fred', 'Barney');
             * // => 'Hi Barney'
             */
            function replace() {
              var args = arguments,
                string = toString(args[0]);

              return args.length < 3 ? string : string.replace(args[1], args[2]);
            }

            /**
             * Converts `string` to
             * [snake case](https://en.wikipedia.org/wiki/Snake_case).
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category String
             * @param {string} [string=''] The string to convert.
             * @returns {string} Returns the snake cased string.
             * @example
             *
             * _.snakeCase('Foo Bar');
             * // => 'foo_bar'
             *
             * _.snakeCase('fooBar');
             * // => 'foo_bar'
             *
             * _.snakeCase('--FOO-BAR--');
             * // => 'foo_bar'
             */
            var snakeCase = createCompounder(function (result, word, index) {
              return result + (index ? '_' : '') + word.toLowerCase();
            });

            /**
             * Splits `string` by `separator`.
             *
             * **Note:** This method is based on
             * [`String#split`](https://mdn.io/String/split).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category String
             * @param {string} [string=''] The string to split.
             * @param {RegExp|string} separator The separator pattern to split by.
             * @param {number} [limit] The length to truncate results to.
             * @returns {Array} Returns the string segments.
             * @example
             *
             * _.split('a-b-c', '-', 2);
             * // => ['a', 'b']
             */
            function split(string, separator, limit) {
              if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {
                separator = limit = undefined;
              }
              limit = limit === undefined ? MAX_ARRAY_LENGTH : limit >>> 0;
              if (!limit) {
                return [];
              }
              string = toString(string);
              if (string && (
                typeof separator == 'string' ||
                (separator != null && !isRegExp(separator))
              )) {
                separator = baseToString(separator);
                if (!separator && hasUnicode(string)) {
                  return castSlice(stringToArray(string), 0, limit);
                }
              }
              return string.split(separator, limit);
            }

            /**
             * Converts `string` to
             * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
             *
             * @static
             * @memberOf _
             * @since 3.1.0
             * @category String
             * @param {string} [string=''] The string to convert.
             * @returns {string} Returns the start cased string.
             * @example
             *
             * _.startCase('--foo-bar--');
             * // => 'Foo Bar'
             *
             * _.startCase('fooBar');
             * // => 'Foo Bar'
             *
             * _.startCase('__FOO_BAR__');
             * // => 'FOO BAR'
             */
            var startCase = createCompounder(function (result, word, index) {
              return result + (index ? ' ' : '') + upperFirst(word);
            });

            /**
             * Checks if `string` starts with the given target string.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category String
             * @param {string} [string=''] The string to inspect.
             * @param {string} [target] The string to search for.
             * @param {number} [position=0] The position to search from.
             * @returns {boolean} Returns `true` if `string` starts with `target`,
             *  else `false`.
             * @example
             *
             * _.startsWith('abc', 'a');
             * // => true
             *
             * _.startsWith('abc', 'b');
             * // => false
             *
             * _.startsWith('abc', 'b', 1);
             * // => true
             */
            function startsWith(string, target, position) {
              string = toString(string);
              position = position == null
                ? 0
                : baseClamp(toInteger(position), 0, string.length);

              target = baseToString(target);
              return string.slice(position, position + target.length) == target;
            }

            /**
             * Creates a compiled template function that can interpolate data properties
             * in "interpolate" delimiters, HTML-escape interpolated data properties in
             * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
             * properties may be accessed as free variables in the template. If a setting
             * object is given, it takes precedence over `_.templateSettings` values.
             *
             * **Note:** In the development build `_.template` utilizes
             * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
             * for easier debugging.
             *
             * For more information on precompiling templates see
             * [lodash's custom builds documentation](https://lodash.com/custom-builds).
             *
             * For more information on Chrome extension sandboxes see
             * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category String
             * @param {string} [string=''] The template string.
             * @param {Object} [options={}] The options object.
             * @param {RegExp} [options.escape=_.templateSettings.escape]
             *  The HTML "escape" delimiter.
             * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]
             *  The "evaluate" delimiter.
             * @param {Object} [options.imports=_.templateSettings.imports]
             *  An object to import into the template as free variables.
             * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]
             *  The "interpolate" delimiter.
             * @param {string} [options.sourceURL='lodash.templateSources[n]']
             *  The sourceURL of the compiled template.
             * @param {string} [options.variable='obj']
             *  The data object variable name.
             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
             * @returns {Function} Returns the compiled template function.
             * @example
             *
             * // Use the "interpolate" delimiter to create a compiled template.
             * var compiled = _.template('hello <%= user %>!');
             * compiled({ 'user': 'fred' });
             * // => 'hello fred!'
             *
             * // Use the HTML "escape" delimiter to escape data property values.
             * var compiled = _.template('<b><%- value %></b>');
             * compiled({ 'value': '<script>' });
             * // => '<b>&lt;script&gt;</b>'
             *
             * // Use the "evaluate" delimiter to execute JavaScript and generate HTML.
             * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
             * compiled({ 'users': ['fred', 'barney'] });
             * // => '<li>fred</li><li>barney</li>'
             *
             * // Use the internal `print` function in "evaluate" delimiters.
             * var compiled = _.template('<% print("hello " + user); %>!');
             * compiled({ 'user': 'barney' });
             * // => 'hello barney!'
             *
             * // Use the ES template literal delimiter as an "interpolate" delimiter.
             * // Disable support by replacing the "interpolate" delimiter.
             * var compiled = _.template('hello ${ user }!');
             * compiled({ 'user': 'pebbles' });
             * // => 'hello pebbles!'
             *
             * // Use backslashes to treat delimiters as plain text.
             * var compiled = _.template('<%= "\\<%- value %\\>" %>');
             * compiled({ 'value': 'ignored' });
             * // => '<%- value %>'
             *
             * // Use the `imports` option to import `jQuery` as `jq`.
             * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
             * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
             * compiled({ 'users': ['fred', 'barney'] });
             * // => '<li>fred</li><li>barney</li>'
             *
             * // Use the `sourceURL` option to specify a custom sourceURL for the template.
             * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
             * compiled(data);
             * // => Find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector.
             *
             * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.
             * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
             * compiled.source;
             * // => function(data) {
             * //   var __t, __p = '';
             * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
             * //   return __p;
             * // }
             *
             * // Use custom template delimiters.
             * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
             * var compiled = _.template('hello {{ user }}!');
             * compiled({ 'user': 'mustache' });
             * // => 'hello mustache!'
             *
             * // Use the `source` property to inline compiled templates for meaningful
             * // line numbers in error messages and stack traces.
             * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\
             *   var JST = {\
             *     "main": ' + _.template(mainText).source + '\
             *   };\
             * ');
             */
            function template(string, options, guard) {
              // Based on John Resig's `tmpl` implementation
              // (http://ejohn.org/blog/javascript-micro-templating/)
              // and Laura Doktorova's doT.js (https://github.com/olado/doT).
              var settings = lodash.templateSettings;

              if (guard && isIterateeCall(string, options, guard)) {
                options = undefined;
              }
              string = toString(string);
              options = assignInWith({}, options, settings, customDefaultsAssignIn);

              var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn),
                importsKeys = keys(imports),
                importsValues = baseValues(imports, importsKeys);

              var isEscaping,
                isEvaluating,
                index = 0,
                interpolate = options.interpolate || reNoMatch,
                source = "__p += '";

              // Compile the regexp to match each delimiter.
              var reDelimiters = RegExp(
                (options.escape || reNoMatch).source + '|' +
                interpolate.source + '|' +
                (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +
                (options.evaluate || reNoMatch).source + '|$'
                , 'g');

              // Use a sourceURL for easier debugging.
              var sourceURL = '//# sourceURL=' +
                ('sourceURL' in options
                  ? options.sourceURL
                  : ('lodash.templateSources[' + (++templateCounter) + ']')
                ) + '\n';

              string.replace(reDelimiters, function (match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
                interpolateValue || (interpolateValue = esTemplateValue);

                // Escape characters that can't be included in string literals.
                source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);

                // Replace delimiters with snippets.
                if (escapeValue) {
                  isEscaping = true;
                  source += "' +\n__e(" + escapeValue + ") +\n'";
                }
                if (evaluateValue) {
                  isEvaluating = true;
                  source += "';\n" + evaluateValue + ";\n__p += '";
                }
                if (interpolateValue) {
                  source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
                }
                index = offset + match.length;

                // The JS engine embedded in Adobe products needs `match` returned in
                // order to produce the correct `offset` value.
                return match;
              });

              source += "';\n";

              // If `variable` is not specified wrap a with-statement around the generated
              // code to add the data object to the top of the scope chain.
              var variable = options.variable;
              if (!variable) {
                source = 'with (obj) {\n' + source + '\n}\n';
              }
              // Cleanup code by stripping empty strings.
              source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)
                .replace(reEmptyStringMiddle, '$1')
                .replace(reEmptyStringTrailing, '$1;');

              // Frame code as the function body.
              source = 'function(' + (variable || 'obj') + ') {\n' +
                (variable
                  ? ''
                  : 'obj || (obj = {});\n'
                ) +
                "var __t, __p = ''" +
                (isEscaping
                  ? ', __e = _.escape'
                  : ''
                ) +
                (isEvaluating
                  ? ', __j = Array.prototype.join;\n' +
                  "function print() { __p += __j.call(arguments, '') }\n"
                  : ';\n'
                ) +
                source +
                'return __p\n}';

              var result = attempt(function () {
                return Function(importsKeys, sourceURL + 'return ' + source)
                  .apply(undefined, importsValues);
              });

              // Provide the compiled function's source by its `toString` method or
              // the `source` property as a convenience for inlining compiled templates.
              result.source = source;
              if (isError(result)) {
                throw result;
              }
              return result;
            }

            /**
             * Converts `string`, as a whole, to lower case just like
             * [String#toLowerCase](https://mdn.io/toLowerCase).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category String
             * @param {string} [string=''] The string to convert.
             * @returns {string} Returns the lower cased string.
             * @example
             *
             * _.toLower('--Foo-Bar--');
             * // => '--foo-bar--'
             *
             * _.toLower('fooBar');
             * // => 'foobar'
             *
             * _.toLower('__FOO_BAR__');
             * // => '__foo_bar__'
             */
            function toLower(value) {
              return toString(value).toLowerCase();
            }

            /**
             * Converts `string`, as a whole, to upper case just like
             * [String#toUpperCase](https://mdn.io/toUpperCase).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category String
             * @param {string} [string=''] The string to convert.
             * @returns {string} Returns the upper cased string.
             * @example
             *
             * _.toUpper('--foo-bar--');
             * // => '--FOO-BAR--'
             *
             * _.toUpper('fooBar');
             * // => 'FOOBAR'
             *
             * _.toUpper('__foo_bar__');
             * // => '__FOO_BAR__'
             */
            function toUpper(value) {
              return toString(value).toUpperCase();
            }

            /**
             * Removes leading and trailing whitespace or specified characters from `string`.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category String
             * @param {string} [string=''] The string to trim.
             * @param {string} [chars=whitespace] The characters to trim.
             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
             * @returns {string} Returns the trimmed string.
             * @example
             *
             * _.trim('  abc  ');
             * // => 'abc'
             *
             * _.trim('-_-abc-_-', '_-');
             * // => 'abc'
             *
             * _.map(['  foo  ', '  bar  '], _.trim);
             * // => ['foo', 'bar']
             */
            function trim(string, chars, guard) {
              string = toString(string);
              if (string && (guard || chars === undefined)) {
                return string.replace(reTrim, '');
              }
              if (!string || !(chars = baseToString(chars))) {
                return string;
              }
              var strSymbols = stringToArray(string),
                chrSymbols = stringToArray(chars),
                start = charsStartIndex(strSymbols, chrSymbols),
                end = charsEndIndex(strSymbols, chrSymbols) + 1;

              return castSlice(strSymbols, start, end).join('');
            }

            /**
             * Removes trailing whitespace or specified characters from `string`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category String
             * @param {string} [string=''] The string to trim.
             * @param {string} [chars=whitespace] The characters to trim.
             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
             * @returns {string} Returns the trimmed string.
             * @example
             *
             * _.trimEnd('  abc  ');
             * // => '  abc'
             *
             * _.trimEnd('-_-abc-_-', '_-');
             * // => '-_-abc'
             */
            function trimEnd(string, chars, guard) {
              string = toString(string);
              if (string && (guard || chars === undefined)) {
                return string.replace(reTrimEnd, '');
              }
              if (!string || !(chars = baseToString(chars))) {
                return string;
              }
              var strSymbols = stringToArray(string),
                end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;

              return castSlice(strSymbols, 0, end).join('');
            }

            /**
             * Removes leading whitespace or specified characters from `string`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category String
             * @param {string} [string=''] The string to trim.
             * @param {string} [chars=whitespace] The characters to trim.
             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
             * @returns {string} Returns the trimmed string.
             * @example
             *
             * _.trimStart('  abc  ');
             * // => 'abc  '
             *
             * _.trimStart('-_-abc-_-', '_-');
             * // => 'abc-_-'
             */
            function trimStart(string, chars, guard) {
              string = toString(string);
              if (string && (guard || chars === undefined)) {
                return string.replace(reTrimStart, '');
              }
              if (!string || !(chars = baseToString(chars))) {
                return string;
              }
              var strSymbols = stringToArray(string),
                start = charsStartIndex(strSymbols, stringToArray(chars));

              return castSlice(strSymbols, start).join('');
            }

            /**
             * Truncates `string` if it's longer than the given maximum string length.
             * The last characters of the truncated string are replaced with the omission
             * string which defaults to "...".
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category String
             * @param {string} [string=''] The string to truncate.
             * @param {Object} [options={}] The options object.
             * @param {number} [options.length=30] The maximum string length.
             * @param {string} [options.omission='...'] The string to indicate text is omitted.
             * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
             * @returns {string} Returns the truncated string.
             * @example
             *
             * _.truncate('hi-diddly-ho there, neighborino');
             * // => 'hi-diddly-ho there, neighbo...'
             *
             * _.truncate('hi-diddly-ho there, neighborino', {
             *   'length': 24,
             *   'separator': ' '
             * });
             * // => 'hi-diddly-ho there,...'
             *
             * _.truncate('hi-diddly-ho there, neighborino', {
             *   'length': 24,
             *   'separator': /,? +/
             * });
             * // => 'hi-diddly-ho there...'
             *
             * _.truncate('hi-diddly-ho there, neighborino', {
             *   'omission': ' [...]'
             * });
             * // => 'hi-diddly-ho there, neig [...]'
             */
            function truncate(string, options) {
              var length = DEFAULT_TRUNC_LENGTH,
                omission = DEFAULT_TRUNC_OMISSION;

              if (isObject(options)) {
                var separator = 'separator' in options ? options.separator : separator;
                length = 'length' in options ? toInteger(options.length) : length;
                omission = 'omission' in options ? baseToString(options.omission) : omission;
              }
              string = toString(string);

              var strLength = string.length;
              if (hasUnicode(string)) {
                var strSymbols = stringToArray(string);
                strLength = strSymbols.length;
              }
              if (length >= strLength) {
                return string;
              }
              var end = length - stringSize(omission);
              if (end < 1) {
                return omission;
              }
              var result = strSymbols
                ? castSlice(strSymbols, 0, end).join('')
                : string.slice(0, end);

              if (separator === undefined) {
                return result + omission;
              }
              if (strSymbols) {
                end += (result.length - end);
              }
              if (isRegExp(separator)) {
                if (string.slice(end).search(separator)) {
                  var match,
                    substring = result;

                  if (!separator.global) {
                    separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');
                  }
                  separator.lastIndex = 0;
                  while ((match = separator.exec(substring))) {
                    var newEnd = match.index;
                  }
                  result = result.slice(0, newEnd === undefined ? end : newEnd);
                }
              } else if (string.indexOf(baseToString(separator), end) != end) {
                var index = result.lastIndexOf(separator);
                if (index > -1) {
                  result = result.slice(0, index);
                }
              }
              return result + omission;
            }

            /**
             * The inverse of `_.escape`; this method converts the HTML entities
             * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to
             * their corresponding characters.
             *
             * **Note:** No other HTML entities are unescaped. To unescape additional
             * HTML entities use a third-party library like [_he_](https://mths.be/he).
             *
             * @static
             * @memberOf _
             * @since 0.6.0
             * @category String
             * @param {string} [string=''] The string to unescape.
             * @returns {string} Returns the unescaped string.
             * @example
             *
             * _.unescape('fred, barney, &amp; pebbles');
             * // => 'fred, barney, & pebbles'
             */
            function unescape(string) {
              string = toString(string);
              return (string && reHasEscapedHtml.test(string))
                ? string.replace(reEscapedHtml, unescapeHtmlChar)
                : string;
            }

            /**
             * Converts `string`, as space separated words, to upper case.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category String
             * @param {string} [string=''] The string to convert.
             * @returns {string} Returns the upper cased string.
             * @example
             *
             * _.upperCase('--foo-bar');
             * // => 'FOO BAR'
             *
             * _.upperCase('fooBar');
             * // => 'FOO BAR'
             *
             * _.upperCase('__foo_bar__');
             * // => 'FOO BAR'
             */
            var upperCase = createCompounder(function (result, word, index) {
              return result + (index ? ' ' : '') + word.toUpperCase();
            });

            /**
             * Converts the first character of `string` to upper case.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category String
             * @param {string} [string=''] The string to convert.
             * @returns {string} Returns the converted string.
             * @example
             *
             * _.upperFirst('fred');
             * // => 'Fred'
             *
             * _.upperFirst('FRED');
             * // => 'FRED'
             */
            var upperFirst = createCaseFirst('toUpperCase');

            /**
             * Splits `string` into an array of its words.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category String
             * @param {string} [string=''] The string to inspect.
             * @param {RegExp|string} [pattern] The pattern to match words.
             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
             * @returns {Array} Returns the words of `string`.
             * @example
             *
             * _.words('fred, barney, & pebbles');
             * // => ['fred', 'barney', 'pebbles']
             *
             * _.words('fred, barney, & pebbles', /[^, ]+/g);
             * // => ['fred', 'barney', '&', 'pebbles']
             */
            function words(string, pattern, guard) {
              string = toString(string);
              pattern = guard ? undefined : pattern;

              if (pattern === undefined) {
                return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
              }
              return string.match(pattern) || [];
            }

            /*------------------------------------------------------------------------*/

            /**
             * Attempts to invoke `func`, returning either the result or the caught error
             * object. Any additional arguments are provided to `func` when it's invoked.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Util
             * @param {Function} func The function to attempt.
             * @param {...*} [args] The arguments to invoke `func` with.
             * @returns {*} Returns the `func` result or error object.
             * @example
             *
             * // Avoid throwing errors for invalid selectors.
             * var elements = _.attempt(function(selector) {
             *   return document.querySelectorAll(selector);
             * }, '>_>');
             *
             * if (_.isError(elements)) {
             *   elements = [];
             * }
             */
            var attempt = baseRest(function (func, args) {
              try {
                return apply(func, undefined, args);
              } catch (e) {
                return isError(e) ? e : new Error(e);
              }
            });

            /**
             * Binds methods of an object to the object itself, overwriting the existing
             * method.
             *
             * **Note:** This method doesn't set the "length" property of bound functions.
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category Util
             * @param {Object} object The object to bind and assign the bound methods to.
             * @param {...(string|string[])} methodNames The object method names to bind.
             * @returns {Object} Returns `object`.
             * @example
             *
             * var view = {
             *   'label': 'docs',
             *   'click': function() {
             *     console.log('clicked ' + this.label);
             *   }
             * };
             *
             * _.bindAll(view, ['click']);
             * jQuery(element).on('click', view.click);
             * // => Logs 'clicked docs' when clicked.
             */
            var bindAll = flatRest(function (object, methodNames) {
              arrayEach(methodNames, function (key) {
                key = toKey(key);
                baseAssignValue(object, key, bind(object[key], object));
              });
              return object;
            });

            /**
             * Creates a function that iterates over `pairs` and invokes the corresponding
             * function of the first predicate to return truthy. The predicate-function
             * pairs are invoked with the `this` binding and arguments of the created
             * function.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Util
             * @param {Array} pairs The predicate-function pairs.
             * @returns {Function} Returns the new composite function.
             * @example
             *
             * var func = _.cond([
             *   [_.matches({ 'a': 1 }),           _.constant('matches A')],
             *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],
             *   [_.stubTrue,                      _.constant('no match')]
             * ]);
             *
             * func({ 'a': 1, 'b': 2 });
             * // => 'matches A'
             *
             * func({ 'a': 0, 'b': 1 });
             * // => 'matches B'
             *
             * func({ 'a': '1', 'b': '2' });
             * // => 'no match'
             */
            function cond(pairs) {
              var length = pairs == null ? 0 : pairs.length,
                toIteratee = getIteratee();

              pairs = !length ? [] : arrayMap(pairs, function (pair) {
                if (typeof pair[1] != 'function') {
                  throw new TypeError(FUNC_ERROR_TEXT);
                }
                return [toIteratee(pair[0]), pair[1]];
              });

              return baseRest(function (args) {
                var index = -1;
                while (++index < length) {
                  var pair = pairs[index];
                  if (apply(pair[0], this, args)) {
                    return apply(pair[1], this, args);
                  }
                }
              });
            }

            /**
             * Creates a function that invokes the predicate properties of `source` with
             * the corresponding property values of a given object, returning `true` if
             * all predicates return truthy, else `false`.
             *
             * **Note:** The created function is equivalent to `_.conformsTo` with
             * `source` partially applied.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Util
             * @param {Object} source The object of property predicates to conform to.
             * @returns {Function} Returns the new spec function.
             * @example
             *
             * var objects = [
             *   { 'a': 2, 'b': 1 },
             *   { 'a': 1, 'b': 2 }
             * ];
             *
             * _.filter(objects, _.conforms({ 'b': function(n) { return n > 1; } }));
             * // => [{ 'a': 1, 'b': 2 }]
             */
            function conforms(source) {
              return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
            }

            /**
             * Creates a function that returns `value`.
             *
             * @static
             * @memberOf _
             * @since 2.4.0
             * @category Util
             * @param {*} value The value to return from the new function.
             * @returns {Function} Returns the new constant function.
             * @example
             *
             * var objects = _.times(2, _.constant({ 'a': 1 }));
             *
             * console.log(objects);
             * // => [{ 'a': 1 }, { 'a': 1 }]
             *
             * console.log(objects[0] === objects[1]);
             * // => true
             */
            function constant(value) {
              return function () {
                return value;
              };
            }

            /**
             * Checks `value` to determine whether a default value should be returned in
             * its place. The `defaultValue` is returned if `value` is `NaN`, `null`,
             * or `undefined`.
             *
             * @static
             * @memberOf _
             * @since 4.14.0
             * @category Util
             * @param {*} value The value to check.
             * @param {*} defaultValue The default value.
             * @returns {*} Returns the resolved value.
             * @example
             *
             * _.defaultTo(1, 10);
             * // => 1
             *
             * _.defaultTo(undefined, 10);
             * // => 10
             */
            function defaultTo(value, defaultValue) {
              return (value == null || value !== value) ? defaultValue : value;
            }

            /**
             * Creates a function that returns the result of invoking the given functions
             * with the `this` binding of the created function, where each successive
             * invocation is supplied the return value of the previous.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Util
             * @param {...(Function|Function[])} [funcs] The functions to invoke.
             * @returns {Function} Returns the new composite function.
             * @see _.flowRight
             * @example
             *
             * function square(n) {
             *   return n * n;
             * }
             *
             * var addSquare = _.flow([_.add, square]);
             * addSquare(1, 2);
             * // => 9
             */
            var flow = createFlow();

            /**
             * This method is like `_.flow` except that it creates a function that
             * invokes the given functions from right to left.
             *
             * @static
             * @since 3.0.0
             * @memberOf _
             * @category Util
             * @param {...(Function|Function[])} [funcs] The functions to invoke.
             * @returns {Function} Returns the new composite function.
             * @see _.flow
             * @example
             *
             * function square(n) {
             *   return n * n;
             * }
             *
             * var addSquare = _.flowRight([square, _.add]);
             * addSquare(1, 2);
             * // => 9
             */
            var flowRight = createFlow(true);

            /**
             * This method returns the first argument it receives.
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category Util
             * @param {*} value Any value.
             * @returns {*} Returns `value`.
             * @example
             *
             * var object = { 'a': 1 };
             *
             * console.log(_.identity(object) === object);
             * // => true
             */
            function identity(value) {
              return value;
            }

            /**
             * Creates a function that invokes `func` with the arguments of the created
             * function. If `func` is a property name, the created function returns the
             * property value for a given element. If `func` is an array or object, the
             * created function returns `true` for elements that contain the equivalent
             * source properties, otherwise it returns `false`.
             *
             * @static
             * @since 4.0.0
             * @memberOf _
             * @category Util
             * @param {*} [func=_.identity] The value to convert to a callback.
             * @returns {Function} Returns the callback.
             * @example
             *
             * var users = [
             *   { 'user': 'barney', 'age': 36, 'active': true },
             *   { 'user': 'fred',   'age': 40, 'active': false }
             * ];
             *
             * // The `_.matches` iteratee shorthand.
             * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));
             * // => [{ 'user': 'barney', 'age': 36, 'active': true }]
             *
             * // The `_.matchesProperty` iteratee shorthand.
             * _.filter(users, _.iteratee(['user', 'fred']));
             * // => [{ 'user': 'fred', 'age': 40 }]
             *
             * // The `_.property` iteratee shorthand.
             * _.map(users, _.iteratee('user'));
             * // => ['barney', 'fred']
             *
             * // Create custom iteratee shorthands.
             * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {
             *   return !_.isRegExp(func) ? iteratee(func) : function(string) {
             *     return func.test(string);
             *   };
             * });
             *
             * _.filter(['abc', 'def'], /ef/);
             * // => ['def']
             */
            function iteratee(func) {
              return baseIteratee(typeof func == 'function' ? func : baseClone(func, CLONE_DEEP_FLAG));
            }

            /**
             * Creates a function that performs a partial deep comparison between a given
             * object and `source`, returning `true` if the given object has equivalent
             * property values, else `false`.
             *
             * **Note:** The created function is equivalent to `_.isMatch` with `source`
             * partially applied.
             *
             * Partial comparisons will match empty array and empty object `source`
             * values against any array or object value, respectively. See `_.isEqual`
             * for a list of supported value comparisons.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Util
             * @param {Object} source The object of property values to match.
             * @returns {Function} Returns the new spec function.
             * @example
             *
             * var objects = [
             *   { 'a': 1, 'b': 2, 'c': 3 },
             *   { 'a': 4, 'b': 5, 'c': 6 }
             * ];
             *
             * _.filter(objects, _.matches({ 'a': 4, 'c': 6 }));
             * // => [{ 'a': 4, 'b': 5, 'c': 6 }]
             */
            function matches(source) {
              return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
            }

            /**
             * Creates a function that performs a partial deep comparison between the
             * value at `path` of a given object to `srcValue`, returning `true` if the
             * object value is equivalent, else `false`.
             *
             * **Note:** Partial comparisons will match empty array and empty object
             * `srcValue` values against any array or object value, respectively. See
             * `_.isEqual` for a list of supported value comparisons.
             *
             * @static
             * @memberOf _
             * @since 3.2.0
             * @category Util
             * @param {Array|string} path The path of the property to get.
             * @param {*} srcValue The value to match.
             * @returns {Function} Returns the new spec function.
             * @example
             *
             * var objects = [
             *   { 'a': 1, 'b': 2, 'c': 3 },
             *   { 'a': 4, 'b': 5, 'c': 6 }
             * ];
             *
             * _.find(objects, _.matchesProperty('a', 4));
             * // => { 'a': 4, 'b': 5, 'c': 6 }
             */
            function matchesProperty(path, srcValue) {
              return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));
            }

            /**
             * Creates a function that invokes the method at `path` of a given object.
             * Any additional arguments are provided to the invoked method.
             *
             * @static
             * @memberOf _
             * @since 3.7.0
             * @category Util
             * @param {Array|string} path The path of the method to invoke.
             * @param {...*} [args] The arguments to invoke the method with.
             * @returns {Function} Returns the new invoker function.
             * @example
             *
             * var objects = [
             *   { 'a': { 'b': _.constant(2) } },
             *   { 'a': { 'b': _.constant(1) } }
             * ];
             *
             * _.map(objects, _.method('a.b'));
             * // => [2, 1]
             *
             * _.map(objects, _.method(['a', 'b']));
             * // => [2, 1]
             */
            var method = baseRest(function (path, args) {
              return function (object) {
                return baseInvoke(object, path, args);
              };
            });

            /**
             * The opposite of `_.method`; this method creates a function that invokes
             * the method at a given path of `object`. Any additional arguments are
             * provided to the invoked method.
             *
             * @static
             * @memberOf _
             * @since 3.7.0
             * @category Util
             * @param {Object} object The object to query.
             * @param {...*} [args] The arguments to invoke the method with.
             * @returns {Function} Returns the new invoker function.
             * @example
             *
             * var array = _.times(3, _.constant),
             *     object = { 'a': array, 'b': array, 'c': array };
             *
             * _.map(['a[2]', 'c[0]'], _.methodOf(object));
             * // => [2, 0]
             *
             * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
             * // => [2, 0]
             */
            var methodOf = baseRest(function (object, args) {
              return function (path) {
                return baseInvoke(object, path, args);
              };
            });

            /**
             * Adds all own enumerable string keyed function properties of a source
             * object to the destination object. If `object` is a function, then methods
             * are added to its prototype as well.
             *
             * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
             * avoid conflicts caused by modifying the original.
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category Util
             * @param {Function|Object} [object=lodash] The destination object.
             * @param {Object} source The object of functions to add.
             * @param {Object} [options={}] The options object.
             * @param {boolean} [options.chain=true] Specify whether mixins are chainable.
             * @returns {Function|Object} Returns `object`.
             * @example
             *
             * function vowels(string) {
             *   return _.filter(string, function(v) {
             *     return /[aeiou]/i.test(v);
             *   });
             * }
             *
             * _.mixin({ 'vowels': vowels });
             * _.vowels('fred');
             * // => ['e']
             *
             * _('fred').vowels().value();
             * // => ['e']
             *
             * _.mixin({ 'vowels': vowels }, { 'chain': false });
             * _('fred').vowels();
             * // => ['e']
             */
            function mixin(object, source, options) {
              var props = keys(source),
                methodNames = baseFunctions(source, props);

              if (options == null &&
                !(isObject(source) && (methodNames.length || !props.length))) {
                options = source;
                source = object;
                object = this;
                methodNames = baseFunctions(source, keys(source));
              }
              var chain = !(isObject(options) && 'chain' in options) || !!options.chain,
                isFunc = isFunction(object);

              arrayEach(methodNames, function (methodName) {
                var func = source[methodName];
                object[methodName] = func;
                if (isFunc) {
                  object.prototype[methodName] = function () {
                    var chainAll = this.__chain__;
                    if (chain || chainAll) {
                      var result = object(this.__wrapped__),
                        actions = result.__actions__ = copyArray(this.__actions__);

                      actions.push({ 'func': func, 'args': arguments, 'thisArg': object });
                      result.__chain__ = chainAll;
                      return result;
                    }
                    return func.apply(object, arrayPush([this.value()], arguments));
                  };
                }
              });

              return object;
            }

            /**
             * Reverts the `_` variable to its previous value and returns a reference to
             * the `lodash` function.
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category Util
             * @returns {Function} Returns the `lodash` function.
             * @example
             *
             * var lodash = _.noConflict();
             */
            function noConflict() {
              if (root._ === this) {
                root._ = oldDash;
              }
              return this;
            }

            /**
             * This method returns `undefined`.
             *
             * @static
             * @memberOf _
             * @since 2.3.0
             * @category Util
             * @example
             *
             * _.times(2, _.noop);
             * // => [undefined, undefined]
             */
            function noop() {
              // No operation performed.
            }

            /**
             * Creates a function that gets the argument at index `n`. If `n` is negative,
             * the nth argument from the end is returned.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Util
             * @param {number} [n=0] The index of the argument to return.
             * @returns {Function} Returns the new pass-thru function.
             * @example
             *
             * var func = _.nthArg(1);
             * func('a', 'b', 'c', 'd');
             * // => 'b'
             *
             * var func = _.nthArg(-2);
             * func('a', 'b', 'c', 'd');
             * // => 'c'
             */
            function nthArg(n) {
              n = toInteger(n);
              return baseRest(function (args) {
                return baseNth(args, n);
              });
            }

            /**
             * Creates a function that invokes `iteratees` with the arguments it receives
             * and returns their results.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Util
             * @param {...(Function|Function[])} [iteratees=[_.identity]]
             *  The iteratees to invoke.
             * @returns {Function} Returns the new function.
             * @example
             *
             * var func = _.over([Math.max, Math.min]);
             *
             * func(1, 2, 3, 4);
             * // => [4, 1]
             */
            var over = createOver(arrayMap);

            /**
             * Creates a function that checks if **all** of the `predicates` return
             * truthy when invoked with the arguments it receives.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Util
             * @param {...(Function|Function[])} [predicates=[_.identity]]
             *  The predicates to check.
             * @returns {Function} Returns the new function.
             * @example
             *
             * var func = _.overEvery([Boolean, isFinite]);
             *
             * func('1');
             * // => true
             *
             * func(null);
             * // => false
             *
             * func(NaN);
             * // => false
             */
            var overEvery = createOver(arrayEvery);

            /**
             * Creates a function that checks if **any** of the `predicates` return
             * truthy when invoked with the arguments it receives.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Util
             * @param {...(Function|Function[])} [predicates=[_.identity]]
             *  The predicates to check.
             * @returns {Function} Returns the new function.
             * @example
             *
             * var func = _.overSome([Boolean, isFinite]);
             *
             * func('1');
             * // => true
             *
             * func(null);
             * // => true
             *
             * func(NaN);
             * // => false
             */
            var overSome = createOver(arraySome);

            /**
             * Creates a function that returns the value at `path` of a given object.
             *
             * @static
             * @memberOf _
             * @since 2.4.0
             * @category Util
             * @param {Array|string} path The path of the property to get.
             * @returns {Function} Returns the new accessor function.
             * @example
             *
             * var objects = [
             *   { 'a': { 'b': 2 } },
             *   { 'a': { 'b': 1 } }
             * ];
             *
             * _.map(objects, _.property('a.b'));
             * // => [2, 1]
             *
             * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
             * // => [1, 2]
             */
            function property(path) {
              return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
            }

            /**
             * The opposite of `_.property`; this method creates a function that returns
             * the value at a given path of `object`.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Util
             * @param {Object} object The object to query.
             * @returns {Function} Returns the new accessor function.
             * @example
             *
             * var array = [0, 1, 2],
             *     object = { 'a': array, 'b': array, 'c': array };
             *
             * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
             * // => [2, 0]
             *
             * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
             * // => [2, 0]
             */
            function propertyOf(object) {
              return function (path) {
                return object == null ? undefined : baseGet(object, path);
              };
            }

            /**
             * Creates an array of numbers (positive and/or negative) progressing from
             * `start` up to, but not including, `end`. A step of `-1` is used if a negative
             * `start` is specified without an `end` or `step`. If `end` is not specified,
             * it's set to `start` with `start` then set to `0`.
             *
             * **Note:** JavaScript follows the IEEE-754 standard for resolving
             * floating-point values which can produce unexpected results.
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category Util
             * @param {number} [start=0] The start of the range.
             * @param {number} end The end of the range.
             * @param {number} [step=1] The value to increment or decrement by.
             * @returns {Array} Returns the range of numbers.
             * @see _.inRange, _.rangeRight
             * @example
             *
             * _.range(4);
             * // => [0, 1, 2, 3]
             *
             * _.range(-4);
             * // => [0, -1, -2, -3]
             *
             * _.range(1, 5);
             * // => [1, 2, 3, 4]
             *
             * _.range(0, 20, 5);
             * // => [0, 5, 10, 15]
             *
             * _.range(0, -4, -1);
             * // => [0, -1, -2, -3]
             *
             * _.range(1, 4, 0);
             * // => [1, 1, 1]
             *
             * _.range(0);
             * // => []
             */
            var range = createRange();

            /**
             * This method is like `_.range` except that it populates values in
             * descending order.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Util
             * @param {number} [start=0] The start of the range.
             * @param {number} end The end of the range.
             * @param {number} [step=1] The value to increment or decrement by.
             * @returns {Array} Returns the range of numbers.
             * @see _.inRange, _.range
             * @example
             *
             * _.rangeRight(4);
             * // => [3, 2, 1, 0]
             *
             * _.rangeRight(-4);
             * // => [-3, -2, -1, 0]
             *
             * _.rangeRight(1, 5);
             * // => [4, 3, 2, 1]
             *
             * _.rangeRight(0, 20, 5);
             * // => [15, 10, 5, 0]
             *
             * _.rangeRight(0, -4, -1);
             * // => [-3, -2, -1, 0]
             *
             * _.rangeRight(1, 4, 0);
             * // => [1, 1, 1]
             *
             * _.rangeRight(0);
             * // => []
             */
            var rangeRight = createRange(true);

            /**
             * This method returns a new empty array.
             *
             * @static
             * @memberOf _
             * @since 4.13.0
             * @category Util
             * @returns {Array} Returns the new empty array.
             * @example
             *
             * var arrays = _.times(2, _.stubArray);
             *
             * console.log(arrays);
             * // => [[], []]
             *
             * console.log(arrays[0] === arrays[1]);
             * // => false
             */
            function stubArray() {
              return [];
            }

            /**
             * This method returns `false`.
             *
             * @static
             * @memberOf _
             * @since 4.13.0
             * @category Util
             * @returns {boolean} Returns `false`.
             * @example
             *
             * _.times(2, _.stubFalse);
             * // => [false, false]
             */
            function stubFalse() {
              return false;
            }

            /**
             * This method returns a new empty object.
             *
             * @static
             * @memberOf _
             * @since 4.13.0
             * @category Util
             * @returns {Object} Returns the new empty object.
             * @example
             *
             * var objects = _.times(2, _.stubObject);
             *
             * console.log(objects);
             * // => [{}, {}]
             *
             * console.log(objects[0] === objects[1]);
             * // => false
             */
            function stubObject() {
              return {};
            }

            /**
             * This method returns an empty string.
             *
             * @static
             * @memberOf _
             * @since 4.13.0
             * @category Util
             * @returns {string} Returns the empty string.
             * @example
             *
             * _.times(2, _.stubString);
             * // => ['', '']
             */
            function stubString() {
              return '';
            }

            /**
             * This method returns `true`.
             *
             * @static
             * @memberOf _
             * @since 4.13.0
             * @category Util
             * @returns {boolean} Returns `true`.
             * @example
             *
             * _.times(2, _.stubTrue);
             * // => [true, true]
             */
            function stubTrue() {
              return true;
            }

            /**
             * Invokes the iteratee `n` times, returning an array of the results of
             * each invocation. The iteratee is invoked with one argument; (index).
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category Util
             * @param {number} n The number of times to invoke `iteratee`.
             * @param {Function} [iteratee=_.identity] The function invoked per iteration.
             * @returns {Array} Returns the array of results.
             * @example
             *
             * _.times(3, String);
             * // => ['0', '1', '2']
             *
             *  _.times(4, _.constant(0));
             * // => [0, 0, 0, 0]
             */
            function times(n, iteratee) {
              n = toInteger(n);
              if (n < 1 || n > MAX_SAFE_INTEGER) {
                return [];
              }
              var index = MAX_ARRAY_LENGTH,
                length = nativeMin(n, MAX_ARRAY_LENGTH);

              iteratee = getIteratee(iteratee);
              n -= MAX_ARRAY_LENGTH;

              var result = baseTimes(length, iteratee);
              while (++index < n) {
                iteratee(index);
              }
              return result;
            }

            /**
             * Converts `value` to a property path array.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Util
             * @param {*} value The value to convert.
             * @returns {Array} Returns the new property path array.
             * @example
             *
             * _.toPath('a.b.c');
             * // => ['a', 'b', 'c']
             *
             * _.toPath('a[0].b.c');
             * // => ['a', '0', 'b', 'c']
             */
            function toPath(value) {
              if (isArray(value)) {
                return arrayMap(value, toKey);
              }
              return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));
            }

            /**
             * Generates a unique ID. If `prefix` is given, the ID is appended to it.
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category Util
             * @param {string} [prefix=''] The value to prefix the ID with.
             * @returns {string} Returns the unique ID.
             * @example
             *
             * _.uniqueId('contact_');
             * // => 'contact_104'
             *
             * _.uniqueId();
             * // => '105'
             */
            function uniqueId(prefix) {
              var id = ++idCounter;
              return toString(prefix) + id;
            }

            /*------------------------------------------------------------------------*/

            /**
             * Adds two numbers.
             *
             * @static
             * @memberOf _
             * @since 3.4.0
             * @category Math
             * @param {number} augend The first number in an addition.
             * @param {number} addend The second number in an addition.
             * @returns {number} Returns the total.
             * @example
             *
             * _.add(6, 4);
             * // => 10
             */
            var add = createMathOperation(function (augend, addend) {
              return augend + addend;
            }, 0);

            /**
             * Computes `number` rounded up to `precision`.
             *
             * @static
             * @memberOf _
             * @since 3.10.0
             * @category Math
             * @param {number} number The number to round up.
             * @param {number} [precision=0] The precision to round up to.
             * @returns {number} Returns the rounded up number.
             * @example
             *
             * _.ceil(4.006);
             * // => 5
             *
             * _.ceil(6.004, 2);
             * // => 6.01
             *
             * _.ceil(6040, -2);
             * // => 6100
             */
            var ceil = createRound('ceil');

            /**
             * Divide two numbers.
             *
             * @static
             * @memberOf _
             * @since 4.7.0
             * @category Math
             * @param {number} dividend The first number in a division.
             * @param {number} divisor The second number in a division.
             * @returns {number} Returns the quotient.
             * @example
             *
             * _.divide(6, 4);
             * // => 1.5
             */
            var divide = createMathOperation(function (dividend, divisor) {
              return dividend / divisor;
            }, 1);

            /**
             * Computes `number` rounded down to `precision`.
             *
             * @static
             * @memberOf _
             * @since 3.10.0
             * @category Math
             * @param {number} number The number to round down.
             * @param {number} [precision=0] The precision to round down to.
             * @returns {number} Returns the rounded down number.
             * @example
             *
             * _.floor(4.006);
             * // => 4
             *
             * _.floor(0.046, 2);
             * // => 0.04
             *
             * _.floor(4060, -2);
             * // => 4000
             */
            var floor = createRound('floor');

            /**
             * Computes the maximum value of `array`. If `array` is empty or falsey,
             * `undefined` is returned.
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category Math
             * @param {Array} array The array to iterate over.
             * @returns {*} Returns the maximum value.
             * @example
             *
             * _.max([4, 2, 8, 6]);
             * // => 8
             *
             * _.max([]);
             * // => undefined
             */
            function max(array) {
              return (array && array.length)
                ? baseExtremum(array, identity, baseGt)
                : undefined;
            }

            /**
             * This method is like `_.max` except that it accepts `iteratee` which is
             * invoked for each element in `array` to generate the criterion by which
             * the value is ranked. The iteratee is invoked with one argument: (value).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Math
             * @param {Array} array The array to iterate over.
             * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
             * @returns {*} Returns the maximum value.
             * @example
             *
             * var objects = [{ 'n': 1 }, { 'n': 2 }];
             *
             * _.maxBy(objects, function(o) { return o.n; });
             * // => { 'n': 2 }
             *
             * // The `_.property` iteratee shorthand.
             * _.maxBy(objects, 'n');
             * // => { 'n': 2 }
             */
            function maxBy(array, iteratee) {
              return (array && array.length)
                ? baseExtremum(array, getIteratee(iteratee, 2), baseGt)
                : undefined;
            }

            /**
             * Computes the mean of the values in `array`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Math
             * @param {Array} array The array to iterate over.
             * @returns {number} Returns the mean.
             * @example
             *
             * _.mean([4, 2, 8, 6]);
             * // => 5
             */
            function mean(array) {
              return baseMean(array, identity);
            }

            /**
             * This method is like `_.mean` except that it accepts `iteratee` which is
             * invoked for each element in `array` to generate the value to be averaged.
             * The iteratee is invoked with one argument: (value).
             *
             * @static
             * @memberOf _
             * @since 4.7.0
             * @category Math
             * @param {Array} array The array to iterate over.
             * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
             * @returns {number} Returns the mean.
             * @example
             *
             * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
             *
             * _.meanBy(objects, function(o) { return o.n; });
             * // => 5
             *
             * // The `_.property` iteratee shorthand.
             * _.meanBy(objects, 'n');
             * // => 5
             */
            function meanBy(array, iteratee) {
              return baseMean(array, getIteratee(iteratee, 2));
            }

            /**
             * Computes the minimum value of `array`. If `array` is empty or falsey,
             * `undefined` is returned.
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category Math
             * @param {Array} array The array to iterate over.
             * @returns {*} Returns the minimum value.
             * @example
             *
             * _.min([4, 2, 8, 6]);
             * // => 2
             *
             * _.min([]);
             * // => undefined
             */
            function min(array) {
              return (array && array.length)
                ? baseExtremum(array, identity, baseLt)
                : undefined;
            }

            /**
             * This method is like `_.min` except that it accepts `iteratee` which is
             * invoked for each element in `array` to generate the criterion by which
             * the value is ranked. The iteratee is invoked with one argument: (value).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Math
             * @param {Array} array The array to iterate over.
             * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
             * @returns {*} Returns the minimum value.
             * @example
             *
             * var objects = [{ 'n': 1 }, { 'n': 2 }];
             *
             * _.minBy(objects, function(o) { return o.n; });
             * // => { 'n': 1 }
             *
             * // The `_.property` iteratee shorthand.
             * _.minBy(objects, 'n');
             * // => { 'n': 1 }
             */
            function minBy(array, iteratee) {
              return (array && array.length)
                ? baseExtremum(array, getIteratee(iteratee, 2), baseLt)
                : undefined;
            }

            /**
             * Multiply two numbers.
             *
             * @static
             * @memberOf _
             * @since 4.7.0
             * @category Math
             * @param {number} multiplier The first number in a multiplication.
             * @param {number} multiplicand The second number in a multiplication.
             * @returns {number} Returns the product.
             * @example
             *
             * _.multiply(6, 4);
             * // => 24
             */
            var multiply = createMathOperation(function (multiplier, multiplicand) {
              return multiplier * multiplicand;
            }, 1);

            /**
             * Computes `number` rounded to `precision`.
             *
             * @static
             * @memberOf _
             * @since 3.10.0
             * @category Math
             * @param {number} number The number to round.
             * @param {number} [precision=0] The precision to round to.
             * @returns {number} Returns the rounded number.
             * @example
             *
             * _.round(4.006);
             * // => 4
             *
             * _.round(4.006, 2);
             * // => 4.01
             *
             * _.round(4060, -2);
             * // => 4100
             */
            var round = createRound('round');

            /**
             * Subtract two numbers.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Math
             * @param {number} minuend The first number in a subtraction.
             * @param {number} subtrahend The second number in a subtraction.
             * @returns {number} Returns the difference.
             * @example
             *
             * _.subtract(6, 4);
             * // => 2
             */
            var subtract = createMathOperation(function (minuend, subtrahend) {
              return minuend - subtrahend;
            }, 0);

            /**
             * Computes the sum of the values in `array`.
             *
             * @static
             * @memberOf _
             * @since 3.4.0
             * @category Math
             * @param {Array} array The array to iterate over.
             * @returns {number} Returns the sum.
             * @example
             *
             * _.sum([4, 2, 8, 6]);
             * // => 20
             */
            function sum(array) {
              return (array && array.length)
                ? baseSum(array, identity)
                : 0;
            }

            /**
             * This method is like `_.sum` except that it accepts `iteratee` which is
             * invoked for each element in `array` to generate the value to be summed.
             * The iteratee is invoked with one argument: (value).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Math
             * @param {Array} array The array to iterate over.
             * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
             * @returns {number} Returns the sum.
             * @example
             *
             * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
             *
             * _.sumBy(objects, function(o) { return o.n; });
             * // => 20
             *
             * // The `_.property` iteratee shorthand.
             * _.sumBy(objects, 'n');
             * // => 20
             */
            function sumBy(array, iteratee) {
              return (array && array.length)
                ? baseSum(array, getIteratee(iteratee, 2))
                : 0;
            }

            /*------------------------------------------------------------------------*/

            // Add methods that return wrapped values in chain sequences.
            lodash.after = after;
            lodash.ary = ary;
            lodash.assign = assign;
            lodash.assignIn = assignIn;
            lodash.assignInWith = assignInWith;
            lodash.assignWith = assignWith;
            lodash.at = at;
            lodash.before = before;
            lodash.bind = bind;
            lodash.bindAll = bindAll;
            lodash.bindKey = bindKey;
            lodash.castArray = castArray;
            lodash.chain = chain;
            lodash.chunk = chunk;
            lodash.compact = compact;
            lodash.concat = concat;
            lodash.cond = cond;
            lodash.conforms = conforms;
            lodash.constant = constant;
            lodash.countBy = countBy;
            lodash.create = create;
            lodash.curry = curry;
            lodash.curryRight = curryRight;
            lodash.debounce = debounce;
            lodash.defaults = defaults;
            lodash.defaultsDeep = defaultsDeep;
            lodash.defer = defer;
            lodash.delay = delay;
            lodash.difference = difference;
            lodash.differenceBy = differenceBy;
            lodash.differenceWith = differenceWith;
            lodash.drop = drop;
            lodash.dropRight = dropRight;
            lodash.dropRightWhile = dropRightWhile;
            lodash.dropWhile = dropWhile;
            lodash.fill = fill;
            lodash.filter = filter;
            lodash.flatMap = flatMap;
            lodash.flatMapDeep = flatMapDeep;
            lodash.flatMapDepth = flatMapDepth;
            lodash.flatten = flatten;
            lodash.flattenDeep = flattenDeep;
            lodash.flattenDepth = flattenDepth;
            lodash.flip = flip;
            lodash.flow = flow;
            lodash.flowRight = flowRight;
            lodash.fromPairs = fromPairs;
            lodash.functions = functions;
            lodash.functionsIn = functionsIn;
            lodash.groupBy = groupBy;
            lodash.initial = initial;
            lodash.intersection = intersection;
            lodash.intersectionBy = intersectionBy;
            lodash.intersectionWith = intersectionWith;
            lodash.invert = invert;
            lodash.invertBy = invertBy;
            lodash.invokeMap = invokeMap;
            lodash.iteratee = iteratee;
            lodash.keyBy = keyBy;
            lodash.keys = keys;
            lodash.keysIn = keysIn;
            lodash.map = map;
            lodash.mapKeys = mapKeys;
            lodash.mapValues = mapValues;
            lodash.matches = matches;
            lodash.matchesProperty = matchesProperty;
            lodash.memoize = memoize;
            lodash.merge = merge;
            lodash.mergeWith = mergeWith;
            lodash.method = method;
            lodash.methodOf = methodOf;
            lodash.mixin = mixin;
            lodash.negate = negate;
            lodash.nthArg = nthArg;
            lodash.omit = omit;
            lodash.omitBy = omitBy;
            lodash.once = once;
            lodash.orderBy = orderBy;
            lodash.over = over;
            lodash.overArgs = overArgs;
            lodash.overEvery = overEvery;
            lodash.overSome = overSome;
            lodash.partial = partial;
            lodash.partialRight = partialRight;
            lodash.partition = partition;
            lodash.pick = pick;
            lodash.pickBy = pickBy;
            lodash.property = property;
            lodash.propertyOf = propertyOf;
            lodash.pull = pull;
            lodash.pullAll = pullAll;
            lodash.pullAllBy = pullAllBy;
            lodash.pullAllWith = pullAllWith;
            lodash.pullAt = pullAt;
            lodash.range = range;
            lodash.rangeRight = rangeRight;
            lodash.rearg = rearg;
            lodash.reject = reject;
            lodash.remove = remove;
            lodash.rest = rest;
            lodash.reverse = reverse;
            lodash.sampleSize = sampleSize;
            lodash.set = set;
            lodash.setWith = setWith;
            lodash.shuffle = shuffle;
            lodash.slice = slice;
            lodash.sortBy = sortBy;
            lodash.sortedUniq = sortedUniq;
            lodash.sortedUniqBy = sortedUniqBy;
            lodash.split = split;
            lodash.spread = spread;
            lodash.tail = tail;
            lodash.take = take;
            lodash.takeRight = takeRight;
            lodash.takeRightWhile = takeRightWhile;
            lodash.takeWhile = takeWhile;
            lodash.tap = tap;
            lodash.throttle = throttle;
            lodash.thru = thru;
            lodash.toArray = toArray;
            lodash.toPairs = toPairs;
            lodash.toPairsIn = toPairsIn;
            lodash.toPath = toPath;
            lodash.toPlainObject = toPlainObject;
            lodash.transform = transform;
            lodash.unary = unary;
            lodash.union = union;
            lodash.unionBy = unionBy;
            lodash.unionWith = unionWith;
            lodash.uniq = uniq;
            lodash.uniqBy = uniqBy;
            lodash.uniqWith = uniqWith;
            lodash.unset = unset;
            lodash.unzip = unzip;
            lodash.unzipWith = unzipWith;
            lodash.update = update;
            lodash.updateWith = updateWith;
            lodash.values = values;
            lodash.valuesIn = valuesIn;
            lodash.without = without;
            lodash.words = words;
            lodash.wrap = wrap;
            lodash.xor = xor;
            lodash.xorBy = xorBy;
            lodash.xorWith = xorWith;
            lodash.zip = zip;
            lodash.zipObject = zipObject;
            lodash.zipObjectDeep = zipObjectDeep;
            lodash.zipWith = zipWith;

            // Add aliases.
            lodash.entries = toPairs;
            lodash.entriesIn = toPairsIn;
            lodash.extend = assignIn;
            lodash.extendWith = assignInWith;

            // Add methods to `lodash.prototype`.
            mixin(lodash, lodash);

            /*------------------------------------------------------------------------*/

            // Add methods that return unwrapped values in chain sequences.
            lodash.add = add;
            lodash.attempt = attempt;
            lodash.camelCase = camelCase;
            lodash.capitalize = capitalize;
            lodash.ceil = ceil;
            lodash.clamp = clamp;
            lodash.clone = clone;
            lodash.cloneDeep = cloneDeep;
            lodash.cloneDeepWith = cloneDeepWith;
            lodash.cloneWith = cloneWith;
            lodash.conformsTo = conformsTo;
            lodash.deburr = deburr;
            lodash.defaultTo = defaultTo;
            lodash.divide = divide;
            lodash.endsWith = endsWith;
            lodash.eq = eq;
            lodash.escape = escape;
            lodash.escapeRegExp = escapeRegExp;
            lodash.every = every;
            lodash.find = find;
            lodash.findIndex = findIndex;
            lodash.findKey = findKey;
            lodash.findLast = findLast;
            lodash.findLastIndex = findLastIndex;
            lodash.findLastKey = findLastKey;
            lodash.floor = floor;
            lodash.forEach = forEach;
            lodash.forEachRight = forEachRight;
            lodash.forIn = forIn;
            lodash.forInRight = forInRight;
            lodash.forOwn = forOwn;
            lodash.forOwnRight = forOwnRight;
            lodash.get = get;
            lodash.gt = gt;
            lodash.gte = gte;
            lodash.has = has;
            lodash.hasIn = hasIn;
            lodash.head = head;
            lodash.identity = identity;
            lodash.includes = includes;
            lodash.indexOf = indexOf;
            lodash.inRange = inRange;
            lodash.invoke = invoke;
            lodash.isArguments = isArguments;
            lodash.isArray = isArray;
            lodash.isArrayBuffer = isArrayBuffer;
            lodash.isArrayLike = isArrayLike;
            lodash.isArrayLikeObject = isArrayLikeObject;
            lodash.isBoolean = isBoolean;
            lodash.isBuffer = isBuffer;
            lodash.isDate = isDate;
            lodash.isElement = isElement;
            lodash.isEmpty = isEmpty;
            lodash.isEqual = isEqual;
            lodash.isEqualWith = isEqualWith;
            lodash.isError = isError;
            lodash.isFinite = isFinite;
            lodash.isFunction = isFunction;
            lodash.isInteger = isInteger;
            lodash.isLength = isLength;
            lodash.isMap = isMap;
            lodash.isMatch = isMatch;
            lodash.isMatchWith = isMatchWith;
            lodash.isNaN = isNaN;
            lodash.isNative = isNative;
            lodash.isNil = isNil;
            lodash.isNull = isNull;
            lodash.isNumber = isNumber;
            lodash.isObject = isObject;
            lodash.isObjectLike = isObjectLike;
            lodash.isPlainObject = isPlainObject;
            lodash.isRegExp = isRegExp;
            lodash.isSafeInteger = isSafeInteger;
            lodash.isSet = isSet;
            lodash.isString = isString;
            lodash.isSymbol = isSymbol;
            lodash.isTypedArray = isTypedArray;
            lodash.isUndefined = isUndefined;
            lodash.isWeakMap = isWeakMap;
            lodash.isWeakSet = isWeakSet;
            lodash.join = join;
            lodash.kebabCase = kebabCase;
            lodash.last = last;
            lodash.lastIndexOf = lastIndexOf;
            lodash.lowerCase = lowerCase;
            lodash.lowerFirst = lowerFirst;
            lodash.lt = lt;
            lodash.lte = lte;
            lodash.max = max;
            lodash.maxBy = maxBy;
            lodash.mean = mean;
            lodash.meanBy = meanBy;
            lodash.min = min;
            lodash.minBy = minBy;
            lodash.stubArray = stubArray;
            lodash.stubFalse = stubFalse;
            lodash.stubObject = stubObject;
            lodash.stubString = stubString;
            lodash.stubTrue = stubTrue;
            lodash.multiply = multiply;
            lodash.nth = nth;
            lodash.noConflict = noConflict;
            lodash.noop = noop;
            lodash.now = now;
            lodash.pad = pad;
            lodash.padEnd = padEnd;
            lodash.padStart = padStart;
            lodash.parseInt = parseInt;
            lodash.random = random;
            lodash.reduce = reduce;
            lodash.reduceRight = reduceRight;
            lodash.repeat = repeat;
            lodash.replace = replace;
            lodash.result = result;
            lodash.round = round;
            lodash.runInContext = runInContext;
            lodash.sample = sample;
            lodash.size = size;
            lodash.snakeCase = snakeCase;
            lodash.some = some;
            lodash.sortedIndex = sortedIndex;
            lodash.sortedIndexBy = sortedIndexBy;
            lodash.sortedIndexOf = sortedIndexOf;
            lodash.sortedLastIndex = sortedLastIndex;
            lodash.sortedLastIndexBy = sortedLastIndexBy;
            lodash.sortedLastIndexOf = sortedLastIndexOf;
            lodash.startCase = startCase;
            lodash.startsWith = startsWith;
            lodash.subtract = subtract;
            lodash.sum = sum;
            lodash.sumBy = sumBy;
            lodash.template = template;
            lodash.times = times;
            lodash.toFinite = toFinite;
            lodash.toInteger = toInteger;
            lodash.toLength = toLength;
            lodash.toLower = toLower;
            lodash.toNumber = toNumber;
            lodash.toSafeInteger = toSafeInteger;
            lodash.toString = toString;
            lodash.toUpper = toUpper;
            lodash.trim = trim;
            lodash.trimEnd = trimEnd;
            lodash.trimStart = trimStart;
            lodash.truncate = truncate;
            lodash.unescape = unescape;
            lodash.uniqueId = uniqueId;
            lodash.upperCase = upperCase;
            lodash.upperFirst = upperFirst;

            // Add aliases.
            lodash.each = forEach;
            lodash.eachRight = forEachRight;
            lodash.first = head;

            mixin(lodash, (function () {
              var source = {};
              baseForOwn(lodash, function (func, methodName) {
                if (!hasOwnProperty.call(lodash.prototype, methodName)) {
                  source[methodName] = func;
                }
              });
              return source;
            } ()), { 'chain': false });

            /*------------------------------------------------------------------------*/

            /**
             * The semantic version number.
             *
             * @static
             * @memberOf _
             * @type {string}
             */
            lodash.VERSION = VERSION;

            // Assign default placeholders.
            arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function (methodName) {
              lodash[methodName].placeholder = lodash;
            });

            // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
            arrayEach(['drop', 'take'], function (methodName, index) {
              LazyWrapper.prototype[methodName] = function (n) {
                n = n === undefined ? 1 : nativeMax(toInteger(n), 0);

                var result = (this.__filtered__ && !index)
                  ? new LazyWrapper(this)
                  : this.clone();

                if (result.__filtered__) {
                  result.__takeCount__ = nativeMin(n, result.__takeCount__);
                } else {
                  result.__views__.push({
                    'size': nativeMin(n, MAX_ARRAY_LENGTH),
                    'type': methodName + (result.__dir__ < 0 ? 'Right' : '')
                  });
                }
                return result;
              };

              LazyWrapper.prototype[methodName + 'Right'] = function (n) {
                return this.reverse()[methodName](n).reverse();
              };
            });

            // Add `LazyWrapper` methods that accept an `iteratee` value.
            arrayEach(['filter', 'map', 'takeWhile'], function (methodName, index) {
              var type = index + 1,
                isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;

              LazyWrapper.prototype[methodName] = function (iteratee) {
                var result = this.clone();
                result.__iteratees__.push({
                  'iteratee': getIteratee(iteratee, 3),
                  'type': type
                });
                result.__filtered__ = result.__filtered__ || isFilter;
                return result;
              };
            });

            // Add `LazyWrapper` methods for `_.head` and `_.last`.
            arrayEach(['head', 'last'], function (methodName, index) {
              var takeName = 'take' + (index ? 'Right' : '');

              LazyWrapper.prototype[methodName] = function () {
                return this[takeName](1).value()[0];
              };
            });

            // Add `LazyWrapper` methods for `_.initial` and `_.tail`.
            arrayEach(['initial', 'tail'], function (methodName, index) {
              var dropName = 'drop' + (index ? '' : 'Right');

              LazyWrapper.prototype[methodName] = function () {
                return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
              };
            });

            LazyWrapper.prototype.compact = function () {
              return this.filter(identity);
            };

            LazyWrapper.prototype.find = function (predicate) {
              return this.filter(predicate).head();
            };

            LazyWrapper.prototype.findLast = function (predicate) {
              return this.reverse().find(predicate);
            };

            LazyWrapper.prototype.invokeMap = baseRest(function (path, args) {
              if (typeof path == 'function') {
                return new LazyWrapper(this);
              }
              return this.map(function (value) {
                return baseInvoke(value, path, args);
              });
            });

            LazyWrapper.prototype.reject = function (predicate) {
              return this.filter(negate(getIteratee(predicate)));
            };

            LazyWrapper.prototype.slice = function (start, end) {
              start = toInteger(start);

              var result = this;
              if (result.__filtered__ && (start > 0 || end < 0)) {
                return new LazyWrapper(result);
              }
              if (start < 0) {
                result = result.takeRight(-start);
              } else if (start) {
                result = result.drop(start);
              }
              if (end !== undefined) {
                end = toInteger(end);
                result = end < 0 ? result.dropRight(-end) : result.take(end - start);
              }
              return result;
            };

            LazyWrapper.prototype.takeRightWhile = function (predicate) {
              return this.reverse().takeWhile(predicate).reverse();
            };

            LazyWrapper.prototype.toArray = function () {
              return this.take(MAX_ARRAY_LENGTH);
            };

            // Add `LazyWrapper` methods to `lodash.prototype`.
            baseForOwn(LazyWrapper.prototype, function (func, methodName) {
              var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName),
                isTaker = /^(?:head|last)$/.test(methodName),
                lodashFunc = lodash[isTaker ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName],
                retUnwrapped = isTaker || /^find/.test(methodName);

              if (!lodashFunc) {
                return;
              }
              lodash.prototype[methodName] = function () {
                var value = this.__wrapped__,
                  args = isTaker ? [1] : arguments,
                  isLazy = value instanceof LazyWrapper,
                  iteratee = args[0],
                  useLazy = isLazy || isArray(value);

                var interceptor = function (value) {
                  var result = lodashFunc.apply(lodash, arrayPush([value], args));
                  return (isTaker && chainAll) ? result[0] : result;
                };

                if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {
                  // Avoid lazy use if the iteratee has a "length" value other than `1`.
                  isLazy = useLazy = false;
                }
                var chainAll = this.__chain__,
                  isHybrid = !!this.__actions__.length,
                  isUnwrapped = retUnwrapped && !chainAll,
                  onlyLazy = isLazy && !isHybrid;

                if (!retUnwrapped && useLazy) {
                  value = onlyLazy ? value : new LazyWrapper(this);
                  var result = func.apply(value, args);
                  result.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined });
                  return new LodashWrapper(result, chainAll);
                }
                if (isUnwrapped && onlyLazy) {
                  return func.apply(this, args);
                }
                result = this.thru(interceptor);
                return isUnwrapped ? (isTaker ? result.value()[0] : result.value()) : result;
              };
            });

            // Add `Array` methods to `lodash.prototype`.
            arrayEach(['pop', 'push', 'shift', 'sort', 'splice', 'unshift'], function (methodName) {
              var func = arrayProto[methodName],
                chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',
                retUnwrapped = /^(?:pop|shift)$/.test(methodName);

              lodash.prototype[methodName] = function () {
                var args = arguments;
                if (retUnwrapped && !this.__chain__) {
                  var value = this.value();
                  return func.apply(isArray(value) ? value : [], args);
                }
                return this[chainName](function (value) {
                  return func.apply(isArray(value) ? value : [], args);
                });
              };
            });

            // Map minified method names to their real names.
            baseForOwn(LazyWrapper.prototype, function (func, methodName) {
              var lodashFunc = lodash[methodName];
              if (lodashFunc) {
                var key = (lodashFunc.name + ''),
                  names = realNames[key] || (realNames[key] = []);

                names.push({ 'name': methodName, 'func': lodashFunc });
              }
            });

            realNames[createHybrid(undefined, WRAP_BIND_KEY_FLAG).name] = [{
              'name': 'wrapper',
              'func': undefined
            }];

            // Add methods to `LazyWrapper`.
            LazyWrapper.prototype.clone = lazyClone;
            LazyWrapper.prototype.reverse = lazyReverse;
            LazyWrapper.prototype.value = lazyValue;

            // Add chain sequence methods to the `lodash` wrapper.
            lodash.prototype.at = wrapperAt;
            lodash.prototype.chain = wrapperChain;
            lodash.prototype.commit = wrapperCommit;
            lodash.prototype.next = wrapperNext;
            lodash.prototype.plant = wrapperPlant;
            lodash.prototype.reverse = wrapperReverse;
            lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;

            // Add lazy aliases.
            lodash.prototype.first = lodash.prototype.head;

            if (symIterator) {
              lodash.prototype[symIterator] = wrapperToIterator;
            }
            return lodash;
          });

          /*--------------------------------------------------------------------------*/

          // Export lodash.
          var _ = runInContext();

          // Some AMD build optimizers, like r.js, check for condition patterns like:
          if (true) {
            // Expose Lodash on the global object to prevent errors when Lodash is
            // loaded by a script tag in the presence of an AMD loader.
            // See http://requirejs.org/docs/errors.html#mismatch for more details.
            // Use `_.noConflict` to remove Lodash from the global object.
            root._ = _;

            // Define as an anonymous module so, through path mapping, it can be
            // referenced as the "underscore" module.
            !(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
              return _;
            }).call(exports, __webpack_require__, exports, module),
              __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
          }
          // Check for `exports` after `define` in case a build optimizer adds it.
          else { }
        }.call(this));

        /* WEBPACK VAR INJECTION */
      }.call(this, __webpack_require__(/*! ./../../../../../AppData/Roaming/npm/node_modules/webpack/buildin/global.js */ "../../../../../AppData/Roaming/npm/node_modules/webpack/buildin/global.js"), __webpack_require__(/*! ./../../../../../AppData/Roaming/npm/node_modules/webpack/buildin/module.js */ "../../../../../AppData/Roaming/npm/node_modules/webpack/buildin/module.js")(module)))

      /***/
    }),

/***/ "../number-to-bn/node_modules/bn.js/lib/bn.js":
/*!****************************************************!*\
  !*** ../number-to-bn/node_modules/bn.js/lib/bn.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function (module) {
        (function (module, exports) {
          'use strict';

          // Utils
          function assert(val, msg) {
            if (!val) throw new Error(msg || 'Assertion failed');
          }

          // Could use `inherits` module, but don't want to move from single file
          // architecture yet.
          function inherits(ctor, superCtor) {
            ctor.super_ = superCtor;
            var TempCtor = function () { };
            TempCtor.prototype = superCtor.prototype;
            ctor.prototype = new TempCtor();
            ctor.prototype.constructor = ctor;
          }

          // BN

          function BN(number, base, endian) {
            if (BN.isBN(number)) {
              return number;
            }

            this.negative = 0;
            this.words = null;
            this.length = 0;

            // Reduction context
            this.red = null;

            if (number !== null) {
              if (base === 'le' || base === 'be') {
                endian = base;
                base = 10;
              }

              this._init(number || 0, base || 10, endian || 'be');
            }
          }
          if (typeof module === 'object') {
            module.exports = BN;
          } else {
            exports.BN = BN;
          }

          BN.BN = BN;
          BN.wordSize = 26;

          var Buffer;
          try {
            Buffer = __webpack_require__(/*! buffer */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/buffer/index.js").Buffer;
          } catch (e) {
          }

          BN.isBN = function isBN(num) {
            if (num instanceof BN) {
              return true;
            }

            return num !== null && typeof num === 'object' &&
              num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
          };

          BN.max = function max(left, right) {
            if (left.cmp(right) > 0) return left;
            return right;
          };

          BN.min = function min(left, right) {
            if (left.cmp(right) < 0) return left;
            return right;
          };

          BN.prototype._init = function init(number, base, endian) {
            if (typeof number === 'number') {
              return this._initNumber(number, base, endian);
            }

            if (typeof number === 'object') {
              return this._initArray(number, base, endian);
            }

            if (base === 'hex') {
              base = 16;
            }
            assert(base === (base | 0) && base >= 2 && base <= 36);

            number = number.toString().replace(/\s+/g, '');
            var start = 0;
            if (number[0] === '-') {
              start++;
            }

            if (base === 16) {
              this._parseHex(number, start);
            } else {
              this._parseBase(number, base, start);
            }

            if (number[0] === '-') {
              this.negative = 1;
            }

            this.strip();

            if (endian !== 'le') return;

            this._initArray(this.toArray(), base, endian);
          };

          BN.prototype._initNumber = function _initNumber(number, base, endian) {
            if (number < 0) {
              this.negative = 1;
              number = -number;
            }
            if (number < 0x4000000) {
              this.words = [number & 0x3ffffff];
              this.length = 1;
            } else if (number < 0x10000000000000) {
              this.words = [
                number & 0x3ffffff,
                (number / 0x4000000) & 0x3ffffff
              ];
              this.length = 2;
            } else {
              assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
              this.words = [
                number & 0x3ffffff,
                (number / 0x4000000) & 0x3ffffff,
                1
              ];
              this.length = 3;
            }

            if (endian !== 'le') return;

            // Reverse the bytes
            this._initArray(this.toArray(), base, endian);
          };

          BN.prototype._initArray = function _initArray(number, base, endian) {
            // Perhaps a Uint8Array
            assert(typeof number.length === 'number');
            if (number.length <= 0) {
              this.words = [0];
              this.length = 1;
              return this;
            }

            this.length = Math.ceil(number.length / 3);
            this.words = new Array(this.length);
            for (var i = 0; i < this.length; i++) {
              this.words[i] = 0;
            }

            var j, w;
            var off = 0;
            if (endian === 'be') {
              for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
                w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
                this.words[j] |= (w << off) & 0x3ffffff;
                this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
                off += 24;
                if (off >= 26) {
                  off -= 26;
                  j++;
                }
              }
            } else if (endian === 'le') {
              for (i = 0, j = 0; i < number.length; i += 3) {
                w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
                this.words[j] |= (w << off) & 0x3ffffff;
                this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
                off += 24;
                if (off >= 26) {
                  off -= 26;
                  j++;
                }
              }
            }
            return this.strip();
          };

          function parseHex(str, start, end) {
            var r = 0;
            var len = Math.min(str.length, end);
            for (var i = start; i < len; i++) {
              var c = str.charCodeAt(i) - 48;

              r <<= 4;

              // 'a' - 'f'
              if (c >= 49 && c <= 54) {
                r |= c - 49 + 0xa;

                // 'A' - 'F'
              } else if (c >= 17 && c <= 22) {
                r |= c - 17 + 0xa;

                // '0' - '9'
              } else {
                r |= c & 0xf;
              }
            }
            return r;
          }

          BN.prototype._parseHex = function _parseHex(number, start) {
            // Create possibly bigger array to ensure that it fits the number
            this.length = Math.ceil((number.length - start) / 6);
            this.words = new Array(this.length);
            for (var i = 0; i < this.length; i++) {
              this.words[i] = 0;
            }

            var j, w;
            // Scan 24-bit chunks and add them to the number
            var off = 0;
            for (i = number.length - 6, j = 0; i >= start; i -= 6) {
              w = parseHex(number, i, i + 6);
              this.words[j] |= (w << off) & 0x3ffffff;
              // NOTE: `0x3fffff` is intentional here, 26bits max shift + 24bit hex limb
              this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;
              off += 24;
              if (off >= 26) {
                off -= 26;
                j++;
              }
            }
            if (i + 6 !== start) {
              w = parseHex(number, start, i + 6);
              this.words[j] |= (w << off) & 0x3ffffff;
              this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;
            }
            this.strip();
          };

          function parseBase(str, start, end, mul) {
            var r = 0;
            var len = Math.min(str.length, end);
            for (var i = start; i < len; i++) {
              var c = str.charCodeAt(i) - 48;

              r *= mul;

              // 'a'
              if (c >= 49) {
                r += c - 49 + 0xa;

                // 'A'
              } else if (c >= 17) {
                r += c - 17 + 0xa;

                // '0' - '9'
              } else {
                r += c;
              }
            }
            return r;
          }

          BN.prototype._parseBase = function _parseBase(number, base, start) {
            // Initialize as zero
            this.words = [0];
            this.length = 1;

            // Find length of limb in base
            for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
              limbLen++;
            }
            limbLen--;
            limbPow = (limbPow / base) | 0;

            var total = number.length - start;
            var mod = total % limbLen;
            var end = Math.min(total, total - mod) + start;

            var word = 0;
            for (var i = start; i < end; i += limbLen) {
              word = parseBase(number, i, i + limbLen, base);

              this.imuln(limbPow);
              if (this.words[0] + word < 0x4000000) {
                this.words[0] += word;
              } else {
                this._iaddn(word);
              }
            }

            if (mod !== 0) {
              var pow = 1;
              word = parseBase(number, i, number.length, base);

              for (i = 0; i < mod; i++) {
                pow *= base;
              }

              this.imuln(pow);
              if (this.words[0] + word < 0x4000000) {
                this.words[0] += word;
              } else {
                this._iaddn(word);
              }
            }
          };

          BN.prototype.copy = function copy(dest) {
            dest.words = new Array(this.length);
            for (var i = 0; i < this.length; i++) {
              dest.words[i] = this.words[i];
            }
            dest.length = this.length;
            dest.negative = this.negative;
            dest.red = this.red;
          };

          BN.prototype.clone = function clone() {
            var r = new BN(null);
            this.copy(r);
            return r;
          };

          BN.prototype._expand = function _expand(size) {
            while (this.length < size) {
              this.words[this.length++] = 0;
            }
            return this;
          };

          // Remove leading `0` from `this`
          BN.prototype.strip = function strip() {
            while (this.length > 1 && this.words[this.length - 1] === 0) {
              this.length--;
            }
            return this._normSign();
          };

          BN.prototype._normSign = function _normSign() {
            // -0 = 0
            if (this.length === 1 && this.words[0] === 0) {
              this.negative = 0;
            }
            return this;
          };

          BN.prototype.inspect = function inspect() {
            return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
          };

          /*
        
          var zeros = [];
          var groupSizes = [];
          var groupBases = [];
        
          var s = '';
          var i = -1;
          while (++i < BN.wordSize) {
            zeros[i] = s;
            s += '0';
          }
          groupSizes[0] = 0;
          groupSizes[1] = 0;
          groupBases[0] = 0;
          groupBases[1] = 0;
          var base = 2 - 1;
          while (++base < 36 + 1) {
            var groupSize = 0;
            var groupBase = 1;
            while (groupBase < (1 << BN.wordSize) / base) {
              groupBase *= base;
              groupSize += 1;
            }
            groupSizes[base] = groupSize;
            groupBases[base] = groupBase;
          }
        
          */

          var zeros = [
            '',
            '0',
            '00',
            '000',
            '0000',
            '00000',
            '000000',
            '0000000',
            '00000000',
            '000000000',
            '0000000000',
            '00000000000',
            '000000000000',
            '0000000000000',
            '00000000000000',
            '000000000000000',
            '0000000000000000',
            '00000000000000000',
            '000000000000000000',
            '0000000000000000000',
            '00000000000000000000',
            '000000000000000000000',
            '0000000000000000000000',
            '00000000000000000000000',
            '000000000000000000000000',
            '0000000000000000000000000'
          ];

          var groupSizes = [
            0, 0,
            25, 16, 12, 11, 10, 9, 8,
            8, 7, 7, 7, 7, 6, 6,
            6, 6, 6, 6, 6, 5, 5,
            5, 5, 5, 5, 5, 5, 5,
            5, 5, 5, 5, 5, 5, 5
          ];

          var groupBases = [
            0, 0,
            33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,
            43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,
            16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,
            6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,
            24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176
          ];

          BN.prototype.toString = function toString(base, padding) {
            base = base || 10;
            padding = padding | 0 || 1;

            var out;
            if (base === 16 || base === 'hex') {
              out = '';
              var off = 0;
              var carry = 0;
              for (var i = 0; i < this.length; i++) {
                var w = this.words[i];
                var word = (((w << off) | carry) & 0xffffff).toString(16);
                carry = (w >>> (24 - off)) & 0xffffff;
                if (carry !== 0 || i !== this.length - 1) {
                  out = zeros[6 - word.length] + word + out;
                } else {
                  out = word + out;
                }
                off += 2;
                if (off >= 26) {
                  off -= 26;
                  i--;
                }
              }
              if (carry !== 0) {
                out = carry.toString(16) + out;
              }
              while (out.length % padding !== 0) {
                out = '0' + out;
              }
              if (this.negative !== 0) {
                out = '-' + out;
              }
              return out;
            }

            if (base === (base | 0) && base >= 2 && base <= 36) {
              // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
              var groupSize = groupSizes[base];
              // var groupBase = Math.pow(base, groupSize);
              var groupBase = groupBases[base];
              out = '';
              var c = this.clone();
              c.negative = 0;
              while (!c.isZero()) {
                var r = c.modn(groupBase).toString(base);
                c = c.idivn(groupBase);

                if (!c.isZero()) {
                  out = zeros[groupSize - r.length] + r + out;
                } else {
                  out = r + out;
                }
              }
              if (this.isZero()) {
                out = '0' + out;
              }
              while (out.length % padding !== 0) {
                out = '0' + out;
              }
              if (this.negative !== 0) {
                out = '-' + out;
              }
              return out;
            }

            assert(false, 'Base should be between 2 and 36');
          };

          BN.prototype.toNumber = function toNumber() {
            var ret = this.words[0];
            if (this.length === 2) {
              ret += this.words[1] * 0x4000000;
            } else if (this.length === 3 && this.words[2] === 0x01) {
              // NOTE: at this stage it is known that the top bit is set
              ret += 0x10000000000000 + (this.words[1] * 0x4000000);
            } else if (this.length > 2) {
              assert(false, 'Number can only safely store up to 53 bits');
            }
            return (this.negative !== 0) ? -ret : ret;
          };

          BN.prototype.toJSON = function toJSON() {
            return this.toString(16);
          };

          BN.prototype.toBuffer = function toBuffer(endian, length) {
            assert(typeof Buffer !== 'undefined');
            return this.toArrayLike(Buffer, endian, length);
          };

          BN.prototype.toArray = function toArray(endian, length) {
            return this.toArrayLike(Array, endian, length);
          };

          BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
            var byteLength = this.byteLength();
            var reqLength = length || Math.max(1, byteLength);
            assert(byteLength <= reqLength, 'byte array longer than desired length');
            assert(reqLength > 0, 'Requested array length <= 0');

            this.strip();
            var littleEndian = endian === 'le';
            var res = new ArrayType(reqLength);

            var b, i;
            var q = this.clone();
            if (!littleEndian) {
              // Assume big-endian
              for (i = 0; i < reqLength - byteLength; i++) {
                res[i] = 0;
              }

              for (i = 0; !q.isZero(); i++) {
                b = q.andln(0xff);
                q.iushrn(8);

                res[reqLength - i - 1] = b;
              }
            } else {
              for (i = 0; !q.isZero(); i++) {
                b = q.andln(0xff);
                q.iushrn(8);

                res[i] = b;
              }

              for (; i < reqLength; i++) {
                res[i] = 0;
              }
            }

            return res;
          };

          if (Math.clz32) {
            BN.prototype._countBits = function _countBits(w) {
              return 32 - Math.clz32(w);
            };
          } else {
            BN.prototype._countBits = function _countBits(w) {
              var t = w;
              var r = 0;
              if (t >= 0x1000) {
                r += 13;
                t >>>= 13;
              }
              if (t >= 0x40) {
                r += 7;
                t >>>= 7;
              }
              if (t >= 0x8) {
                r += 4;
                t >>>= 4;
              }
              if (t >= 0x02) {
                r += 2;
                t >>>= 2;
              }
              return r + t;
            };
          }

          BN.prototype._zeroBits = function _zeroBits(w) {
            // Short-cut
            if (w === 0) return 26;

            var t = w;
            var r = 0;
            if ((t & 0x1fff) === 0) {
              r += 13;
              t >>>= 13;
            }
            if ((t & 0x7f) === 0) {
              r += 7;
              t >>>= 7;
            }
            if ((t & 0xf) === 0) {
              r += 4;
              t >>>= 4;
            }
            if ((t & 0x3) === 0) {
              r += 2;
              t >>>= 2;
            }
            if ((t & 0x1) === 0) {
              r++;
            }
            return r;
          };

          // Return number of used bits in a BN
          BN.prototype.bitLength = function bitLength() {
            var w = this.words[this.length - 1];
            var hi = this._countBits(w);
            return (this.length - 1) * 26 + hi;
          };

          function toBitArray(num) {
            var w = new Array(num.bitLength());

            for (var bit = 0; bit < w.length; bit++) {
              var off = (bit / 26) | 0;
              var wbit = bit % 26;

              w[bit] = (num.words[off] & (1 << wbit)) >>> wbit;
            }

            return w;
          }

          // Number of trailing zero bits
          BN.prototype.zeroBits = function zeroBits() {
            if (this.isZero()) return 0;

            var r = 0;
            for (var i = 0; i < this.length; i++) {
              var b = this._zeroBits(this.words[i]);
              r += b;
              if (b !== 26) break;
            }
            return r;
          };

          BN.prototype.byteLength = function byteLength() {
            return Math.ceil(this.bitLength() / 8);
          };

          BN.prototype.toTwos = function toTwos(width) {
            if (this.negative !== 0) {
              return this.abs().inotn(width).iaddn(1);
            }
            return this.clone();
          };

          BN.prototype.fromTwos = function fromTwos(width) {
            if (this.testn(width - 1)) {
              return this.notn(width).iaddn(1).ineg();
            }
            return this.clone();
          };

          BN.prototype.isNeg = function isNeg() {
            return this.negative !== 0;
          };

          // Return negative clone of `this`
          BN.prototype.neg = function neg() {
            return this.clone().ineg();
          };

          BN.prototype.ineg = function ineg() {
            if (!this.isZero()) {
              this.negative ^= 1;
            }

            return this;
          };

          // Or `num` with `this` in-place
          BN.prototype.iuor = function iuor(num) {
            while (this.length < num.length) {
              this.words[this.length++] = 0;
            }

            for (var i = 0; i < num.length; i++) {
              this.words[i] = this.words[i] | num.words[i];
            }

            return this.strip();
          };

          BN.prototype.ior = function ior(num) {
            assert((this.negative | num.negative) === 0);
            return this.iuor(num);
          };

          // Or `num` with `this`
          BN.prototype.or = function or(num) {
            if (this.length > num.length) return this.clone().ior(num);
            return num.clone().ior(this);
          };

          BN.prototype.uor = function uor(num) {
            if (this.length > num.length) return this.clone().iuor(num);
            return num.clone().iuor(this);
          };

          // And `num` with `this` in-place
          BN.prototype.iuand = function iuand(num) {
            // b = min-length(num, this)
            var b;
            if (this.length > num.length) {
              b = num;
            } else {
              b = this;
            }

            for (var i = 0; i < b.length; i++) {
              this.words[i] = this.words[i] & num.words[i];
            }

            this.length = b.length;

            return this.strip();
          };

          BN.prototype.iand = function iand(num) {
            assert((this.negative | num.negative) === 0);
            return this.iuand(num);
          };

          // And `num` with `this`
          BN.prototype.and = function and(num) {
            if (this.length > num.length) return this.clone().iand(num);
            return num.clone().iand(this);
          };

          BN.prototype.uand = function uand(num) {
            if (this.length > num.length) return this.clone().iuand(num);
            return num.clone().iuand(this);
          };

          // Xor `num` with `this` in-place
          BN.prototype.iuxor = function iuxor(num) {
            // a.length > b.length
            var a;
            var b;
            if (this.length > num.length) {
              a = this;
              b = num;
            } else {
              a = num;
              b = this;
            }

            for (var i = 0; i < b.length; i++) {
              this.words[i] = a.words[i] ^ b.words[i];
            }

            if (this !== a) {
              for (; i < a.length; i++) {
                this.words[i] = a.words[i];
              }
            }

            this.length = a.length;

            return this.strip();
          };

          BN.prototype.ixor = function ixor(num) {
            assert((this.negative | num.negative) === 0);
            return this.iuxor(num);
          };

          // Xor `num` with `this`
          BN.prototype.xor = function xor(num) {
            if (this.length > num.length) return this.clone().ixor(num);
            return num.clone().ixor(this);
          };

          BN.prototype.uxor = function uxor(num) {
            if (this.length > num.length) return this.clone().iuxor(num);
            return num.clone().iuxor(this);
          };

          // Not ``this`` with ``width`` bitwidth
          BN.prototype.inotn = function inotn(width) {
            assert(typeof width === 'number' && width >= 0);

            var bytesNeeded = Math.ceil(width / 26) | 0;
            var bitsLeft = width % 26;

            // Extend the buffer with leading zeroes
            this._expand(bytesNeeded);

            if (bitsLeft > 0) {
              bytesNeeded--;
            }

            // Handle complete words
            for (var i = 0; i < bytesNeeded; i++) {
              this.words[i] = ~this.words[i] & 0x3ffffff;
            }

            // Handle the residue
            if (bitsLeft > 0) {
              this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));
            }

            // And remove leading zeroes
            return this.strip();
          };

          BN.prototype.notn = function notn(width) {
            return this.clone().inotn(width);
          };

          // Set `bit` of `this`
          BN.prototype.setn = function setn(bit, val) {
            assert(typeof bit === 'number' && bit >= 0);

            var off = (bit / 26) | 0;
            var wbit = bit % 26;

            this._expand(off + 1);

            if (val) {
              this.words[off] = this.words[off] | (1 << wbit);
            } else {
              this.words[off] = this.words[off] & ~(1 << wbit);
            }

            return this.strip();
          };

          // Add `num` to `this` in-place
          BN.prototype.iadd = function iadd(num) {
            var r;

            // negative + positive
            if (this.negative !== 0 && num.negative === 0) {
              this.negative = 0;
              r = this.isub(num);
              this.negative ^= 1;
              return this._normSign();

              // positive + negative
            } else if (this.negative === 0 && num.negative !== 0) {
              num.negative = 0;
              r = this.isub(num);
              num.negative = 1;
              return r._normSign();
            }

            // a.length > b.length
            var a, b;
            if (this.length > num.length) {
              a = this;
              b = num;
            } else {
              a = num;
              b = this;
            }

            var carry = 0;
            for (var i = 0; i < b.length; i++) {
              r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
              this.words[i] = r & 0x3ffffff;
              carry = r >>> 26;
            }
            for (; carry !== 0 && i < a.length; i++) {
              r = (a.words[i] | 0) + carry;
              this.words[i] = r & 0x3ffffff;
              carry = r >>> 26;
            }

            this.length = a.length;
            if (carry !== 0) {
              this.words[this.length] = carry;
              this.length++;
              // Copy the rest of the words
            } else if (a !== this) {
              for (; i < a.length; i++) {
                this.words[i] = a.words[i];
              }
            }

            return this;
          };

          // Add `num` to `this`
          BN.prototype.add = function add(num) {
            var res;
            if (num.negative !== 0 && this.negative === 0) {
              num.negative = 0;
              res = this.sub(num);
              num.negative ^= 1;
              return res;
            } else if (num.negative === 0 && this.negative !== 0) {
              this.negative = 0;
              res = num.sub(this);
              this.negative = 1;
              return res;
            }

            if (this.length > num.length) return this.clone().iadd(num);

            return num.clone().iadd(this);
          };

          // Subtract `num` from `this` in-place
          BN.prototype.isub = function isub(num) {
            // this - (-num) = this + num
            if (num.negative !== 0) {
              num.negative = 0;
              var r = this.iadd(num);
              num.negative = 1;
              return r._normSign();

              // -this - num = -(this + num)
            } else if (this.negative !== 0) {
              this.negative = 0;
              this.iadd(num);
              this.negative = 1;
              return this._normSign();
            }

            // At this point both numbers are positive
            var cmp = this.cmp(num);

            // Optimization - zeroify
            if (cmp === 0) {
              this.negative = 0;
              this.length = 1;
              this.words[0] = 0;
              return this;
            }

            // a > b
            var a, b;
            if (cmp > 0) {
              a = this;
              b = num;
            } else {
              a = num;
              b = this;
            }

            var carry = 0;
            for (var i = 0; i < b.length; i++) {
              r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
              carry = r >> 26;
              this.words[i] = r & 0x3ffffff;
            }
            for (; carry !== 0 && i < a.length; i++) {
              r = (a.words[i] | 0) + carry;
              carry = r >> 26;
              this.words[i] = r & 0x3ffffff;
            }

            // Copy rest of the words
            if (carry === 0 && i < a.length && a !== this) {
              for (; i < a.length; i++) {
                this.words[i] = a.words[i];
              }
            }

            this.length = Math.max(this.length, i);

            if (a !== this) {
              this.negative = 1;
            }

            return this.strip();
          };

          // Subtract `num` from `this`
          BN.prototype.sub = function sub(num) {
            return this.clone().isub(num);
          };

          function smallMulTo(self, num, out) {
            out.negative = num.negative ^ self.negative;
            var len = (self.length + num.length) | 0;
            out.length = len;
            len = (len - 1) | 0;

            // Peel one iteration (compiler can't do it, because of code complexity)
            var a = self.words[0] | 0;
            var b = num.words[0] | 0;
            var r = a * b;

            var lo = r & 0x3ffffff;
            var carry = (r / 0x4000000) | 0;
            out.words[0] = lo;

            for (var k = 1; k < len; k++) {
              // Sum all words with the same `i + j = k` and accumulate `ncarry`,
              // note that ncarry could be >= 0x3ffffff
              var ncarry = carry >>> 26;
              var rword = carry & 0x3ffffff;
              var maxJ = Math.min(k, num.length - 1);
              for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
                var i = (k - j) | 0;
                a = self.words[i] | 0;
                b = num.words[j] | 0;
                r = a * b + rword;
                ncarry += (r / 0x4000000) | 0;
                rword = r & 0x3ffffff;
              }
              out.words[k] = rword | 0;
              carry = ncarry | 0;
            }
            if (carry !== 0) {
              out.words[k] = carry | 0;
            } else {
              out.length--;
            }

            return out.strip();
          }

          // TODO(indutny): it may be reasonable to omit it for users who don't need
          // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
          // multiplication (like elliptic secp256k1).
          var comb10MulTo = function comb10MulTo(self, num, out) {
            var a = self.words;
            var b = num.words;
            var o = out.words;
            var c = 0;
            var lo;
            var mid;
            var hi;
            var a0 = a[0] | 0;
            var al0 = a0 & 0x1fff;
            var ah0 = a0 >>> 13;
            var a1 = a[1] | 0;
            var al1 = a1 & 0x1fff;
            var ah1 = a1 >>> 13;
            var a2 = a[2] | 0;
            var al2 = a2 & 0x1fff;
            var ah2 = a2 >>> 13;
            var a3 = a[3] | 0;
            var al3 = a3 & 0x1fff;
            var ah3 = a3 >>> 13;
            var a4 = a[4] | 0;
            var al4 = a4 & 0x1fff;
            var ah4 = a4 >>> 13;
            var a5 = a[5] | 0;
            var al5 = a5 & 0x1fff;
            var ah5 = a5 >>> 13;
            var a6 = a[6] | 0;
            var al6 = a6 & 0x1fff;
            var ah6 = a6 >>> 13;
            var a7 = a[7] | 0;
            var al7 = a7 & 0x1fff;
            var ah7 = a7 >>> 13;
            var a8 = a[8] | 0;
            var al8 = a8 & 0x1fff;
            var ah8 = a8 >>> 13;
            var a9 = a[9] | 0;
            var al9 = a9 & 0x1fff;
            var ah9 = a9 >>> 13;
            var b0 = b[0] | 0;
            var bl0 = b0 & 0x1fff;
            var bh0 = b0 >>> 13;
            var b1 = b[1] | 0;
            var bl1 = b1 & 0x1fff;
            var bh1 = b1 >>> 13;
            var b2 = b[2] | 0;
            var bl2 = b2 & 0x1fff;
            var bh2 = b2 >>> 13;
            var b3 = b[3] | 0;
            var bl3 = b3 & 0x1fff;
            var bh3 = b3 >>> 13;
            var b4 = b[4] | 0;
            var bl4 = b4 & 0x1fff;
            var bh4 = b4 >>> 13;
            var b5 = b[5] | 0;
            var bl5 = b5 & 0x1fff;
            var bh5 = b5 >>> 13;
            var b6 = b[6] | 0;
            var bl6 = b6 & 0x1fff;
            var bh6 = b6 >>> 13;
            var b7 = b[7] | 0;
            var bl7 = b7 & 0x1fff;
            var bh7 = b7 >>> 13;
            var b8 = b[8] | 0;
            var bl8 = b8 & 0x1fff;
            var bh8 = b8 >>> 13;
            var b9 = b[9] | 0;
            var bl9 = b9 & 0x1fff;
            var bh9 = b9 >>> 13;

            out.negative = self.negative ^ num.negative;
            out.length = 19;
            /* k = 0 */
            lo = Math.imul(al0, bl0);
            mid = Math.imul(al0, bh0);
            mid = (mid + Math.imul(ah0, bl0)) | 0;
            hi = Math.imul(ah0, bh0);
            var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
            c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;
            w0 &= 0x3ffffff;
            /* k = 1 */
            lo = Math.imul(al1, bl0);
            mid = Math.imul(al1, bh0);
            mid = (mid + Math.imul(ah1, bl0)) | 0;
            hi = Math.imul(ah1, bh0);
            lo = (lo + Math.imul(al0, bl1)) | 0;
            mid = (mid + Math.imul(al0, bh1)) | 0;
            mid = (mid + Math.imul(ah0, bl1)) | 0;
            hi = (hi + Math.imul(ah0, bh1)) | 0;
            var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
            c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;
            w1 &= 0x3ffffff;
            /* k = 2 */
            lo = Math.imul(al2, bl0);
            mid = Math.imul(al2, bh0);
            mid = (mid + Math.imul(ah2, bl0)) | 0;
            hi = Math.imul(ah2, bh0);
            lo = (lo + Math.imul(al1, bl1)) | 0;
            mid = (mid + Math.imul(al1, bh1)) | 0;
            mid = (mid + Math.imul(ah1, bl1)) | 0;
            hi = (hi + Math.imul(ah1, bh1)) | 0;
            lo = (lo + Math.imul(al0, bl2)) | 0;
            mid = (mid + Math.imul(al0, bh2)) | 0;
            mid = (mid + Math.imul(ah0, bl2)) | 0;
            hi = (hi + Math.imul(ah0, bh2)) | 0;
            var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
            c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;
            w2 &= 0x3ffffff;
            /* k = 3 */
            lo = Math.imul(al3, bl0);
            mid = Math.imul(al3, bh0);
            mid = (mid + Math.imul(ah3, bl0)) | 0;
            hi = Math.imul(ah3, bh0);
            lo = (lo + Math.imul(al2, bl1)) | 0;
            mid = (mid + Math.imul(al2, bh1)) | 0;
            mid = (mid + Math.imul(ah2, bl1)) | 0;
            hi = (hi + Math.imul(ah2, bh1)) | 0;
            lo = (lo + Math.imul(al1, bl2)) | 0;
            mid = (mid + Math.imul(al1, bh2)) | 0;
            mid = (mid + Math.imul(ah1, bl2)) | 0;
            hi = (hi + Math.imul(ah1, bh2)) | 0;
            lo = (lo + Math.imul(al0, bl3)) | 0;
            mid = (mid + Math.imul(al0, bh3)) | 0;
            mid = (mid + Math.imul(ah0, bl3)) | 0;
            hi = (hi + Math.imul(ah0, bh3)) | 0;
            var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
            c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;
            w3 &= 0x3ffffff;
            /* k = 4 */
            lo = Math.imul(al4, bl0);
            mid = Math.imul(al4, bh0);
            mid = (mid + Math.imul(ah4, bl0)) | 0;
            hi = Math.imul(ah4, bh0);
            lo = (lo + Math.imul(al3, bl1)) | 0;
            mid = (mid + Math.imul(al3, bh1)) | 0;
            mid = (mid + Math.imul(ah3, bl1)) | 0;
            hi = (hi + Math.imul(ah3, bh1)) | 0;
            lo = (lo + Math.imul(al2, bl2)) | 0;
            mid = (mid + Math.imul(al2, bh2)) | 0;
            mid = (mid + Math.imul(ah2, bl2)) | 0;
            hi = (hi + Math.imul(ah2, bh2)) | 0;
            lo = (lo + Math.imul(al1, bl3)) | 0;
            mid = (mid + Math.imul(al1, bh3)) | 0;
            mid = (mid + Math.imul(ah1, bl3)) | 0;
            hi = (hi + Math.imul(ah1, bh3)) | 0;
            lo = (lo + Math.imul(al0, bl4)) | 0;
            mid = (mid + Math.imul(al0, bh4)) | 0;
            mid = (mid + Math.imul(ah0, bl4)) | 0;
            hi = (hi + Math.imul(ah0, bh4)) | 0;
            var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
            c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;
            w4 &= 0x3ffffff;
            /* k = 5 */
            lo = Math.imul(al5, bl0);
            mid = Math.imul(al5, bh0);
            mid = (mid + Math.imul(ah5, bl0)) | 0;
            hi = Math.imul(ah5, bh0);
            lo = (lo + Math.imul(al4, bl1)) | 0;
            mid = (mid + Math.imul(al4, bh1)) | 0;
            mid = (mid + Math.imul(ah4, bl1)) | 0;
            hi = (hi + Math.imul(ah4, bh1)) | 0;
            lo = (lo + Math.imul(al3, bl2)) | 0;
            mid = (mid + Math.imul(al3, bh2)) | 0;
            mid = (mid + Math.imul(ah3, bl2)) | 0;
            hi = (hi + Math.imul(ah3, bh2)) | 0;
            lo = (lo + Math.imul(al2, bl3)) | 0;
            mid = (mid + Math.imul(al2, bh3)) | 0;
            mid = (mid + Math.imul(ah2, bl3)) | 0;
            hi = (hi + Math.imul(ah2, bh3)) | 0;
            lo = (lo + Math.imul(al1, bl4)) | 0;
            mid = (mid + Math.imul(al1, bh4)) | 0;
            mid = (mid + Math.imul(ah1, bl4)) | 0;
            hi = (hi + Math.imul(ah1, bh4)) | 0;
            lo = (lo + Math.imul(al0, bl5)) | 0;
            mid = (mid + Math.imul(al0, bh5)) | 0;
            mid = (mid + Math.imul(ah0, bl5)) | 0;
            hi = (hi + Math.imul(ah0, bh5)) | 0;
            var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
            c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;
            w5 &= 0x3ffffff;
            /* k = 6 */
            lo = Math.imul(al6, bl0);
            mid = Math.imul(al6, bh0);
            mid = (mid + Math.imul(ah6, bl0)) | 0;
            hi = Math.imul(ah6, bh0);
            lo = (lo + Math.imul(al5, bl1)) | 0;
            mid = (mid + Math.imul(al5, bh1)) | 0;
            mid = (mid + Math.imul(ah5, bl1)) | 0;
            hi = (hi + Math.imul(ah5, bh1)) | 0;
            lo = (lo + Math.imul(al4, bl2)) | 0;
            mid = (mid + Math.imul(al4, bh2)) | 0;
            mid = (mid + Math.imul(ah4, bl2)) | 0;
            hi = (hi + Math.imul(ah4, bh2)) | 0;
            lo = (lo + Math.imul(al3, bl3)) | 0;
            mid = (mid + Math.imul(al3, bh3)) | 0;
            mid = (mid + Math.imul(ah3, bl3)) | 0;
            hi = (hi + Math.imul(ah3, bh3)) | 0;
            lo = (lo + Math.imul(al2, bl4)) | 0;
            mid = (mid + Math.imul(al2, bh4)) | 0;
            mid = (mid + Math.imul(ah2, bl4)) | 0;
            hi = (hi + Math.imul(ah2, bh4)) | 0;
            lo = (lo + Math.imul(al1, bl5)) | 0;
            mid = (mid + Math.imul(al1, bh5)) | 0;
            mid = (mid + Math.imul(ah1, bl5)) | 0;
            hi = (hi + Math.imul(ah1, bh5)) | 0;
            lo = (lo + Math.imul(al0, bl6)) | 0;
            mid = (mid + Math.imul(al0, bh6)) | 0;
            mid = (mid + Math.imul(ah0, bl6)) | 0;
            hi = (hi + Math.imul(ah0, bh6)) | 0;
            var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
            c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;
            w6 &= 0x3ffffff;
            /* k = 7 */
            lo = Math.imul(al7, bl0);
            mid = Math.imul(al7, bh0);
            mid = (mid + Math.imul(ah7, bl0)) | 0;
            hi = Math.imul(ah7, bh0);
            lo = (lo + Math.imul(al6, bl1)) | 0;
            mid = (mid + Math.imul(al6, bh1)) | 0;
            mid = (mid + Math.imul(ah6, bl1)) | 0;
            hi = (hi + Math.imul(ah6, bh1)) | 0;
            lo = (lo + Math.imul(al5, bl2)) | 0;
            mid = (mid + Math.imul(al5, bh2)) | 0;
            mid = (mid + Math.imul(ah5, bl2)) | 0;
            hi = (hi + Math.imul(ah5, bh2)) | 0;
            lo = (lo + Math.imul(al4, bl3)) | 0;
            mid = (mid + Math.imul(al4, bh3)) | 0;
            mid = (mid + Math.imul(ah4, bl3)) | 0;
            hi = (hi + Math.imul(ah4, bh3)) | 0;
            lo = (lo + Math.imul(al3, bl4)) | 0;
            mid = (mid + Math.imul(al3, bh4)) | 0;
            mid = (mid + Math.imul(ah3, bl4)) | 0;
            hi = (hi + Math.imul(ah3, bh4)) | 0;
            lo = (lo + Math.imul(al2, bl5)) | 0;
            mid = (mid + Math.imul(al2, bh5)) | 0;
            mid = (mid + Math.imul(ah2, bl5)) | 0;
            hi = (hi + Math.imul(ah2, bh5)) | 0;
            lo = (lo + Math.imul(al1, bl6)) | 0;
            mid = (mid + Math.imul(al1, bh6)) | 0;
            mid = (mid + Math.imul(ah1, bl6)) | 0;
            hi = (hi + Math.imul(ah1, bh6)) | 0;
            lo = (lo + Math.imul(al0, bl7)) | 0;
            mid = (mid + Math.imul(al0, bh7)) | 0;
            mid = (mid + Math.imul(ah0, bl7)) | 0;
            hi = (hi + Math.imul(ah0, bh7)) | 0;
            var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
            c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;
            w7 &= 0x3ffffff;
            /* k = 8 */
            lo = Math.imul(al8, bl0);
            mid = Math.imul(al8, bh0);
            mid = (mid + Math.imul(ah8, bl0)) | 0;
            hi = Math.imul(ah8, bh0);
            lo = (lo + Math.imul(al7, bl1)) | 0;
            mid = (mid + Math.imul(al7, bh1)) | 0;
            mid = (mid + Math.imul(ah7, bl1)) | 0;
            hi = (hi + Math.imul(ah7, bh1)) | 0;
            lo = (lo + Math.imul(al6, bl2)) | 0;
            mid = (mid + Math.imul(al6, bh2)) | 0;
            mid = (mid + Math.imul(ah6, bl2)) | 0;
            hi = (hi + Math.imul(ah6, bh2)) | 0;
            lo = (lo + Math.imul(al5, bl3)) | 0;
            mid = (mid + Math.imul(al5, bh3)) | 0;
            mid = (mid + Math.imul(ah5, bl3)) | 0;
            hi = (hi + Math.imul(ah5, bh3)) | 0;
            lo = (lo + Math.imul(al4, bl4)) | 0;
            mid = (mid + Math.imul(al4, bh4)) | 0;
            mid = (mid + Math.imul(ah4, bl4)) | 0;
            hi = (hi + Math.imul(ah4, bh4)) | 0;
            lo = (lo + Math.imul(al3, bl5)) | 0;
            mid = (mid + Math.imul(al3, bh5)) | 0;
            mid = (mid + Math.imul(ah3, bl5)) | 0;
            hi = (hi + Math.imul(ah3, bh5)) | 0;
            lo = (lo + Math.imul(al2, bl6)) | 0;
            mid = (mid + Math.imul(al2, bh6)) | 0;
            mid = (mid + Math.imul(ah2, bl6)) | 0;
            hi = (hi + Math.imul(ah2, bh6)) | 0;
            lo = (lo + Math.imul(al1, bl7)) | 0;
            mid = (mid + Math.imul(al1, bh7)) | 0;
            mid = (mid + Math.imul(ah1, bl7)) | 0;
            hi = (hi + Math.imul(ah1, bh7)) | 0;
            lo = (lo + Math.imul(al0, bl8)) | 0;
            mid = (mid + Math.imul(al0, bh8)) | 0;
            mid = (mid + Math.imul(ah0, bl8)) | 0;
            hi = (hi + Math.imul(ah0, bh8)) | 0;
            var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
            c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;
            w8 &= 0x3ffffff;
            /* k = 9 */
            lo = Math.imul(al9, bl0);
            mid = Math.imul(al9, bh0);
            mid = (mid + Math.imul(ah9, bl0)) | 0;
            hi = Math.imul(ah9, bh0);
            lo = (lo + Math.imul(al8, bl1)) | 0;
            mid = (mid + Math.imul(al8, bh1)) | 0;
            mid = (mid + Math.imul(ah8, bl1)) | 0;
            hi = (hi + Math.imul(ah8, bh1)) | 0;
            lo = (lo + Math.imul(al7, bl2)) | 0;
            mid = (mid + Math.imul(al7, bh2)) | 0;
            mid = (mid + Math.imul(ah7, bl2)) | 0;
            hi = (hi + Math.imul(ah7, bh2)) | 0;
            lo = (lo + Math.imul(al6, bl3)) | 0;
            mid = (mid + Math.imul(al6, bh3)) | 0;
            mid = (mid + Math.imul(ah6, bl3)) | 0;
            hi = (hi + Math.imul(ah6, bh3)) | 0;
            lo = (lo + Math.imul(al5, bl4)) | 0;
            mid = (mid + Math.imul(al5, bh4)) | 0;
            mid = (mid + Math.imul(ah5, bl4)) | 0;
            hi = (hi + Math.imul(ah5, bh4)) | 0;
            lo = (lo + Math.imul(al4, bl5)) | 0;
            mid = (mid + Math.imul(al4, bh5)) | 0;
            mid = (mid + Math.imul(ah4, bl5)) | 0;
            hi = (hi + Math.imul(ah4, bh5)) | 0;
            lo = (lo + Math.imul(al3, bl6)) | 0;
            mid = (mid + Math.imul(al3, bh6)) | 0;
            mid = (mid + Math.imul(ah3, bl6)) | 0;
            hi = (hi + Math.imul(ah3, bh6)) | 0;
            lo = (lo + Math.imul(al2, bl7)) | 0;
            mid = (mid + Math.imul(al2, bh7)) | 0;
            mid = (mid + Math.imul(ah2, bl7)) | 0;
            hi = (hi + Math.imul(ah2, bh7)) | 0;
            lo = (lo + Math.imul(al1, bl8)) | 0;
            mid = (mid + Math.imul(al1, bh8)) | 0;
            mid = (mid + Math.imul(ah1, bl8)) | 0;
            hi = (hi + Math.imul(ah1, bh8)) | 0;
            lo = (lo + Math.imul(al0, bl9)) | 0;
            mid = (mid + Math.imul(al0, bh9)) | 0;
            mid = (mid + Math.imul(ah0, bl9)) | 0;
            hi = (hi + Math.imul(ah0, bh9)) | 0;
            var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
            c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;
            w9 &= 0x3ffffff;
            /* k = 10 */
            lo = Math.imul(al9, bl1);
            mid = Math.imul(al9, bh1);
            mid = (mid + Math.imul(ah9, bl1)) | 0;
            hi = Math.imul(ah9, bh1);
            lo = (lo + Math.imul(al8, bl2)) | 0;
            mid = (mid + Math.imul(al8, bh2)) | 0;
            mid = (mid + Math.imul(ah8, bl2)) | 0;
            hi = (hi + Math.imul(ah8, bh2)) | 0;
            lo = (lo + Math.imul(al7, bl3)) | 0;
            mid = (mid + Math.imul(al7, bh3)) | 0;
            mid = (mid + Math.imul(ah7, bl3)) | 0;
            hi = (hi + Math.imul(ah7, bh3)) | 0;
            lo = (lo + Math.imul(al6, bl4)) | 0;
            mid = (mid + Math.imul(al6, bh4)) | 0;
            mid = (mid + Math.imul(ah6, bl4)) | 0;
            hi = (hi + Math.imul(ah6, bh4)) | 0;
            lo = (lo + Math.imul(al5, bl5)) | 0;
            mid = (mid + Math.imul(al5, bh5)) | 0;
            mid = (mid + Math.imul(ah5, bl5)) | 0;
            hi = (hi + Math.imul(ah5, bh5)) | 0;
            lo = (lo + Math.imul(al4, bl6)) | 0;
            mid = (mid + Math.imul(al4, bh6)) | 0;
            mid = (mid + Math.imul(ah4, bl6)) | 0;
            hi = (hi + Math.imul(ah4, bh6)) | 0;
            lo = (lo + Math.imul(al3, bl7)) | 0;
            mid = (mid + Math.imul(al3, bh7)) | 0;
            mid = (mid + Math.imul(ah3, bl7)) | 0;
            hi = (hi + Math.imul(ah3, bh7)) | 0;
            lo = (lo + Math.imul(al2, bl8)) | 0;
            mid = (mid + Math.imul(al2, bh8)) | 0;
            mid = (mid + Math.imul(ah2, bl8)) | 0;
            hi = (hi + Math.imul(ah2, bh8)) | 0;
            lo = (lo + Math.imul(al1, bl9)) | 0;
            mid = (mid + Math.imul(al1, bh9)) | 0;
            mid = (mid + Math.imul(ah1, bl9)) | 0;
            hi = (hi + Math.imul(ah1, bh9)) | 0;
            var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
            c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;
            w10 &= 0x3ffffff;
            /* k = 11 */
            lo = Math.imul(al9, bl2);
            mid = Math.imul(al9, bh2);
            mid = (mid + Math.imul(ah9, bl2)) | 0;
            hi = Math.imul(ah9, bh2);
            lo = (lo + Math.imul(al8, bl3)) | 0;
            mid = (mid + Math.imul(al8, bh3)) | 0;
            mid = (mid + Math.imul(ah8, bl3)) | 0;
            hi = (hi + Math.imul(ah8, bh3)) | 0;
            lo = (lo + Math.imul(al7, bl4)) | 0;
            mid = (mid + Math.imul(al7, bh4)) | 0;
            mid = (mid + Math.imul(ah7, bl4)) | 0;
            hi = (hi + Math.imul(ah7, bh4)) | 0;
            lo = (lo + Math.imul(al6, bl5)) | 0;
            mid = (mid + Math.imul(al6, bh5)) | 0;
            mid = (mid + Math.imul(ah6, bl5)) | 0;
            hi = (hi + Math.imul(ah6, bh5)) | 0;
            lo = (lo + Math.imul(al5, bl6)) | 0;
            mid = (mid + Math.imul(al5, bh6)) | 0;
            mid = (mid + Math.imul(ah5, bl6)) | 0;
            hi = (hi + Math.imul(ah5, bh6)) | 0;
            lo = (lo + Math.imul(al4, bl7)) | 0;
            mid = (mid + Math.imul(al4, bh7)) | 0;
            mid = (mid + Math.imul(ah4, bl7)) | 0;
            hi = (hi + Math.imul(ah4, bh7)) | 0;
            lo = (lo + Math.imul(al3, bl8)) | 0;
            mid = (mid + Math.imul(al3, bh8)) | 0;
            mid = (mid + Math.imul(ah3, bl8)) | 0;
            hi = (hi + Math.imul(ah3, bh8)) | 0;
            lo = (lo + Math.imul(al2, bl9)) | 0;
            mid = (mid + Math.imul(al2, bh9)) | 0;
            mid = (mid + Math.imul(ah2, bl9)) | 0;
            hi = (hi + Math.imul(ah2, bh9)) | 0;
            var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
            c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;
            w11 &= 0x3ffffff;
            /* k = 12 */
            lo = Math.imul(al9, bl3);
            mid = Math.imul(al9, bh3);
            mid = (mid + Math.imul(ah9, bl3)) | 0;
            hi = Math.imul(ah9, bh3);
            lo = (lo + Math.imul(al8, bl4)) | 0;
            mid = (mid + Math.imul(al8, bh4)) | 0;
            mid = (mid + Math.imul(ah8, bl4)) | 0;
            hi = (hi + Math.imul(ah8, bh4)) | 0;
            lo = (lo + Math.imul(al7, bl5)) | 0;
            mid = (mid + Math.imul(al7, bh5)) | 0;
            mid = (mid + Math.imul(ah7, bl5)) | 0;
            hi = (hi + Math.imul(ah7, bh5)) | 0;
            lo = (lo + Math.imul(al6, bl6)) | 0;
            mid = (mid + Math.imul(al6, bh6)) | 0;
            mid = (mid + Math.imul(ah6, bl6)) | 0;
            hi = (hi + Math.imul(ah6, bh6)) | 0;
            lo = (lo + Math.imul(al5, bl7)) | 0;
            mid = (mid + Math.imul(al5, bh7)) | 0;
            mid = (mid + Math.imul(ah5, bl7)) | 0;
            hi = (hi + Math.imul(ah5, bh7)) | 0;
            lo = (lo + Math.imul(al4, bl8)) | 0;
            mid = (mid + Math.imul(al4, bh8)) | 0;
            mid = (mid + Math.imul(ah4, bl8)) | 0;
            hi = (hi + Math.imul(ah4, bh8)) | 0;
            lo = (lo + Math.imul(al3, bl9)) | 0;
            mid = (mid + Math.imul(al3, bh9)) | 0;
            mid = (mid + Math.imul(ah3, bl9)) | 0;
            hi = (hi + Math.imul(ah3, bh9)) | 0;
            var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
            c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;
            w12 &= 0x3ffffff;
            /* k = 13 */
            lo = Math.imul(al9, bl4);
            mid = Math.imul(al9, bh4);
            mid = (mid + Math.imul(ah9, bl4)) | 0;
            hi = Math.imul(ah9, bh4);
            lo = (lo + Math.imul(al8, bl5)) | 0;
            mid = (mid + Math.imul(al8, bh5)) | 0;
            mid = (mid + Math.imul(ah8, bl5)) | 0;
            hi = (hi + Math.imul(ah8, bh5)) | 0;
            lo = (lo + Math.imul(al7, bl6)) | 0;
            mid = (mid + Math.imul(al7, bh6)) | 0;
            mid = (mid + Math.imul(ah7, bl6)) | 0;
            hi = (hi + Math.imul(ah7, bh6)) | 0;
            lo = (lo + Math.imul(al6, bl7)) | 0;
            mid = (mid + Math.imul(al6, bh7)) | 0;
            mid = (mid + Math.imul(ah6, bl7)) | 0;
            hi = (hi + Math.imul(ah6, bh7)) | 0;
            lo = (lo + Math.imul(al5, bl8)) | 0;
            mid = (mid + Math.imul(al5, bh8)) | 0;
            mid = (mid + Math.imul(ah5, bl8)) | 0;
            hi = (hi + Math.imul(ah5, bh8)) | 0;
            lo = (lo + Math.imul(al4, bl9)) | 0;
            mid = (mid + Math.imul(al4, bh9)) | 0;
            mid = (mid + Math.imul(ah4, bl9)) | 0;
            hi = (hi + Math.imul(ah4, bh9)) | 0;
            var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
            c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;
            w13 &= 0x3ffffff;
            /* k = 14 */
            lo = Math.imul(al9, bl5);
            mid = Math.imul(al9, bh5);
            mid = (mid + Math.imul(ah9, bl5)) | 0;
            hi = Math.imul(ah9, bh5);
            lo = (lo + Math.imul(al8, bl6)) | 0;
            mid = (mid + Math.imul(al8, bh6)) | 0;
            mid = (mid + Math.imul(ah8, bl6)) | 0;
            hi = (hi + Math.imul(ah8, bh6)) | 0;
            lo = (lo + Math.imul(al7, bl7)) | 0;
            mid = (mid + Math.imul(al7, bh7)) | 0;
            mid = (mid + Math.imul(ah7, bl7)) | 0;
            hi = (hi + Math.imul(ah7, bh7)) | 0;
            lo = (lo + Math.imul(al6, bl8)) | 0;
            mid = (mid + Math.imul(al6, bh8)) | 0;
            mid = (mid + Math.imul(ah6, bl8)) | 0;
            hi = (hi + Math.imul(ah6, bh8)) | 0;
            lo = (lo + Math.imul(al5, bl9)) | 0;
            mid = (mid + Math.imul(al5, bh9)) | 0;
            mid = (mid + Math.imul(ah5, bl9)) | 0;
            hi = (hi + Math.imul(ah5, bh9)) | 0;
            var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
            c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;
            w14 &= 0x3ffffff;
            /* k = 15 */
            lo = Math.imul(al9, bl6);
            mid = Math.imul(al9, bh6);
            mid = (mid + Math.imul(ah9, bl6)) | 0;
            hi = Math.imul(ah9, bh6);
            lo = (lo + Math.imul(al8, bl7)) | 0;
            mid = (mid + Math.imul(al8, bh7)) | 0;
            mid = (mid + Math.imul(ah8, bl7)) | 0;
            hi = (hi + Math.imul(ah8, bh7)) | 0;
            lo = (lo + Math.imul(al7, bl8)) | 0;
            mid = (mid + Math.imul(al7, bh8)) | 0;
            mid = (mid + Math.imul(ah7, bl8)) | 0;
            hi = (hi + Math.imul(ah7, bh8)) | 0;
            lo = (lo + Math.imul(al6, bl9)) | 0;
            mid = (mid + Math.imul(al6, bh9)) | 0;
            mid = (mid + Math.imul(ah6, bl9)) | 0;
            hi = (hi + Math.imul(ah6, bh9)) | 0;
            var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
            c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;
            w15 &= 0x3ffffff;
            /* k = 16 */
            lo = Math.imul(al9, bl7);
            mid = Math.imul(al9, bh7);
            mid = (mid + Math.imul(ah9, bl7)) | 0;
            hi = Math.imul(ah9, bh7);
            lo = (lo + Math.imul(al8, bl8)) | 0;
            mid = (mid + Math.imul(al8, bh8)) | 0;
            mid = (mid + Math.imul(ah8, bl8)) | 0;
            hi = (hi + Math.imul(ah8, bh8)) | 0;
            lo = (lo + Math.imul(al7, bl9)) | 0;
            mid = (mid + Math.imul(al7, bh9)) | 0;
            mid = (mid + Math.imul(ah7, bl9)) | 0;
            hi = (hi + Math.imul(ah7, bh9)) | 0;
            var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
            c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;
            w16 &= 0x3ffffff;
            /* k = 17 */
            lo = Math.imul(al9, bl8);
            mid = Math.imul(al9, bh8);
            mid = (mid + Math.imul(ah9, bl8)) | 0;
            hi = Math.imul(ah9, bh8);
            lo = (lo + Math.imul(al8, bl9)) | 0;
            mid = (mid + Math.imul(al8, bh9)) | 0;
            mid = (mid + Math.imul(ah8, bl9)) | 0;
            hi = (hi + Math.imul(ah8, bh9)) | 0;
            var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
            c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;
            w17 &= 0x3ffffff;
            /* k = 18 */
            lo = Math.imul(al9, bl9);
            mid = Math.imul(al9, bh9);
            mid = (mid + Math.imul(ah9, bl9)) | 0;
            hi = Math.imul(ah9, bh9);
            var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
            c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;
            w18 &= 0x3ffffff;
            o[0] = w0;
            o[1] = w1;
            o[2] = w2;
            o[3] = w3;
            o[4] = w4;
            o[5] = w5;
            o[6] = w6;
            o[7] = w7;
            o[8] = w8;
            o[9] = w9;
            o[10] = w10;
            o[11] = w11;
            o[12] = w12;
            o[13] = w13;
            o[14] = w14;
            o[15] = w15;
            o[16] = w16;
            o[17] = w17;
            o[18] = w18;
            if (c !== 0) {
              o[19] = c;
              out.length++;
            }
            return out;
          };

          // Polyfill comb
          if (!Math.imul) {
            comb10MulTo = smallMulTo;
          }

          function bigMulTo(self, num, out) {
            out.negative = num.negative ^ self.negative;
            out.length = self.length + num.length;

            var carry = 0;
            var hncarry = 0;
            for (var k = 0; k < out.length - 1; k++) {
              // Sum all words with the same `i + j = k` and accumulate `ncarry`,
              // note that ncarry could be >= 0x3ffffff
              var ncarry = hncarry;
              hncarry = 0;
              var rword = carry & 0x3ffffff;
              var maxJ = Math.min(k, num.length - 1);
              for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
                var i = k - j;
                var a = self.words[i] | 0;
                var b = num.words[j] | 0;
                var r = a * b;

                var lo = r & 0x3ffffff;
                ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
                lo = (lo + rword) | 0;
                rword = lo & 0x3ffffff;
                ncarry = (ncarry + (lo >>> 26)) | 0;

                hncarry += ncarry >>> 26;
                ncarry &= 0x3ffffff;
              }
              out.words[k] = rword;
              carry = ncarry;
              ncarry = hncarry;
            }
            if (carry !== 0) {
              out.words[k] = carry;
            } else {
              out.length--;
            }

            return out.strip();
          }

          function jumboMulTo(self, num, out) {
            var fftm = new FFTM();
            return fftm.mulp(self, num, out);
          }

          BN.prototype.mulTo = function mulTo(num, out) {
            var res;
            var len = this.length + num.length;
            if (this.length === 10 && num.length === 10) {
              res = comb10MulTo(this, num, out);
            } else if (len < 63) {
              res = smallMulTo(this, num, out);
            } else if (len < 1024) {
              res = bigMulTo(this, num, out);
            } else {
              res = jumboMulTo(this, num, out);
            }

            return res;
          };

          // Cooley-Tukey algorithm for FFT
          // slightly revisited to rely on looping instead of recursion

          function FFTM(x, y) {
            this.x = x;
            this.y = y;
          }

          FFTM.prototype.makeRBT = function makeRBT(N) {
            var t = new Array(N);
            var l = BN.prototype._countBits(N) - 1;
            for (var i = 0; i < N; i++) {
              t[i] = this.revBin(i, l, N);
            }

            return t;
          };

          // Returns binary-reversed representation of `x`
          FFTM.prototype.revBin = function revBin(x, l, N) {
            if (x === 0 || x === N - 1) return x;

            var rb = 0;
            for (var i = 0; i < l; i++) {
              rb |= (x & 1) << (l - i - 1);
              x >>= 1;
            }

            return rb;
          };

          // Performs "tweedling" phase, therefore 'emulating'
          // behaviour of the recursive algorithm
          FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {
            for (var i = 0; i < N; i++) {
              rtws[i] = rws[rbt[i]];
              itws[i] = iws[rbt[i]];
            }
          };

          FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {
            this.permute(rbt, rws, iws, rtws, itws, N);

            for (var s = 1; s < N; s <<= 1) {
              var l = s << 1;

              var rtwdf = Math.cos(2 * Math.PI / l);
              var itwdf = Math.sin(2 * Math.PI / l);

              for (var p = 0; p < N; p += l) {
                var rtwdf_ = rtwdf;
                var itwdf_ = itwdf;

                for (var j = 0; j < s; j++) {
                  var re = rtws[p + j];
                  var ie = itws[p + j];

                  var ro = rtws[p + j + s];
                  var io = itws[p + j + s];

                  var rx = rtwdf_ * ro - itwdf_ * io;

                  io = rtwdf_ * io + itwdf_ * ro;
                  ro = rx;

                  rtws[p + j] = re + ro;
                  itws[p + j] = ie + io;

                  rtws[p + j + s] = re - ro;
                  itws[p + j + s] = ie - io;

                  /* jshint maxdepth : false */
                  if (j !== l) {
                    rx = rtwdf * rtwdf_ - itwdf * itwdf_;

                    itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                    rtwdf_ = rx;
                  }
                }
              }
            }
          };

          FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
            var N = Math.max(m, n) | 1;
            var odd = N & 1;
            var i = 0;
            for (N = N / 2 | 0; N; N = N >>> 1) {
              i++;
            }

            return 1 << i + 1 + odd;
          };

          FFTM.prototype.conjugate = function conjugate(rws, iws, N) {
            if (N <= 1) return;

            for (var i = 0; i < N / 2; i++) {
              var t = rws[i];

              rws[i] = rws[N - i - 1];
              rws[N - i - 1] = t;

              t = iws[i];

              iws[i] = -iws[N - i - 1];
              iws[N - i - 1] = -t;
            }
          };

          FFTM.prototype.normalize13b = function normalize13b(ws, N) {
            var carry = 0;
            for (var i = 0; i < N / 2; i++) {
              var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +
                Math.round(ws[2 * i] / N) +
                carry;

              ws[i] = w & 0x3ffffff;

              if (w < 0x4000000) {
                carry = 0;
              } else {
                carry = w / 0x4000000 | 0;
              }
            }

            return ws;
          };

          FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {
            var carry = 0;
            for (var i = 0; i < len; i++) {
              carry = carry + (ws[i] | 0);

              rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;
              rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;
            }

            // Pad with zeroes
            for (i = 2 * len; i < N; ++i) {
              rws[i] = 0;
            }

            assert(carry === 0);
            assert((carry & ~0x1fff) === 0);
          };

          FFTM.prototype.stub = function stub(N) {
            var ph = new Array(N);
            for (var i = 0; i < N; i++) {
              ph[i] = 0;
            }

            return ph;
          };

          FFTM.prototype.mulp = function mulp(x, y, out) {
            var N = 2 * this.guessLen13b(x.length, y.length);

            var rbt = this.makeRBT(N);

            var _ = this.stub(N);

            var rws = new Array(N);
            var rwst = new Array(N);
            var iwst = new Array(N);

            var nrws = new Array(N);
            var nrwst = new Array(N);
            var niwst = new Array(N);

            var rmws = out.words;
            rmws.length = N;

            this.convert13b(x.words, x.length, rws, N);
            this.convert13b(y.words, y.length, nrws, N);

            this.transform(rws, _, rwst, iwst, N, rbt);
            this.transform(nrws, _, nrwst, niwst, N, rbt);

            for (var i = 0; i < N; i++) {
              var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
              iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
              rwst[i] = rx;
            }

            this.conjugate(rwst, iwst, N);
            this.transform(rwst, iwst, rmws, _, N, rbt);
            this.conjugate(rmws, _, N);
            this.normalize13b(rmws, N);

            out.negative = x.negative ^ y.negative;
            out.length = x.length + y.length;
            return out.strip();
          };

          // Multiply `this` by `num`
          BN.prototype.mul = function mul(num) {
            var out = new BN(null);
            out.words = new Array(this.length + num.length);
            return this.mulTo(num, out);
          };

          // Multiply employing FFT
          BN.prototype.mulf = function mulf(num) {
            var out = new BN(null);
            out.words = new Array(this.length + num.length);
            return jumboMulTo(this, num, out);
          };

          // In-place Multiplication
          BN.prototype.imul = function imul(num) {
            return this.clone().mulTo(num, this);
          };

          BN.prototype.imuln = function imuln(num) {
            assert(typeof num === 'number');
            assert(num < 0x4000000);

            // Carry
            var carry = 0;
            for (var i = 0; i < this.length; i++) {
              var w = (this.words[i] | 0) * num;
              var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
              carry >>= 26;
              carry += (w / 0x4000000) | 0;
              // NOTE: lo is 27bit maximum
              carry += lo >>> 26;
              this.words[i] = lo & 0x3ffffff;
            }

            if (carry !== 0) {
              this.words[i] = carry;
              this.length++;
            }

            return this;
          };

          BN.prototype.muln = function muln(num) {
            return this.clone().imuln(num);
          };

          // `this` * `this`
          BN.prototype.sqr = function sqr() {
            return this.mul(this);
          };

          // `this` * `this` in-place
          BN.prototype.isqr = function isqr() {
            return this.imul(this.clone());
          };

          // Math.pow(`this`, `num`)
          BN.prototype.pow = function pow(num) {
            var w = toBitArray(num);
            if (w.length === 0) return new BN(1);

            // Skip leading zeroes
            var res = this;
            for (var i = 0; i < w.length; i++ , res = res.sqr()) {
              if (w[i] !== 0) break;
            }

            if (++i < w.length) {
              for (var q = res.sqr(); i < w.length; i++ , q = q.sqr()) {
                if (w[i] === 0) continue;

                res = res.mul(q);
              }
            }

            return res;
          };

          // Shift-left in-place
          BN.prototype.iushln = function iushln(bits) {
            assert(typeof bits === 'number' && bits >= 0);
            var r = bits % 26;
            var s = (bits - r) / 26;
            var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);
            var i;

            if (r !== 0) {
              var carry = 0;

              for (i = 0; i < this.length; i++) {
                var newCarry = this.words[i] & carryMask;
                var c = ((this.words[i] | 0) - newCarry) << r;
                this.words[i] = c | carry;
                carry = newCarry >>> (26 - r);
              }

              if (carry) {
                this.words[i] = carry;
                this.length++;
              }
            }

            if (s !== 0) {
              for (i = this.length - 1; i >= 0; i--) {
                this.words[i + s] = this.words[i];
              }

              for (i = 0; i < s; i++) {
                this.words[i] = 0;
              }

              this.length += s;
            }

            return this.strip();
          };

          BN.prototype.ishln = function ishln(bits) {
            // TODO(indutny): implement me
            assert(this.negative === 0);
            return this.iushln(bits);
          };

          // Shift-right in-place
          // NOTE: `hint` is a lowest bit before trailing zeroes
          // NOTE: if `extended` is present - it will be filled with destroyed bits
          BN.prototype.iushrn = function iushrn(bits, hint, extended) {
            assert(typeof bits === 'number' && bits >= 0);
            var h;
            if (hint) {
              h = (hint - (hint % 26)) / 26;
            } else {
              h = 0;
            }

            var r = bits % 26;
            var s = Math.min((bits - r) / 26, this.length);
            var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
            var maskedWords = extended;

            h -= s;
            h = Math.max(0, h);

            // Extended mode, copy masked part
            if (maskedWords) {
              for (var i = 0; i < s; i++) {
                maskedWords.words[i] = this.words[i];
              }
              maskedWords.length = s;
            }

            if (s === 0) {
              // No-op, we should not move anything at all
            } else if (this.length > s) {
              this.length -= s;
              for (i = 0; i < this.length; i++) {
                this.words[i] = this.words[i + s];
              }
            } else {
              this.words[0] = 0;
              this.length = 1;
            }

            var carry = 0;
            for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
              var word = this.words[i] | 0;
              this.words[i] = (carry << (26 - r)) | (word >>> r);
              carry = word & mask;
            }

            // Push carried bits as a mask
            if (maskedWords && carry !== 0) {
              maskedWords.words[maskedWords.length++] = carry;
            }

            if (this.length === 0) {
              this.words[0] = 0;
              this.length = 1;
            }

            return this.strip();
          };

          BN.prototype.ishrn = function ishrn(bits, hint, extended) {
            // TODO(indutny): implement me
            assert(this.negative === 0);
            return this.iushrn(bits, hint, extended);
          };

          // Shift-left
          BN.prototype.shln = function shln(bits) {
            return this.clone().ishln(bits);
          };

          BN.prototype.ushln = function ushln(bits) {
            return this.clone().iushln(bits);
          };

          // Shift-right
          BN.prototype.shrn = function shrn(bits) {
            return this.clone().ishrn(bits);
          };

          BN.prototype.ushrn = function ushrn(bits) {
            return this.clone().iushrn(bits);
          };

          // Test if n bit is set
          BN.prototype.testn = function testn(bit) {
            assert(typeof bit === 'number' && bit >= 0);
            var r = bit % 26;
            var s = (bit - r) / 26;
            var q = 1 << r;

            // Fast case: bit is much higher than all existing words
            if (this.length <= s) return false;

            // Check bit and return
            var w = this.words[s];

            return !!(w & q);
          };

          // Return only lowers bits of number (in-place)
          BN.prototype.imaskn = function imaskn(bits) {
            assert(typeof bits === 'number' && bits >= 0);
            var r = bits % 26;
            var s = (bits - r) / 26;

            assert(this.negative === 0, 'imaskn works only with positive numbers');

            if (this.length <= s) {
              return this;
            }

            if (r !== 0) {
              s++;
            }
            this.length = Math.min(s, this.length);

            if (r !== 0) {
              var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
              this.words[this.length - 1] &= mask;
            }

            return this.strip();
          };

          // Return only lowers bits of number
          BN.prototype.maskn = function maskn(bits) {
            return this.clone().imaskn(bits);
          };

          // Add plain number `num` to `this`
          BN.prototype.iaddn = function iaddn(num) {
            assert(typeof num === 'number');
            assert(num < 0x4000000);
            if (num < 0) return this.isubn(-num);

            // Possible sign change
            if (this.negative !== 0) {
              if (this.length === 1 && (this.words[0] | 0) < num) {
                this.words[0] = num - (this.words[0] | 0);
                this.negative = 0;
                return this;
              }

              this.negative = 0;
              this.isubn(num);
              this.negative = 1;
              return this;
            }

            // Add without checks
            return this._iaddn(num);
          };

          BN.prototype._iaddn = function _iaddn(num) {
            this.words[0] += num;

            // Carry
            for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
              this.words[i] -= 0x4000000;
              if (i === this.length - 1) {
                this.words[i + 1] = 1;
              } else {
                this.words[i + 1]++;
              }
            }
            this.length = Math.max(this.length, i + 1);

            return this;
          };

          // Subtract plain number `num` from `this`
          BN.prototype.isubn = function isubn(num) {
            assert(typeof num === 'number');
            assert(num < 0x4000000);
            if (num < 0) return this.iaddn(-num);

            if (this.negative !== 0) {
              this.negative = 0;
              this.iaddn(num);
              this.negative = 1;
              return this;
            }

            this.words[0] -= num;

            if (this.length === 1 && this.words[0] < 0) {
              this.words[0] = -this.words[0];
              this.negative = 1;
            } else {
              // Carry
              for (var i = 0; i < this.length && this.words[i] < 0; i++) {
                this.words[i] += 0x4000000;
                this.words[i + 1] -= 1;
              }
            }

            return this.strip();
          };

          BN.prototype.addn = function addn(num) {
            return this.clone().iaddn(num);
          };

          BN.prototype.subn = function subn(num) {
            return this.clone().isubn(num);
          };

          BN.prototype.iabs = function iabs() {
            this.negative = 0;

            return this;
          };

          BN.prototype.abs = function abs() {
            return this.clone().iabs();
          };

          BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
            var len = num.length + shift;
            var i;

            this._expand(len);

            var w;
            var carry = 0;
            for (i = 0; i < num.length; i++) {
              w = (this.words[i + shift] | 0) + carry;
              var right = (num.words[i] | 0) * mul;
              w -= right & 0x3ffffff;
              carry = (w >> 26) - ((right / 0x4000000) | 0);
              this.words[i + shift] = w & 0x3ffffff;
            }
            for (; i < this.length - shift; i++) {
              w = (this.words[i + shift] | 0) + carry;
              carry = w >> 26;
              this.words[i + shift] = w & 0x3ffffff;
            }

            if (carry === 0) return this.strip();

            // Subtraction overflow
            assert(carry === -1);
            carry = 0;
            for (i = 0; i < this.length; i++) {
              w = -(this.words[i] | 0) + carry;
              carry = w >> 26;
              this.words[i] = w & 0x3ffffff;
            }
            this.negative = 1;

            return this.strip();
          };

          BN.prototype._wordDiv = function _wordDiv(num, mode) {
            var shift = this.length - num.length;

            var a = this.clone();
            var b = num;

            // Normalize
            var bhi = b.words[b.length - 1] | 0;
            var bhiBits = this._countBits(bhi);
            shift = 26 - bhiBits;
            if (shift !== 0) {
              b = b.ushln(shift);
              a.iushln(shift);
              bhi = b.words[b.length - 1] | 0;
            }

            // Initialize quotient
            var m = a.length - b.length;
            var q;

            if (mode !== 'mod') {
              q = new BN(null);
              q.length = m + 1;
              q.words = new Array(q.length);
              for (var i = 0; i < q.length; i++) {
                q.words[i] = 0;
              }
            }

            var diff = a.clone()._ishlnsubmul(b, 1, m);
            if (diff.negative === 0) {
              a = diff;
              if (q) {
                q.words[m] = 1;
              }
            }

            for (var j = m - 1; j >= 0; j--) {
              var qj = (a.words[b.length + j] | 0) * 0x4000000 +
                (a.words[b.length + j - 1] | 0);

              // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
              // (0x7ffffff)
              qj = Math.min((qj / bhi) | 0, 0x3ffffff);

              a._ishlnsubmul(b, qj, j);
              while (a.negative !== 0) {
                qj--;
                a.negative = 0;
                a._ishlnsubmul(b, 1, j);
                if (!a.isZero()) {
                  a.negative ^= 1;
                }
              }
              if (q) {
                q.words[j] = qj;
              }
            }
            if (q) {
              q.strip();
            }
            a.strip();

            // Denormalize
            if (mode !== 'div' && shift !== 0) {
              a.iushrn(shift);
            }

            return {
              div: q || null,
              mod: a
            };
          };

          // NOTE: 1) `mode` can be set to `mod` to request mod only,
          //       to `div` to request div only, or be absent to
          //       request both div & mod
          //       2) `positive` is true if unsigned mod is requested
          BN.prototype.divmod = function divmod(num, mode, positive) {
            assert(!num.isZero());

            if (this.isZero()) {
              return {
                div: new BN(0),
                mod: new BN(0)
              };
            }

            var div, mod, res;
            if (this.negative !== 0 && num.negative === 0) {
              res = this.neg().divmod(num, mode);

              if (mode !== 'mod') {
                div = res.div.neg();
              }

              if (mode !== 'div') {
                mod = res.mod.neg();
                if (positive && mod.negative !== 0) {
                  mod.iadd(num);
                }
              }

              return {
                div: div,
                mod: mod
              };
            }

            if (this.negative === 0 && num.negative !== 0) {
              res = this.divmod(num.neg(), mode);

              if (mode !== 'mod') {
                div = res.div.neg();
              }

              return {
                div: div,
                mod: res.mod
              };
            }

            if ((this.negative & num.negative) !== 0) {
              res = this.neg().divmod(num.neg(), mode);

              if (mode !== 'div') {
                mod = res.mod.neg();
                if (positive && mod.negative !== 0) {
                  mod.isub(num);
                }
              }

              return {
                div: res.div,
                mod: mod
              };
            }

            // Both numbers are positive at this point

            // Strip both numbers to approximate shift value
            if (num.length > this.length || this.cmp(num) < 0) {
              return {
                div: new BN(0),
                mod: this
              };
            }

            // Very short reduction
            if (num.length === 1) {
              if (mode === 'div') {
                return {
                  div: this.divn(num.words[0]),
                  mod: null
                };
              }

              if (mode === 'mod') {
                return {
                  div: null,
                  mod: new BN(this.modn(num.words[0]))
                };
              }

              return {
                div: this.divn(num.words[0]),
                mod: new BN(this.modn(num.words[0]))
              };
            }

            return this._wordDiv(num, mode);
          };

          // Find `this` / `num`
          BN.prototype.div = function div(num) {
            return this.divmod(num, 'div', false).div;
          };

          // Find `this` % `num`
          BN.prototype.mod = function mod(num) {
            return this.divmod(num, 'mod', false).mod;
          };

          BN.prototype.umod = function umod(num) {
            return this.divmod(num, 'mod', true).mod;
          };

          // Find Round(`this` / `num`)
          BN.prototype.divRound = function divRound(num) {
            var dm = this.divmod(num);

            // Fast case - exact division
            if (dm.mod.isZero()) return dm.div;

            var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;

            var half = num.ushrn(1);
            var r2 = num.andln(1);
            var cmp = mod.cmp(half);

            // Round down
            if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;

            // Round up
            return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
          };

          BN.prototype.modn = function modn(num) {
            assert(num <= 0x3ffffff);
            var p = (1 << 26) % num;

            var acc = 0;
            for (var i = this.length - 1; i >= 0; i--) {
              acc = (p * acc + (this.words[i] | 0)) % num;
            }

            return acc;
          };

          // In-place division by number
          BN.prototype.idivn = function idivn(num) {
            assert(num <= 0x3ffffff);

            var carry = 0;
            for (var i = this.length - 1; i >= 0; i--) {
              var w = (this.words[i] | 0) + carry * 0x4000000;
              this.words[i] = (w / num) | 0;
              carry = w % num;
            }

            return this.strip();
          };

          BN.prototype.divn = function divn(num) {
            return this.clone().idivn(num);
          };

          BN.prototype.egcd = function egcd(p) {
            assert(p.negative === 0);
            assert(!p.isZero());

            var x = this;
            var y = p.clone();

            if (x.negative !== 0) {
              x = x.umod(p);
            } else {
              x = x.clone();
            }

            // A * x + B * y = x
            var A = new BN(1);
            var B = new BN(0);

            // C * x + D * y = y
            var C = new BN(0);
            var D = new BN(1);

            var g = 0;

            while (x.isEven() && y.isEven()) {
              x.iushrn(1);
              y.iushrn(1);
              ++g;
            }

            var yp = y.clone();
            var xp = x.clone();

            while (!x.isZero()) {
              for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
              if (i > 0) {
                x.iushrn(i);
                while (i-- > 0) {
                  if (A.isOdd() || B.isOdd()) {
                    A.iadd(yp);
                    B.isub(xp);
                  }

                  A.iushrn(1);
                  B.iushrn(1);
                }
              }

              for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
              if (j > 0) {
                y.iushrn(j);
                while (j-- > 0) {
                  if (C.isOdd() || D.isOdd()) {
                    C.iadd(yp);
                    D.isub(xp);
                  }

                  C.iushrn(1);
                  D.iushrn(1);
                }
              }

              if (x.cmp(y) >= 0) {
                x.isub(y);
                A.isub(C);
                B.isub(D);
              } else {
                y.isub(x);
                C.isub(A);
                D.isub(B);
              }
            }

            return {
              a: C,
              b: D,
              gcd: y.iushln(g)
            };
          };

          // This is reduced incarnation of the binary EEA
          // above, designated to invert members of the
          // _prime_ fields F(p) at a maximal speed
          BN.prototype._invmp = function _invmp(p) {
            assert(p.negative === 0);
            assert(!p.isZero());

            var a = this;
            var b = p.clone();

            if (a.negative !== 0) {
              a = a.umod(p);
            } else {
              a = a.clone();
            }

            var x1 = new BN(1);
            var x2 = new BN(0);

            var delta = b.clone();

            while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
              for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
              if (i > 0) {
                a.iushrn(i);
                while (i-- > 0) {
                  if (x1.isOdd()) {
                    x1.iadd(delta);
                  }

                  x1.iushrn(1);
                }
              }

              for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
              if (j > 0) {
                b.iushrn(j);
                while (j-- > 0) {
                  if (x2.isOdd()) {
                    x2.iadd(delta);
                  }

                  x2.iushrn(1);
                }
              }

              if (a.cmp(b) >= 0) {
                a.isub(b);
                x1.isub(x2);
              } else {
                b.isub(a);
                x2.isub(x1);
              }
            }

            var res;
            if (a.cmpn(1) === 0) {
              res = x1;
            } else {
              res = x2;
            }

            if (res.cmpn(0) < 0) {
              res.iadd(p);
            }

            return res;
          };

          BN.prototype.gcd = function gcd(num) {
            if (this.isZero()) return num.abs();
            if (num.isZero()) return this.abs();

            var a = this.clone();
            var b = num.clone();
            a.negative = 0;
            b.negative = 0;

            // Remove common factor of two
            for (var shift = 0; a.isEven() && b.isEven(); shift++) {
              a.iushrn(1);
              b.iushrn(1);
            }

            do {
              while (a.isEven()) {
                a.iushrn(1);
              }
              while (b.isEven()) {
                b.iushrn(1);
              }

              var r = a.cmp(b);
              if (r < 0) {
                // Swap `a` and `b` to make `a` always bigger than `b`
                var t = a;
                a = b;
                b = t;
              } else if (r === 0 || b.cmpn(1) === 0) {
                break;
              }

              a.isub(b);
            } while (true);

            return b.iushln(shift);
          };

          // Invert number in the field F(num)
          BN.prototype.invm = function invm(num) {
            return this.egcd(num).a.umod(num);
          };

          BN.prototype.isEven = function isEven() {
            return (this.words[0] & 1) === 0;
          };

          BN.prototype.isOdd = function isOdd() {
            return (this.words[0] & 1) === 1;
          };

          // And first word and num
          BN.prototype.andln = function andln(num) {
            return this.words[0] & num;
          };

          // Increment at the bit position in-line
          BN.prototype.bincn = function bincn(bit) {
            assert(typeof bit === 'number');
            var r = bit % 26;
            var s = (bit - r) / 26;
            var q = 1 << r;

            // Fast case: bit is much higher than all existing words
            if (this.length <= s) {
              this._expand(s + 1);
              this.words[s] |= q;
              return this;
            }

            // Add bit and propagate, if needed
            var carry = q;
            for (var i = s; carry !== 0 && i < this.length; i++) {
              var w = this.words[i] | 0;
              w += carry;
              carry = w >>> 26;
              w &= 0x3ffffff;
              this.words[i] = w;
            }
            if (carry !== 0) {
              this.words[i] = carry;
              this.length++;
            }
            return this;
          };

          BN.prototype.isZero = function isZero() {
            return this.length === 1 && this.words[0] === 0;
          };

          BN.prototype.cmpn = function cmpn(num) {
            var negative = num < 0;

            if (this.negative !== 0 && !negative) return -1;
            if (this.negative === 0 && negative) return 1;

            this.strip();

            var res;
            if (this.length > 1) {
              res = 1;
            } else {
              if (negative) {
                num = -num;
              }

              assert(num <= 0x3ffffff, 'Number is too big');

              var w = this.words[0] | 0;
              res = w === num ? 0 : w < num ? -1 : 1;
            }
            if (this.negative !== 0) return -res | 0;
            return res;
          };

          // Compare two numbers and return:
          // 1 - if `this` > `num`
          // 0 - if `this` == `num`
          // -1 - if `this` < `num`
          BN.prototype.cmp = function cmp(num) {
            if (this.negative !== 0 && num.negative === 0) return -1;
            if (this.negative === 0 && num.negative !== 0) return 1;

            var res = this.ucmp(num);
            if (this.negative !== 0) return -res | 0;
            return res;
          };

          // Unsigned comparison
          BN.prototype.ucmp = function ucmp(num) {
            // At this point both numbers have the same sign
            if (this.length > num.length) return 1;
            if (this.length < num.length) return -1;

            var res = 0;
            for (var i = this.length - 1; i >= 0; i--) {
              var a = this.words[i] | 0;
              var b = num.words[i] | 0;

              if (a === b) continue;
              if (a < b) {
                res = -1;
              } else if (a > b) {
                res = 1;
              }
              break;
            }
            return res;
          };

          BN.prototype.gtn = function gtn(num) {
            return this.cmpn(num) === 1;
          };

          BN.prototype.gt = function gt(num) {
            return this.cmp(num) === 1;
          };

          BN.prototype.gten = function gten(num) {
            return this.cmpn(num) >= 0;
          };

          BN.prototype.gte = function gte(num) {
            return this.cmp(num) >= 0;
          };

          BN.prototype.ltn = function ltn(num) {
            return this.cmpn(num) === -1;
          };

          BN.prototype.lt = function lt(num) {
            return this.cmp(num) === -1;
          };

          BN.prototype.lten = function lten(num) {
            return this.cmpn(num) <= 0;
          };

          BN.prototype.lte = function lte(num) {
            return this.cmp(num) <= 0;
          };

          BN.prototype.eqn = function eqn(num) {
            return this.cmpn(num) === 0;
          };

          BN.prototype.eq = function eq(num) {
            return this.cmp(num) === 0;
          };

          //
          // A reduce context, could be using montgomery or something better, depending
          // on the `m` itself.
          //
          BN.red = function red(num) {
            return new Red(num);
          };

          BN.prototype.toRed = function toRed(ctx) {
            assert(!this.red, 'Already a number in reduction context');
            assert(this.negative === 0, 'red works only with positives');
            return ctx.convertTo(this)._forceRed(ctx);
          };

          BN.prototype.fromRed = function fromRed() {
            assert(this.red, 'fromRed works only with numbers in reduction context');
            return this.red.convertFrom(this);
          };

          BN.prototype._forceRed = function _forceRed(ctx) {
            this.red = ctx;
            return this;
          };

          BN.prototype.forceRed = function forceRed(ctx) {
            assert(!this.red, 'Already a number in reduction context');
            return this._forceRed(ctx);
          };

          BN.prototype.redAdd = function redAdd(num) {
            assert(this.red, 'redAdd works only with red numbers');
            return this.red.add(this, num);
          };

          BN.prototype.redIAdd = function redIAdd(num) {
            assert(this.red, 'redIAdd works only with red numbers');
            return this.red.iadd(this, num);
          };

          BN.prototype.redSub = function redSub(num) {
            assert(this.red, 'redSub works only with red numbers');
            return this.red.sub(this, num);
          };

          BN.prototype.redISub = function redISub(num) {
            assert(this.red, 'redISub works only with red numbers');
            return this.red.isub(this, num);
          };

          BN.prototype.redShl = function redShl(num) {
            assert(this.red, 'redShl works only with red numbers');
            return this.red.shl(this, num);
          };

          BN.prototype.redMul = function redMul(num) {
            assert(this.red, 'redMul works only with red numbers');
            this.red._verify2(this, num);
            return this.red.mul(this, num);
          };

          BN.prototype.redIMul = function redIMul(num) {
            assert(this.red, 'redMul works only with red numbers');
            this.red._verify2(this, num);
            return this.red.imul(this, num);
          };

          BN.prototype.redSqr = function redSqr() {
            assert(this.red, 'redSqr works only with red numbers');
            this.red._verify1(this);
            return this.red.sqr(this);
          };

          BN.prototype.redISqr = function redISqr() {
            assert(this.red, 'redISqr works only with red numbers');
            this.red._verify1(this);
            return this.red.isqr(this);
          };

          // Square root over p
          BN.prototype.redSqrt = function redSqrt() {
            assert(this.red, 'redSqrt works only with red numbers');
            this.red._verify1(this);
            return this.red.sqrt(this);
          };

          BN.prototype.redInvm = function redInvm() {
            assert(this.red, 'redInvm works only with red numbers');
            this.red._verify1(this);
            return this.red.invm(this);
          };

          // Return negative clone of `this` % `red modulo`
          BN.prototype.redNeg = function redNeg() {
            assert(this.red, 'redNeg works only with red numbers');
            this.red._verify1(this);
            return this.red.neg(this);
          };

          BN.prototype.redPow = function redPow(num) {
            assert(this.red && !num.red, 'redPow(normalNum)');
            this.red._verify1(this);
            return this.red.pow(this, num);
          };

          // Prime numbers with efficient reduction
          var primes = {
            k256: null,
            p224: null,
            p192: null,
            p25519: null
          };

          // Pseudo-Mersenne prime
          function MPrime(name, p) {
            // P = 2 ^ N - K
            this.name = name;
            this.p = new BN(p, 16);
            this.n = this.p.bitLength();
            this.k = new BN(1).iushln(this.n).isub(this.p);

            this.tmp = this._tmp();
          }

          MPrime.prototype._tmp = function _tmp() {
            var tmp = new BN(null);
            tmp.words = new Array(Math.ceil(this.n / 13));
            return tmp;
          };

          MPrime.prototype.ireduce = function ireduce(num) {
            // Assumes that `num` is less than `P^2`
            // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
            var r = num;
            var rlen;

            do {
              this.split(r, this.tmp);
              r = this.imulK(r);
              r = r.iadd(this.tmp);
              rlen = r.bitLength();
            } while (rlen > this.n);

            var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
            if (cmp === 0) {
              r.words[0] = 0;
              r.length = 1;
            } else if (cmp > 0) {
              r.isub(this.p);
            } else {
              r.strip();
            }

            return r;
          };

          MPrime.prototype.split = function split(input, out) {
            input.iushrn(this.n, 0, out);
          };

          MPrime.prototype.imulK = function imulK(num) {
            return num.imul(this.k);
          };

          function K256() {
            MPrime.call(
              this,
              'k256',
              'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
          }
          inherits(K256, MPrime);

          K256.prototype.split = function split(input, output) {
            // 256 = 9 * 26 + 22
            var mask = 0x3fffff;

            var outLen = Math.min(input.length, 9);
            for (var i = 0; i < outLen; i++) {
              output.words[i] = input.words[i];
            }
            output.length = outLen;

            if (input.length <= 9) {
              input.words[0] = 0;
              input.length = 1;
              return;
            }

            // Shift by 9 limbs
            var prev = input.words[9];
            output.words[output.length++] = prev & mask;

            for (i = 10; i < input.length; i++) {
              var next = input.words[i] | 0;
              input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);
              prev = next;
            }
            prev >>>= 22;
            input.words[i - 10] = prev;
            if (prev === 0 && input.length > 10) {
              input.length -= 10;
            } else {
              input.length -= 9;
            }
          };

          K256.prototype.imulK = function imulK(num) {
            // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
            num.words[num.length] = 0;
            num.words[num.length + 1] = 0;
            num.length += 2;

            // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
            var lo = 0;
            for (var i = 0; i < num.length; i++) {
              var w = num.words[i] | 0;
              lo += w * 0x3d1;
              num.words[i] = lo & 0x3ffffff;
              lo = w * 0x40 + ((lo / 0x4000000) | 0);
            }

            // Fast length reduction
            if (num.words[num.length - 1] === 0) {
              num.length--;
              if (num.words[num.length - 1] === 0) {
                num.length--;
              }
            }
            return num;
          };

          function P224() {
            MPrime.call(
              this,
              'p224',
              'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
          }
          inherits(P224, MPrime);

          function P192() {
            MPrime.call(
              this,
              'p192',
              'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
          }
          inherits(P192, MPrime);

          function P25519() {
            // 2 ^ 255 - 19
            MPrime.call(
              this,
              '25519',
              '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
          }
          inherits(P25519, MPrime);

          P25519.prototype.imulK = function imulK(num) {
            // K = 0x13
            var carry = 0;
            for (var i = 0; i < num.length; i++) {
              var hi = (num.words[i] | 0) * 0x13 + carry;
              var lo = hi & 0x3ffffff;
              hi >>>= 26;

              num.words[i] = lo;
              carry = hi;
            }
            if (carry !== 0) {
              num.words[num.length++] = carry;
            }
            return num;
          };

          // Exported mostly for testing purposes, use plain name instead
          BN._prime = function prime(name) {
            // Cached version of prime
            if (primes[name]) return primes[name];

            var prime;
            if (name === 'k256') {
              prime = new K256();
            } else if (name === 'p224') {
              prime = new P224();
            } else if (name === 'p192') {
              prime = new P192();
            } else if (name === 'p25519') {
              prime = new P25519();
            } else {
              throw new Error('Unknown prime ' + name);
            }
            primes[name] = prime;

            return prime;
          };

          //
          // Base reduction engine
          //
          function Red(m) {
            if (typeof m === 'string') {
              var prime = BN._prime(m);
              this.m = prime.p;
              this.prime = prime;
            } else {
              assert(m.gtn(1), 'modulus must be greater than 1');
              this.m = m;
              this.prime = null;
            }
          }

          Red.prototype._verify1 = function _verify1(a) {
            assert(a.negative === 0, 'red works only with positives');
            assert(a.red, 'red works only with red numbers');
          };

          Red.prototype._verify2 = function _verify2(a, b) {
            assert((a.negative | b.negative) === 0, 'red works only with positives');
            assert(a.red && a.red === b.red,
              'red works only with red numbers');
          };

          Red.prototype.imod = function imod(a) {
            if (this.prime) return this.prime.ireduce(a)._forceRed(this);
            return a.umod(this.m)._forceRed(this);
          };

          Red.prototype.neg = function neg(a) {
            if (a.isZero()) {
              return a.clone();
            }

            return this.m.sub(a)._forceRed(this);
          };

          Red.prototype.add = function add(a, b) {
            this._verify2(a, b);

            var res = a.add(b);
            if (res.cmp(this.m) >= 0) {
              res.isub(this.m);
            }
            return res._forceRed(this);
          };

          Red.prototype.iadd = function iadd(a, b) {
            this._verify2(a, b);

            var res = a.iadd(b);
            if (res.cmp(this.m) >= 0) {
              res.isub(this.m);
            }
            return res;
          };

          Red.prototype.sub = function sub(a, b) {
            this._verify2(a, b);

            var res = a.sub(b);
            if (res.cmpn(0) < 0) {
              res.iadd(this.m);
            }
            return res._forceRed(this);
          };

          Red.prototype.isub = function isub(a, b) {
            this._verify2(a, b);

            var res = a.isub(b);
            if (res.cmpn(0) < 0) {
              res.iadd(this.m);
            }
            return res;
          };

          Red.prototype.shl = function shl(a, num) {
            this._verify1(a);
            return this.imod(a.ushln(num));
          };

          Red.prototype.imul = function imul(a, b) {
            this._verify2(a, b);
            return this.imod(a.imul(b));
          };

          Red.prototype.mul = function mul(a, b) {
            this._verify2(a, b);
            return this.imod(a.mul(b));
          };

          Red.prototype.isqr = function isqr(a) {
            return this.imul(a, a.clone());
          };

          Red.prototype.sqr = function sqr(a) {
            return this.mul(a, a);
          };

          Red.prototype.sqrt = function sqrt(a) {
            if (a.isZero()) return a.clone();

            var mod3 = this.m.andln(3);
            assert(mod3 % 2 === 1);

            // Fast case
            if (mod3 === 3) {
              var pow = this.m.add(new BN(1)).iushrn(2);
              return this.pow(a, pow);
            }

            // Tonelli-Shanks algorithm (Totally unoptimized and slow)
            //
            // Find Q and S, that Q * 2 ^ S = (P - 1)
            var q = this.m.subn(1);
            var s = 0;
            while (!q.isZero() && q.andln(1) === 0) {
              s++;
              q.iushrn(1);
            }
            assert(!q.isZero());

            var one = new BN(1).toRed(this);
            var nOne = one.redNeg();

            // Find quadratic non-residue
            // NOTE: Max is such because of generalized Riemann hypothesis.
            var lpow = this.m.subn(1).iushrn(1);
            var z = this.m.bitLength();
            z = new BN(2 * z * z).toRed(this);

            while (this.pow(z, lpow).cmp(nOne) !== 0) {
              z.redIAdd(nOne);
            }

            var c = this.pow(z, q);
            var r = this.pow(a, q.addn(1).iushrn(1));
            var t = this.pow(a, q);
            var m = s;
            while (t.cmp(one) !== 0) {
              var tmp = t;
              for (var i = 0; tmp.cmp(one) !== 0; i++) {
                tmp = tmp.redSqr();
              }
              assert(i < m);
              var b = this.pow(c, new BN(1).iushln(m - i - 1));

              r = r.redMul(b);
              c = b.redSqr();
              t = t.redMul(c);
              m = i;
            }

            return r;
          };

          Red.prototype.invm = function invm(a) {
            var inv = a._invmp(this.m);
            if (inv.negative !== 0) {
              inv.negative = 0;
              return this.imod(inv).redNeg();
            } else {
              return this.imod(inv);
            }
          };

          Red.prototype.pow = function pow(a, num) {
            if (num.isZero()) return new BN(1);
            if (num.cmpn(1) === 0) return a.clone();

            var windowSize = 4;
            var wnd = new Array(1 << windowSize);
            wnd[0] = new BN(1).toRed(this);
            wnd[1] = a;
            for (var i = 2; i < wnd.length; i++) {
              wnd[i] = this.mul(wnd[i - 1], a);
            }

            var res = wnd[0];
            var current = 0;
            var currentLen = 0;
            var start = num.bitLength() % 26;
            if (start === 0) {
              start = 26;
            }

            for (i = num.length - 1; i >= 0; i--) {
              var word = num.words[i];
              for (var j = start - 1; j >= 0; j--) {
                var bit = (word >> j) & 1;
                if (res !== wnd[0]) {
                  res = this.sqr(res);
                }

                if (bit === 0 && current === 0) {
                  currentLen = 0;
                  continue;
                }

                current <<= 1;
                current |= bit;
                currentLen++;
                if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;

                res = this.mul(res, wnd[current]);
                currentLen = 0;
                current = 0;
              }
              start = 26;
            }

            return res;
          };

          Red.prototype.convertTo = function convertTo(num) {
            var r = num.umod(this.m);

            return r === num ? r.clone() : r;
          };

          Red.prototype.convertFrom = function convertFrom(num) {
            var res = num.clone();
            res.red = null;
            return res;
          };

          //
          // Montgomery method engine
          //

          BN.mont = function mont(num) {
            return new Mont(num);
          };

          function Mont(m) {
            Red.call(this, m);

            this.shift = this.m.bitLength();
            if (this.shift % 26 !== 0) {
              this.shift += 26 - (this.shift % 26);
            }

            this.r = new BN(1).iushln(this.shift);
            this.r2 = this.imod(this.r.sqr());
            this.rinv = this.r._invmp(this.m);

            this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
            this.minv = this.minv.umod(this.r);
            this.minv = this.r.sub(this.minv);
          }
          inherits(Mont, Red);

          Mont.prototype.convertTo = function convertTo(num) {
            return this.imod(num.ushln(this.shift));
          };

          Mont.prototype.convertFrom = function convertFrom(num) {
            var r = this.imod(num.mul(this.rinv));
            r.red = null;
            return r;
          };

          Mont.prototype.imul = function imul(a, b) {
            if (a.isZero() || b.isZero()) {
              a.words[0] = 0;
              a.length = 1;
              return a;
            }

            var t = a.imul(b);
            var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
            var u = t.isub(c).iushrn(this.shift);
            var res = u;

            if (u.cmp(this.m) >= 0) {
              res = u.isub(this.m);
            } else if (u.cmpn(0) < 0) {
              res = u.iadd(this.m);
            }

            return res._forceRed(this);
          };

          Mont.prototype.mul = function mul(a, b) {
            if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);

            var t = a.mul(b);
            var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
            var u = t.isub(c).iushrn(this.shift);
            var res = u;
            if (u.cmp(this.m) >= 0) {
              res = u.isub(this.m);
            } else if (u.cmpn(0) < 0) {
              res = u.iadd(this.m);
            }

            return res._forceRed(this);
          };

          Mont.prototype.invm = function invm(a) {
            // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
            var res = this.imod(a._invmp(this.m).mul(this.r2));
            return res._forceRed(this);
          };
        })(typeof module === 'undefined' || module, this);

        /* WEBPACK VAR INJECTION */
      }.call(this, __webpack_require__(/*! ./../../../../../../../../AppData/Roaming/npm/node_modules/webpack/buildin/module.js */ "../../../../../AppData/Roaming/npm/node_modules/webpack/buildin/module.js")(module)))

      /***/
    }),

/***/ "../number-to-bn/src/index.js":
/*!************************************!*\
  !*** ../number-to-bn/src/index.js ***!
  \************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

      var BN = __webpack_require__(/*! bn.js */ "../number-to-bn/node_modules/bn.js/lib/bn.js");
      var stripHexPrefix = __webpack_require__(/*! strip-hex-prefix */ "../strip-hex-prefix/src/index.js");

      /**
       * Returns a BN object, converts a number value to a BN
       * @param {String|Number|Object} `arg` input a string number, hex string number, number, BigNumber or BN object
       * @return {Object} `output` BN object of the number
       * @throws if the argument is not an array, object that isn't a bignumber, not a string number or number
       */
      module.exports = function numberToBN(arg) {
        if (typeof arg === 'string' || typeof arg === 'number') {
          var multiplier = new BN(1); // eslint-disable-line
          var formattedString = String(arg).toLowerCase().trim();
          var isHexPrefixed = formattedString.substr(0, 2) === '0x' || formattedString.substr(0, 3) === '-0x';
          var stringArg = stripHexPrefix(formattedString); // eslint-disable-line
          if (stringArg.substr(0, 1) === '-') {
            stringArg = stripHexPrefix(stringArg.slice(1));
            multiplier = new BN(-1, 10);
          }
          stringArg = stringArg === '' ? '0' : stringArg;

          if ((!stringArg.match(/^-?[0-9]+$/) && stringArg.match(/^[0-9A-Fa-f]+$/))
            || stringArg.match(/^[a-fA-F]+$/)
            || (isHexPrefixed === true && stringArg.match(/^[0-9A-Fa-f]+$/))) {
            return new BN(stringArg, 16).mul(multiplier);
          }

          if ((stringArg.match(/^-?[0-9]+$/) || stringArg === '') && isHexPrefixed === false) {
            return new BN(stringArg, 10).mul(multiplier);
          }
        } else if (typeof arg === 'object' && arg.toString && (!arg.pop && !arg.push)) {
          if (arg.toString(10).match(/^-?[0-9]+$/) && (arg.mul || arg.dividedToIntegerBy)) {
            return new BN(arg.toString(10), 10);
          }
        }

        throw new Error('[number-to-bn] while converting number ' + JSON.stringify(arg) + ' to BN.js instance, error: invalid number value. Value must be an integer, hex string, BN or BigNumber instance. Note, decimals are not supported.');
      }


      /***/
    }),

/***/ "../randomhex/src/browser.js":
/*!***********************************!*\
  !*** ../randomhex/src/browser.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function (module, exports) {

      module.exports = window.crypto;

      /***/
    }),

/***/ "../randomhex/src/crypto.js":
/*!**********************************!*\
  !*** ../randomhex/src/crypto.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

      module.exports = __webpack_require__(/*! crypto */ "../randomhex/src/browser.js");

      /***/
    }),

/***/ "../randomhex/src/index.js":
/*!*********************************!*\
  !*** ../randomhex/src/index.js ***!
  \*********************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

      var randomHex = function (size, callback) {
        var crypto = __webpack_require__(/*! ./crypto.js */ "../randomhex/src/crypto.js");
        var isCallback = (typeof callback === 'function');


        if (size > 65536) {
          if (isCallback) {
            callback(new Error('Requested too many random bytes.'));
          } else {
            throw new Error('Requested too many random bytes.');
          }
        };


        // is node
        if (typeof crypto !== 'undefined' && crypto.randomBytes) {

          if (isCallback) {
            crypto.randomBytes(size, function (err, result) {
              if (!err) {
                callback(null, '0x' + result.toString('hex'));
              } else {
                callback(error);
              }
            })
          } else {
            return '0x' + crypto.randomBytes(size).toString('hex');
          }

          // is browser
        } else {
          var cryptoLib;

          if (typeof crypto !== 'undefined') {
            cryptoLib = crypto;
          } else if (typeof msCrypto !== 'undefined') {
            cryptoLib = msCrypto;
          }

          if (cryptoLib && cryptoLib.getRandomValues) {
            var randomBytes = cryptoLib.getRandomValues(new Uint8Array(size));
            var returnValue = '0x' + Array.from(randomBytes).map(function (arr) { return arr.toString(16); }).join('');

            if (isCallback) {
              callback(null, returnValue);
            } else {
              return returnValue;
            }

            // not crypto object
          } else {
            var error = new Error('No "crypto" object available. This Browser doesn\'t support generating secure random bytes.');

            if (isCallback) {
              callback(error);
            } else {
              throw error;
            }
          }
        }
      };


      module.exports = randomHex;


      /***/
    }),

/***/ "../safe-buffer/index.js":
/*!*******************************!*\
  !*** ../safe-buffer/index.js ***!
  \*******************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

      /* eslint-disable node/no-deprecated-api */
      var buffer = __webpack_require__(/*! buffer */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/buffer/index.js")
      var Buffer = buffer.Buffer

      // alternative to using Object.keys for old browsers
      function copyProps(src, dst) {
        for (var key in src) {
          dst[key] = src[key]
        }
      }
      if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
        module.exports = buffer
      } else {
        // Copy properties from require('buffer')
        copyProps(buffer, exports)
        exports.Buffer = SafeBuffer
      }

      function SafeBuffer(arg, encodingOrOffset, length) {
        return Buffer(arg, encodingOrOffset, length)
      }

      // Copy static methods from Buffer
      copyProps(Buffer, SafeBuffer)

      SafeBuffer.from = function (arg, encodingOrOffset, length) {
        if (typeof arg === 'number') {
          throw new TypeError('Argument must not be a number')
        }
        return Buffer(arg, encodingOrOffset, length)
      }

      SafeBuffer.alloc = function (size, fill, encoding) {
        if (typeof size !== 'number') {
          throw new TypeError('Argument must be a number')
        }
        var buf = Buffer(size)
        if (fill !== undefined) {
          if (typeof encoding === 'string') {
            buf.fill(fill, encoding)
          } else {
            buf.fill(fill)
          }
        } else {
          buf.fill(0)
        }
        return buf
      }

      SafeBuffer.allocUnsafe = function (size) {
        if (typeof size !== 'number') {
          throw new TypeError('Argument must be a number')
        }
        return Buffer(size)
      }

      SafeBuffer.allocUnsafeSlow = function (size) {
        if (typeof size !== 'number') {
          throw new TypeError('Argument must be a number')
        }
        return buffer.SlowBuffer(size)
      }


      /***/
    }),

/***/ "../strip-hex-prefix/src/index.js":
/*!****************************************!*\
  !*** ../strip-hex-prefix/src/index.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

      var isHexPrefixed = __webpack_require__(/*! is-hex-prefixed */ "../is-hex-prefixed/src/index.js");

      /**
       * Removes '0x' from a given `String` is present
       * @param {String} str the string value
       * @return {String|Optional} a string by pass if necessary
       */
      module.exports = function stripHexPrefix(str) {
        if (typeof str !== 'string') {
          return str;
        }

        return isHexPrefixed(str) ? str.slice(2) : str;
      }


      /***/
    }),

/***/ "../underscore/underscore.js":
/*!***********************************!*\
  !*** ../underscore/underscore.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

      var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;//     Underscore.js 1.8.3
      //     http://underscorejs.org
      //     (c) 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
      //     Underscore may be freely distributed under the MIT license.

      (function () {

        // Baseline setup
        // --------------

        // Establish the root object, `window` in the browser, or `exports` on the server.
        var root = this;

        // Save the previous value of the `_` variable.
        var previousUnderscore = root._;

        // Save bytes in the minified (but not gzipped) version:
        var ArrayProto = Array.prototype, ObjProto = Object.prototype, FuncProto = Function.prototype;

        // Create quick reference variables for speed access to core prototypes.
        var
          push = ArrayProto.push,
          slice = ArrayProto.slice,
          toString = ObjProto.toString,
          hasOwnProperty = ObjProto.hasOwnProperty;

        // All **ECMAScript 5** native function implementations that we hope to use
        // are declared here.
        var
          nativeIsArray = Array.isArray,
          nativeKeys = Object.keys,
          nativeBind = FuncProto.bind,
          nativeCreate = Object.create;

        // Naked function reference for surrogate-prototype-swapping.
        var Ctor = function () { };

        // Create a safe reference to the Underscore object for use below.
        var _ = function (obj) {
          if (obj instanceof _) return obj;
          if (!(this instanceof _)) return new _(obj);
          this._wrapped = obj;
        };

        // Export the Underscore object for **Node.js**, with
        // backwards-compatibility for the old `require()` API. If we're in
        // the browser, add `_` as a global object.
        if (true) {
          if (typeof module !== 'undefined' && module.exports) {
            exports = module.exports = _;
          }
          exports._ = _;
        } else { }

        // Current version.
        _.VERSION = '1.8.3';

        // Internal function that returns an efficient (for current engines) version
        // of the passed-in callback, to be repeatedly applied in other Underscore
        // functions.
        var optimizeCb = function (func, context, argCount) {
          if (context === void 0) return func;
          switch (argCount == null ? 3 : argCount) {
            case 1: return function (value) {
              return func.call(context, value);
            };
            case 2: return function (value, other) {
              return func.call(context, value, other);
            };
            case 3: return function (value, index, collection) {
              return func.call(context, value, index, collection);
            };
            case 4: return function (accumulator, value, index, collection) {
              return func.call(context, accumulator, value, index, collection);
            };
          }
          return function () {
            return func.apply(context, arguments);
          };
        };

        // A mostly-internal function to generate callbacks that can be applied
        // to each element in a collection, returning the desired result — either
        // identity, an arbitrary callback, a property matcher, or a property accessor.
        var cb = function (value, context, argCount) {
          if (value == null) return _.identity;
          if (_.isFunction(value)) return optimizeCb(value, context, argCount);
          if (_.isObject(value)) return _.matcher(value);
          return _.property(value);
        };
        _.iteratee = function (value, context) {
          return cb(value, context, Infinity);
        };

        // An internal function for creating assigner functions.
        var createAssigner = function (keysFunc, undefinedOnly) {
          return function (obj) {
            var length = arguments.length;
            if (length < 2 || obj == null) return obj;
            for (var index = 1; index < length; index++) {
              var source = arguments[index],
                keys = keysFunc(source),
                l = keys.length;
              for (var i = 0; i < l; i++) {
                var key = keys[i];
                if (!undefinedOnly || obj[key] === void 0) obj[key] = source[key];
              }
            }
            return obj;
          };
        };

        // An internal function for creating a new object that inherits from another.
        var baseCreate = function (prototype) {
          if (!_.isObject(prototype)) return {};
          if (nativeCreate) return nativeCreate(prototype);
          Ctor.prototype = prototype;
          var result = new Ctor;
          Ctor.prototype = null;
          return result;
        };

        var property = function (key) {
          return function (obj) {
            return obj == null ? void 0 : obj[key];
          };
        };

        // Helper for collection methods to determine whether a collection
        // should be iterated as an array or as an object
        // Related: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength
        // Avoids a very nasty iOS 8 JIT bug on ARM-64. #2094
        var MAX_ARRAY_INDEX = Math.pow(2, 53) - 1;
        var getLength = property('length');
        var isArrayLike = function (collection) {
          var length = getLength(collection);
          return typeof length == 'number' && length >= 0 && length <= MAX_ARRAY_INDEX;
        };

        // Collection Functions
        // --------------------

        // The cornerstone, an `each` implementation, aka `forEach`.
        // Handles raw objects in addition to array-likes. Treats all
        // sparse array-likes as if they were dense.
        _.each = _.forEach = function (obj, iteratee, context) {
          iteratee = optimizeCb(iteratee, context);
          var i, length;
          if (isArrayLike(obj)) {
            for (i = 0, length = obj.length; i < length; i++) {
              iteratee(obj[i], i, obj);
            }
          } else {
            var keys = _.keys(obj);
            for (i = 0, length = keys.length; i < length; i++) {
              iteratee(obj[keys[i]], keys[i], obj);
            }
          }
          return obj;
        };

        // Return the results of applying the iteratee to each element.
        _.map = _.collect = function (obj, iteratee, context) {
          iteratee = cb(iteratee, context);
          var keys = !isArrayLike(obj) && _.keys(obj),
            length = (keys || obj).length,
            results = Array(length);
          for (var index = 0; index < length; index++) {
            var currentKey = keys ? keys[index] : index;
            results[index] = iteratee(obj[currentKey], currentKey, obj);
          }
          return results;
        };

        // Create a reducing function iterating left or right.
        function createReduce(dir) {
          // Optimized iterator function as using arguments.length
          // in the main function will deoptimize the, see #1991.
          function iterator(obj, iteratee, memo, keys, index, length) {
            for (; index >= 0 && index < length; index += dir) {
              var currentKey = keys ? keys[index] : index;
              memo = iteratee(memo, obj[currentKey], currentKey, obj);
            }
            return memo;
          }

          return function (obj, iteratee, memo, context) {
            iteratee = optimizeCb(iteratee, context, 4);
            var keys = !isArrayLike(obj) && _.keys(obj),
              length = (keys || obj).length,
              index = dir > 0 ? 0 : length - 1;
            // Determine the initial value if none is provided.
            if (arguments.length < 3) {
              memo = obj[keys ? keys[index] : index];
              index += dir;
            }
            return iterator(obj, iteratee, memo, keys, index, length);
          };
        }

        // **Reduce** builds up a single result from a list of values, aka `inject`,
        // or `foldl`.
        _.reduce = _.foldl = _.inject = createReduce(1);

        // The right-associative version of reduce, also known as `foldr`.
        _.reduceRight = _.foldr = createReduce(-1);

        // Return the first value which passes a truth test. Aliased as `detect`.
        _.find = _.detect = function (obj, predicate, context) {
          var key;
          if (isArrayLike(obj)) {
            key = _.findIndex(obj, predicate, context);
          } else {
            key = _.findKey(obj, predicate, context);
          }
          if (key !== void 0 && key !== -1) return obj[key];
        };

        // Return all the elements that pass a truth test.
        // Aliased as `select`.
        _.filter = _.select = function (obj, predicate, context) {
          var results = [];
          predicate = cb(predicate, context);
          _.each(obj, function (value, index, list) {
            if (predicate(value, index, list)) results.push(value);
          });
          return results;
        };

        // Return all the elements for which a truth test fails.
        _.reject = function (obj, predicate, context) {
          return _.filter(obj, _.negate(cb(predicate)), context);
        };

        // Determine whether all of the elements match a truth test.
        // Aliased as `all`.
        _.every = _.all = function (obj, predicate, context) {
          predicate = cb(predicate, context);
          var keys = !isArrayLike(obj) && _.keys(obj),
            length = (keys || obj).length;
          for (var index = 0; index < length; index++) {
            var currentKey = keys ? keys[index] : index;
            if (!predicate(obj[currentKey], currentKey, obj)) return false;
          }
          return true;
        };

        // Determine if at least one element in the object matches a truth test.
        // Aliased as `any`.
        _.some = _.any = function (obj, predicate, context) {
          predicate = cb(predicate, context);
          var keys = !isArrayLike(obj) && _.keys(obj),
            length = (keys || obj).length;
          for (var index = 0; index < length; index++) {
            var currentKey = keys ? keys[index] : index;
            if (predicate(obj[currentKey], currentKey, obj)) return true;
          }
          return false;
        };

        // Determine if the array or object contains a given item (using `===`).
        // Aliased as `includes` and `include`.
        _.contains = _.includes = _.include = function (obj, item, fromIndex, guard) {
          if (!isArrayLike(obj)) obj = _.values(obj);
          if (typeof fromIndex != 'number' || guard) fromIndex = 0;
          return _.indexOf(obj, item, fromIndex) >= 0;
        };

        // Invoke a method (with arguments) on every item in a collection.
        _.invoke = function (obj, method) {
          var args = slice.call(arguments, 2);
          var isFunc = _.isFunction(method);
          return _.map(obj, function (value) {
            var func = isFunc ? method : value[method];
            return func == null ? func : func.apply(value, args);
          });
        };

        // Convenience version of a common use case of `map`: fetching a property.
        _.pluck = function (obj, key) {
          return _.map(obj, _.property(key));
        };

        // Convenience version of a common use case of `filter`: selecting only objects
        // containing specific `key:value` pairs.
        _.where = function (obj, attrs) {
          return _.filter(obj, _.matcher(attrs));
        };

        // Convenience version of a common use case of `find`: getting the first object
        // containing specific `key:value` pairs.
        _.findWhere = function (obj, attrs) {
          return _.find(obj, _.matcher(attrs));
        };

        // Return the maximum element (or element-based computation).
        _.max = function (obj, iteratee, context) {
          var result = -Infinity, lastComputed = -Infinity,
            value, computed;
          if (iteratee == null && obj != null) {
            obj = isArrayLike(obj) ? obj : _.values(obj);
            for (var i = 0, length = obj.length; i < length; i++) {
              value = obj[i];
              if (value > result) {
                result = value;
              }
            }
          } else {
            iteratee = cb(iteratee, context);
            _.each(obj, function (value, index, list) {
              computed = iteratee(value, index, list);
              if (computed > lastComputed || computed === -Infinity && result === -Infinity) {
                result = value;
                lastComputed = computed;
              }
            });
          }
          return result;
        };

        // Return the minimum element (or element-based computation).
        _.min = function (obj, iteratee, context) {
          var result = Infinity, lastComputed = Infinity,
            value, computed;
          if (iteratee == null && obj != null) {
            obj = isArrayLike(obj) ? obj : _.values(obj);
            for (var i = 0, length = obj.length; i < length; i++) {
              value = obj[i];
              if (value < result) {
                result = value;
              }
            }
          } else {
            iteratee = cb(iteratee, context);
            _.each(obj, function (value, index, list) {
              computed = iteratee(value, index, list);
              if (computed < lastComputed || computed === Infinity && result === Infinity) {
                result = value;
                lastComputed = computed;
              }
            });
          }
          return result;
        };

        // Shuffle a collection, using the modern version of the
        // [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher–Yates_shuffle).
        _.shuffle = function (obj) {
          var set = isArrayLike(obj) ? obj : _.values(obj);
          var length = set.length;
          var shuffled = Array(length);
          for (var index = 0, rand; index < length; index++) {
            rand = _.random(0, index);
            if (rand !== index) shuffled[index] = shuffled[rand];
            shuffled[rand] = set[index];
          }
          return shuffled;
        };

        // Sample **n** random values from a collection.
        // If **n** is not specified, returns a single random element.
        // The internal `guard` argument allows it to work with `map`.
        _.sample = function (obj, n, guard) {
          if (n == null || guard) {
            if (!isArrayLike(obj)) obj = _.values(obj);
            return obj[_.random(obj.length - 1)];
          }
          return _.shuffle(obj).slice(0, Math.max(0, n));
        };

        // Sort the object's values by a criterion produced by an iteratee.
        _.sortBy = function (obj, iteratee, context) {
          iteratee = cb(iteratee, context);
          return _.pluck(_.map(obj, function (value, index, list) {
            return {
              value: value,
              index: index,
              criteria: iteratee(value, index, list)
            };
          }).sort(function (left, right) {
            var a = left.criteria;
            var b = right.criteria;
            if (a !== b) {
              if (a > b || a === void 0) return 1;
              if (a < b || b === void 0) return -1;
            }
            return left.index - right.index;
          }), 'value');
        };

        // An internal function used for aggregate "group by" operations.
        var group = function (behavior) {
          return function (obj, iteratee, context) {
            var result = {};
            iteratee = cb(iteratee, context);
            _.each(obj, function (value, index) {
              var key = iteratee(value, index, obj);
              behavior(result, value, key);
            });
            return result;
          };
        };

        // Groups the object's values by a criterion. Pass either a string attribute
        // to group by, or a function that returns the criterion.
        _.groupBy = group(function (result, value, key) {
          if (_.has(result, key)) result[key].push(value); else result[key] = [value];
        });

        // Indexes the object's values by a criterion, similar to `groupBy`, but for
        // when you know that your index values will be unique.
        _.indexBy = group(function (result, value, key) {
          result[key] = value;
        });

        // Counts instances of an object that group by a certain criterion. Pass
        // either a string attribute to count by, or a function that returns the
        // criterion.
        _.countBy = group(function (result, value, key) {
          if (_.has(result, key)) result[key]++; else result[key] = 1;
        });

        // Safely create a real, live array from anything iterable.
        _.toArray = function (obj) {
          if (!obj) return [];
          if (_.isArray(obj)) return slice.call(obj);
          if (isArrayLike(obj)) return _.map(obj, _.identity);
          return _.values(obj);
        };

        // Return the number of elements in an object.
        _.size = function (obj) {
          if (obj == null) return 0;
          return isArrayLike(obj) ? obj.length : _.keys(obj).length;
        };

        // Split a collection into two arrays: one whose elements all satisfy the given
        // predicate, and one whose elements all do not satisfy the predicate.
        _.partition = function (obj, predicate, context) {
          predicate = cb(predicate, context);
          var pass = [], fail = [];
          _.each(obj, function (value, key, obj) {
            (predicate(value, key, obj) ? pass : fail).push(value);
          });
          return [pass, fail];
        };

        // Array Functions
        // ---------------

        // Get the first element of an array. Passing **n** will return the first N
        // values in the array. Aliased as `head` and `take`. The **guard** check
        // allows it to work with `_.map`.
        _.first = _.head = _.take = function (array, n, guard) {
          if (array == null) return void 0;
          if (n == null || guard) return array[0];
          return _.initial(array, array.length - n);
        };

        // Returns everything but the last entry of the array. Especially useful on
        // the arguments object. Passing **n** will return all the values in
        // the array, excluding the last N.
        _.initial = function (array, n, guard) {
          return slice.call(array, 0, Math.max(0, array.length - (n == null || guard ? 1 : n)));
        };

        // Get the last element of an array. Passing **n** will return the last N
        // values in the array.
        _.last = function (array, n, guard) {
          if (array == null) return void 0;
          if (n == null || guard) return array[array.length - 1];
          return _.rest(array, Math.max(0, array.length - n));
        };

        // Returns everything but the first entry of the array. Aliased as `tail` and `drop`.
        // Especially useful on the arguments object. Passing an **n** will return
        // the rest N values in the array.
        _.rest = _.tail = _.drop = function (array, n, guard) {
          return slice.call(array, n == null || guard ? 1 : n);
        };

        // Trim out all falsy values from an array.
        _.compact = function (array) {
          return _.filter(array, _.identity);
        };

        // Internal implementation of a recursive `flatten` function.
        var flatten = function (input, shallow, strict, startIndex) {
          var output = [], idx = 0;
          for (var i = startIndex || 0, length = getLength(input); i < length; i++) {
            var value = input[i];
            if (isArrayLike(value) && (_.isArray(value) || _.isArguments(value))) {
              //flatten current level of array or arguments object
              if (!shallow) value = flatten(value, shallow, strict);
              var j = 0, len = value.length;
              output.length += len;
              while (j < len) {
                output[idx++] = value[j++];
              }
            } else if (!strict) {
              output[idx++] = value;
            }
          }
          return output;
        };

        // Flatten out an array, either recursively (by default), or just one level.
        _.flatten = function (array, shallow) {
          return flatten(array, shallow, false);
        };

        // Return a version of the array that does not contain the specified value(s).
        _.without = function (array) {
          return _.difference(array, slice.call(arguments, 1));
        };

        // Produce a duplicate-free version of the array. If the array has already
        // been sorted, you have the option of using a faster algorithm.
        // Aliased as `unique`.
        _.uniq = _.unique = function (array, isSorted, iteratee, context) {
          if (!_.isBoolean(isSorted)) {
            context = iteratee;
            iteratee = isSorted;
            isSorted = false;
          }
          if (iteratee != null) iteratee = cb(iteratee, context);
          var result = [];
          var seen = [];
          for (var i = 0, length = getLength(array); i < length; i++) {
            var value = array[i],
              computed = iteratee ? iteratee(value, i, array) : value;
            if (isSorted) {
              if (!i || seen !== computed) result.push(value);
              seen = computed;
            } else if (iteratee) {
              if (!_.contains(seen, computed)) {
                seen.push(computed);
                result.push(value);
              }
            } else if (!_.contains(result, value)) {
              result.push(value);
            }
          }
          return result;
        };

        // Produce an array that contains the union: each distinct element from all of
        // the passed-in arrays.
        _.union = function () {
          return _.uniq(flatten(arguments, true, true));
        };

        // Produce an array that contains every item shared between all the
        // passed-in arrays.
        _.intersection = function (array) {
          var result = [];
          var argsLength = arguments.length;
          for (var i = 0, length = getLength(array); i < length; i++) {
            var item = array[i];
            if (_.contains(result, item)) continue;
            for (var j = 1; j < argsLength; j++) {
              if (!_.contains(arguments[j], item)) break;
            }
            if (j === argsLength) result.push(item);
          }
          return result;
        };

        // Take the difference between one array and a number of other arrays.
        // Only the elements present in just the first array will remain.
        _.difference = function (array) {
          var rest = flatten(arguments, true, true, 1);
          return _.filter(array, function (value) {
            return !_.contains(rest, value);
          });
        };

        // Zip together multiple lists into a single array -- elements that share
        // an index go together.
        _.zip = function () {
          return _.unzip(arguments);
        };

        // Complement of _.zip. Unzip accepts an array of arrays and groups
        // each array's elements on shared indices
        _.unzip = function (array) {
          var length = array && _.max(array, getLength).length || 0;
          var result = Array(length);

          for (var index = 0; index < length; index++) {
            result[index] = _.pluck(array, index);
          }
          return result;
        };

        // Converts lists into objects. Pass either a single array of `[key, value]`
        // pairs, or two parallel arrays of the same length -- one of keys, and one of
        // the corresponding values.
        _.object = function (list, values) {
          var result = {};
          for (var i = 0, length = getLength(list); i < length; i++) {
            if (values) {
              result[list[i]] = values[i];
            } else {
              result[list[i][0]] = list[i][1];
            }
          }
          return result;
        };

        // Generator function to create the findIndex and findLastIndex functions
        function createPredicateIndexFinder(dir) {
          return function (array, predicate, context) {
            predicate = cb(predicate, context);
            var length = getLength(array);
            var index = dir > 0 ? 0 : length - 1;
            for (; index >= 0 && index < length; index += dir) {
              if (predicate(array[index], index, array)) return index;
            }
            return -1;
          };
        }

        // Returns the first index on an array-like that passes a predicate test
        _.findIndex = createPredicateIndexFinder(1);
        _.findLastIndex = createPredicateIndexFinder(-1);

        // Use a comparator function to figure out the smallest index at which
        // an object should be inserted so as to maintain order. Uses binary search.
        _.sortedIndex = function (array, obj, iteratee, context) {
          iteratee = cb(iteratee, context, 1);
          var value = iteratee(obj);
          var low = 0, high = getLength(array);
          while (low < high) {
            var mid = Math.floor((low + high) / 2);
            if (iteratee(array[mid]) < value) low = mid + 1; else high = mid;
          }
          return low;
        };

        // Generator function to create the indexOf and lastIndexOf functions
        function createIndexFinder(dir, predicateFind, sortedIndex) {
          return function (array, item, idx) {
            var i = 0, length = getLength(array);
            if (typeof idx == 'number') {
              if (dir > 0) {
                i = idx >= 0 ? idx : Math.max(idx + length, i);
              } else {
                length = idx >= 0 ? Math.min(idx + 1, length) : idx + length + 1;
              }
            } else if (sortedIndex && idx && length) {
              idx = sortedIndex(array, item);
              return array[idx] === item ? idx : -1;
            }
            if (item !== item) {
              idx = predicateFind(slice.call(array, i, length), _.isNaN);
              return idx >= 0 ? idx + i : -1;
            }
            for (idx = dir > 0 ? i : length - 1; idx >= 0 && idx < length; idx += dir) {
              if (array[idx] === item) return idx;
            }
            return -1;
          };
        }

        // Return the position of the first occurrence of an item in an array,
        // or -1 if the item is not included in the array.
        // If the array is large and already in sort order, pass `true`
        // for **isSorted** to use binary search.
        _.indexOf = createIndexFinder(1, _.findIndex, _.sortedIndex);
        _.lastIndexOf = createIndexFinder(-1, _.findLastIndex);

        // Generate an integer Array containing an arithmetic progression. A port of
        // the native Python `range()` function. See
        // [the Python documentation](http://docs.python.org/library/functions.html#range).
        _.range = function (start, stop, step) {
          if (stop == null) {
            stop = start || 0;
            start = 0;
          }
          step = step || 1;

          var length = Math.max(Math.ceil((stop - start) / step), 0);
          var range = Array(length);

          for (var idx = 0; idx < length; idx++ , start += step) {
            range[idx] = start;
          }

          return range;
        };

        // Function (ahem) Functions
        // ------------------

        // Determines whether to execute a function as a constructor
        // or a normal function with the provided arguments
        var executeBound = function (sourceFunc, boundFunc, context, callingContext, args) {
          if (!(callingContext instanceof boundFunc)) return sourceFunc.apply(context, args);
          var self = baseCreate(sourceFunc.prototype);
          var result = sourceFunc.apply(self, args);
          if (_.isObject(result)) return result;
          return self;
        };

        // Create a function bound to a given object (assigning `this`, and arguments,
        // optionally). Delegates to **ECMAScript 5**'s native `Function.bind` if
        // available.
        _.bind = function (func, context) {
          if (nativeBind && func.bind === nativeBind) return nativeBind.apply(func, slice.call(arguments, 1));
          if (!_.isFunction(func)) throw new TypeError('Bind must be called on a function');
          var args = slice.call(arguments, 2);
          var bound = function () {
            return executeBound(func, bound, context, this, args.concat(slice.call(arguments)));
          };
          return bound;
        };

        // Partially apply a function by creating a version that has had some of its
        // arguments pre-filled, without changing its dynamic `this` context. _ acts
        // as a placeholder, allowing any combination of arguments to be pre-filled.
        _.partial = function (func) {
          var boundArgs = slice.call(arguments, 1);
          var bound = function () {
            var position = 0, length = boundArgs.length;
            var args = Array(length);
            for (var i = 0; i < length; i++) {
              args[i] = boundArgs[i] === _ ? arguments[position++] : boundArgs[i];
            }
            while (position < arguments.length) args.push(arguments[position++]);
            return executeBound(func, bound, this, this, args);
          };
          return bound;
        };

        // Bind a number of an object's methods to that object. Remaining arguments
        // are the method names to be bound. Useful for ensuring that all callbacks
        // defined on an object belong to it.
        _.bindAll = function (obj) {
          var i, length = arguments.length, key;
          if (length <= 1) throw new Error('bindAll must be passed function names');
          for (i = 1; i < length; i++) {
            key = arguments[i];
            obj[key] = _.bind(obj[key], obj);
          }
          return obj;
        };

        // Memoize an expensive function by storing its results.
        _.memoize = function (func, hasher) {
          var memoize = function (key) {
            var cache = memoize.cache;
            var address = '' + (hasher ? hasher.apply(this, arguments) : key);
            if (!_.has(cache, address)) cache[address] = func.apply(this, arguments);
            return cache[address];
          };
          memoize.cache = {};
          return memoize;
        };

        // Delays a function for the given number of milliseconds, and then calls
        // it with the arguments supplied.
        _.delay = function (func, wait) {
          var args = slice.call(arguments, 2);
          return setTimeout(function () {
            return func.apply(null, args);
          }, wait);
        };

        // Defers a function, scheduling it to run after the current call stack has
        // cleared.
        _.defer = _.partial(_.delay, _, 1);

        // Returns a function, that, when invoked, will only be triggered at most once
        // during a given window of time. Normally, the throttled function will run
        // as much as it can, without ever going more than once per `wait` duration;
        // but if you'd like to disable the execution on the leading edge, pass
        // `{leading: false}`. To disable execution on the trailing edge, ditto.
        _.throttle = function (func, wait, options) {
          var context, args, result;
          var timeout = null;
          var previous = 0;
          if (!options) options = {};
          var later = function () {
            previous = options.leading === false ? 0 : _.now();
            timeout = null;
            result = func.apply(context, args);
            if (!timeout) context = args = null;
          };
          return function () {
            var now = _.now();
            if (!previous && options.leading === false) previous = now;
            var remaining = wait - (now - previous);
            context = this;
            args = arguments;
            if (remaining <= 0 || remaining > wait) {
              if (timeout) {
                clearTimeout(timeout);
                timeout = null;
              }
              previous = now;
              result = func.apply(context, args);
              if (!timeout) context = args = null;
            } else if (!timeout && options.trailing !== false) {
              timeout = setTimeout(later, remaining);
            }
            return result;
          };
        };

        // Returns a function, that, as long as it continues to be invoked, will not
        // be triggered. The function will be called after it stops being called for
        // N milliseconds. If `immediate` is passed, trigger the function on the
        // leading edge, instead of the trailing.
        _.debounce = function (func, wait, immediate) {
          var timeout, args, context, timestamp, result;

          var later = function () {
            var last = _.now() - timestamp;

            if (last < wait && last >= 0) {
              timeout = setTimeout(later, wait - last);
            } else {
              timeout = null;
              if (!immediate) {
                result = func.apply(context, args);
                if (!timeout) context = args = null;
              }
            }
          };

          return function () {
            context = this;
            args = arguments;
            timestamp = _.now();
            var callNow = immediate && !timeout;
            if (!timeout) timeout = setTimeout(later, wait);
            if (callNow) {
              result = func.apply(context, args);
              context = args = null;
            }

            return result;
          };
        };

        // Returns the first function passed as an argument to the second,
        // allowing you to adjust arguments, run code before and after, and
        // conditionally execute the original function.
        _.wrap = function (func, wrapper) {
          return _.partial(wrapper, func);
        };

        // Returns a negated version of the passed-in predicate.
        _.negate = function (predicate) {
          return function () {
            return !predicate.apply(this, arguments);
          };
        };

        // Returns a function that is the composition of a list of functions, each
        // consuming the return value of the function that follows.
        _.compose = function () {
          var args = arguments;
          var start = args.length - 1;
          return function () {
            var i = start;
            var result = args[start].apply(this, arguments);
            while (i--) result = args[i].call(this, result);
            return result;
          };
        };

        // Returns a function that will only be executed on and after the Nth call.
        _.after = function (times, func) {
          return function () {
            if (--times < 1) {
              return func.apply(this, arguments);
            }
          };
        };

        // Returns a function that will only be executed up to (but not including) the Nth call.
        _.before = function (times, func) {
          var memo;
          return function () {
            if (--times > 0) {
              memo = func.apply(this, arguments);
            }
            if (times <= 1) func = null;
            return memo;
          };
        };

        // Returns a function that will be executed at most one time, no matter how
        // often you call it. Useful for lazy initialization.
        _.once = _.partial(_.before, 2);

        // Object Functions
        // ----------------

        // Keys in IE < 9 that won't be iterated by `for key in ...` and thus missed.
        var hasEnumBug = !{ toString: null }.propertyIsEnumerable('toString');
        var nonEnumerableProps = ['valueOf', 'isPrototypeOf', 'toString',
          'propertyIsEnumerable', 'hasOwnProperty', 'toLocaleString'];

        function collectNonEnumProps(obj, keys) {
          var nonEnumIdx = nonEnumerableProps.length;
          var constructor = obj.constructor;
          var proto = (_.isFunction(constructor) && constructor.prototype) || ObjProto;

          // Constructor is a special case.
          var prop = 'constructor';
          if (_.has(obj, prop) && !_.contains(keys, prop)) keys.push(prop);

          while (nonEnumIdx--) {
            prop = nonEnumerableProps[nonEnumIdx];
            if (prop in obj && obj[prop] !== proto[prop] && !_.contains(keys, prop)) {
              keys.push(prop);
            }
          }
        }

        // Retrieve the names of an object's own properties.
        // Delegates to **ECMAScript 5**'s native `Object.keys`
        _.keys = function (obj) {
          if (!_.isObject(obj)) return [];
          if (nativeKeys) return nativeKeys(obj);
          var keys = [];
          for (var key in obj) if (_.has(obj, key)) keys.push(key);
          // Ahem, IE < 9.
          if (hasEnumBug) collectNonEnumProps(obj, keys);
          return keys;
        };

        // Retrieve all the property names of an object.
        _.allKeys = function (obj) {
          if (!_.isObject(obj)) return [];
          var keys = [];
          for (var key in obj) keys.push(key);
          // Ahem, IE < 9.
          if (hasEnumBug) collectNonEnumProps(obj, keys);
          return keys;
        };

        // Retrieve the values of an object's properties.
        _.values = function (obj) {
          var keys = _.keys(obj);
          var length = keys.length;
          var values = Array(length);
          for (var i = 0; i < length; i++) {
            values[i] = obj[keys[i]];
          }
          return values;
        };

        // Returns the results of applying the iteratee to each element of the object
        // In contrast to _.map it returns an object
        _.mapObject = function (obj, iteratee, context) {
          iteratee = cb(iteratee, context);
          var keys = _.keys(obj),
            length = keys.length,
            results = {},
            currentKey;
          for (var index = 0; index < length; index++) {
            currentKey = keys[index];
            results[currentKey] = iteratee(obj[currentKey], currentKey, obj);
          }
          return results;
        };

        // Convert an object into a list of `[key, value]` pairs.
        _.pairs = function (obj) {
          var keys = _.keys(obj);
          var length = keys.length;
          var pairs = Array(length);
          for (var i = 0; i < length; i++) {
            pairs[i] = [keys[i], obj[keys[i]]];
          }
          return pairs;
        };

        // Invert the keys and values of an object. The values must be serializable.
        _.invert = function (obj) {
          var result = {};
          var keys = _.keys(obj);
          for (var i = 0, length = keys.length; i < length; i++) {
            result[obj[keys[i]]] = keys[i];
          }
          return result;
        };

        // Return a sorted list of the function names available on the object.
        // Aliased as `methods`
        _.functions = _.methods = function (obj) {
          var names = [];
          for (var key in obj) {
            if (_.isFunction(obj[key])) names.push(key);
          }
          return names.sort();
        };

        // Extend a given object with all the properties in passed-in object(s).
        _.extend = createAssigner(_.allKeys);

        // Assigns a given object with all the own properties in the passed-in object(s)
        // (https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/assign)
        _.extendOwn = _.assign = createAssigner(_.keys);

        // Returns the first key on an object that passes a predicate test
        _.findKey = function (obj, predicate, context) {
          predicate = cb(predicate, context);
          var keys = _.keys(obj), key;
          for (var i = 0, length = keys.length; i < length; i++) {
            key = keys[i];
            if (predicate(obj[key], key, obj)) return key;
          }
        };

        // Return a copy of the object only containing the whitelisted properties.
        _.pick = function (object, oiteratee, context) {
          var result = {}, obj = object, iteratee, keys;
          if (obj == null) return result;
          if (_.isFunction(oiteratee)) {
            keys = _.allKeys(obj);
            iteratee = optimizeCb(oiteratee, context);
          } else {
            keys = flatten(arguments, false, false, 1);
            iteratee = function (value, key, obj) { return key in obj; };
            obj = Object(obj);
          }
          for (var i = 0, length = keys.length; i < length; i++) {
            var key = keys[i];
            var value = obj[key];
            if (iteratee(value, key, obj)) result[key] = value;
          }
          return result;
        };

        // Return a copy of the object without the blacklisted properties.
        _.omit = function (obj, iteratee, context) {
          if (_.isFunction(iteratee)) {
            iteratee = _.negate(iteratee);
          } else {
            var keys = _.map(flatten(arguments, false, false, 1), String);
            iteratee = function (value, key) {
              return !_.contains(keys, key);
            };
          }
          return _.pick(obj, iteratee, context);
        };

        // Fill in a given object with default properties.
        _.defaults = createAssigner(_.allKeys, true);

        // Creates an object that inherits from the given prototype object.
        // If additional properties are provided then they will be added to the
        // created object.
        _.create = function (prototype, props) {
          var result = baseCreate(prototype);
          if (props) _.extendOwn(result, props);
          return result;
        };

        // Create a (shallow-cloned) duplicate of an object.
        _.clone = function (obj) {
          if (!_.isObject(obj)) return obj;
          return _.isArray(obj) ? obj.slice() : _.extend({}, obj);
        };

        // Invokes interceptor with the obj, and then returns obj.
        // The primary purpose of this method is to "tap into" a method chain, in
        // order to perform operations on intermediate results within the chain.
        _.tap = function (obj, interceptor) {
          interceptor(obj);
          return obj;
        };

        // Returns whether an object has a given set of `key:value` pairs.
        _.isMatch = function (object, attrs) {
          var keys = _.keys(attrs), length = keys.length;
          if (object == null) return !length;
          var obj = Object(object);
          for (var i = 0; i < length; i++) {
            var key = keys[i];
            if (attrs[key] !== obj[key] || !(key in obj)) return false;
          }
          return true;
        };


        // Internal recursive comparison function for `isEqual`.
        var eq = function (a, b, aStack, bStack) {
          // Identical objects are equal. `0 === -0`, but they aren't identical.
          // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).
          if (a === b) return a !== 0 || 1 / a === 1 / b;
          // A strict comparison is necessary because `null == undefined`.
          if (a == null || b == null) return a === b;
          // Unwrap any wrapped objects.
          if (a instanceof _) a = a._wrapped;
          if (b instanceof _) b = b._wrapped;
          // Compare `[[Class]]` names.
          var className = toString.call(a);
          if (className !== toString.call(b)) return false;
          switch (className) {
            // Strings, numbers, regular expressions, dates, and booleans are compared by value.
            case '[object RegExp]':
            // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')
            case '[object String]':
              // Primitives and their corresponding object wrappers are equivalent; thus, `"5"` is
              // equivalent to `new String("5")`.
              return '' + a === '' + b;
            case '[object Number]':
              // `NaN`s are equivalent, but non-reflexive.
              // Object(NaN) is equivalent to NaN
              if (+a !== +a) return +b !== +b;
              // An `egal` comparison is performed for other numeric values.
              return +a === 0 ? 1 / +a === 1 / b : +a === +b;
            case '[object Date]':
            case '[object Boolean]':
              // Coerce dates and booleans to numeric primitive values. Dates are compared by their
              // millisecond representations. Note that invalid dates with millisecond representations
              // of `NaN` are not equivalent.
              return +a === +b;
          }

          var areArrays = className === '[object Array]';
          if (!areArrays) {
            if (typeof a != 'object' || typeof b != 'object') return false;

            // Objects with different constructors are not equivalent, but `Object`s or `Array`s
            // from different frames are.
            var aCtor = a.constructor, bCtor = b.constructor;
            if (aCtor !== bCtor && !(_.isFunction(aCtor) && aCtor instanceof aCtor &&
              _.isFunction(bCtor) && bCtor instanceof bCtor)
              && ('constructor' in a && 'constructor' in b)) {
              return false;
            }
          }
          // Assume equality for cyclic structures. The algorithm for detecting cyclic
          // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.

          // Initializing stack of traversed objects.
          // It's done here since we only need them for objects and arrays comparison.
          aStack = aStack || [];
          bStack = bStack || [];
          var length = aStack.length;
          while (length--) {
            // Linear search. Performance is inversely proportional to the number of
            // unique nested structures.
            if (aStack[length] === a) return bStack[length] === b;
          }

          // Add the first object to the stack of traversed objects.
          aStack.push(a);
          bStack.push(b);

          // Recursively compare objects and arrays.
          if (areArrays) {
            // Compare array lengths to determine if a deep comparison is necessary.
            length = a.length;
            if (length !== b.length) return false;
            // Deep compare the contents, ignoring non-numeric properties.
            while (length--) {
              if (!eq(a[length], b[length], aStack, bStack)) return false;
            }
          } else {
            // Deep compare objects.
            var keys = _.keys(a), key;
            length = keys.length;
            // Ensure that both objects contain the same number of properties before comparing deep equality.
            if (_.keys(b).length !== length) return false;
            while (length--) {
              // Deep compare each member
              key = keys[length];
              if (!(_.has(b, key) && eq(a[key], b[key], aStack, bStack))) return false;
            }
          }
          // Remove the first object from the stack of traversed objects.
          aStack.pop();
          bStack.pop();
          return true;
        };

        // Perform a deep comparison to check if two objects are equal.
        _.isEqual = function (a, b) {
          return eq(a, b);
        };

        // Is a given array, string, or object empty?
        // An "empty" object has no enumerable own-properties.
        _.isEmpty = function (obj) {
          if (obj == null) return true;
          if (isArrayLike(obj) && (_.isArray(obj) || _.isString(obj) || _.isArguments(obj))) return obj.length === 0;
          return _.keys(obj).length === 0;
        };

        // Is a given value a DOM element?
        _.isElement = function (obj) {
          return !!(obj && obj.nodeType === 1);
        };

        // Is a given value an array?
        // Delegates to ECMA5's native Array.isArray
        _.isArray = nativeIsArray || function (obj) {
          return toString.call(obj) === '[object Array]';
        };

        // Is a given variable an object?
        _.isObject = function (obj) {
          var type = typeof obj;
          return type === 'function' || type === 'object' && !!obj;
        };

        // Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp, isError.
        _.each(['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp', 'Error'], function (name) {
          _['is' + name] = function (obj) {
            return toString.call(obj) === '[object ' + name + ']';
          };
        });

        // Define a fallback version of the method in browsers (ahem, IE < 9), where
        // there isn't any inspectable "Arguments" type.
        if (!_.isArguments(arguments)) {
          _.isArguments = function (obj) {
            return _.has(obj, 'callee');
          };
        }

        // Optimize `isFunction` if appropriate. Work around some typeof bugs in old v8,
        // IE 11 (#1621), and in Safari 8 (#1929).
        if (typeof /./ != 'function' && typeof Int8Array != 'object') {
          _.isFunction = function (obj) {
            return typeof obj == 'function' || false;
          };
        }

        // Is a given object a finite number?
        _.isFinite = function (obj) {
          return isFinite(obj) && !isNaN(parseFloat(obj));
        };

        // Is the given value `NaN`? (NaN is the only number which does not equal itself).
        _.isNaN = function (obj) {
          return _.isNumber(obj) && obj !== +obj;
        };

        // Is a given value a boolean?
        _.isBoolean = function (obj) {
          return obj === true || obj === false || toString.call(obj) === '[object Boolean]';
        };

        // Is a given value equal to null?
        _.isNull = function (obj) {
          return obj === null;
        };

        // Is a given variable undefined?
        _.isUndefined = function (obj) {
          return obj === void 0;
        };

        // Shortcut function for checking if an object has a given property directly
        // on itself (in other words, not on a prototype).
        _.has = function (obj, key) {
          return obj != null && hasOwnProperty.call(obj, key);
        };

        // Utility Functions
        // -----------------

        // Run Underscore.js in *noConflict* mode, returning the `_` variable to its
        // previous owner. Returns a reference to the Underscore object.
        _.noConflict = function () {
          root._ = previousUnderscore;
          return this;
        };

        // Keep the identity function around for default iteratees.
        _.identity = function (value) {
          return value;
        };

        // Predicate-generating functions. Often useful outside of Underscore.
        _.constant = function (value) {
          return function () {
            return value;
          };
        };

        _.noop = function () { };

        _.property = property;

        // Generates a function for a given object that returns a given property.
        _.propertyOf = function (obj) {
          return obj == null ? function () { } : function (key) {
            return obj[key];
          };
        };

        // Returns a predicate for checking whether an object has a given set of
        // `key:value` pairs.
        _.matcher = _.matches = function (attrs) {
          attrs = _.extendOwn({}, attrs);
          return function (obj) {
            return _.isMatch(obj, attrs);
          };
        };

        // Run a function **n** times.
        _.times = function (n, iteratee, context) {
          var accum = Array(Math.max(0, n));
          iteratee = optimizeCb(iteratee, context, 1);
          for (var i = 0; i < n; i++) accum[i] = iteratee(i);
          return accum;
        };

        // Return a random integer between min and max (inclusive).
        _.random = function (min, max) {
          if (max == null) {
            max = min;
            min = 0;
          }
          return min + Math.floor(Math.random() * (max - min + 1));
        };

        // A (possibly faster) way to get the current timestamp as an integer.
        _.now = Date.now || function () {
          return new Date().getTime();
        };

        // List of HTML entities for escaping.
        var escapeMap = {
          '&': '&amp;',
          '<': '&lt;',
          '>': '&gt;',
          '"': '&quot;',
          "'": '&#x27;',
          '`': '&#x60;'
        };
        var unescapeMap = _.invert(escapeMap);

        // Functions for escaping and unescaping strings to/from HTML interpolation.
        var createEscaper = function (map) {
          var escaper = function (match) {
            return map[match];
          };
          // Regexes for identifying a key that needs to be escaped
          var source = '(?:' + _.keys(map).join('|') + ')';
          var testRegexp = RegExp(source);
          var replaceRegexp = RegExp(source, 'g');
          return function (string) {
            string = string == null ? '' : '' + string;
            return testRegexp.test(string) ? string.replace(replaceRegexp, escaper) : string;
          };
        };
        _.escape = createEscaper(escapeMap);
        _.unescape = createEscaper(unescapeMap);

        // If the value of the named `property` is a function then invoke it with the
        // `object` as context; otherwise, return it.
        _.result = function (object, property, fallback) {
          var value = object == null ? void 0 : object[property];
          if (value === void 0) {
            value = fallback;
          }
          return _.isFunction(value) ? value.call(object) : value;
        };

        // Generate a unique integer id (unique within the entire client session).
        // Useful for temporary DOM ids.
        var idCounter = 0;
        _.uniqueId = function (prefix) {
          var id = ++idCounter + '';
          return prefix ? prefix + id : id;
        };

        // By default, Underscore uses ERB-style template delimiters, change the
        // following template settings to use alternative delimiters.
        _.templateSettings = {
          evaluate: /<%([\s\S]+?)%>/g,
          interpolate: /<%=([\s\S]+?)%>/g,
          escape: /<%-([\s\S]+?)%>/g
        };

        // When customizing `templateSettings`, if you don't want to define an
        // interpolation, evaluation or escaping regex, we need one that is
        // guaranteed not to match.
        var noMatch = /(.)^/;

        // Certain characters need to be escaped so that they can be put into a
        // string literal.
        var escapes = {
          "'": "'",
          '\\': '\\',
          '\r': 'r',
          '\n': 'n',
          '\u2028': 'u2028',
          '\u2029': 'u2029'
        };

        var escaper = /\\|'|\r|\n|\u2028|\u2029/g;

        var escapeChar = function (match) {
          return '\\' + escapes[match];
        };

        // JavaScript micro-templating, similar to John Resig's implementation.
        // Underscore templating handles arbitrary delimiters, preserves whitespace,
        // and correctly escapes quotes within interpolated code.
        // NB: `oldSettings` only exists for backwards compatibility.
        _.template = function (text, settings, oldSettings) {
          if (!settings && oldSettings) settings = oldSettings;
          settings = _.defaults({}, settings, _.templateSettings);

          // Combine delimiters into one regular expression via alternation.
          var matcher = RegExp([
            (settings.escape || noMatch).source,
            (settings.interpolate || noMatch).source,
            (settings.evaluate || noMatch).source
          ].join('|') + '|$', 'g');

          // Compile the template source, escaping string literals appropriately.
          var index = 0;
          var source = "__p+='";
          text.replace(matcher, function (match, escape, interpolate, evaluate, offset) {
            source += text.slice(index, offset).replace(escaper, escapeChar);
            index = offset + match.length;

            if (escape) {
              source += "'+\n((__t=(" + escape + "))==null?'':_.escape(__t))+\n'";
            } else if (interpolate) {
              source += "'+\n((__t=(" + interpolate + "))==null?'':__t)+\n'";
            } else if (evaluate) {
              source += "';\n" + evaluate + "\n__p+='";
            }

            // Adobe VMs need the match returned to produce the correct offest.
            return match;
          });
          source += "';\n";

          // If a variable is not specified, place data values in local scope.
          if (!settings.variable) source = 'with(obj||{}){\n' + source + '}\n';

          source = "var __t,__p='',__j=Array.prototype.join," +
            "print=function(){__p+=__j.call(arguments,'');};\n" +
            source + 'return __p;\n';

          try {
            var render = new Function(settings.variable || 'obj', '_', source);
          } catch (e) {
            e.source = source;
            throw e;
          }

          var template = function (data) {
            return render.call(this, data, _);
          };

          // Provide the compiled source as a convenience for precompilation.
          var argument = settings.variable || 'obj';
          template.source = 'function(' + argument + '){\n' + source + '}';

          return template;
        };

        // Add a "chain" function. Start chaining a wrapped Underscore object.
        _.chain = function (obj) {
          var instance = _(obj);
          instance._chain = true;
          return instance;
        };

        // OOP
        // ---------------
        // If Underscore is called as a function, it returns a wrapped object that
        // can be used OO-style. This wrapper holds altered versions of all the
        // underscore functions. Wrapped objects may be chained.

        // Helper function to continue chaining intermediate results.
        var result = function (instance, obj) {
          return instance._chain ? _(obj).chain() : obj;
        };

        // Add your own custom functions to the Underscore object.
        _.mixin = function (obj) {
          _.each(_.functions(obj), function (name) {
            var func = _[name] = obj[name];
            _.prototype[name] = function () {
              var args = [this._wrapped];
              push.apply(args, arguments);
              return result(this, func.apply(_, args));
            };
          });
        };

        // Add all of the Underscore functions to the wrapper object.
        _.mixin(_);

        // Add all mutator Array functions to the wrapper.
        _.each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function (name) {
          var method = ArrayProto[name];
          _.prototype[name] = function () {
            var obj = this._wrapped;
            method.apply(obj, arguments);
            if ((name === 'shift' || name === 'splice') && obj.length === 0) delete obj[0];
            return result(this, obj);
          };
        });

        // Add all accessor Array functions to the wrapper.
        _.each(['concat', 'join', 'slice'], function (name) {
          var method = ArrayProto[name];
          _.prototype[name] = function () {
            return result(this, method.apply(this._wrapped, arguments));
          };
        });

        // Extracts the result from a wrapped and chained object.
        _.prototype.value = function () {
          return this._wrapped;
        };

        // Provide unwrapping proxy for some methods used in engine operations
        // such as arithmetic and JSON stringification.
        _.prototype.valueOf = _.prototype.toJSON = _.prototype.value;

        _.prototype.toString = function () {
          return '' + this._wrapped;
        };

        // AMD registration happens at the end for compatibility with AMD loaders
        // that may not enforce next-turn semantics on modules. Even though general
        // practice for AMD registration is to be anonymous, underscore registers
        // as a named module because, like jQuery, it is a base library that is
        // popular enough to be bundled in a third party lib, but not be part of
        // an AMD load request. Those cases could generate an error when an
        // anonymous define() is called outside of a loader request.
        if (true) {
          !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {
            return _;
          }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
            __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
        }
      }.call(this));


      /***/
    }),

/***/ "../utf8/utf8.js":
/*!***********************!*\
  !*** ../utf8/utf8.js ***!
  \***********************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

      /*! https://mths.be/utf8js v3.0.0 by @mathias */
      ; (function (root) {

        var stringFromCharCode = String.fromCharCode;

        // Taken from https://mths.be/punycode
        function ucs2decode(string) {
          var output = [];
          var counter = 0;
          var length = string.length;
          var value;
          var extra;
          while (counter < length) {
            value = string.charCodeAt(counter++);
            if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
              // high surrogate, and there is a next character
              extra = string.charCodeAt(counter++);
              if ((extra & 0xFC00) == 0xDC00) { // low surrogate
                output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
              } else {
                // unmatched surrogate; only append this code unit, in case the next
                // code unit is the high surrogate of a surrogate pair
                output.push(value);
                counter--;
              }
            } else {
              output.push(value);
            }
          }
          return output;
        }

        // Taken from https://mths.be/punycode
        function ucs2encode(array) {
          var length = array.length;
          var index = -1;
          var value;
          var output = '';
          while (++index < length) {
            value = array[index];
            if (value > 0xFFFF) {
              value -= 0x10000;
              output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
              value = 0xDC00 | value & 0x3FF;
            }
            output += stringFromCharCode(value);
          }
          return output;
        }

        function checkScalarValue(codePoint) {
          if (codePoint >= 0xD800 && codePoint <= 0xDFFF) {
            throw Error(
              'Lone surrogate U+' + codePoint.toString(16).toUpperCase() +
              ' is not a scalar value'
            );
          }
        }
        /*--------------------------------------------------------------------------*/

        function createByte(codePoint, shift) {
          return stringFromCharCode(((codePoint >> shift) & 0x3F) | 0x80);
        }

        function encodeCodePoint(codePoint) {
          if ((codePoint & 0xFFFFFF80) == 0) { // 1-byte sequence
            return stringFromCharCode(codePoint);
          }
          var symbol = '';
          if ((codePoint & 0xFFFFF800) == 0) { // 2-byte sequence
            symbol = stringFromCharCode(((codePoint >> 6) & 0x1F) | 0xC0);
          }
          else if ((codePoint & 0xFFFF0000) == 0) { // 3-byte sequence
            checkScalarValue(codePoint);
            symbol = stringFromCharCode(((codePoint >> 12) & 0x0F) | 0xE0);
            symbol += createByte(codePoint, 6);
          }
          else if ((codePoint & 0xFFE00000) == 0) { // 4-byte sequence
            symbol = stringFromCharCode(((codePoint >> 18) & 0x07) | 0xF0);
            symbol += createByte(codePoint, 12);
            symbol += createByte(codePoint, 6);
          }
          symbol += stringFromCharCode((codePoint & 0x3F) | 0x80);
          return symbol;
        }

        function utf8encode(string) {
          var codePoints = ucs2decode(string);
          var length = codePoints.length;
          var index = -1;
          var codePoint;
          var byteString = '';
          while (++index < length) {
            codePoint = codePoints[index];
            byteString += encodeCodePoint(codePoint);
          }
          return byteString;
        }

        /*--------------------------------------------------------------------------*/

        function readContinuationByte() {
          if (byteIndex >= byteCount) {
            throw Error('Invalid byte index');
          }

          var continuationByte = byteArray[byteIndex] & 0xFF;
          byteIndex++;

          if ((continuationByte & 0xC0) == 0x80) {
            return continuationByte & 0x3F;
          }

          // If we end up here, it’s not a continuation byte
          throw Error('Invalid continuation byte');
        }

        function decodeSymbol() {
          var byte1;
          var byte2;
          var byte3;
          var byte4;
          var codePoint;

          if (byteIndex > byteCount) {
            throw Error('Invalid byte index');
          }

          if (byteIndex == byteCount) {
            return false;
          }

          // Read first byte
          byte1 = byteArray[byteIndex] & 0xFF;
          byteIndex++;

          // 1-byte sequence (no continuation bytes)
          if ((byte1 & 0x80) == 0) {
            return byte1;
          }

          // 2-byte sequence
          if ((byte1 & 0xE0) == 0xC0) {
            byte2 = readContinuationByte();
            codePoint = ((byte1 & 0x1F) << 6) | byte2;
            if (codePoint >= 0x80) {
              return codePoint;
            } else {
              throw Error('Invalid continuation byte');
            }
          }

          // 3-byte sequence (may include unpaired surrogates)
          if ((byte1 & 0xF0) == 0xE0) {
            byte2 = readContinuationByte();
            byte3 = readContinuationByte();
            codePoint = ((byte1 & 0x0F) << 12) | (byte2 << 6) | byte3;
            if (codePoint >= 0x0800) {
              checkScalarValue(codePoint);
              return codePoint;
            } else {
              throw Error('Invalid continuation byte');
            }
          }

          // 4-byte sequence
          if ((byte1 & 0xF8) == 0xF0) {
            byte2 = readContinuationByte();
            byte3 = readContinuationByte();
            byte4 = readContinuationByte();
            codePoint = ((byte1 & 0x07) << 0x12) | (byte2 << 0x0C) |
              (byte3 << 0x06) | byte4;
            if (codePoint >= 0x010000 && codePoint <= 0x10FFFF) {
              return codePoint;
            }
          }

          throw Error('Invalid UTF-8 detected');
        }

        var byteArray;
        var byteCount;
        var byteIndex;
        function utf8decode(byteString) {
          byteArray = ucs2decode(byteString);
          byteCount = byteArray.length;
          byteIndex = 0;
          var codePoints = [];
          var tmp;
          while ((tmp = decodeSymbol()) !== false) {
            codePoints.push(tmp);
          }
          return ucs2encode(codePoints);
        }

        /*--------------------------------------------------------------------------*/

        root.version = '3.0.0';
        root.encode = utf8encode;
        root.decode = utf8decode;

      } (false ? undefined : exports));


      /***/
    }),

/***/ "../web3-utils/node_modules/bn.js/lib/bn.js":
/*!**************************************************!*\
  !*** ../web3-utils/node_modules/bn.js/lib/bn.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function (module) {
        (function (module, exports) {
          'use strict';

          // Utils
          function assert(val, msg) {
            if (!val) throw new Error(msg || 'Assertion failed');
          }

          // Could use `inherits` module, but don't want to move from single file
          // architecture yet.
          function inherits(ctor, superCtor) {
            ctor.super_ = superCtor;
            var TempCtor = function () { };
            TempCtor.prototype = superCtor.prototype;
            ctor.prototype = new TempCtor();
            ctor.prototype.constructor = ctor;
          }

          // BN

          function BN(number, base, endian) {
            if (BN.isBN(number)) {
              return number;
            }

            this.negative = 0;
            this.words = null;
            this.length = 0;

            // Reduction context
            this.red = null;

            if (number !== null) {
              if (base === 'le' || base === 'be') {
                endian = base;
                base = 10;
              }

              this._init(number || 0, base || 10, endian || 'be');
            }
          }
          if (typeof module === 'object') {
            module.exports = BN;
          } else {
            exports.BN = BN;
          }

          BN.BN = BN;
          BN.wordSize = 26;

          var Buffer;
          try {
            Buffer = __webpack_require__(/*! buffer */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/buffer/index.js").Buffer;
          } catch (e) {
          }

          BN.isBN = function isBN(num) {
            if (num instanceof BN) {
              return true;
            }

            return num !== null && typeof num === 'object' &&
              num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
          };

          BN.max = function max(left, right) {
            if (left.cmp(right) > 0) return left;
            return right;
          };

          BN.min = function min(left, right) {
            if (left.cmp(right) < 0) return left;
            return right;
          };

          BN.prototype._init = function init(number, base, endian) {
            if (typeof number === 'number') {
              return this._initNumber(number, base, endian);
            }

            if (typeof number === 'object') {
              return this._initArray(number, base, endian);
            }

            if (base === 'hex') {
              base = 16;
            }
            assert(base === (base | 0) && base >= 2 && base <= 36);

            number = number.toString().replace(/\s+/g, '');
            var start = 0;
            if (number[0] === '-') {
              start++;
            }

            if (base === 16) {
              this._parseHex(number, start);
            } else {
              this._parseBase(number, base, start);
            }

            if (number[0] === '-') {
              this.negative = 1;
            }

            this.strip();

            if (endian !== 'le') return;

            this._initArray(this.toArray(), base, endian);
          };

          BN.prototype._initNumber = function _initNumber(number, base, endian) {
            if (number < 0) {
              this.negative = 1;
              number = -number;
            }
            if (number < 0x4000000) {
              this.words = [number & 0x3ffffff];
              this.length = 1;
            } else if (number < 0x10000000000000) {
              this.words = [
                number & 0x3ffffff,
                (number / 0x4000000) & 0x3ffffff
              ];
              this.length = 2;
            } else {
              assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
              this.words = [
                number & 0x3ffffff,
                (number / 0x4000000) & 0x3ffffff,
                1
              ];
              this.length = 3;
            }

            if (endian !== 'le') return;

            // Reverse the bytes
            this._initArray(this.toArray(), base, endian);
          };

          BN.prototype._initArray = function _initArray(number, base, endian) {
            // Perhaps a Uint8Array
            assert(typeof number.length === 'number');
            if (number.length <= 0) {
              this.words = [0];
              this.length = 1;
              return this;
            }

            this.length = Math.ceil(number.length / 3);
            this.words = new Array(this.length);
            for (var i = 0; i < this.length; i++) {
              this.words[i] = 0;
            }

            var j, w;
            var off = 0;
            if (endian === 'be') {
              for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
                w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
                this.words[j] |= (w << off) & 0x3ffffff;
                this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
                off += 24;
                if (off >= 26) {
                  off -= 26;
                  j++;
                }
              }
            } else if (endian === 'le') {
              for (i = 0, j = 0; i < number.length; i += 3) {
                w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
                this.words[j] |= (w << off) & 0x3ffffff;
                this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
                off += 24;
                if (off >= 26) {
                  off -= 26;
                  j++;
                }
              }
            }
            return this.strip();
          };

          function parseHex(str, start, end) {
            var r = 0;
            var len = Math.min(str.length, end);
            for (var i = start; i < len; i++) {
              var c = str.charCodeAt(i) - 48;

              r <<= 4;

              // 'a' - 'f'
              if (c >= 49 && c <= 54) {
                r |= c - 49 + 0xa;

                // 'A' - 'F'
              } else if (c >= 17 && c <= 22) {
                r |= c - 17 + 0xa;

                // '0' - '9'
              } else {
                r |= c & 0xf;
              }
            }
            return r;
          }

          BN.prototype._parseHex = function _parseHex(number, start) {
            // Create possibly bigger array to ensure that it fits the number
            this.length = Math.ceil((number.length - start) / 6);
            this.words = new Array(this.length);
            for (var i = 0; i < this.length; i++) {
              this.words[i] = 0;
            }

            var j, w;
            // Scan 24-bit chunks and add them to the number
            var off = 0;
            for (i = number.length - 6, j = 0; i >= start; i -= 6) {
              w = parseHex(number, i, i + 6);
              this.words[j] |= (w << off) & 0x3ffffff;
              // NOTE: `0x3fffff` is intentional here, 26bits max shift + 24bit hex limb
              this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;
              off += 24;
              if (off >= 26) {
                off -= 26;
                j++;
              }
            }
            if (i + 6 !== start) {
              w = parseHex(number, start, i + 6);
              this.words[j] |= (w << off) & 0x3ffffff;
              this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;
            }
            this.strip();
          };

          function parseBase(str, start, end, mul) {
            var r = 0;
            var len = Math.min(str.length, end);
            for (var i = start; i < len; i++) {
              var c = str.charCodeAt(i) - 48;

              r *= mul;

              // 'a'
              if (c >= 49) {
                r += c - 49 + 0xa;

                // 'A'
              } else if (c >= 17) {
                r += c - 17 + 0xa;

                // '0' - '9'
              } else {
                r += c;
              }
            }
            return r;
          }

          BN.prototype._parseBase = function _parseBase(number, base, start) {
            // Initialize as zero
            this.words = [0];
            this.length = 1;

            // Find length of limb in base
            for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
              limbLen++;
            }
            limbLen--;
            limbPow = (limbPow / base) | 0;

            var total = number.length - start;
            var mod = total % limbLen;
            var end = Math.min(total, total - mod) + start;

            var word = 0;
            for (var i = start; i < end; i += limbLen) {
              word = parseBase(number, i, i + limbLen, base);

              this.imuln(limbPow);
              if (this.words[0] + word < 0x4000000) {
                this.words[0] += word;
              } else {
                this._iaddn(word);
              }
            }

            if (mod !== 0) {
              var pow = 1;
              word = parseBase(number, i, number.length, base);

              for (i = 0; i < mod; i++) {
                pow *= base;
              }

              this.imuln(pow);
              if (this.words[0] + word < 0x4000000) {
                this.words[0] += word;
              } else {
                this._iaddn(word);
              }
            }
          };

          BN.prototype.copy = function copy(dest) {
            dest.words = new Array(this.length);
            for (var i = 0; i < this.length; i++) {
              dest.words[i] = this.words[i];
            }
            dest.length = this.length;
            dest.negative = this.negative;
            dest.red = this.red;
          };

          BN.prototype.clone = function clone() {
            var r = new BN(null);
            this.copy(r);
            return r;
          };

          BN.prototype._expand = function _expand(size) {
            while (this.length < size) {
              this.words[this.length++] = 0;
            }
            return this;
          };

          // Remove leading `0` from `this`
          BN.prototype.strip = function strip() {
            while (this.length > 1 && this.words[this.length - 1] === 0) {
              this.length--;
            }
            return this._normSign();
          };

          BN.prototype._normSign = function _normSign() {
            // -0 = 0
            if (this.length === 1 && this.words[0] === 0) {
              this.negative = 0;
            }
            return this;
          };

          BN.prototype.inspect = function inspect() {
            return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
          };

          /*
        
          var zeros = [];
          var groupSizes = [];
          var groupBases = [];
        
          var s = '';
          var i = -1;
          while (++i < BN.wordSize) {
            zeros[i] = s;
            s += '0';
          }
          groupSizes[0] = 0;
          groupSizes[1] = 0;
          groupBases[0] = 0;
          groupBases[1] = 0;
          var base = 2 - 1;
          while (++base < 36 + 1) {
            var groupSize = 0;
            var groupBase = 1;
            while (groupBase < (1 << BN.wordSize) / base) {
              groupBase *= base;
              groupSize += 1;
            }
            groupSizes[base] = groupSize;
            groupBases[base] = groupBase;
          }
        
          */

          var zeros = [
            '',
            '0',
            '00',
            '000',
            '0000',
            '00000',
            '000000',
            '0000000',
            '00000000',
            '000000000',
            '0000000000',
            '00000000000',
            '000000000000',
            '0000000000000',
            '00000000000000',
            '000000000000000',
            '0000000000000000',
            '00000000000000000',
            '000000000000000000',
            '0000000000000000000',
            '00000000000000000000',
            '000000000000000000000',
            '0000000000000000000000',
            '00000000000000000000000',
            '000000000000000000000000',
            '0000000000000000000000000'
          ];

          var groupSizes = [
            0, 0,
            25, 16, 12, 11, 10, 9, 8,
            8, 7, 7, 7, 7, 6, 6,
            6, 6, 6, 6, 6, 5, 5,
            5, 5, 5, 5, 5, 5, 5,
            5, 5, 5, 5, 5, 5, 5
          ];

          var groupBases = [
            0, 0,
            33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,
            43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,
            16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,
            6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,
            24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176
          ];

          BN.prototype.toString = function toString(base, padding) {
            base = base || 10;
            padding = padding | 0 || 1;

            var out;
            if (base === 16 || base === 'hex') {
              out = '';
              var off = 0;
              var carry = 0;
              for (var i = 0; i < this.length; i++) {
                var w = this.words[i];
                var word = (((w << off) | carry) & 0xffffff).toString(16);
                carry = (w >>> (24 - off)) & 0xffffff;
                if (carry !== 0 || i !== this.length - 1) {
                  out = zeros[6 - word.length] + word + out;
                } else {
                  out = word + out;
                }
                off += 2;
                if (off >= 26) {
                  off -= 26;
                  i--;
                }
              }
              if (carry !== 0) {
                out = carry.toString(16) + out;
              }
              while (out.length % padding !== 0) {
                out = '0' + out;
              }
              if (this.negative !== 0) {
                out = '-' + out;
              }
              return out;
            }

            if (base === (base | 0) && base >= 2 && base <= 36) {
              // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
              var groupSize = groupSizes[base];
              // var groupBase = Math.pow(base, groupSize);
              var groupBase = groupBases[base];
              out = '';
              var c = this.clone();
              c.negative = 0;
              while (!c.isZero()) {
                var r = c.modn(groupBase).toString(base);
                c = c.idivn(groupBase);

                if (!c.isZero()) {
                  out = zeros[groupSize - r.length] + r + out;
                } else {
                  out = r + out;
                }
              }
              if (this.isZero()) {
                out = '0' + out;
              }
              while (out.length % padding !== 0) {
                out = '0' + out;
              }
              if (this.negative !== 0) {
                out = '-' + out;
              }
              return out;
            }

            assert(false, 'Base should be between 2 and 36');
          };

          BN.prototype.toNumber = function toNumber() {
            var ret = this.words[0];
            if (this.length === 2) {
              ret += this.words[1] * 0x4000000;
            } else if (this.length === 3 && this.words[2] === 0x01) {
              // NOTE: at this stage it is known that the top bit is set
              ret += 0x10000000000000 + (this.words[1] * 0x4000000);
            } else if (this.length > 2) {
              assert(false, 'Number can only safely store up to 53 bits');
            }
            return (this.negative !== 0) ? -ret : ret;
          };

          BN.prototype.toJSON = function toJSON() {
            return this.toString(16);
          };

          BN.prototype.toBuffer = function toBuffer(endian, length) {
            assert(typeof Buffer !== 'undefined');
            return this.toArrayLike(Buffer, endian, length);
          };

          BN.prototype.toArray = function toArray(endian, length) {
            return this.toArrayLike(Array, endian, length);
          };

          BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
            var byteLength = this.byteLength();
            var reqLength = length || Math.max(1, byteLength);
            assert(byteLength <= reqLength, 'byte array longer than desired length');
            assert(reqLength > 0, 'Requested array length <= 0');

            this.strip();
            var littleEndian = endian === 'le';
            var res = new ArrayType(reqLength);

            var b, i;
            var q = this.clone();
            if (!littleEndian) {
              // Assume big-endian
              for (i = 0; i < reqLength - byteLength; i++) {
                res[i] = 0;
              }

              for (i = 0; !q.isZero(); i++) {
                b = q.andln(0xff);
                q.iushrn(8);

                res[reqLength - i - 1] = b;
              }
            } else {
              for (i = 0; !q.isZero(); i++) {
                b = q.andln(0xff);
                q.iushrn(8);

                res[i] = b;
              }

              for (; i < reqLength; i++) {
                res[i] = 0;
              }
            }

            return res;
          };

          if (Math.clz32) {
            BN.prototype._countBits = function _countBits(w) {
              return 32 - Math.clz32(w);
            };
          } else {
            BN.prototype._countBits = function _countBits(w) {
              var t = w;
              var r = 0;
              if (t >= 0x1000) {
                r += 13;
                t >>>= 13;
              }
              if (t >= 0x40) {
                r += 7;
                t >>>= 7;
              }
              if (t >= 0x8) {
                r += 4;
                t >>>= 4;
              }
              if (t >= 0x02) {
                r += 2;
                t >>>= 2;
              }
              return r + t;
            };
          }

          BN.prototype._zeroBits = function _zeroBits(w) {
            // Short-cut
            if (w === 0) return 26;

            var t = w;
            var r = 0;
            if ((t & 0x1fff) === 0) {
              r += 13;
              t >>>= 13;
            }
            if ((t & 0x7f) === 0) {
              r += 7;
              t >>>= 7;
            }
            if ((t & 0xf) === 0) {
              r += 4;
              t >>>= 4;
            }
            if ((t & 0x3) === 0) {
              r += 2;
              t >>>= 2;
            }
            if ((t & 0x1) === 0) {
              r++;
            }
            return r;
          };

          // Return number of used bits in a BN
          BN.prototype.bitLength = function bitLength() {
            var w = this.words[this.length - 1];
            var hi = this._countBits(w);
            return (this.length - 1) * 26 + hi;
          };

          function toBitArray(num) {
            var w = new Array(num.bitLength());

            for (var bit = 0; bit < w.length; bit++) {
              var off = (bit / 26) | 0;
              var wbit = bit % 26;

              w[bit] = (num.words[off] & (1 << wbit)) >>> wbit;
            }

            return w;
          }

          // Number of trailing zero bits
          BN.prototype.zeroBits = function zeroBits() {
            if (this.isZero()) return 0;

            var r = 0;
            for (var i = 0; i < this.length; i++) {
              var b = this._zeroBits(this.words[i]);
              r += b;
              if (b !== 26) break;
            }
            return r;
          };

          BN.prototype.byteLength = function byteLength() {
            return Math.ceil(this.bitLength() / 8);
          };

          BN.prototype.toTwos = function toTwos(width) {
            if (this.negative !== 0) {
              return this.abs().inotn(width).iaddn(1);
            }
            return this.clone();
          };

          BN.prototype.fromTwos = function fromTwos(width) {
            if (this.testn(width - 1)) {
              return this.notn(width).iaddn(1).ineg();
            }
            return this.clone();
          };

          BN.prototype.isNeg = function isNeg() {
            return this.negative !== 0;
          };

          // Return negative clone of `this`
          BN.prototype.neg = function neg() {
            return this.clone().ineg();
          };

          BN.prototype.ineg = function ineg() {
            if (!this.isZero()) {
              this.negative ^= 1;
            }

            return this;
          };

          // Or `num` with `this` in-place
          BN.prototype.iuor = function iuor(num) {
            while (this.length < num.length) {
              this.words[this.length++] = 0;
            }

            for (var i = 0; i < num.length; i++) {
              this.words[i] = this.words[i] | num.words[i];
            }

            return this.strip();
          };

          BN.prototype.ior = function ior(num) {
            assert((this.negative | num.negative) === 0);
            return this.iuor(num);
          };

          // Or `num` with `this`
          BN.prototype.or = function or(num) {
            if (this.length > num.length) return this.clone().ior(num);
            return num.clone().ior(this);
          };

          BN.prototype.uor = function uor(num) {
            if (this.length > num.length) return this.clone().iuor(num);
            return num.clone().iuor(this);
          };

          // And `num` with `this` in-place
          BN.prototype.iuand = function iuand(num) {
            // b = min-length(num, this)
            var b;
            if (this.length > num.length) {
              b = num;
            } else {
              b = this;
            }

            for (var i = 0; i < b.length; i++) {
              this.words[i] = this.words[i] & num.words[i];
            }

            this.length = b.length;

            return this.strip();
          };

          BN.prototype.iand = function iand(num) {
            assert((this.negative | num.negative) === 0);
            return this.iuand(num);
          };

          // And `num` with `this`
          BN.prototype.and = function and(num) {
            if (this.length > num.length) return this.clone().iand(num);
            return num.clone().iand(this);
          };

          BN.prototype.uand = function uand(num) {
            if (this.length > num.length) return this.clone().iuand(num);
            return num.clone().iuand(this);
          };

          // Xor `num` with `this` in-place
          BN.prototype.iuxor = function iuxor(num) {
            // a.length > b.length
            var a;
            var b;
            if (this.length > num.length) {
              a = this;
              b = num;
            } else {
              a = num;
              b = this;
            }

            for (var i = 0; i < b.length; i++) {
              this.words[i] = a.words[i] ^ b.words[i];
            }

            if (this !== a) {
              for (; i < a.length; i++) {
                this.words[i] = a.words[i];
              }
            }

            this.length = a.length;

            return this.strip();
          };

          BN.prototype.ixor = function ixor(num) {
            assert((this.negative | num.negative) === 0);
            return this.iuxor(num);
          };

          // Xor `num` with `this`
          BN.prototype.xor = function xor(num) {
            if (this.length > num.length) return this.clone().ixor(num);
            return num.clone().ixor(this);
          };

          BN.prototype.uxor = function uxor(num) {
            if (this.length > num.length) return this.clone().iuxor(num);
            return num.clone().iuxor(this);
          };

          // Not ``this`` with ``width`` bitwidth
          BN.prototype.inotn = function inotn(width) {
            assert(typeof width === 'number' && width >= 0);

            var bytesNeeded = Math.ceil(width / 26) | 0;
            var bitsLeft = width % 26;

            // Extend the buffer with leading zeroes
            this._expand(bytesNeeded);

            if (bitsLeft > 0) {
              bytesNeeded--;
            }

            // Handle complete words
            for (var i = 0; i < bytesNeeded; i++) {
              this.words[i] = ~this.words[i] & 0x3ffffff;
            }

            // Handle the residue
            if (bitsLeft > 0) {
              this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));
            }

            // And remove leading zeroes
            return this.strip();
          };

          BN.prototype.notn = function notn(width) {
            return this.clone().inotn(width);
          };

          // Set `bit` of `this`
          BN.prototype.setn = function setn(bit, val) {
            assert(typeof bit === 'number' && bit >= 0);

            var off = (bit / 26) | 0;
            var wbit = bit % 26;

            this._expand(off + 1);

            if (val) {
              this.words[off] = this.words[off] | (1 << wbit);
            } else {
              this.words[off] = this.words[off] & ~(1 << wbit);
            }

            return this.strip();
          };

          // Add `num` to `this` in-place
          BN.prototype.iadd = function iadd(num) {
            var r;

            // negative + positive
            if (this.negative !== 0 && num.negative === 0) {
              this.negative = 0;
              r = this.isub(num);
              this.negative ^= 1;
              return this._normSign();

              // positive + negative
            } else if (this.negative === 0 && num.negative !== 0) {
              num.negative = 0;
              r = this.isub(num);
              num.negative = 1;
              return r._normSign();
            }

            // a.length > b.length
            var a, b;
            if (this.length > num.length) {
              a = this;
              b = num;
            } else {
              a = num;
              b = this;
            }

            var carry = 0;
            for (var i = 0; i < b.length; i++) {
              r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
              this.words[i] = r & 0x3ffffff;
              carry = r >>> 26;
            }
            for (; carry !== 0 && i < a.length; i++) {
              r = (a.words[i] | 0) + carry;
              this.words[i] = r & 0x3ffffff;
              carry = r >>> 26;
            }

            this.length = a.length;
            if (carry !== 0) {
              this.words[this.length] = carry;
              this.length++;
              // Copy the rest of the words
            } else if (a !== this) {
              for (; i < a.length; i++) {
                this.words[i] = a.words[i];
              }
            }

            return this;
          };

          // Add `num` to `this`
          BN.prototype.add = function add(num) {
            var res;
            if (num.negative !== 0 && this.negative === 0) {
              num.negative = 0;
              res = this.sub(num);
              num.negative ^= 1;
              return res;
            } else if (num.negative === 0 && this.negative !== 0) {
              this.negative = 0;
              res = num.sub(this);
              this.negative = 1;
              return res;
            }

            if (this.length > num.length) return this.clone().iadd(num);

            return num.clone().iadd(this);
          };

          // Subtract `num` from `this` in-place
          BN.prototype.isub = function isub(num) {
            // this - (-num) = this + num
            if (num.negative !== 0) {
              num.negative = 0;
              var r = this.iadd(num);
              num.negative = 1;
              return r._normSign();

              // -this - num = -(this + num)
            } else if (this.negative !== 0) {
              this.negative = 0;
              this.iadd(num);
              this.negative = 1;
              return this._normSign();
            }

            // At this point both numbers are positive
            var cmp = this.cmp(num);

            // Optimization - zeroify
            if (cmp === 0) {
              this.negative = 0;
              this.length = 1;
              this.words[0] = 0;
              return this;
            }

            // a > b
            var a, b;
            if (cmp > 0) {
              a = this;
              b = num;
            } else {
              a = num;
              b = this;
            }

            var carry = 0;
            for (var i = 0; i < b.length; i++) {
              r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
              carry = r >> 26;
              this.words[i] = r & 0x3ffffff;
            }
            for (; carry !== 0 && i < a.length; i++) {
              r = (a.words[i] | 0) + carry;
              carry = r >> 26;
              this.words[i] = r & 0x3ffffff;
            }

            // Copy rest of the words
            if (carry === 0 && i < a.length && a !== this) {
              for (; i < a.length; i++) {
                this.words[i] = a.words[i];
              }
            }

            this.length = Math.max(this.length, i);

            if (a !== this) {
              this.negative = 1;
            }

            return this.strip();
          };

          // Subtract `num` from `this`
          BN.prototype.sub = function sub(num) {
            return this.clone().isub(num);
          };

          function smallMulTo(self, num, out) {
            out.negative = num.negative ^ self.negative;
            var len = (self.length + num.length) | 0;
            out.length = len;
            len = (len - 1) | 0;

            // Peel one iteration (compiler can't do it, because of code complexity)
            var a = self.words[0] | 0;
            var b = num.words[0] | 0;
            var r = a * b;

            var lo = r & 0x3ffffff;
            var carry = (r / 0x4000000) | 0;
            out.words[0] = lo;

            for (var k = 1; k < len; k++) {
              // Sum all words with the same `i + j = k` and accumulate `ncarry`,
              // note that ncarry could be >= 0x3ffffff
              var ncarry = carry >>> 26;
              var rword = carry & 0x3ffffff;
              var maxJ = Math.min(k, num.length - 1);
              for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
                var i = (k - j) | 0;
                a = self.words[i] | 0;
                b = num.words[j] | 0;
                r = a * b + rword;
                ncarry += (r / 0x4000000) | 0;
                rword = r & 0x3ffffff;
              }
              out.words[k] = rword | 0;
              carry = ncarry | 0;
            }
            if (carry !== 0) {
              out.words[k] = carry | 0;
            } else {
              out.length--;
            }

            return out.strip();
          }

          // TODO(indutny): it may be reasonable to omit it for users who don't need
          // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
          // multiplication (like elliptic secp256k1).
          var comb10MulTo = function comb10MulTo(self, num, out) {
            var a = self.words;
            var b = num.words;
            var o = out.words;
            var c = 0;
            var lo;
            var mid;
            var hi;
            var a0 = a[0] | 0;
            var al0 = a0 & 0x1fff;
            var ah0 = a0 >>> 13;
            var a1 = a[1] | 0;
            var al1 = a1 & 0x1fff;
            var ah1 = a1 >>> 13;
            var a2 = a[2] | 0;
            var al2 = a2 & 0x1fff;
            var ah2 = a2 >>> 13;
            var a3 = a[3] | 0;
            var al3 = a3 & 0x1fff;
            var ah3 = a3 >>> 13;
            var a4 = a[4] | 0;
            var al4 = a4 & 0x1fff;
            var ah4 = a4 >>> 13;
            var a5 = a[5] | 0;
            var al5 = a5 & 0x1fff;
            var ah5 = a5 >>> 13;
            var a6 = a[6] | 0;
            var al6 = a6 & 0x1fff;
            var ah6 = a6 >>> 13;
            var a7 = a[7] | 0;
            var al7 = a7 & 0x1fff;
            var ah7 = a7 >>> 13;
            var a8 = a[8] | 0;
            var al8 = a8 & 0x1fff;
            var ah8 = a8 >>> 13;
            var a9 = a[9] | 0;
            var al9 = a9 & 0x1fff;
            var ah9 = a9 >>> 13;
            var b0 = b[0] | 0;
            var bl0 = b0 & 0x1fff;
            var bh0 = b0 >>> 13;
            var b1 = b[1] | 0;
            var bl1 = b1 & 0x1fff;
            var bh1 = b1 >>> 13;
            var b2 = b[2] | 0;
            var bl2 = b2 & 0x1fff;
            var bh2 = b2 >>> 13;
            var b3 = b[3] | 0;
            var bl3 = b3 & 0x1fff;
            var bh3 = b3 >>> 13;
            var b4 = b[4] | 0;
            var bl4 = b4 & 0x1fff;
            var bh4 = b4 >>> 13;
            var b5 = b[5] | 0;
            var bl5 = b5 & 0x1fff;
            var bh5 = b5 >>> 13;
            var b6 = b[6] | 0;
            var bl6 = b6 & 0x1fff;
            var bh6 = b6 >>> 13;
            var b7 = b[7] | 0;
            var bl7 = b7 & 0x1fff;
            var bh7 = b7 >>> 13;
            var b8 = b[8] | 0;
            var bl8 = b8 & 0x1fff;
            var bh8 = b8 >>> 13;
            var b9 = b[9] | 0;
            var bl9 = b9 & 0x1fff;
            var bh9 = b9 >>> 13;

            out.negative = self.negative ^ num.negative;
            out.length = 19;
            /* k = 0 */
            lo = Math.imul(al0, bl0);
            mid = Math.imul(al0, bh0);
            mid = (mid + Math.imul(ah0, bl0)) | 0;
            hi = Math.imul(ah0, bh0);
            var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
            c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;
            w0 &= 0x3ffffff;
            /* k = 1 */
            lo = Math.imul(al1, bl0);
            mid = Math.imul(al1, bh0);
            mid = (mid + Math.imul(ah1, bl0)) | 0;
            hi = Math.imul(ah1, bh0);
            lo = (lo + Math.imul(al0, bl1)) | 0;
            mid = (mid + Math.imul(al0, bh1)) | 0;
            mid = (mid + Math.imul(ah0, bl1)) | 0;
            hi = (hi + Math.imul(ah0, bh1)) | 0;
            var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
            c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;
            w1 &= 0x3ffffff;
            /* k = 2 */
            lo = Math.imul(al2, bl0);
            mid = Math.imul(al2, bh0);
            mid = (mid + Math.imul(ah2, bl0)) | 0;
            hi = Math.imul(ah2, bh0);
            lo = (lo + Math.imul(al1, bl1)) | 0;
            mid = (mid + Math.imul(al1, bh1)) | 0;
            mid = (mid + Math.imul(ah1, bl1)) | 0;
            hi = (hi + Math.imul(ah1, bh1)) | 0;
            lo = (lo + Math.imul(al0, bl2)) | 0;
            mid = (mid + Math.imul(al0, bh2)) | 0;
            mid = (mid + Math.imul(ah0, bl2)) | 0;
            hi = (hi + Math.imul(ah0, bh2)) | 0;
            var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
            c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;
            w2 &= 0x3ffffff;
            /* k = 3 */
            lo = Math.imul(al3, bl0);
            mid = Math.imul(al3, bh0);
            mid = (mid + Math.imul(ah3, bl0)) | 0;
            hi = Math.imul(ah3, bh0);
            lo = (lo + Math.imul(al2, bl1)) | 0;
            mid = (mid + Math.imul(al2, bh1)) | 0;
            mid = (mid + Math.imul(ah2, bl1)) | 0;
            hi = (hi + Math.imul(ah2, bh1)) | 0;
            lo = (lo + Math.imul(al1, bl2)) | 0;
            mid = (mid + Math.imul(al1, bh2)) | 0;
            mid = (mid + Math.imul(ah1, bl2)) | 0;
            hi = (hi + Math.imul(ah1, bh2)) | 0;
            lo = (lo + Math.imul(al0, bl3)) | 0;
            mid = (mid + Math.imul(al0, bh3)) | 0;
            mid = (mid + Math.imul(ah0, bl3)) | 0;
            hi = (hi + Math.imul(ah0, bh3)) | 0;
            var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
            c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;
            w3 &= 0x3ffffff;
            /* k = 4 */
            lo = Math.imul(al4, bl0);
            mid = Math.imul(al4, bh0);
            mid = (mid + Math.imul(ah4, bl0)) | 0;
            hi = Math.imul(ah4, bh0);
            lo = (lo + Math.imul(al3, bl1)) | 0;
            mid = (mid + Math.imul(al3, bh1)) | 0;
            mid = (mid + Math.imul(ah3, bl1)) | 0;
            hi = (hi + Math.imul(ah3, bh1)) | 0;
            lo = (lo + Math.imul(al2, bl2)) | 0;
            mid = (mid + Math.imul(al2, bh2)) | 0;
            mid = (mid + Math.imul(ah2, bl2)) | 0;
            hi = (hi + Math.imul(ah2, bh2)) | 0;
            lo = (lo + Math.imul(al1, bl3)) | 0;
            mid = (mid + Math.imul(al1, bh3)) | 0;
            mid = (mid + Math.imul(ah1, bl3)) | 0;
            hi = (hi + Math.imul(ah1, bh3)) | 0;
            lo = (lo + Math.imul(al0, bl4)) | 0;
            mid = (mid + Math.imul(al0, bh4)) | 0;
            mid = (mid + Math.imul(ah0, bl4)) | 0;
            hi = (hi + Math.imul(ah0, bh4)) | 0;
            var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
            c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;
            w4 &= 0x3ffffff;
            /* k = 5 */
            lo = Math.imul(al5, bl0);
            mid = Math.imul(al5, bh0);
            mid = (mid + Math.imul(ah5, bl0)) | 0;
            hi = Math.imul(ah5, bh0);
            lo = (lo + Math.imul(al4, bl1)) | 0;
            mid = (mid + Math.imul(al4, bh1)) | 0;
            mid = (mid + Math.imul(ah4, bl1)) | 0;
            hi = (hi + Math.imul(ah4, bh1)) | 0;
            lo = (lo + Math.imul(al3, bl2)) | 0;
            mid = (mid + Math.imul(al3, bh2)) | 0;
            mid = (mid + Math.imul(ah3, bl2)) | 0;
            hi = (hi + Math.imul(ah3, bh2)) | 0;
            lo = (lo + Math.imul(al2, bl3)) | 0;
            mid = (mid + Math.imul(al2, bh3)) | 0;
            mid = (mid + Math.imul(ah2, bl3)) | 0;
            hi = (hi + Math.imul(ah2, bh3)) | 0;
            lo = (lo + Math.imul(al1, bl4)) | 0;
            mid = (mid + Math.imul(al1, bh4)) | 0;
            mid = (mid + Math.imul(ah1, bl4)) | 0;
            hi = (hi + Math.imul(ah1, bh4)) | 0;
            lo = (lo + Math.imul(al0, bl5)) | 0;
            mid = (mid + Math.imul(al0, bh5)) | 0;
            mid = (mid + Math.imul(ah0, bl5)) | 0;
            hi = (hi + Math.imul(ah0, bh5)) | 0;
            var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
            c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;
            w5 &= 0x3ffffff;
            /* k = 6 */
            lo = Math.imul(al6, bl0);
            mid = Math.imul(al6, bh0);
            mid = (mid + Math.imul(ah6, bl0)) | 0;
            hi = Math.imul(ah6, bh0);
            lo = (lo + Math.imul(al5, bl1)) | 0;
            mid = (mid + Math.imul(al5, bh1)) | 0;
            mid = (mid + Math.imul(ah5, bl1)) | 0;
            hi = (hi + Math.imul(ah5, bh1)) | 0;
            lo = (lo + Math.imul(al4, bl2)) | 0;
            mid = (mid + Math.imul(al4, bh2)) | 0;
            mid = (mid + Math.imul(ah4, bl2)) | 0;
            hi = (hi + Math.imul(ah4, bh2)) | 0;
            lo = (lo + Math.imul(al3, bl3)) | 0;
            mid = (mid + Math.imul(al3, bh3)) | 0;
            mid = (mid + Math.imul(ah3, bl3)) | 0;
            hi = (hi + Math.imul(ah3, bh3)) | 0;
            lo = (lo + Math.imul(al2, bl4)) | 0;
            mid = (mid + Math.imul(al2, bh4)) | 0;
            mid = (mid + Math.imul(ah2, bl4)) | 0;
            hi = (hi + Math.imul(ah2, bh4)) | 0;
            lo = (lo + Math.imul(al1, bl5)) | 0;
            mid = (mid + Math.imul(al1, bh5)) | 0;
            mid = (mid + Math.imul(ah1, bl5)) | 0;
            hi = (hi + Math.imul(ah1, bh5)) | 0;
            lo = (lo + Math.imul(al0, bl6)) | 0;
            mid = (mid + Math.imul(al0, bh6)) | 0;
            mid = (mid + Math.imul(ah0, bl6)) | 0;
            hi = (hi + Math.imul(ah0, bh6)) | 0;
            var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
            c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;
            w6 &= 0x3ffffff;
            /* k = 7 */
            lo = Math.imul(al7, bl0);
            mid = Math.imul(al7, bh0);
            mid = (mid + Math.imul(ah7, bl0)) | 0;
            hi = Math.imul(ah7, bh0);
            lo = (lo + Math.imul(al6, bl1)) | 0;
            mid = (mid + Math.imul(al6, bh1)) | 0;
            mid = (mid + Math.imul(ah6, bl1)) | 0;
            hi = (hi + Math.imul(ah6, bh1)) | 0;
            lo = (lo + Math.imul(al5, bl2)) | 0;
            mid = (mid + Math.imul(al5, bh2)) | 0;
            mid = (mid + Math.imul(ah5, bl2)) | 0;
            hi = (hi + Math.imul(ah5, bh2)) | 0;
            lo = (lo + Math.imul(al4, bl3)) | 0;
            mid = (mid + Math.imul(al4, bh3)) | 0;
            mid = (mid + Math.imul(ah4, bl3)) | 0;
            hi = (hi + Math.imul(ah4, bh3)) | 0;
            lo = (lo + Math.imul(al3, bl4)) | 0;
            mid = (mid + Math.imul(al3, bh4)) | 0;
            mid = (mid + Math.imul(ah3, bl4)) | 0;
            hi = (hi + Math.imul(ah3, bh4)) | 0;
            lo = (lo + Math.imul(al2, bl5)) | 0;
            mid = (mid + Math.imul(al2, bh5)) | 0;
            mid = (mid + Math.imul(ah2, bl5)) | 0;
            hi = (hi + Math.imul(ah2, bh5)) | 0;
            lo = (lo + Math.imul(al1, bl6)) | 0;
            mid = (mid + Math.imul(al1, bh6)) | 0;
            mid = (mid + Math.imul(ah1, bl6)) | 0;
            hi = (hi + Math.imul(ah1, bh6)) | 0;
            lo = (lo + Math.imul(al0, bl7)) | 0;
            mid = (mid + Math.imul(al0, bh7)) | 0;
            mid = (mid + Math.imul(ah0, bl7)) | 0;
            hi = (hi + Math.imul(ah0, bh7)) | 0;
            var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
            c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;
            w7 &= 0x3ffffff;
            /* k = 8 */
            lo = Math.imul(al8, bl0);
            mid = Math.imul(al8, bh0);
            mid = (mid + Math.imul(ah8, bl0)) | 0;
            hi = Math.imul(ah8, bh0);
            lo = (lo + Math.imul(al7, bl1)) | 0;
            mid = (mid + Math.imul(al7, bh1)) | 0;
            mid = (mid + Math.imul(ah7, bl1)) | 0;
            hi = (hi + Math.imul(ah7, bh1)) | 0;
            lo = (lo + Math.imul(al6, bl2)) | 0;
            mid = (mid + Math.imul(al6, bh2)) | 0;
            mid = (mid + Math.imul(ah6, bl2)) | 0;
            hi = (hi + Math.imul(ah6, bh2)) | 0;
            lo = (lo + Math.imul(al5, bl3)) | 0;
            mid = (mid + Math.imul(al5, bh3)) | 0;
            mid = (mid + Math.imul(ah5, bl3)) | 0;
            hi = (hi + Math.imul(ah5, bh3)) | 0;
            lo = (lo + Math.imul(al4, bl4)) | 0;
            mid = (mid + Math.imul(al4, bh4)) | 0;
            mid = (mid + Math.imul(ah4, bl4)) | 0;
            hi = (hi + Math.imul(ah4, bh4)) | 0;
            lo = (lo + Math.imul(al3, bl5)) | 0;
            mid = (mid + Math.imul(al3, bh5)) | 0;
            mid = (mid + Math.imul(ah3, bl5)) | 0;
            hi = (hi + Math.imul(ah3, bh5)) | 0;
            lo = (lo + Math.imul(al2, bl6)) | 0;
            mid = (mid + Math.imul(al2, bh6)) | 0;
            mid = (mid + Math.imul(ah2, bl6)) | 0;
            hi = (hi + Math.imul(ah2, bh6)) | 0;
            lo = (lo + Math.imul(al1, bl7)) | 0;
            mid = (mid + Math.imul(al1, bh7)) | 0;
            mid = (mid + Math.imul(ah1, bl7)) | 0;
            hi = (hi + Math.imul(ah1, bh7)) | 0;
            lo = (lo + Math.imul(al0, bl8)) | 0;
            mid = (mid + Math.imul(al0, bh8)) | 0;
            mid = (mid + Math.imul(ah0, bl8)) | 0;
            hi = (hi + Math.imul(ah0, bh8)) | 0;
            var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
            c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;
            w8 &= 0x3ffffff;
            /* k = 9 */
            lo = Math.imul(al9, bl0);
            mid = Math.imul(al9, bh0);
            mid = (mid + Math.imul(ah9, bl0)) | 0;
            hi = Math.imul(ah9, bh0);
            lo = (lo + Math.imul(al8, bl1)) | 0;
            mid = (mid + Math.imul(al8, bh1)) | 0;
            mid = (mid + Math.imul(ah8, bl1)) | 0;
            hi = (hi + Math.imul(ah8, bh1)) | 0;
            lo = (lo + Math.imul(al7, bl2)) | 0;
            mid = (mid + Math.imul(al7, bh2)) | 0;
            mid = (mid + Math.imul(ah7, bl2)) | 0;
            hi = (hi + Math.imul(ah7, bh2)) | 0;
            lo = (lo + Math.imul(al6, bl3)) | 0;
            mid = (mid + Math.imul(al6, bh3)) | 0;
            mid = (mid + Math.imul(ah6, bl3)) | 0;
            hi = (hi + Math.imul(ah6, bh3)) | 0;
            lo = (lo + Math.imul(al5, bl4)) | 0;
            mid = (mid + Math.imul(al5, bh4)) | 0;
            mid = (mid + Math.imul(ah5, bl4)) | 0;
            hi = (hi + Math.imul(ah5, bh4)) | 0;
            lo = (lo + Math.imul(al4, bl5)) | 0;
            mid = (mid + Math.imul(al4, bh5)) | 0;
            mid = (mid + Math.imul(ah4, bl5)) | 0;
            hi = (hi + Math.imul(ah4, bh5)) | 0;
            lo = (lo + Math.imul(al3, bl6)) | 0;
            mid = (mid + Math.imul(al3, bh6)) | 0;
            mid = (mid + Math.imul(ah3, bl6)) | 0;
            hi = (hi + Math.imul(ah3, bh6)) | 0;
            lo = (lo + Math.imul(al2, bl7)) | 0;
            mid = (mid + Math.imul(al2, bh7)) | 0;
            mid = (mid + Math.imul(ah2, bl7)) | 0;
            hi = (hi + Math.imul(ah2, bh7)) | 0;
            lo = (lo + Math.imul(al1, bl8)) | 0;
            mid = (mid + Math.imul(al1, bh8)) | 0;
            mid = (mid + Math.imul(ah1, bl8)) | 0;
            hi = (hi + Math.imul(ah1, bh8)) | 0;
            lo = (lo + Math.imul(al0, bl9)) | 0;
            mid = (mid + Math.imul(al0, bh9)) | 0;
            mid = (mid + Math.imul(ah0, bl9)) | 0;
            hi = (hi + Math.imul(ah0, bh9)) | 0;
            var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
            c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;
            w9 &= 0x3ffffff;
            /* k = 10 */
            lo = Math.imul(al9, bl1);
            mid = Math.imul(al9, bh1);
            mid = (mid + Math.imul(ah9, bl1)) | 0;
            hi = Math.imul(ah9, bh1);
            lo = (lo + Math.imul(al8, bl2)) | 0;
            mid = (mid + Math.imul(al8, bh2)) | 0;
            mid = (mid + Math.imul(ah8, bl2)) | 0;
            hi = (hi + Math.imul(ah8, bh2)) | 0;
            lo = (lo + Math.imul(al7, bl3)) | 0;
            mid = (mid + Math.imul(al7, bh3)) | 0;
            mid = (mid + Math.imul(ah7, bl3)) | 0;
            hi = (hi + Math.imul(ah7, bh3)) | 0;
            lo = (lo + Math.imul(al6, bl4)) | 0;
            mid = (mid + Math.imul(al6, bh4)) | 0;
            mid = (mid + Math.imul(ah6, bl4)) | 0;
            hi = (hi + Math.imul(ah6, bh4)) | 0;
            lo = (lo + Math.imul(al5, bl5)) | 0;
            mid = (mid + Math.imul(al5, bh5)) | 0;
            mid = (mid + Math.imul(ah5, bl5)) | 0;
            hi = (hi + Math.imul(ah5, bh5)) | 0;
            lo = (lo + Math.imul(al4, bl6)) | 0;
            mid = (mid + Math.imul(al4, bh6)) | 0;
            mid = (mid + Math.imul(ah4, bl6)) | 0;
            hi = (hi + Math.imul(ah4, bh6)) | 0;
            lo = (lo + Math.imul(al3, bl7)) | 0;
            mid = (mid + Math.imul(al3, bh7)) | 0;
            mid = (mid + Math.imul(ah3, bl7)) | 0;
            hi = (hi + Math.imul(ah3, bh7)) | 0;
            lo = (lo + Math.imul(al2, bl8)) | 0;
            mid = (mid + Math.imul(al2, bh8)) | 0;
            mid = (mid + Math.imul(ah2, bl8)) | 0;
            hi = (hi + Math.imul(ah2, bh8)) | 0;
            lo = (lo + Math.imul(al1, bl9)) | 0;
            mid = (mid + Math.imul(al1, bh9)) | 0;
            mid = (mid + Math.imul(ah1, bl9)) | 0;
            hi = (hi + Math.imul(ah1, bh9)) | 0;
            var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
            c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;
            w10 &= 0x3ffffff;
            /* k = 11 */
            lo = Math.imul(al9, bl2);
            mid = Math.imul(al9, bh2);
            mid = (mid + Math.imul(ah9, bl2)) | 0;
            hi = Math.imul(ah9, bh2);
            lo = (lo + Math.imul(al8, bl3)) | 0;
            mid = (mid + Math.imul(al8, bh3)) | 0;
            mid = (mid + Math.imul(ah8, bl3)) | 0;
            hi = (hi + Math.imul(ah8, bh3)) | 0;
            lo = (lo + Math.imul(al7, bl4)) | 0;
            mid = (mid + Math.imul(al7, bh4)) | 0;
            mid = (mid + Math.imul(ah7, bl4)) | 0;
            hi = (hi + Math.imul(ah7, bh4)) | 0;
            lo = (lo + Math.imul(al6, bl5)) | 0;
            mid = (mid + Math.imul(al6, bh5)) | 0;
            mid = (mid + Math.imul(ah6, bl5)) | 0;
            hi = (hi + Math.imul(ah6, bh5)) | 0;
            lo = (lo + Math.imul(al5, bl6)) | 0;
            mid = (mid + Math.imul(al5, bh6)) | 0;
            mid = (mid + Math.imul(ah5, bl6)) | 0;
            hi = (hi + Math.imul(ah5, bh6)) | 0;
            lo = (lo + Math.imul(al4, bl7)) | 0;
            mid = (mid + Math.imul(al4, bh7)) | 0;
            mid = (mid + Math.imul(ah4, bl7)) | 0;
            hi = (hi + Math.imul(ah4, bh7)) | 0;
            lo = (lo + Math.imul(al3, bl8)) | 0;
            mid = (mid + Math.imul(al3, bh8)) | 0;
            mid = (mid + Math.imul(ah3, bl8)) | 0;
            hi = (hi + Math.imul(ah3, bh8)) | 0;
            lo = (lo + Math.imul(al2, bl9)) | 0;
            mid = (mid + Math.imul(al2, bh9)) | 0;
            mid = (mid + Math.imul(ah2, bl9)) | 0;
            hi = (hi + Math.imul(ah2, bh9)) | 0;
            var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
            c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;
            w11 &= 0x3ffffff;
            /* k = 12 */
            lo = Math.imul(al9, bl3);
            mid = Math.imul(al9, bh3);
            mid = (mid + Math.imul(ah9, bl3)) | 0;
            hi = Math.imul(ah9, bh3);
            lo = (lo + Math.imul(al8, bl4)) | 0;
            mid = (mid + Math.imul(al8, bh4)) | 0;
            mid = (mid + Math.imul(ah8, bl4)) | 0;
            hi = (hi + Math.imul(ah8, bh4)) | 0;
            lo = (lo + Math.imul(al7, bl5)) | 0;
            mid = (mid + Math.imul(al7, bh5)) | 0;
            mid = (mid + Math.imul(ah7, bl5)) | 0;
            hi = (hi + Math.imul(ah7, bh5)) | 0;
            lo = (lo + Math.imul(al6, bl6)) | 0;
            mid = (mid + Math.imul(al6, bh6)) | 0;
            mid = (mid + Math.imul(ah6, bl6)) | 0;
            hi = (hi + Math.imul(ah6, bh6)) | 0;
            lo = (lo + Math.imul(al5, bl7)) | 0;
            mid = (mid + Math.imul(al5, bh7)) | 0;
            mid = (mid + Math.imul(ah5, bl7)) | 0;
            hi = (hi + Math.imul(ah5, bh7)) | 0;
            lo = (lo + Math.imul(al4, bl8)) | 0;
            mid = (mid + Math.imul(al4, bh8)) | 0;
            mid = (mid + Math.imul(ah4, bl8)) | 0;
            hi = (hi + Math.imul(ah4, bh8)) | 0;
            lo = (lo + Math.imul(al3, bl9)) | 0;
            mid = (mid + Math.imul(al3, bh9)) | 0;
            mid = (mid + Math.imul(ah3, bl9)) | 0;
            hi = (hi + Math.imul(ah3, bh9)) | 0;
            var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
            c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;
            w12 &= 0x3ffffff;
            /* k = 13 */
            lo = Math.imul(al9, bl4);
            mid = Math.imul(al9, bh4);
            mid = (mid + Math.imul(ah9, bl4)) | 0;
            hi = Math.imul(ah9, bh4);
            lo = (lo + Math.imul(al8, bl5)) | 0;
            mid = (mid + Math.imul(al8, bh5)) | 0;
            mid = (mid + Math.imul(ah8, bl5)) | 0;
            hi = (hi + Math.imul(ah8, bh5)) | 0;
            lo = (lo + Math.imul(al7, bl6)) | 0;
            mid = (mid + Math.imul(al7, bh6)) | 0;
            mid = (mid + Math.imul(ah7, bl6)) | 0;
            hi = (hi + Math.imul(ah7, bh6)) | 0;
            lo = (lo + Math.imul(al6, bl7)) | 0;
            mid = (mid + Math.imul(al6, bh7)) | 0;
            mid = (mid + Math.imul(ah6, bl7)) | 0;
            hi = (hi + Math.imul(ah6, bh7)) | 0;
            lo = (lo + Math.imul(al5, bl8)) | 0;
            mid = (mid + Math.imul(al5, bh8)) | 0;
            mid = (mid + Math.imul(ah5, bl8)) | 0;
            hi = (hi + Math.imul(ah5, bh8)) | 0;
            lo = (lo + Math.imul(al4, bl9)) | 0;
            mid = (mid + Math.imul(al4, bh9)) | 0;
            mid = (mid + Math.imul(ah4, bl9)) | 0;
            hi = (hi + Math.imul(ah4, bh9)) | 0;
            var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
            c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;
            w13 &= 0x3ffffff;
            /* k = 14 */
            lo = Math.imul(al9, bl5);
            mid = Math.imul(al9, bh5);
            mid = (mid + Math.imul(ah9, bl5)) | 0;
            hi = Math.imul(ah9, bh5);
            lo = (lo + Math.imul(al8, bl6)) | 0;
            mid = (mid + Math.imul(al8, bh6)) | 0;
            mid = (mid + Math.imul(ah8, bl6)) | 0;
            hi = (hi + Math.imul(ah8, bh6)) | 0;
            lo = (lo + Math.imul(al7, bl7)) | 0;
            mid = (mid + Math.imul(al7, bh7)) | 0;
            mid = (mid + Math.imul(ah7, bl7)) | 0;
            hi = (hi + Math.imul(ah7, bh7)) | 0;
            lo = (lo + Math.imul(al6, bl8)) | 0;
            mid = (mid + Math.imul(al6, bh8)) | 0;
            mid = (mid + Math.imul(ah6, bl8)) | 0;
            hi = (hi + Math.imul(ah6, bh8)) | 0;
            lo = (lo + Math.imul(al5, bl9)) | 0;
            mid = (mid + Math.imul(al5, bh9)) | 0;
            mid = (mid + Math.imul(ah5, bl9)) | 0;
            hi = (hi + Math.imul(ah5, bh9)) | 0;
            var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
            c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;
            w14 &= 0x3ffffff;
            /* k = 15 */
            lo = Math.imul(al9, bl6);
            mid = Math.imul(al9, bh6);
            mid = (mid + Math.imul(ah9, bl6)) | 0;
            hi = Math.imul(ah9, bh6);
            lo = (lo + Math.imul(al8, bl7)) | 0;
            mid = (mid + Math.imul(al8, bh7)) | 0;
            mid = (mid + Math.imul(ah8, bl7)) | 0;
            hi = (hi + Math.imul(ah8, bh7)) | 0;
            lo = (lo + Math.imul(al7, bl8)) | 0;
            mid = (mid + Math.imul(al7, bh8)) | 0;
            mid = (mid + Math.imul(ah7, bl8)) | 0;
            hi = (hi + Math.imul(ah7, bh8)) | 0;
            lo = (lo + Math.imul(al6, bl9)) | 0;
            mid = (mid + Math.imul(al6, bh9)) | 0;
            mid = (mid + Math.imul(ah6, bl9)) | 0;
            hi = (hi + Math.imul(ah6, bh9)) | 0;
            var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
            c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;
            w15 &= 0x3ffffff;
            /* k = 16 */
            lo = Math.imul(al9, bl7);
            mid = Math.imul(al9, bh7);
            mid = (mid + Math.imul(ah9, bl7)) | 0;
            hi = Math.imul(ah9, bh7);
            lo = (lo + Math.imul(al8, bl8)) | 0;
            mid = (mid + Math.imul(al8, bh8)) | 0;
            mid = (mid + Math.imul(ah8, bl8)) | 0;
            hi = (hi + Math.imul(ah8, bh8)) | 0;
            lo = (lo + Math.imul(al7, bl9)) | 0;
            mid = (mid + Math.imul(al7, bh9)) | 0;
            mid = (mid + Math.imul(ah7, bl9)) | 0;
            hi = (hi + Math.imul(ah7, bh9)) | 0;
            var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
            c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;
            w16 &= 0x3ffffff;
            /* k = 17 */
            lo = Math.imul(al9, bl8);
            mid = Math.imul(al9, bh8);
            mid = (mid + Math.imul(ah9, bl8)) | 0;
            hi = Math.imul(ah9, bh8);
            lo = (lo + Math.imul(al8, bl9)) | 0;
            mid = (mid + Math.imul(al8, bh9)) | 0;
            mid = (mid + Math.imul(ah8, bl9)) | 0;
            hi = (hi + Math.imul(ah8, bh9)) | 0;
            var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
            c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;
            w17 &= 0x3ffffff;
            /* k = 18 */
            lo = Math.imul(al9, bl9);
            mid = Math.imul(al9, bh9);
            mid = (mid + Math.imul(ah9, bl9)) | 0;
            hi = Math.imul(ah9, bh9);
            var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
            c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;
            w18 &= 0x3ffffff;
            o[0] = w0;
            o[1] = w1;
            o[2] = w2;
            o[3] = w3;
            o[4] = w4;
            o[5] = w5;
            o[6] = w6;
            o[7] = w7;
            o[8] = w8;
            o[9] = w9;
            o[10] = w10;
            o[11] = w11;
            o[12] = w12;
            o[13] = w13;
            o[14] = w14;
            o[15] = w15;
            o[16] = w16;
            o[17] = w17;
            o[18] = w18;
            if (c !== 0) {
              o[19] = c;
              out.length++;
            }
            return out;
          };

          // Polyfill comb
          if (!Math.imul) {
            comb10MulTo = smallMulTo;
          }

          function bigMulTo(self, num, out) {
            out.negative = num.negative ^ self.negative;
            out.length = self.length + num.length;

            var carry = 0;
            var hncarry = 0;
            for (var k = 0; k < out.length - 1; k++) {
              // Sum all words with the same `i + j = k` and accumulate `ncarry`,
              // note that ncarry could be >= 0x3ffffff
              var ncarry = hncarry;
              hncarry = 0;
              var rword = carry & 0x3ffffff;
              var maxJ = Math.min(k, num.length - 1);
              for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
                var i = k - j;
                var a = self.words[i] | 0;
                var b = num.words[j] | 0;
                var r = a * b;

                var lo = r & 0x3ffffff;
                ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
                lo = (lo + rword) | 0;
                rword = lo & 0x3ffffff;
                ncarry = (ncarry + (lo >>> 26)) | 0;

                hncarry += ncarry >>> 26;
                ncarry &= 0x3ffffff;
              }
              out.words[k] = rword;
              carry = ncarry;
              ncarry = hncarry;
            }
            if (carry !== 0) {
              out.words[k] = carry;
            } else {
              out.length--;
            }

            return out.strip();
          }

          function jumboMulTo(self, num, out) {
            var fftm = new FFTM();
            return fftm.mulp(self, num, out);
          }

          BN.prototype.mulTo = function mulTo(num, out) {
            var res;
            var len = this.length + num.length;
            if (this.length === 10 && num.length === 10) {
              res = comb10MulTo(this, num, out);
            } else if (len < 63) {
              res = smallMulTo(this, num, out);
            } else if (len < 1024) {
              res = bigMulTo(this, num, out);
            } else {
              res = jumboMulTo(this, num, out);
            }

            return res;
          };

          // Cooley-Tukey algorithm for FFT
          // slightly revisited to rely on looping instead of recursion

          function FFTM(x, y) {
            this.x = x;
            this.y = y;
          }

          FFTM.prototype.makeRBT = function makeRBT(N) {
            var t = new Array(N);
            var l = BN.prototype._countBits(N) - 1;
            for (var i = 0; i < N; i++) {
              t[i] = this.revBin(i, l, N);
            }

            return t;
          };

          // Returns binary-reversed representation of `x`
          FFTM.prototype.revBin = function revBin(x, l, N) {
            if (x === 0 || x === N - 1) return x;

            var rb = 0;
            for (var i = 0; i < l; i++) {
              rb |= (x & 1) << (l - i - 1);
              x >>= 1;
            }

            return rb;
          };

          // Performs "tweedling" phase, therefore 'emulating'
          // behaviour of the recursive algorithm
          FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {
            for (var i = 0; i < N; i++) {
              rtws[i] = rws[rbt[i]];
              itws[i] = iws[rbt[i]];
            }
          };

          FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {
            this.permute(rbt, rws, iws, rtws, itws, N);

            for (var s = 1; s < N; s <<= 1) {
              var l = s << 1;

              var rtwdf = Math.cos(2 * Math.PI / l);
              var itwdf = Math.sin(2 * Math.PI / l);

              for (var p = 0; p < N; p += l) {
                var rtwdf_ = rtwdf;
                var itwdf_ = itwdf;

                for (var j = 0; j < s; j++) {
                  var re = rtws[p + j];
                  var ie = itws[p + j];

                  var ro = rtws[p + j + s];
                  var io = itws[p + j + s];

                  var rx = rtwdf_ * ro - itwdf_ * io;

                  io = rtwdf_ * io + itwdf_ * ro;
                  ro = rx;

                  rtws[p + j] = re + ro;
                  itws[p + j] = ie + io;

                  rtws[p + j + s] = re - ro;
                  itws[p + j + s] = ie - io;

                  /* jshint maxdepth : false */
                  if (j !== l) {
                    rx = rtwdf * rtwdf_ - itwdf * itwdf_;

                    itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                    rtwdf_ = rx;
                  }
                }
              }
            }
          };

          FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
            var N = Math.max(m, n) | 1;
            var odd = N & 1;
            var i = 0;
            for (N = N / 2 | 0; N; N = N >>> 1) {
              i++;
            }

            return 1 << i + 1 + odd;
          };

          FFTM.prototype.conjugate = function conjugate(rws, iws, N) {
            if (N <= 1) return;

            for (var i = 0; i < N / 2; i++) {
              var t = rws[i];

              rws[i] = rws[N - i - 1];
              rws[N - i - 1] = t;

              t = iws[i];

              iws[i] = -iws[N - i - 1];
              iws[N - i - 1] = -t;
            }
          };

          FFTM.prototype.normalize13b = function normalize13b(ws, N) {
            var carry = 0;
            for (var i = 0; i < N / 2; i++) {
              var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +
                Math.round(ws[2 * i] / N) +
                carry;

              ws[i] = w & 0x3ffffff;

              if (w < 0x4000000) {
                carry = 0;
              } else {
                carry = w / 0x4000000 | 0;
              }
            }

            return ws;
          };

          FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {
            var carry = 0;
            for (var i = 0; i < len; i++) {
              carry = carry + (ws[i] | 0);

              rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;
              rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;
            }

            // Pad with zeroes
            for (i = 2 * len; i < N; ++i) {
              rws[i] = 0;
            }

            assert(carry === 0);
            assert((carry & ~0x1fff) === 0);
          };

          FFTM.prototype.stub = function stub(N) {
            var ph = new Array(N);
            for (var i = 0; i < N; i++) {
              ph[i] = 0;
            }

            return ph;
          };

          FFTM.prototype.mulp = function mulp(x, y, out) {
            var N = 2 * this.guessLen13b(x.length, y.length);

            var rbt = this.makeRBT(N);

            var _ = this.stub(N);

            var rws = new Array(N);
            var rwst = new Array(N);
            var iwst = new Array(N);

            var nrws = new Array(N);
            var nrwst = new Array(N);
            var niwst = new Array(N);

            var rmws = out.words;
            rmws.length = N;

            this.convert13b(x.words, x.length, rws, N);
            this.convert13b(y.words, y.length, nrws, N);

            this.transform(rws, _, rwst, iwst, N, rbt);
            this.transform(nrws, _, nrwst, niwst, N, rbt);

            for (var i = 0; i < N; i++) {
              var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
              iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
              rwst[i] = rx;
            }

            this.conjugate(rwst, iwst, N);
            this.transform(rwst, iwst, rmws, _, N, rbt);
            this.conjugate(rmws, _, N);
            this.normalize13b(rmws, N);

            out.negative = x.negative ^ y.negative;
            out.length = x.length + y.length;
            return out.strip();
          };

          // Multiply `this` by `num`
          BN.prototype.mul = function mul(num) {
            var out = new BN(null);
            out.words = new Array(this.length + num.length);
            return this.mulTo(num, out);
          };

          // Multiply employing FFT
          BN.prototype.mulf = function mulf(num) {
            var out = new BN(null);
            out.words = new Array(this.length + num.length);
            return jumboMulTo(this, num, out);
          };

          // In-place Multiplication
          BN.prototype.imul = function imul(num) {
            return this.clone().mulTo(num, this);
          };

          BN.prototype.imuln = function imuln(num) {
            assert(typeof num === 'number');
            assert(num < 0x4000000);

            // Carry
            var carry = 0;
            for (var i = 0; i < this.length; i++) {
              var w = (this.words[i] | 0) * num;
              var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
              carry >>= 26;
              carry += (w / 0x4000000) | 0;
              // NOTE: lo is 27bit maximum
              carry += lo >>> 26;
              this.words[i] = lo & 0x3ffffff;
            }

            if (carry !== 0) {
              this.words[i] = carry;
              this.length++;
            }

            return this;
          };

          BN.prototype.muln = function muln(num) {
            return this.clone().imuln(num);
          };

          // `this` * `this`
          BN.prototype.sqr = function sqr() {
            return this.mul(this);
          };

          // `this` * `this` in-place
          BN.prototype.isqr = function isqr() {
            return this.imul(this.clone());
          };

          // Math.pow(`this`, `num`)
          BN.prototype.pow = function pow(num) {
            var w = toBitArray(num);
            if (w.length === 0) return new BN(1);

            // Skip leading zeroes
            var res = this;
            for (var i = 0; i < w.length; i++ , res = res.sqr()) {
              if (w[i] !== 0) break;
            }

            if (++i < w.length) {
              for (var q = res.sqr(); i < w.length; i++ , q = q.sqr()) {
                if (w[i] === 0) continue;

                res = res.mul(q);
              }
            }

            return res;
          };

          // Shift-left in-place
          BN.prototype.iushln = function iushln(bits) {
            assert(typeof bits === 'number' && bits >= 0);
            var r = bits % 26;
            var s = (bits - r) / 26;
            var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);
            var i;

            if (r !== 0) {
              var carry = 0;

              for (i = 0; i < this.length; i++) {
                var newCarry = this.words[i] & carryMask;
                var c = ((this.words[i] | 0) - newCarry) << r;
                this.words[i] = c | carry;
                carry = newCarry >>> (26 - r);
              }

              if (carry) {
                this.words[i] = carry;
                this.length++;
              }
            }

            if (s !== 0) {
              for (i = this.length - 1; i >= 0; i--) {
                this.words[i + s] = this.words[i];
              }

              for (i = 0; i < s; i++) {
                this.words[i] = 0;
              }

              this.length += s;
            }

            return this.strip();
          };

          BN.prototype.ishln = function ishln(bits) {
            // TODO(indutny): implement me
            assert(this.negative === 0);
            return this.iushln(bits);
          };

          // Shift-right in-place
          // NOTE: `hint` is a lowest bit before trailing zeroes
          // NOTE: if `extended` is present - it will be filled with destroyed bits
          BN.prototype.iushrn = function iushrn(bits, hint, extended) {
            assert(typeof bits === 'number' && bits >= 0);
            var h;
            if (hint) {
              h = (hint - (hint % 26)) / 26;
            } else {
              h = 0;
            }

            var r = bits % 26;
            var s = Math.min((bits - r) / 26, this.length);
            var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
            var maskedWords = extended;

            h -= s;
            h = Math.max(0, h);

            // Extended mode, copy masked part
            if (maskedWords) {
              for (var i = 0; i < s; i++) {
                maskedWords.words[i] = this.words[i];
              }
              maskedWords.length = s;
            }

            if (s === 0) {
              // No-op, we should not move anything at all
            } else if (this.length > s) {
              this.length -= s;
              for (i = 0; i < this.length; i++) {
                this.words[i] = this.words[i + s];
              }
            } else {
              this.words[0] = 0;
              this.length = 1;
            }

            var carry = 0;
            for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
              var word = this.words[i] | 0;
              this.words[i] = (carry << (26 - r)) | (word >>> r);
              carry = word & mask;
            }

            // Push carried bits as a mask
            if (maskedWords && carry !== 0) {
              maskedWords.words[maskedWords.length++] = carry;
            }

            if (this.length === 0) {
              this.words[0] = 0;
              this.length = 1;
            }

            return this.strip();
          };

          BN.prototype.ishrn = function ishrn(bits, hint, extended) {
            // TODO(indutny): implement me
            assert(this.negative === 0);
            return this.iushrn(bits, hint, extended);
          };

          // Shift-left
          BN.prototype.shln = function shln(bits) {
            return this.clone().ishln(bits);
          };

          BN.prototype.ushln = function ushln(bits) {
            return this.clone().iushln(bits);
          };

          // Shift-right
          BN.prototype.shrn = function shrn(bits) {
            return this.clone().ishrn(bits);
          };

          BN.prototype.ushrn = function ushrn(bits) {
            return this.clone().iushrn(bits);
          };

          // Test if n bit is set
          BN.prototype.testn = function testn(bit) {
            assert(typeof bit === 'number' && bit >= 0);
            var r = bit % 26;
            var s = (bit - r) / 26;
            var q = 1 << r;

            // Fast case: bit is much higher than all existing words
            if (this.length <= s) return false;

            // Check bit and return
            var w = this.words[s];

            return !!(w & q);
          };

          // Return only lowers bits of number (in-place)
          BN.prototype.imaskn = function imaskn(bits) {
            assert(typeof bits === 'number' && bits >= 0);
            var r = bits % 26;
            var s = (bits - r) / 26;

            assert(this.negative === 0, 'imaskn works only with positive numbers');

            if (this.length <= s) {
              return this;
            }

            if (r !== 0) {
              s++;
            }
            this.length = Math.min(s, this.length);

            if (r !== 0) {
              var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
              this.words[this.length - 1] &= mask;
            }

            return this.strip();
          };

          // Return only lowers bits of number
          BN.prototype.maskn = function maskn(bits) {
            return this.clone().imaskn(bits);
          };

          // Add plain number `num` to `this`
          BN.prototype.iaddn = function iaddn(num) {
            assert(typeof num === 'number');
            assert(num < 0x4000000);
            if (num < 0) return this.isubn(-num);

            // Possible sign change
            if (this.negative !== 0) {
              if (this.length === 1 && (this.words[0] | 0) < num) {
                this.words[0] = num - (this.words[0] | 0);
                this.negative = 0;
                return this;
              }

              this.negative = 0;
              this.isubn(num);
              this.negative = 1;
              return this;
            }

            // Add without checks
            return this._iaddn(num);
          };

          BN.prototype._iaddn = function _iaddn(num) {
            this.words[0] += num;

            // Carry
            for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
              this.words[i] -= 0x4000000;
              if (i === this.length - 1) {
                this.words[i + 1] = 1;
              } else {
                this.words[i + 1]++;
              }
            }
            this.length = Math.max(this.length, i + 1);

            return this;
          };

          // Subtract plain number `num` from `this`
          BN.prototype.isubn = function isubn(num) {
            assert(typeof num === 'number');
            assert(num < 0x4000000);
            if (num < 0) return this.iaddn(-num);

            if (this.negative !== 0) {
              this.negative = 0;
              this.iaddn(num);
              this.negative = 1;
              return this;
            }

            this.words[0] -= num;

            if (this.length === 1 && this.words[0] < 0) {
              this.words[0] = -this.words[0];
              this.negative = 1;
            } else {
              // Carry
              for (var i = 0; i < this.length && this.words[i] < 0; i++) {
                this.words[i] += 0x4000000;
                this.words[i + 1] -= 1;
              }
            }

            return this.strip();
          };

          BN.prototype.addn = function addn(num) {
            return this.clone().iaddn(num);
          };

          BN.prototype.subn = function subn(num) {
            return this.clone().isubn(num);
          };

          BN.prototype.iabs = function iabs() {
            this.negative = 0;

            return this;
          };

          BN.prototype.abs = function abs() {
            return this.clone().iabs();
          };

          BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
            var len = num.length + shift;
            var i;

            this._expand(len);

            var w;
            var carry = 0;
            for (i = 0; i < num.length; i++) {
              w = (this.words[i + shift] | 0) + carry;
              var right = (num.words[i] | 0) * mul;
              w -= right & 0x3ffffff;
              carry = (w >> 26) - ((right / 0x4000000) | 0);
              this.words[i + shift] = w & 0x3ffffff;
            }
            for (; i < this.length - shift; i++) {
              w = (this.words[i + shift] | 0) + carry;
              carry = w >> 26;
              this.words[i + shift] = w & 0x3ffffff;
            }

            if (carry === 0) return this.strip();

            // Subtraction overflow
            assert(carry === -1);
            carry = 0;
            for (i = 0; i < this.length; i++) {
              w = -(this.words[i] | 0) + carry;
              carry = w >> 26;
              this.words[i] = w & 0x3ffffff;
            }
            this.negative = 1;

            return this.strip();
          };

          BN.prototype._wordDiv = function _wordDiv(num, mode) {
            var shift = this.length - num.length;

            var a = this.clone();
            var b = num;

            // Normalize
            var bhi = b.words[b.length - 1] | 0;
            var bhiBits = this._countBits(bhi);
            shift = 26 - bhiBits;
            if (shift !== 0) {
              b = b.ushln(shift);
              a.iushln(shift);
              bhi = b.words[b.length - 1] | 0;
            }

            // Initialize quotient
            var m = a.length - b.length;
            var q;

            if (mode !== 'mod') {
              q = new BN(null);
              q.length = m + 1;
              q.words = new Array(q.length);
              for (var i = 0; i < q.length; i++) {
                q.words[i] = 0;
              }
            }

            var diff = a.clone()._ishlnsubmul(b, 1, m);
            if (diff.negative === 0) {
              a = diff;
              if (q) {
                q.words[m] = 1;
              }
            }

            for (var j = m - 1; j >= 0; j--) {
              var qj = (a.words[b.length + j] | 0) * 0x4000000 +
                (a.words[b.length + j - 1] | 0);

              // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
              // (0x7ffffff)
              qj = Math.min((qj / bhi) | 0, 0x3ffffff);

              a._ishlnsubmul(b, qj, j);
              while (a.negative !== 0) {
                qj--;
                a.negative = 0;
                a._ishlnsubmul(b, 1, j);
                if (!a.isZero()) {
                  a.negative ^= 1;
                }
              }
              if (q) {
                q.words[j] = qj;
              }
            }
            if (q) {
              q.strip();
            }
            a.strip();

            // Denormalize
            if (mode !== 'div' && shift !== 0) {
              a.iushrn(shift);
            }

            return {
              div: q || null,
              mod: a
            };
          };

          // NOTE: 1) `mode` can be set to `mod` to request mod only,
          //       to `div` to request div only, or be absent to
          //       request both div & mod
          //       2) `positive` is true if unsigned mod is requested
          BN.prototype.divmod = function divmod(num, mode, positive) {
            assert(!num.isZero());

            if (this.isZero()) {
              return {
                div: new BN(0),
                mod: new BN(0)
              };
            }

            var div, mod, res;
            if (this.negative !== 0 && num.negative === 0) {
              res = this.neg().divmod(num, mode);

              if (mode !== 'mod') {
                div = res.div.neg();
              }

              if (mode !== 'div') {
                mod = res.mod.neg();
                if (positive && mod.negative !== 0) {
                  mod.iadd(num);
                }
              }

              return {
                div: div,
                mod: mod
              };
            }

            if (this.negative === 0 && num.negative !== 0) {
              res = this.divmod(num.neg(), mode);

              if (mode !== 'mod') {
                div = res.div.neg();
              }

              return {
                div: div,
                mod: res.mod
              };
            }

            if ((this.negative & num.negative) !== 0) {
              res = this.neg().divmod(num.neg(), mode);

              if (mode !== 'div') {
                mod = res.mod.neg();
                if (positive && mod.negative !== 0) {
                  mod.isub(num);
                }
              }

              return {
                div: res.div,
                mod: mod
              };
            }

            // Both numbers are positive at this point

            // Strip both numbers to approximate shift value
            if (num.length > this.length || this.cmp(num) < 0) {
              return {
                div: new BN(0),
                mod: this
              };
            }

            // Very short reduction
            if (num.length === 1) {
              if (mode === 'div') {
                return {
                  div: this.divn(num.words[0]),
                  mod: null
                };
              }

              if (mode === 'mod') {
                return {
                  div: null,
                  mod: new BN(this.modn(num.words[0]))
                };
              }

              return {
                div: this.divn(num.words[0]),
                mod: new BN(this.modn(num.words[0]))
              };
            }

            return this._wordDiv(num, mode);
          };

          // Find `this` / `num`
          BN.prototype.div = function div(num) {
            return this.divmod(num, 'div', false).div;
          };

          // Find `this` % `num`
          BN.prototype.mod = function mod(num) {
            return this.divmod(num, 'mod', false).mod;
          };

          BN.prototype.umod = function umod(num) {
            return this.divmod(num, 'mod', true).mod;
          };

          // Find Round(`this` / `num`)
          BN.prototype.divRound = function divRound(num) {
            var dm = this.divmod(num);

            // Fast case - exact division
            if (dm.mod.isZero()) return dm.div;

            var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;

            var half = num.ushrn(1);
            var r2 = num.andln(1);
            var cmp = mod.cmp(half);

            // Round down
            if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;

            // Round up
            return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
          };

          BN.prototype.modn = function modn(num) {
            assert(num <= 0x3ffffff);
            var p = (1 << 26) % num;

            var acc = 0;
            for (var i = this.length - 1; i >= 0; i--) {
              acc = (p * acc + (this.words[i] | 0)) % num;
            }

            return acc;
          };

          // In-place division by number
          BN.prototype.idivn = function idivn(num) {
            assert(num <= 0x3ffffff);

            var carry = 0;
            for (var i = this.length - 1; i >= 0; i--) {
              var w = (this.words[i] | 0) + carry * 0x4000000;
              this.words[i] = (w / num) | 0;
              carry = w % num;
            }

            return this.strip();
          };

          BN.prototype.divn = function divn(num) {
            return this.clone().idivn(num);
          };

          BN.prototype.egcd = function egcd(p) {
            assert(p.negative === 0);
            assert(!p.isZero());

            var x = this;
            var y = p.clone();

            if (x.negative !== 0) {
              x = x.umod(p);
            } else {
              x = x.clone();
            }

            // A * x + B * y = x
            var A = new BN(1);
            var B = new BN(0);

            // C * x + D * y = y
            var C = new BN(0);
            var D = new BN(1);

            var g = 0;

            while (x.isEven() && y.isEven()) {
              x.iushrn(1);
              y.iushrn(1);
              ++g;
            }

            var yp = y.clone();
            var xp = x.clone();

            while (!x.isZero()) {
              for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
              if (i > 0) {
                x.iushrn(i);
                while (i-- > 0) {
                  if (A.isOdd() || B.isOdd()) {
                    A.iadd(yp);
                    B.isub(xp);
                  }

                  A.iushrn(1);
                  B.iushrn(1);
                }
              }

              for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
              if (j > 0) {
                y.iushrn(j);
                while (j-- > 0) {
                  if (C.isOdd() || D.isOdd()) {
                    C.iadd(yp);
                    D.isub(xp);
                  }

                  C.iushrn(1);
                  D.iushrn(1);
                }
              }

              if (x.cmp(y) >= 0) {
                x.isub(y);
                A.isub(C);
                B.isub(D);
              } else {
                y.isub(x);
                C.isub(A);
                D.isub(B);
              }
            }

            return {
              a: C,
              b: D,
              gcd: y.iushln(g)
            };
          };

          // This is reduced incarnation of the binary EEA
          // above, designated to invert members of the
          // _prime_ fields F(p) at a maximal speed
          BN.prototype._invmp = function _invmp(p) {
            assert(p.negative === 0);
            assert(!p.isZero());

            var a = this;
            var b = p.clone();

            if (a.negative !== 0) {
              a = a.umod(p);
            } else {
              a = a.clone();
            }

            var x1 = new BN(1);
            var x2 = new BN(0);

            var delta = b.clone();

            while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
              for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
              if (i > 0) {
                a.iushrn(i);
                while (i-- > 0) {
                  if (x1.isOdd()) {
                    x1.iadd(delta);
                  }

                  x1.iushrn(1);
                }
              }

              for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
              if (j > 0) {
                b.iushrn(j);
                while (j-- > 0) {
                  if (x2.isOdd()) {
                    x2.iadd(delta);
                  }

                  x2.iushrn(1);
                }
              }

              if (a.cmp(b) >= 0) {
                a.isub(b);
                x1.isub(x2);
              } else {
                b.isub(a);
                x2.isub(x1);
              }
            }

            var res;
            if (a.cmpn(1) === 0) {
              res = x1;
            } else {
              res = x2;
            }

            if (res.cmpn(0) < 0) {
              res.iadd(p);
            }

            return res;
          };

          BN.prototype.gcd = function gcd(num) {
            if (this.isZero()) return num.abs();
            if (num.isZero()) return this.abs();

            var a = this.clone();
            var b = num.clone();
            a.negative = 0;
            b.negative = 0;

            // Remove common factor of two
            for (var shift = 0; a.isEven() && b.isEven(); shift++) {
              a.iushrn(1);
              b.iushrn(1);
            }

            do {
              while (a.isEven()) {
                a.iushrn(1);
              }
              while (b.isEven()) {
                b.iushrn(1);
              }

              var r = a.cmp(b);
              if (r < 0) {
                // Swap `a` and `b` to make `a` always bigger than `b`
                var t = a;
                a = b;
                b = t;
              } else if (r === 0 || b.cmpn(1) === 0) {
                break;
              }

              a.isub(b);
            } while (true);

            return b.iushln(shift);
          };

          // Invert number in the field F(num)
          BN.prototype.invm = function invm(num) {
            return this.egcd(num).a.umod(num);
          };

          BN.prototype.isEven = function isEven() {
            return (this.words[0] & 1) === 0;
          };

          BN.prototype.isOdd = function isOdd() {
            return (this.words[0] & 1) === 1;
          };

          // And first word and num
          BN.prototype.andln = function andln(num) {
            return this.words[0] & num;
          };

          // Increment at the bit position in-line
          BN.prototype.bincn = function bincn(bit) {
            assert(typeof bit === 'number');
            var r = bit % 26;
            var s = (bit - r) / 26;
            var q = 1 << r;

            // Fast case: bit is much higher than all existing words
            if (this.length <= s) {
              this._expand(s + 1);
              this.words[s] |= q;
              return this;
            }

            // Add bit and propagate, if needed
            var carry = q;
            for (var i = s; carry !== 0 && i < this.length; i++) {
              var w = this.words[i] | 0;
              w += carry;
              carry = w >>> 26;
              w &= 0x3ffffff;
              this.words[i] = w;
            }
            if (carry !== 0) {
              this.words[i] = carry;
              this.length++;
            }
            return this;
          };

          BN.prototype.isZero = function isZero() {
            return this.length === 1 && this.words[0] === 0;
          };

          BN.prototype.cmpn = function cmpn(num) {
            var negative = num < 0;

            if (this.negative !== 0 && !negative) return -1;
            if (this.negative === 0 && negative) return 1;

            this.strip();

            var res;
            if (this.length > 1) {
              res = 1;
            } else {
              if (negative) {
                num = -num;
              }

              assert(num <= 0x3ffffff, 'Number is too big');

              var w = this.words[0] | 0;
              res = w === num ? 0 : w < num ? -1 : 1;
            }
            if (this.negative !== 0) return -res | 0;
            return res;
          };

          // Compare two numbers and return:
          // 1 - if `this` > `num`
          // 0 - if `this` == `num`
          // -1 - if `this` < `num`
          BN.prototype.cmp = function cmp(num) {
            if (this.negative !== 0 && num.negative === 0) return -1;
            if (this.negative === 0 && num.negative !== 0) return 1;

            var res = this.ucmp(num);
            if (this.negative !== 0) return -res | 0;
            return res;
          };

          // Unsigned comparison
          BN.prototype.ucmp = function ucmp(num) {
            // At this point both numbers have the same sign
            if (this.length > num.length) return 1;
            if (this.length < num.length) return -1;

            var res = 0;
            for (var i = this.length - 1; i >= 0; i--) {
              var a = this.words[i] | 0;
              var b = num.words[i] | 0;

              if (a === b) continue;
              if (a < b) {
                res = -1;
              } else if (a > b) {
                res = 1;
              }
              break;
            }
            return res;
          };

          BN.prototype.gtn = function gtn(num) {
            return this.cmpn(num) === 1;
          };

          BN.prototype.gt = function gt(num) {
            return this.cmp(num) === 1;
          };

          BN.prototype.gten = function gten(num) {
            return this.cmpn(num) >= 0;
          };

          BN.prototype.gte = function gte(num) {
            return this.cmp(num) >= 0;
          };

          BN.prototype.ltn = function ltn(num) {
            return this.cmpn(num) === -1;
          };

          BN.prototype.lt = function lt(num) {
            return this.cmp(num) === -1;
          };

          BN.prototype.lten = function lten(num) {
            return this.cmpn(num) <= 0;
          };

          BN.prototype.lte = function lte(num) {
            return this.cmp(num) <= 0;
          };

          BN.prototype.eqn = function eqn(num) {
            return this.cmpn(num) === 0;
          };

          BN.prototype.eq = function eq(num) {
            return this.cmp(num) === 0;
          };

          //
          // A reduce context, could be using montgomery or something better, depending
          // on the `m` itself.
          //
          BN.red = function red(num) {
            return new Red(num);
          };

          BN.prototype.toRed = function toRed(ctx) {
            assert(!this.red, 'Already a number in reduction context');
            assert(this.negative === 0, 'red works only with positives');
            return ctx.convertTo(this)._forceRed(ctx);
          };

          BN.prototype.fromRed = function fromRed() {
            assert(this.red, 'fromRed works only with numbers in reduction context');
            return this.red.convertFrom(this);
          };

          BN.prototype._forceRed = function _forceRed(ctx) {
            this.red = ctx;
            return this;
          };

          BN.prototype.forceRed = function forceRed(ctx) {
            assert(!this.red, 'Already a number in reduction context');
            return this._forceRed(ctx);
          };

          BN.prototype.redAdd = function redAdd(num) {
            assert(this.red, 'redAdd works only with red numbers');
            return this.red.add(this, num);
          };

          BN.prototype.redIAdd = function redIAdd(num) {
            assert(this.red, 'redIAdd works only with red numbers');
            return this.red.iadd(this, num);
          };

          BN.prototype.redSub = function redSub(num) {
            assert(this.red, 'redSub works only with red numbers');
            return this.red.sub(this, num);
          };

          BN.prototype.redISub = function redISub(num) {
            assert(this.red, 'redISub works only with red numbers');
            return this.red.isub(this, num);
          };

          BN.prototype.redShl = function redShl(num) {
            assert(this.red, 'redShl works only with red numbers');
            return this.red.shl(this, num);
          };

          BN.prototype.redMul = function redMul(num) {
            assert(this.red, 'redMul works only with red numbers');
            this.red._verify2(this, num);
            return this.red.mul(this, num);
          };

          BN.prototype.redIMul = function redIMul(num) {
            assert(this.red, 'redMul works only with red numbers');
            this.red._verify2(this, num);
            return this.red.imul(this, num);
          };

          BN.prototype.redSqr = function redSqr() {
            assert(this.red, 'redSqr works only with red numbers');
            this.red._verify1(this);
            return this.red.sqr(this);
          };

          BN.prototype.redISqr = function redISqr() {
            assert(this.red, 'redISqr works only with red numbers');
            this.red._verify1(this);
            return this.red.isqr(this);
          };

          // Square root over p
          BN.prototype.redSqrt = function redSqrt() {
            assert(this.red, 'redSqrt works only with red numbers');
            this.red._verify1(this);
            return this.red.sqrt(this);
          };

          BN.prototype.redInvm = function redInvm() {
            assert(this.red, 'redInvm works only with red numbers');
            this.red._verify1(this);
            return this.red.invm(this);
          };

          // Return negative clone of `this` % `red modulo`
          BN.prototype.redNeg = function redNeg() {
            assert(this.red, 'redNeg works only with red numbers');
            this.red._verify1(this);
            return this.red.neg(this);
          };

          BN.prototype.redPow = function redPow(num) {
            assert(this.red && !num.red, 'redPow(normalNum)');
            this.red._verify1(this);
            return this.red.pow(this, num);
          };

          // Prime numbers with efficient reduction
          var primes = {
            k256: null,
            p224: null,
            p192: null,
            p25519: null
          };

          // Pseudo-Mersenne prime
          function MPrime(name, p) {
            // P = 2 ^ N - K
            this.name = name;
            this.p = new BN(p, 16);
            this.n = this.p.bitLength();
            this.k = new BN(1).iushln(this.n).isub(this.p);

            this.tmp = this._tmp();
          }

          MPrime.prototype._tmp = function _tmp() {
            var tmp = new BN(null);
            tmp.words = new Array(Math.ceil(this.n / 13));
            return tmp;
          };

          MPrime.prototype.ireduce = function ireduce(num) {
            // Assumes that `num` is less than `P^2`
            // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
            var r = num;
            var rlen;

            do {
              this.split(r, this.tmp);
              r = this.imulK(r);
              r = r.iadd(this.tmp);
              rlen = r.bitLength();
            } while (rlen > this.n);

            var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
            if (cmp === 0) {
              r.words[0] = 0;
              r.length = 1;
            } else if (cmp > 0) {
              r.isub(this.p);
            } else {
              r.strip();
            }

            return r;
          };

          MPrime.prototype.split = function split(input, out) {
            input.iushrn(this.n, 0, out);
          };

          MPrime.prototype.imulK = function imulK(num) {
            return num.imul(this.k);
          };

          function K256() {
            MPrime.call(
              this,
              'k256',
              'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
          }
          inherits(K256, MPrime);

          K256.prototype.split = function split(input, output) {
            // 256 = 9 * 26 + 22
            var mask = 0x3fffff;

            var outLen = Math.min(input.length, 9);
            for (var i = 0; i < outLen; i++) {
              output.words[i] = input.words[i];
            }
            output.length = outLen;

            if (input.length <= 9) {
              input.words[0] = 0;
              input.length = 1;
              return;
            }

            // Shift by 9 limbs
            var prev = input.words[9];
            output.words[output.length++] = prev & mask;

            for (i = 10; i < input.length; i++) {
              var next = input.words[i] | 0;
              input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);
              prev = next;
            }
            prev >>>= 22;
            input.words[i - 10] = prev;
            if (prev === 0 && input.length > 10) {
              input.length -= 10;
            } else {
              input.length -= 9;
            }
          };

          K256.prototype.imulK = function imulK(num) {
            // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
            num.words[num.length] = 0;
            num.words[num.length + 1] = 0;
            num.length += 2;

            // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
            var lo = 0;
            for (var i = 0; i < num.length; i++) {
              var w = num.words[i] | 0;
              lo += w * 0x3d1;
              num.words[i] = lo & 0x3ffffff;
              lo = w * 0x40 + ((lo / 0x4000000) | 0);
            }

            // Fast length reduction
            if (num.words[num.length - 1] === 0) {
              num.length--;
              if (num.words[num.length - 1] === 0) {
                num.length--;
              }
            }
            return num;
          };

          function P224() {
            MPrime.call(
              this,
              'p224',
              'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
          }
          inherits(P224, MPrime);

          function P192() {
            MPrime.call(
              this,
              'p192',
              'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
          }
          inherits(P192, MPrime);

          function P25519() {
            // 2 ^ 255 - 19
            MPrime.call(
              this,
              '25519',
              '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
          }
          inherits(P25519, MPrime);

          P25519.prototype.imulK = function imulK(num) {
            // K = 0x13
            var carry = 0;
            for (var i = 0; i < num.length; i++) {
              var hi = (num.words[i] | 0) * 0x13 + carry;
              var lo = hi & 0x3ffffff;
              hi >>>= 26;

              num.words[i] = lo;
              carry = hi;
            }
            if (carry !== 0) {
              num.words[num.length++] = carry;
            }
            return num;
          };

          // Exported mostly for testing purposes, use plain name instead
          BN._prime = function prime(name) {
            // Cached version of prime
            if (primes[name]) return primes[name];

            var prime;
            if (name === 'k256') {
              prime = new K256();
            } else if (name === 'p224') {
              prime = new P224();
            } else if (name === 'p192') {
              prime = new P192();
            } else if (name === 'p25519') {
              prime = new P25519();
            } else {
              throw new Error('Unknown prime ' + name);
            }
            primes[name] = prime;

            return prime;
          };

          //
          // Base reduction engine
          //
          function Red(m) {
            if (typeof m === 'string') {
              var prime = BN._prime(m);
              this.m = prime.p;
              this.prime = prime;
            } else {
              assert(m.gtn(1), 'modulus must be greater than 1');
              this.m = m;
              this.prime = null;
            }
          }

          Red.prototype._verify1 = function _verify1(a) {
            assert(a.negative === 0, 'red works only with positives');
            assert(a.red, 'red works only with red numbers');
          };

          Red.prototype._verify2 = function _verify2(a, b) {
            assert((a.negative | b.negative) === 0, 'red works only with positives');
            assert(a.red && a.red === b.red,
              'red works only with red numbers');
          };

          Red.prototype.imod = function imod(a) {
            if (this.prime) return this.prime.ireduce(a)._forceRed(this);
            return a.umod(this.m)._forceRed(this);
          };

          Red.prototype.neg = function neg(a) {
            if (a.isZero()) {
              return a.clone();
            }

            return this.m.sub(a)._forceRed(this);
          };

          Red.prototype.add = function add(a, b) {
            this._verify2(a, b);

            var res = a.add(b);
            if (res.cmp(this.m) >= 0) {
              res.isub(this.m);
            }
            return res._forceRed(this);
          };

          Red.prototype.iadd = function iadd(a, b) {
            this._verify2(a, b);

            var res = a.iadd(b);
            if (res.cmp(this.m) >= 0) {
              res.isub(this.m);
            }
            return res;
          };

          Red.prototype.sub = function sub(a, b) {
            this._verify2(a, b);

            var res = a.sub(b);
            if (res.cmpn(0) < 0) {
              res.iadd(this.m);
            }
            return res._forceRed(this);
          };

          Red.prototype.isub = function isub(a, b) {
            this._verify2(a, b);

            var res = a.isub(b);
            if (res.cmpn(0) < 0) {
              res.iadd(this.m);
            }
            return res;
          };

          Red.prototype.shl = function shl(a, num) {
            this._verify1(a);
            return this.imod(a.ushln(num));
          };

          Red.prototype.imul = function imul(a, b) {
            this._verify2(a, b);
            return this.imod(a.imul(b));
          };

          Red.prototype.mul = function mul(a, b) {
            this._verify2(a, b);
            return this.imod(a.mul(b));
          };

          Red.prototype.isqr = function isqr(a) {
            return this.imul(a, a.clone());
          };

          Red.prototype.sqr = function sqr(a) {
            return this.mul(a, a);
          };

          Red.prototype.sqrt = function sqrt(a) {
            if (a.isZero()) return a.clone();

            var mod3 = this.m.andln(3);
            assert(mod3 % 2 === 1);

            // Fast case
            if (mod3 === 3) {
              var pow = this.m.add(new BN(1)).iushrn(2);
              return this.pow(a, pow);
            }

            // Tonelli-Shanks algorithm (Totally unoptimized and slow)
            //
            // Find Q and S, that Q * 2 ^ S = (P - 1)
            var q = this.m.subn(1);
            var s = 0;
            while (!q.isZero() && q.andln(1) === 0) {
              s++;
              q.iushrn(1);
            }
            assert(!q.isZero());

            var one = new BN(1).toRed(this);
            var nOne = one.redNeg();

            // Find quadratic non-residue
            // NOTE: Max is such because of generalized Riemann hypothesis.
            var lpow = this.m.subn(1).iushrn(1);
            var z = this.m.bitLength();
            z = new BN(2 * z * z).toRed(this);

            while (this.pow(z, lpow).cmp(nOne) !== 0) {
              z.redIAdd(nOne);
            }

            var c = this.pow(z, q);
            var r = this.pow(a, q.addn(1).iushrn(1));
            var t = this.pow(a, q);
            var m = s;
            while (t.cmp(one) !== 0) {
              var tmp = t;
              for (var i = 0; tmp.cmp(one) !== 0; i++) {
                tmp = tmp.redSqr();
              }
              assert(i < m);
              var b = this.pow(c, new BN(1).iushln(m - i - 1));

              r = r.redMul(b);
              c = b.redSqr();
              t = t.redMul(c);
              m = i;
            }

            return r;
          };

          Red.prototype.invm = function invm(a) {
            var inv = a._invmp(this.m);
            if (inv.negative !== 0) {
              inv.negative = 0;
              return this.imod(inv).redNeg();
            } else {
              return this.imod(inv);
            }
          };

          Red.prototype.pow = function pow(a, num) {
            if (num.isZero()) return new BN(1);
            if (num.cmpn(1) === 0) return a.clone();

            var windowSize = 4;
            var wnd = new Array(1 << windowSize);
            wnd[0] = new BN(1).toRed(this);
            wnd[1] = a;
            for (var i = 2; i < wnd.length; i++) {
              wnd[i] = this.mul(wnd[i - 1], a);
            }

            var res = wnd[0];
            var current = 0;
            var currentLen = 0;
            var start = num.bitLength() % 26;
            if (start === 0) {
              start = 26;
            }

            for (i = num.length - 1; i >= 0; i--) {
              var word = num.words[i];
              for (var j = start - 1; j >= 0; j--) {
                var bit = (word >> j) & 1;
                if (res !== wnd[0]) {
                  res = this.sqr(res);
                }

                if (bit === 0 && current === 0) {
                  currentLen = 0;
                  continue;
                }

                current <<= 1;
                current |= bit;
                currentLen++;
                if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;

                res = this.mul(res, wnd[current]);
                currentLen = 0;
                current = 0;
              }
              start = 26;
            }

            return res;
          };

          Red.prototype.convertTo = function convertTo(num) {
            var r = num.umod(this.m);

            return r === num ? r.clone() : r;
          };

          Red.prototype.convertFrom = function convertFrom(num) {
            var res = num.clone();
            res.red = null;
            return res;
          };

          //
          // Montgomery method engine
          //

          BN.mont = function mont(num) {
            return new Mont(num);
          };

          function Mont(m) {
            Red.call(this, m);

            this.shift = this.m.bitLength();
            if (this.shift % 26 !== 0) {
              this.shift += 26 - (this.shift % 26);
            }

            this.r = new BN(1).iushln(this.shift);
            this.r2 = this.imod(this.r.sqr());
            this.rinv = this.r._invmp(this.m);

            this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
            this.minv = this.minv.umod(this.r);
            this.minv = this.r.sub(this.minv);
          }
          inherits(Mont, Red);

          Mont.prototype.convertTo = function convertTo(num) {
            return this.imod(num.ushln(this.shift));
          };

          Mont.prototype.convertFrom = function convertFrom(num) {
            var r = this.imod(num.mul(this.rinv));
            r.red = null;
            return r;
          };

          Mont.prototype.imul = function imul(a, b) {
            if (a.isZero() || b.isZero()) {
              a.words[0] = 0;
              a.length = 1;
              return a;
            }

            var t = a.imul(b);
            var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
            var u = t.isub(c).iushrn(this.shift);
            var res = u;

            if (u.cmp(this.m) >= 0) {
              res = u.isub(this.m);
            } else if (u.cmpn(0) < 0) {
              res = u.iadd(this.m);
            }

            return res._forceRed(this);
          };

          Mont.prototype.mul = function mul(a, b) {
            if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);

            var t = a.mul(b);
            var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
            var u = t.isub(c).iushrn(this.shift);
            var res = u;
            if (u.cmp(this.m) >= 0) {
              res = u.isub(this.m);
            } else if (u.cmpn(0) < 0) {
              res = u.iadd(this.m);
            }

            return res._forceRed(this);
          };

          Mont.prototype.invm = function invm(a) {
            // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
            var res = this.imod(a._invmp(this.m).mul(this.r2));
            return res._forceRed(this);
          };
        })(typeof module === 'undefined' || module, this);

        /* WEBPACK VAR INJECTION */
      }.call(this, __webpack_require__(/*! ./../../../../../../../../AppData/Roaming/npm/node_modules/webpack/buildin/module.js */ "../../../../../AppData/Roaming/npm/node_modules/webpack/buildin/module.js")(module)))

      /***/
    }),

/***/ "../web3-utils/node_modules/utf8/utf8.js":
/*!***********************************************!*\
  !*** ../web3-utils/node_modules/utf8/utf8.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function (module, global) {
        var __WEBPACK_AMD_DEFINE_RESULT__;/*! https://mths.be/utf8js v2.0.0 by @mathias */
        ; (function (root) {

          // Detect free variables `exports`
          var freeExports = typeof exports == 'object' && exports;

          // Detect free variable `module`
          var freeModule = typeof module == 'object' && module &&
            module.exports == freeExports && module;

          // Detect free variable `global`, from Node.js or Browserified code,
          // and use it as `root`
          var freeGlobal = typeof global == 'object' && global;
          if (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal) {
            root = freeGlobal;
          }

          /*--------------------------------------------------------------------------*/

          var stringFromCharCode = String.fromCharCode;

          // Taken from https://mths.be/punycode
          function ucs2decode(string) {
            var output = [];
            var counter = 0;
            var length = string.length;
            var value;
            var extra;
            while (counter < length) {
              value = string.charCodeAt(counter++);
              if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
                // high surrogate, and there is a next character
                extra = string.charCodeAt(counter++);
                if ((extra & 0xFC00) == 0xDC00) { // low surrogate
                  output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
                } else {
                  // unmatched surrogate; only append this code unit, in case the next
                  // code unit is the high surrogate of a surrogate pair
                  output.push(value);
                  counter--;
                }
              } else {
                output.push(value);
              }
            }
            return output;
          }

          // Taken from https://mths.be/punycode
          function ucs2encode(array) {
            var length = array.length;
            var index = -1;
            var value;
            var output = '';
            while (++index < length) {
              value = array[index];
              if (value > 0xFFFF) {
                value -= 0x10000;
                output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
                value = 0xDC00 | value & 0x3FF;
              }
              output += stringFromCharCode(value);
            }
            return output;
          }

          function checkScalarValue(codePoint) {
            if (codePoint >= 0xD800 && codePoint <= 0xDFFF) {
              throw Error(
                'Lone surrogate U+' + codePoint.toString(16).toUpperCase() +
                ' is not a scalar value'
              );
            }
          }
          /*--------------------------------------------------------------------------*/

          function createByte(codePoint, shift) {
            return stringFromCharCode(((codePoint >> shift) & 0x3F) | 0x80);
          }

          function encodeCodePoint(codePoint) {
            if ((codePoint & 0xFFFFFF80) == 0) { // 1-byte sequence
              return stringFromCharCode(codePoint);
            }
            var symbol = '';
            if ((codePoint & 0xFFFFF800) == 0) { // 2-byte sequence
              symbol = stringFromCharCode(((codePoint >> 6) & 0x1F) | 0xC0);
            }
            else if ((codePoint & 0xFFFF0000) == 0) { // 3-byte sequence
              checkScalarValue(codePoint);
              symbol = stringFromCharCode(((codePoint >> 12) & 0x0F) | 0xE0);
              symbol += createByte(codePoint, 6);
            }
            else if ((codePoint & 0xFFE00000) == 0) { // 4-byte sequence
              symbol = stringFromCharCode(((codePoint >> 18) & 0x07) | 0xF0);
              symbol += createByte(codePoint, 12);
              symbol += createByte(codePoint, 6);
            }
            symbol += stringFromCharCode((codePoint & 0x3F) | 0x80);
            return symbol;
          }

          function utf8encode(string) {
            var codePoints = ucs2decode(string);
            var length = codePoints.length;
            var index = -1;
            var codePoint;
            var byteString = '';
            while (++index < length) {
              codePoint = codePoints[index];
              byteString += encodeCodePoint(codePoint);
            }
            return byteString;
          }

          /*--------------------------------------------------------------------------*/

          function readContinuationByte() {
            if (byteIndex >= byteCount) {
              throw Error('Invalid byte index');
            }

            var continuationByte = byteArray[byteIndex] & 0xFF;
            byteIndex++;

            if ((continuationByte & 0xC0) == 0x80) {
              return continuationByte & 0x3F;
            }

            // If we end up here, it’s not a continuation byte
            throw Error('Invalid continuation byte');
          }

          function decodeSymbol() {
            var byte1;
            var byte2;
            var byte3;
            var byte4;
            var codePoint;

            if (byteIndex > byteCount) {
              throw Error('Invalid byte index');
            }

            if (byteIndex == byteCount) {
              return false;
            }

            // Read first byte
            byte1 = byteArray[byteIndex] & 0xFF;
            byteIndex++;

            // 1-byte sequence (no continuation bytes)
            if ((byte1 & 0x80) == 0) {
              return byte1;
            }

            // 2-byte sequence
            if ((byte1 & 0xE0) == 0xC0) {
              var byte2 = readContinuationByte();
              codePoint = ((byte1 & 0x1F) << 6) | byte2;
              if (codePoint >= 0x80) {
                return codePoint;
              } else {
                throw Error('Invalid continuation byte');
              }
            }

            // 3-byte sequence (may include unpaired surrogates)
            if ((byte1 & 0xF0) == 0xE0) {
              byte2 = readContinuationByte();
              byte3 = readContinuationByte();
              codePoint = ((byte1 & 0x0F) << 12) | (byte2 << 6) | byte3;
              if (codePoint >= 0x0800) {
                checkScalarValue(codePoint);
                return codePoint;
              } else {
                throw Error('Invalid continuation byte');
              }
            }

            // 4-byte sequence
            if ((byte1 & 0xF8) == 0xF0) {
              byte2 = readContinuationByte();
              byte3 = readContinuationByte();
              byte4 = readContinuationByte();
              codePoint = ((byte1 & 0x0F) << 0x12) | (byte2 << 0x0C) |
                (byte3 << 0x06) | byte4;
              if (codePoint >= 0x010000 && codePoint <= 0x10FFFF) {
                return codePoint;
              }
            }

            throw Error('Invalid UTF-8 detected');
          }

          var byteArray;
          var byteCount;
          var byteIndex;
          function utf8decode(byteString) {
            byteArray = ucs2decode(byteString);
            byteCount = byteArray.length;
            byteIndex = 0;
            var codePoints = [];
            var tmp;
            while ((tmp = decodeSymbol()) !== false) {
              codePoints.push(tmp);
            }
            return ucs2encode(codePoints);
          }

          /*--------------------------------------------------------------------------*/

          var utf8 = {
            'version': '2.0.0',
            'encode': utf8encode,
            'decode': utf8decode
          };

          // Some AMD build optimizers, like r.js, check for specific condition patterns
          // like the following:
          if (
            true
          ) {
            !(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
              return utf8;
            }).call(exports, __webpack_require__, exports, module),
              __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
          } else { var key, hasOwnProperty, object; }

        } (this));

        /* WEBPACK VAR INJECTION */
      }.call(this, __webpack_require__(/*! ./../../../../../../../AppData/Roaming/npm/node_modules/webpack/buildin/module.js */ "../../../../../AppData/Roaming/npm/node_modules/webpack/buildin/module.js")(module), __webpack_require__(/*! ./../../../../../../../AppData/Roaming/npm/node_modules/webpack/buildin/global.js */ "../../../../../AppData/Roaming/npm/node_modules/webpack/buildin/global.js")))

      /***/
    }),

/***/ "../web3-utils/src/index.js":
/*!**********************************!*\
  !*** ../web3-utils/src/index.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

      /*
       This file is part of web3.js.
      
       web3.js is free software: you can redistribute it and/or modify
       it under the terms of the GNU Lesser General Public License as published by
       the Free Software Foundation, either version 3 of the License, or
       (at your option) any later version.
      
       web3.js is distributed in the hope that it will be useful,
       but WITHOUT ANY WARRANTY; without even the implied warranty of
       MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
       GNU Lesser General Public License for more details.
      
       You should have received a copy of the GNU Lesser General Public License
       along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
       */
      /**
       * @file utils.js
       * @author Marek Kotewicz <marek@parity.io>
       * @author Fabian Vogelsteller <fabian@ethereum.org>
       * @date 2017
       */


      var _ = __webpack_require__(/*! underscore */ "../underscore/underscore.js");
      var ethjsUnit = __webpack_require__(/*! ethjs-unit */ "../ethjs-unit/lib/index.js");
      var utils = __webpack_require__(/*! ./utils.js */ "../web3-utils/src/utils.js");
      var soliditySha3 = __webpack_require__(/*! ./soliditySha3.js */ "../web3-utils/src/soliditySha3.js");
      var randomHex = __webpack_require__(/*! randomhex */ "../randomhex/src/index.js");



      /**
       * Fires an error in an event emitter and callback and returns the eventemitter
       *
       * @method _fireError
       * @param {Object} error a string, a error, or an object with {message, data}
       * @param {Object} emitter
       * @param {Function} reject
       * @param {Function} callback
       * @return {Object} the emitter
       */
      var _fireError = function (error, emitter, reject, callback) {
        /*jshint maxcomplexity: 10 */

        // add data if given
        if (_.isObject(error) && !(error instanceof Error) && error.data) {
          if (_.isObject(error.data) || _.isArray(error.data)) {
            error.data = JSON.stringify(error.data, null, 2);
          }

          error = error.message + "\n" + error.data;
        }

        if (_.isString(error)) {
          error = new Error(error);
        }

        if (_.isFunction(callback)) {
          callback(error);
        }
        if (_.isFunction(reject)) {
          // suppress uncatched error if an error listener is present
          // OR suppress uncatched error if an callback listener is present
          if (emitter &&
            (_.isFunction(emitter.listeners) &&
              emitter.listeners('error').length) || _.isFunction(callback)) {
            emitter.catch(function () { });
          }
          // reject later, to be able to return emitter
          setTimeout(function () {
            reject(error);
          }, 1);
        }

        if (emitter && _.isFunction(emitter.emit)) {
          // emit later, to be able to return emitter
          setTimeout(function () {
            emitter.emit('error', error);
            emitter.removeAllListeners();
          }, 1);
        }

        return emitter;
      };

      /**
       * Should be used to create full function/event name from json abi
       *
       * @method _jsonInterfaceMethodToString
       * @param {Object} json
       * @return {String} full function/event name
       */
      var _jsonInterfaceMethodToString = function (json) {
        if (_.isObject(json) && json.name && json.name.indexOf('(') !== -1) {
          return json.name;
        }

        return json.name + '(' + _flattenTypes(false, json.inputs).join(',') + ')';
      };


      /**
       * Should be used to flatten json abi inputs/outputs into an array of type-representing-strings
       *
       * @method _flattenTypes
       * @param {bool} includeTuple
       * @param {Object} puts
       * @return {Array} parameters as strings
       */
      var _flattenTypes = function (includeTuple, puts) {
        // console.log("entered _flattenTypes. inputs/outputs: " + puts)
        var types = [];

        puts.forEach(function (param) {
          if (typeof param.components === 'object') {
            if (param.type.substring(0, 5) !== 'tuple') {
              throw new Error('components found but type is not tuple; report on GitHub');
            }
            var suffix = '';
            var arrayBracket = param.type.indexOf('[');
            if (arrayBracket >= 0) { suffix = param.type.substring(arrayBracket); }
            var result = _flattenTypes(includeTuple, param.components);
            // console.log("result should have things: " + result)
            if (_.isArray(result) && includeTuple) {
              // console.log("include tuple word, and its an array. joining...: " + result.types)
              types.push('tuple(' + result.join(',') + ')' + suffix);
            }
            else if (!includeTuple) {
              // console.log("don't include tuple, but its an array. joining...: " + result)
              types.push('(' + result.join(',') + ')' + suffix);
            }
            else {
              // console.log("its a single type within a tuple: " + result.types)
              types.push('(' + result + ')');
            }
          } else {
            // console.log("its a type and not directly in a tuple: " + param.type)
            types.push(param.type);
          }
        });

        return types;
      };


      /**
       * Should be called to get ascii from it's hex representation
       *
       * @method hexToAscii
       * @param {String} hex
       * @returns {String} ascii string representation of hex value
       */
      var hexToAscii = function (hex) {
        if (!utils.isHexStrict(hex))
          throw new Error('The parameter must be a valid HEX string.');

        var str = "";
        var i = 0, l = hex.length;
        if (hex.substring(0, 2) === '0x') {
          i = 2;
        }
        for (; i < l; i += 2) {
          var code = parseInt(hex.substr(i, 2), 16);
          str += String.fromCharCode(code);
        }

        return str;
      };

      /**
       * Should be called to get hex representation (prefixed by 0x) of ascii string
       *
       * @method asciiToHex
       * @param {String} str
       * @returns {String} hex representation of input string
       */
      var asciiToHex = function (str) {
        if (!str)
          return "0x00";
        var hex = "";
        for (var i = 0; i < str.length; i++) {
          var code = str.charCodeAt(i);
          var n = code.toString(16);
          hex += n.length < 2 ? '0' + n : n;
        }

        return "0x" + hex;
      };



      /**
       * Returns value of unit in Wei
       *
       * @method getUnitValue
       * @param {String} unit the unit to convert to, default ether
       * @returns {BN} value of the unit (in Wei)
       * @throws error if the unit is not correct:w
       */
      var getUnitValue = function (unit) {
        unit = unit ? unit.toLowerCase() : 'ether';
        if (!ethjsUnit.unitMap[unit]) {
          throw new Error('This unit "' + unit + '" doesn\'t exist, please use the one of the following units' + JSON.stringify(ethjsUnit.unitMap, null, 2));
        }
        return unit;
      };

      /**
       * Takes a number of wei and converts it to any other ether unit.
       *
       * Possible units are:
       *   SI Short   SI Full        Effigy       Other
       * - kwei       femtoether     babbage
       * - mwei       picoether      lovelace
       * - gwei       nanoether      shannon      nano
       * - --         microether     szabo        micro
       * - --         milliether     finney       milli
       * - ether      --             --
       * - kether                    --           grand
       * - mether
       * - gether
       * - tether
       *
       * @method fromWei
       * @param {Number|String} number can be a number, number string or a HEX of a decimal
       * @param {String} unit the unit to convert to, default ether
       * @return {String|Object} When given a BN object it returns one as well, otherwise a number
       */
      var fromWei = function (number, unit) {
        unit = getUnitValue(unit);

        if (!utils.isBN(number) && !_.isString(number)) {
          throw new Error('Please pass numbers as strings or BigNumber objects to avoid precision errors.');
        }

        return utils.isBN(number) ? ethjsUnit.fromWei(number, unit) : ethjsUnit.fromWei(number, unit).toString(10);
      };

      /**
       * Takes a number of a unit and converts it to wei.
       *
       * Possible units are:
       *   SI Short   SI Full        Effigy       Other
       * - kwei       femtoether     babbage
       * - mwei       picoether      lovelace
       * - gwei       nanoether      shannon      nano
       * - --         microether     szabo        micro
       * - --         microether     szabo        micro
       * - --         milliether     finney       milli
       * - ether      --             --
       * - kether                    --           grand
       * - mether
       * - gether
       * - tether
       *
       * @method toWei
       * @param {Number|String|BN} number can be a number, number string or a HEX of a decimal
       * @param {String} unit the unit to convert from, default ether
       * @return {String|Object} When given a BN object it returns one as well, otherwise a number
       */
      var toWei = function (number, unit) {
        unit = getUnitValue(unit);

        if (!utils.isBN(number) && !_.isString(number)) {
          throw new Error('Please pass numbers as strings or BigNumber objects to avoid precision errors.');
        }

        return utils.isBN(number) ? ethjsUnit.toWei(number, unit) : ethjsUnit.toWei(number, unit).toString(10);
      };




      /**
       * Converts to a checksum address
       *
       * @method toChecksumAddress
       * @param {String} address the given HEX address
       * @return {String}
       */
      var toChecksumAddress = function (address) {
        if (typeof address === 'undefined') return '';

        if (!/^(0x)?[0-9a-f]{40}$/i.test(address))
          throw new Error('Given address "' + address + '" is not a valid Ethereum address.');



        address = address.toLowerCase().replace(/^0x/i, '');
        var addressHash = utils.sha3(address).replace(/^0x/i, '');
        var checksumAddress = '0x';

        for (var i = 0; i < address.length; i++) {
          // If ith character is 9 to f then make it uppercase
          if (parseInt(addressHash[i], 16) > 7) {
            checksumAddress += address[i].toUpperCase();
          } else {
            checksumAddress += address[i];
          }
        }
        return checksumAddress;
      };



      module.exports = {
        _fireError: _fireError,
        _jsonInterfaceMethodToString: _jsonInterfaceMethodToString,
        _flattenTypes: _flattenTypes,
        // extractDisplayName: extractDisplayName,
        // extractTypeName: extractTypeName,
        randomHex: randomHex,
        _: _,
        BN: utils.BN,
        isBN: utils.isBN,
        isBigNumber: utils.isBigNumber,
        isHex: utils.isHex,
        isHexStrict: utils.isHexStrict,
        sha3: utils.sha3,
        keccak256: utils.sha3,
        soliditySha3: soliditySha3,
        isAddress: utils.isAddress,
        checkAddressChecksum: utils.checkAddressChecksum,
        toChecksumAddress: toChecksumAddress,
        toHex: utils.toHex,
        toBN: utils.toBN,

        bytesToHex: utils.bytesToHex,
        hexToBytes: utils.hexToBytes,

        hexToNumberString: utils.hexToNumberString,

        hexToNumber: utils.hexToNumber,
        toDecimal: utils.hexToNumber, // alias

        numberToHex: utils.numberToHex,
        fromDecimal: utils.numberToHex, // alias

        hexToUtf8: utils.hexToUtf8,
        hexToString: utils.hexToUtf8,
        toUtf8: utils.hexToUtf8,

        utf8ToHex: utils.utf8ToHex,
        stringToHex: utils.utf8ToHex,
        fromUtf8: utils.utf8ToHex,

        hexToAscii: hexToAscii,
        toAscii: hexToAscii,
        asciiToHex: asciiToHex,
        fromAscii: asciiToHex,

        unitMap: ethjsUnit.unitMap,
        toWei: toWei,
        fromWei: fromWei,

        padLeft: utils.leftPad,
        leftPad: utils.leftPad,
        padRight: utils.rightPad,
        rightPad: utils.rightPad,
        toTwosComplement: utils.toTwosComplement
      };



      /***/
    }),

/***/ "../web3-utils/src/soliditySha3.js":
/*!*****************************************!*\
  !*** ../web3-utils/src/soliditySha3.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

      /*
       This file is part of web3.js.
      
       web3.js is free software: you can redistribute it and/or modify
       it under the terms of the GNU Lesser General Public License as published by
       the Free Software Foundation, either version 3 of the License, or
       (at your option) any later version.
      
       web3.js is distributed in the hope that it will be useful,
       but WITHOUT ANY WARRANTY; without even the implied warranty of
       MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
       GNU Lesser General Public License for more details.
      
       You should have received a copy of the GNU Lesser General Public License
       along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
       */
      /**
       * @file soliditySha3.js
       * @author Fabian Vogelsteller <fabian@ethereum.org>
       * @date 2017
       */

      var _ = __webpack_require__(/*! underscore */ "../underscore/underscore.js");
      var BN = __webpack_require__(/*! bn.js */ "../web3-utils/node_modules/bn.js/lib/bn.js");
      var utils = __webpack_require__(/*! ./utils.js */ "../web3-utils/src/utils.js");


      var _elementaryName = function (name) {
        /*jshint maxcomplexity:false */

        if (name.startsWith('int[')) {
          return 'int256' + name.slice(3);
        } else if (name === 'int') {
          return 'int256';
        } else if (name.startsWith('uint[')) {
          return 'uint256' + name.slice(4);
        } else if (name === 'uint') {
          return 'uint256';
        } else if (name.startsWith('fixed[')) {
          return 'fixed128x128' + name.slice(5);
        } else if (name === 'fixed') {
          return 'fixed128x128';
        } else if (name.startsWith('ufixed[')) {
          return 'ufixed128x128' + name.slice(6);
        } else if (name === 'ufixed') {
          return 'ufixed128x128';
        }
        return name;
      };

      // Parse N from type<N>
      var _parseTypeN = function (type) {
        var typesize = /^\D+(\d+).*$/.exec(type);
        return typesize ? parseInt(typesize[1], 10) : null;
      };

      // Parse N from type[<N>]
      var _parseTypeNArray = function (type) {
        var arraySize = /^\D+\d*\[(\d+)\]$/.exec(type);
        return arraySize ? parseInt(arraySize[1], 10) : null;
      };

      var _parseNumber = function (arg) {
        var type = typeof arg;
        if (type === 'string') {
          if (utils.isHexStrict(arg)) {
            return new BN(arg.replace(/0x/i, ''), 16);
          } else {
            return new BN(arg, 10);
          }
        } else if (type === 'number') {
          return new BN(arg);
        } else if (utils.isBigNumber(arg)) {
          return new BN(arg.toString(10));
        } else if (utils.isBN(arg)) {
          return arg;
        } else {
          throw new Error(arg + ' is not a number');
        }
      };

      var _solidityPack = function (type, value, arraySize) {
        /*jshint maxcomplexity:false */

        var size, num;
        type = _elementaryName(type);


        if (type === 'bytes') {

          if (value.replace(/^0x/i, '').length % 2 !== 0) {
            throw new Error('Invalid bytes characters ' + value.length);
          }

          return value;
        } else if (type === 'string') {
          return utils.utf8ToHex(value);
        } else if (type === 'bool') {
          return value ? '01' : '00';
        } else if (type.startsWith('address')) {
          if (arraySize) {
            size = 64;
          } else {
            size = 40;
          }

          if (!utils.isAddress(value)) {
            throw new Error(value + ' is not a valid address, or the checksum is invalid.');
          }

          return utils.leftPad(value.toLowerCase(), size);
        }

        size = _parseTypeN(type);

        if (type.startsWith('bytes')) {

          if (!size) {
            throw new Error('bytes[] not yet supported in solidity');
          }

          // must be 32 byte slices when in an array
          if (arraySize) {
            size = 32;
          }

          if (size < 1 || size > 32 || size < value.replace(/^0x/i, '').length / 2) {
            throw new Error('Invalid bytes' + size + ' for ' + value);
          }

          return utils.rightPad(value, size * 2);
        } else if (type.startsWith('uint')) {

          if ((size % 8) || (size < 8) || (size > 256)) {
            throw new Error('Invalid uint' + size + ' size');
          }

          num = _parseNumber(value);
          if (num.bitLength() > size) {
            throw new Error('Supplied uint exceeds width: ' + size + ' vs ' + num.bitLength());
          }

          if (num.lt(new BN(0))) {
            throw new Error('Supplied uint ' + num.toString() + ' is negative');
          }

          return size ? utils.leftPad(num.toString('hex'), size / 8 * 2) : num;
        } else if (type.startsWith('int')) {

          if ((size % 8) || (size < 8) || (size > 256)) {
            throw new Error('Invalid int' + size + ' size');
          }

          num = _parseNumber(value);
          if (num.bitLength() > size) {
            throw new Error('Supplied int exceeds width: ' + size + ' vs ' + num.bitLength());
          }

          if (num.lt(new BN(0))) {
            return num.toTwos(size).toString('hex');
          } else {
            return size ? utils.leftPad(num.toString('hex'), size / 8 * 2) : num;
          }

        } else {
          // FIXME: support all other types
          throw new Error('Unsupported or invalid type: ' + type);
        }
      };


      var _processSoliditySha3Args = function (arg) {
        /*jshint maxcomplexity:false */

        if (_.isArray(arg)) {
          throw new Error('Autodetection of array types is not supported.');
        }

        var type, value = '';
        var hexArg, arraySize;

        // if type is given
        if (_.isObject(arg) && (arg.hasOwnProperty('v') || arg.hasOwnProperty('t') || arg.hasOwnProperty('value') || arg.hasOwnProperty('type'))) {
          type = arg.hasOwnProperty('t') ? arg.t : arg.type;
          value = arg.hasOwnProperty('v') ? arg.v : arg.value;

          // otherwise try to guess the type
        } else {

          type = utils.toHex(arg, true);
          value = utils.toHex(arg);

          if (!type.startsWith('int') && !type.startsWith('uint')) {
            type = 'bytes';
          }
        }

        if ((type.startsWith('int') || type.startsWith('uint')) && typeof value === 'string' && !/^(-)?0x/i.test(value)) {
          value = new BN(value);
        }

        // get the array size
        if (_.isArray(value)) {
          arraySize = _parseTypeNArray(type);
          if (arraySize && value.length !== arraySize) {
            throw new Error(type + ' is not matching the given array ' + JSON.stringify(value));
          } else {
            arraySize = value.length;
          }
        }


        if (_.isArray(value)) {
          hexArg = value.map(function (val) {
            return _solidityPack(type, val, arraySize).toString('hex').replace('0x', '');
          });
          return hexArg.join('');
        } else {
          hexArg = _solidityPack(type, value, arraySize);
          return hexArg.toString('hex').replace('0x', '');
        }

      };

      /**
       * Hashes solidity values to a sha3 hash using keccak 256
       *
       * @method soliditySha3
       * @return {Object} the sha3
       */
      var soliditySha3 = function () {
        /*jshint maxcomplexity:false */

        var args = Array.prototype.slice.call(arguments);

        var hexArgs = _.map(args, _processSoliditySha3Args);

        // console.log(args, hexArgs);
        // console.log('0x'+ hexArgs.join(''));

        return utils.sha3('0x' + hexArgs.join(''));
      };


      module.exports = soliditySha3;


      /***/
    }),

/***/ "../web3-utils/src/utils.js":
/*!**********************************!*\
  !*** ../web3-utils/src/utils.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

      /*
       This file is part of web3.js.
      
       web3.js is free software: you can redistribute it and/or modify
       it under the terms of the GNU Lesser General Public License as published by
       the Free Software Foundation, either version 3 of the License, or
       (at your option) any later version.
      
       web3.js is distributed in the hope that it will be useful,
       but WITHOUT ANY WARRANTY; without even the implied warranty of
       MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
       GNU Lesser General Public License for more details.
      
       You should have received a copy of the GNU Lesser General Public License
       along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
       */
      /**
       * @file utils.js
       * @author Fabian Vogelsteller <fabian@ethereum.org>
       * @date 2017
       */

      var _ = __webpack_require__(/*! underscore */ "../underscore/underscore.js");
      var BN = __webpack_require__(/*! bn.js */ "../web3-utils/node_modules/bn.js/lib/bn.js");
      var numberToBN = __webpack_require__(/*! number-to-bn */ "../number-to-bn/src/index.js");
      var utf8 = __webpack_require__(/*! utf8 */ "../web3-utils/node_modules/utf8/utf8.js");
      var Hash = __webpack_require__(/*! eth-lib/lib/hash */ "../eth-lib/lib/hash.js");


      /**
       * Returns true if object is BN, otherwise false
       *
       * @method isBN
       * @param {Object} object
       * @return {Boolean}
       */
      var isBN = function (object) {
        return object instanceof BN ||
          (object && object.constructor && object.constructor.name === 'BN');
      };

      /**
       * Returns true if object is BigNumber, otherwise false
       *
       * @method isBigNumber
       * @param {Object} object
       * @return {Boolean}
       */
      var isBigNumber = function (object) {
        return object && object.constructor && object.constructor.name === 'BigNumber';
      };

      /**
       * Takes an input and transforms it into an BN
       *
       * @method toBN
       * @param {Number|String|BN} number, string, HEX string or BN
       * @return {BN} BN
       */
      var toBN = function (number) {
        try {
          return numberToBN.apply(null, arguments);
        } catch (e) {
          throw new Error(e + ' Given value: "' + number + '"');
        }
      };


      /**
       * Takes and input transforms it into BN and if it is negative value, into two's complement
       *
       * @method toTwosComplement
       * @param {Number|String|BN} number
       * @return {String}
       */
      var toTwosComplement = function (number) {
        return '0x' + toBN(number).toTwos(256).toString(16, 64);
      };

      /**
       * Checks if the given string is an address
       *
       * @method isAddress
       * @param {String} address the given HEX address
       * @return {Boolean}
       */
      var isAddress = function (address) {
        // check if it has the basic requirements of an address
        if (!/^(0x)?[0-9a-f]{40}$/i.test(address)) {
          return false;
          // If it's ALL lowercase or ALL upppercase
        } else if (/^(0x|0X)?[0-9a-f]{40}$/.test(address) || /^(0x|0X)?[0-9A-F]{40}$/.test(address)) {
          return true;
          // Otherwise check each case
        } else {
          return checkAddressChecksum(address);
        }
      };



      /**
       * Checks if the given string is a checksummed address
       *
       * @method checkAddressChecksum
       * @param {String} address the given HEX address
       * @return {Boolean}
       */
      var checkAddressChecksum = function (address) {
        // Check each case
        address = address.replace(/^0x/i, '');
        var addressHash = sha3(address.toLowerCase()).replace(/^0x/i, '');

        for (var i = 0; i < 40; i++) {
          // the nth letter should be uppercase if the nth digit of casemap is 1
          if ((parseInt(addressHash[i], 16) > 7 && address[i].toUpperCase() !== address[i]) || (parseInt(addressHash[i], 16) <= 7 && address[i].toLowerCase() !== address[i])) {
            return false;
          }
        }
        return true;
      };

      /**
       * Should be called to pad string to expected length
       *
       * @method leftPad
       * @param {String} string to be padded
       * @param {Number} chars that result string should have
       * @param {String} sign, by default 0
       * @returns {String} right aligned string
       */
      var leftPad = function (string, chars, sign) {
        var hasPrefix = /^0x/i.test(string) || typeof string === 'number';
        string = string.toString(16).replace(/^0x/i, '');

        var padding = (chars - string.length + 1 >= 0) ? chars - string.length + 1 : 0;

        return (hasPrefix ? '0x' : '') + new Array(padding).join(sign ? sign : "0") + string;
      };

      /**
       * Should be called to pad string to expected length
       *
       * @method rightPad
       * @param {String} string to be padded
       * @param {Number} chars that result string should have
       * @param {String} sign, by default 0
       * @returns {String} right aligned string
       */
      var rightPad = function (string, chars, sign) {
        var hasPrefix = /^0x/i.test(string) || typeof string === 'number';
        string = string.toString(16).replace(/^0x/i, '');

        var padding = (chars - string.length + 1 >= 0) ? chars - string.length + 1 : 0;

        return (hasPrefix ? '0x' : '') + string + (new Array(padding).join(sign ? sign : "0"));
      };


      /**
       * Should be called to get hex representation (prefixed by 0x) of utf8 string
       *
       * @method utf8ToHex
       * @param {String} str
       * @returns {String} hex representation of input string
       */
      var utf8ToHex = function (str) {
        str = utf8.encode(str);
        var hex = "";

        // remove \u0000 padding from either side
        str = str.replace(/^(?:\u0000)*/, '');
        str = str.split("").reverse().join("");
        str = str.replace(/^(?:\u0000)*/, '');
        str = str.split("").reverse().join("");

        for (var i = 0; i < str.length; i++) {
          var code = str.charCodeAt(i);
          // if (code !== 0) {
          var n = code.toString(16);
          hex += n.length < 2 ? '0' + n : n;
          // }
        }

        return "0x" + hex;
      };

      /**
       * Should be called to get utf8 from it's hex representation
       *
       * @method hexToUtf8
       * @param {String} hex
       * @returns {String} ascii string representation of hex value
       */
      var hexToUtf8 = function (hex) {
        if (!isHexStrict(hex))
          throw new Error('The parameter "' + hex + '" must be a valid HEX string.');

        var str = "";
        var code = 0;
        hex = hex.replace(/^0x/i, '');

        // remove 00 padding from either side
        hex = hex.replace(/^(?:00)*/, '');
        hex = hex.split("").reverse().join("");
        hex = hex.replace(/^(?:00)*/, '');
        hex = hex.split("").reverse().join("");

        var l = hex.length;

        for (var i = 0; i < l; i += 2) {
          code = parseInt(hex.substr(i, 2), 16);
          // if (code !== 0) {
          str += String.fromCharCode(code);
          // }
        }

        return utf8.decode(str);
      };


      /**
       * Converts value to it's number representation
       *
       * @method hexToNumber
       * @param {String|Number|BN} value
       * @return {String}
       */
      var hexToNumber = function (value) {
        if (!value) {
          return value;
        }

        return toBN(value).toNumber();
      };

      /**
       * Converts value to it's decimal representation in string
       *
       * @method hexToNumberString
       * @param {String|Number|BN} value
       * @return {String}
       */
      var hexToNumberString = function (value) {
        if (!value) return value;

        return toBN(value).toString(10);
      };


      /**
       * Converts value to it's hex representation
       *
       * @method numberToHex
       * @param {String|Number|BN} value
       * @return {String}
       */
      var numberToHex = function (value) {
        if (_.isNull(value) || _.isUndefined(value)) {
          return value;
        }

        if (!isFinite(value) && !isHexStrict(value)) {
          throw new Error('Given input "' + value + '" is not a number.');
        }

        var number = toBN(value);
        var result = number.toString(16);

        return number.lt(new BN(0)) ? '-0x' + result.substr(1) : '0x' + result;
      };


      /**
       * Convert a byte array to a hex string
       *
       * Note: Implementation from crypto-js
       *
       * @method bytesToHex
       * @param {Array} bytes
       * @return {String} the hex string
       */
      var bytesToHex = function (bytes) {
        for (var hex = [], i = 0; i < bytes.length; i++) {
          /* jshint ignore:start */
          hex.push((bytes[i] >>> 4).toString(16));
          hex.push((bytes[i] & 0xF).toString(16));
          /* jshint ignore:end */
        }
        return '0x' + hex.join("");
      };

      /**
       * Convert a hex string to a byte array
       *
       * Note: Implementation from crypto-js
       *
       * @method hexToBytes
       * @param {string} hex
       * @return {Array} the byte array
       */
      var hexToBytes = function (hex) {
        hex = hex.toString(16);

        if (!isHexStrict(hex)) {
          throw new Error('Given value "' + hex + '" is not a valid hex string.');
        }

        hex = hex.replace(/^0x/i, '');

        for (var bytes = [], c = 0; c < hex.length; c += 2)
          bytes.push(parseInt(hex.substr(c, 2), 16));
        return bytes;
      };

      /**
       * Auto converts any given value into it's hex representation.
       *
       * And even stringifys objects before.
       *
       * @method toHex
       * @param {String|Number|BN|Object} value
       * @param {Boolean} returnType
       * @return {String}
       */
      var toHex = function (value, returnType) {
        /*jshint maxcomplexity: false */

        if (isAddress(value)) {
          return returnType ? 'address' : '0x' + value.toLowerCase().replace(/^0x/i, '');
        }

        if (_.isBoolean(value)) {
          return returnType ? 'bool' : value ? '0x01' : '0x00';
        }


        if (_.isObject(value) && !isBigNumber(value) && !isBN(value)) {
          return returnType ? 'string' : utf8ToHex(JSON.stringify(value));
        }

        // if its a negative number, pass it through numberToHex
        if (_.isString(value)) {
          if (value.indexOf('-0x') === 0 || value.indexOf('-0X') === 0) {
            return returnType ? 'int256' : numberToHex(value);
          } else if (value.indexOf('0x') === 0 || value.indexOf('0X') === 0) {
            return returnType ? 'bytes' : value;
          } else if (!isFinite(value)) {
            return returnType ? 'string' : utf8ToHex(value);
          }
        }

        return returnType ? (value < 0 ? 'int256' : 'uint256') : numberToHex(value);
      };


      /**
       * Check if string is HEX, requires a 0x in front
       *
       * @method isHexStrict
       * @param {String} hex to be checked
       * @returns {Boolean}
       */
      var isHexStrict = function (hex) {
        return ((_.isString(hex) || _.isNumber(hex)) && /^(-)?0x[0-9a-f]*$/i.test(hex));
      };

      /**
       * Check if string is HEX
       *
       * @method isHex
       * @param {String} hex to be checked
       * @returns {Boolean}
       */
      var isHex = function (hex) {
        return ((_.isString(hex) || _.isNumber(hex)) && /^(-0x|0x)?[0-9a-f]*$/i.test(hex));
      };


      /**
       * Returns true if given string is a valid Ethereum block header bloom.
       *
       * TODO UNDOCUMENTED
       *
       * @method isBloom
       * @param {String} hex encoded bloom filter
       * @return {Boolean}
       */
      var isBloom = function (bloom) {
        if (!/^(0x)?[0-9a-f]{512}$/i.test(bloom)) {
          return false;
        } else if (/^(0x)?[0-9a-f]{512}$/.test(bloom) || /^(0x)?[0-9A-F]{512}$/.test(bloom)) {
          return true;
        }
        return false;
      };

      /**
       * Returns true if given string is a valid log topic.
       *
       * TODO UNDOCUMENTED
       *
       * @method isTopic
       * @param {String} hex encoded topic
       * @return {Boolean}
       */
      var isTopic = function (topic) {
        if (!/^(0x)?[0-9a-f]{64}$/i.test(topic)) {
          return false;
        } else if (/^(0x)?[0-9a-f]{64}$/.test(topic) || /^(0x)?[0-9A-F]{64}$/.test(topic)) {
          return true;
        }
        return false;
      };


      /**
       * Hashes values to a sha3 hash using keccak 256
       *
       * To hash a HEX string the hex must have 0x in front.
       *
       * @method sha3
       * @return {String} the sha3 string
       */
      var SHA3_NULL_S = '0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470';

      var sha3 = function (value) {
        if (isHexStrict(value) && /^0x/i.test((value).toString())) {
          value = hexToBytes(value);
        }

        var returnValue = Hash.keccak256(value); // jshint ignore:line

        if (returnValue === SHA3_NULL_S) {
          return null;
        } else {
          return returnValue;
        }
      };
      // expose the under the hood keccak256
      sha3._Hash = Hash;


      module.exports = {
        BN: BN,
        isBN: isBN,
        isBigNumber: isBigNumber,
        toBN: toBN,
        isAddress: isAddress,
        isBloom: isBloom, // TODO UNDOCUMENTED
        isTopic: isTopic, // TODO UNDOCUMENTED
        checkAddressChecksum: checkAddressChecksum,
        utf8ToHex: utf8ToHex,
        hexToUtf8: hexToUtf8,
        hexToNumber: hexToNumber,
        hexToNumberString: hexToNumberString,
        numberToHex: numberToHex,
        toHex: toHex,
        hexToBytes: hexToBytes,
        bytesToHex: bytesToHex,
        isHex: isHex,
        isHexStrict: isHexStrict,
        leftPad: leftPad,
        rightPad: rightPad,
        toTwosComplement: toTwosComplement,
        sha3: sha3
      };


      /***/
    }),

/***/ "./src/constants.js":
/*!**************************!*\
  !*** ./src/constants.js ***!
  \**************************/
/*! no static exports found */
/***/ (function (module, exports) {

      module.exports = {
        // Types
        ADDRESS: 'address',
        BOOL: 'bool',
        BYTES: 'bytes',
        STRING: 'string',

        // Regex
        REGEX_UINT: /^uint\d+/,
        REGEX_INT: /^int\d+/,
        REGEX_BYTES: /bytes([1-9]|[12]\d|3[0-2])$/,
        REGEX_NUMBER: /[0-9]+/g,
        REGEX_STATIC_ARRAY: /\w+\[\d+\]/,
        REGEX_STATIC_ADDRESS_ARRAY: /address\[\d+\]/,
        REGEX_STATIC_BOOL_ARRAY: /bool\[\d+\]/,
        REGEX_STATIC_BYTES_ARRAY: /bytes([1-9]|[12]\d|3[0-2])(\[[0-9]+\])$/,
        REGEX_DYNAMIC_ARRAY: /\w+\[\]/,

        // Misc
        MAX_HEX_CHARS_PER_BYTE: 64,
      };


      /***/
    }),

/***/ "./src/contract.js":
/*!*************************!*\
  !*** ./src/contract.js ***!
  \*************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

      const { initProvider } = __webpack_require__(/*! ./providers */ "./src/providers/index.js");
      const Utils = __webpack_require__(/*! ./utils */ "./src/utils/index.js");
      const Encoder = __webpack_require__(/*! ./formatters/encoder */ "./src/formatters/encoder.js");
      const Decoder = __webpack_require__(/*! ./formatters/decoder */ "./src/formatters/decoder.js");

      const DEFAULT_AMOUNT = 0;
      const DEFAULT_GAS_LIMIT = 250000;
      const DEFAULT_GAS_PRICE = 0.0000004;

      class Contract {
        /**
         * Contract constructor.
         * @param {string|Qweb3Provider} provider Either URL string to create HttpProvider or a Qweb3 compatible provider.
         * @param {string} address Address of the contract.
         * @param {array} abi ABI of the contract.
         */
        constructor(provider, address, abi) {
          this.provider = initProvider(provider);
          this.address = Utils.trimHexPrefix(address);
          this.abi = abi;
        }

        /**
         * Executes a callcontract on a view/pure method.
         * @param {string} methodName Name of contract method
         * @param {object} params Parameters of contract method
         * @return {Promise} Call result.
         */
        async call(methodName, params) {
          const { methodArgs, senderAddress } = params;
          const data = Encoder.constructData(this.abi, methodName, methodArgs);
          let result = await this.provider.rawCall('callcontract', [this.address, data, senderAddress]);
          result = Decoder.decodeCall(result, this.abi, methodName, true); // Format the result
          return result;
        }

        /**
         * Executes a sendtocontract transaction.
         * @param {string} methodName Method name to call.
         * @param {object} params Parameters of the contract method.
         * @return {Promise} Transaction ID of the sendtocontract.
         */
        async send(methodName, params) {
          // Throw if methodArgs or senderAddress is not defined in params
          Utils.paramsCheck('send', params, ['methodArgs', 'senderAddress']);

          const { methodArgs, amount, gasLimit, gasPrice, senderAddress } = params;
          const data = Encoder.constructData(this.abi, methodName, methodArgs);
          const amt = amount || DEFAULT_AMOUNT;
          const limit = gasLimit || DEFAULT_GAS_LIMIT;
          const price = gasPrice || DEFAULT_GAS_PRICE;

          const result = await this.provider.rawCall('sendtocontract', [
            this.address,
            data,
            amt,
            limit,
            price.toFixed(8),
            senderAddress
          ]);

          // Add original request params to result obj
          result.args = {
            contractAddress: this.address,
            amount: amt,
            gasLimit: limit,
            gasPrice: price
          };
          return result;
        }
      }

      module.exports = Contract;


      /***/
    }),

/***/ "./src/formatters/decoder.js":
/*!***********************************!*\
  !*** ./src/formatters/decoder.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function (Buffer) {
        const { isEmpty, isUndefined, each, find, filter, assign, map } = __webpack_require__(/*! lodash */ "../lodash/lodash.js");
        const Web3Utils = __webpack_require__(/*! web3-utils */ "../web3-utils/src/index.js");
        const EthjsAbi = __webpack_require__(/*! ethjs-abi */ "../ethjs-abi/lib/index.js");
        const crypto = __webpack_require__(/*! crypto */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/crypto-browserify/index.js");
        const bs58 = __webpack_require__(/*! bs58 */ "../bs58/index.js");

        const Encoder = __webpack_require__(/*! ./encoder */ "./src/formatters/encoder.js");
        const Utils = __webpack_require__(/*! ../utils */ "./src/utils/index.js");

        const MainnetNetworkByte = '3A';
        const TestnetNetworkByte = '78';

        class Decoder {
          static toQtumAddress(hexAddress, isMainnet = false) {
            if (hexAddress === undefined || isEmpty(hexAddress)) {
              throw new Error('hexAddress should not be undefined or empty');
            }
            if (!Web3Utils.isHex(hexAddress)) {
              throw new Error('Invalid hex address');
            }
            // reference: https://gobittest.appspot.com/Address
            let qAddress = hexAddress;
            // Add network byte
            if (isMainnet) {
              qAddress = MainnetNetworkByte + qAddress;
            } else {
              qAddress = TestnetNetworkByte + qAddress;
            }

            const qAddressBuffer = Buffer.from(qAddress, 'hex');
            // Double SHA256 hash
            const hash1 = crypto.createHash('sha256').update(qAddressBuffer).digest('Hex');
            const hash1Buffer = Buffer.from(hash1, 'hex');
            const hash2 = crypto.createHash('sha256').update(hash1Buffer).digest('Hex');

            // get first 4 bytes
            qAddress += hash2.slice(0, 8);

            // base58 encode
            const address = bs58.encode(Buffer.from(qAddress, 'hex'));
            return address;
          }

          static removeHexPrefix(value) {
            if (value === undefined) {
              return false;
            }

            let v = value;
            if (v instanceof Array) {
              each(v, (arrayItem, index) => {
                if (Web3Utils.isHex(arrayItem)) {
                  v[index] = Utils.trimHexPrefix(arrayItem);
                }
              });
            } else if (Web3Utils.isHex(value)) {
              v = Utils.trimHexPrefix(value);
            }

            return v;
          }

          /**
           * Formats the output of searchlog by decoding eventName, indexed, and unindexed params
           * @param {object} rawOutput Raw seachlog output
           * @param {object} contractMetadata Metadata of all contracts and their events with topic hashes
           * @param {bool} removeHexPrefix Flag to indicate whether to remove the hex prefix (0x) from hex values
           * @return {object} Decoded searchlog output
           */
          static decodeSearchLog(rawOutput, contractMetadata, removeHexPrefix = true) {
            // Create dict of all event hashes
            const eventHashes = {};
            each(contractMetadata, (contractItem, contractKey) => {
              const filteredEvents = filter(contractItem.abi, { type: 'event' });

              each(filteredEvents, (eventObj) => {
                const hash = Encoder.objToHash(eventObj, false);
                eventHashes[hash] = {
                  contract: contractKey,
                  event: eventObj.name,
                };
              });
            });

            return map(rawOutput, (resultEntry) => {
              const formatted = assign({}, resultEntry);

              if (!isEmpty(resultEntry.log)) {
                each(resultEntry.log, (item, index) => {
                  const eventHashObj = eventHashes[item.topics[0]];

                  let contractObj;
                  if (eventHashObj) {
                    contractObj = contractMetadata[eventHashObj.contract];
                  }

                  if (contractObj) {
                    // Each field of log needs to appended with '0x' to be parsed
                    Object.assign(item, {
                      address: Utils.appendHexPrefix(item.address),
                      data: Utils.appendHexPrefix(item.data),
                      topics: map(item.topics, Utils.appendHexPrefix),
                    });

                    const methodAbi = find(contractObj.abi, { name: eventHashObj.event });
                    if (isUndefined(methodAbi)) {
                      console.warn(`Error: Could not find method in ABI for ${eventHashObj.event}`);
                      return;
                    }

                    let decodedLog;
                    try {
                      decodedLog = EthjsAbi.decodeLogItem(methodAbi, item);
                    } catch (err) { // catch throws in decodeLogItem
                      console.warn(err.message);
                      return;
                    }

                    // Strip hex prefix
                    if (removeHexPrefix) {
                      each(methodAbi.inputs, (inputItem) => {
                        let value = decodedLog[inputItem.name];
                        value = Decoder.removeHexPrefix(value);
                        decodedLog[inputItem.name] = value;
                      });
                    }

                    resultEntry.log.splice(index, 1, decodedLog);
                  }
                });
              }

              return formatted;
            });
          }

          /**
           * Decodes the output of a callcontract and puts it in executionResult.formattedOutput
           * @param {object} rawOutput Raw output of callcontract.
           * @param {object} contractABI The ABI of the contract that was called.
           * @param {string} methodName The name of the method that was called.
           * @param {bool} removeHexPrefix Flag to indicate whether to remove the hex prefix (0x) from hex values.
           * @return {object} Decoded callcontract output.
           */
          static decodeCall(rawOutput, contractABI, methodName, removeHexPrefix = true) {
            if (!rawOutput) {
              throw Error('rawOutput is undefined.');
            }
            if (!contractABI) {
              throw Error('contractABI is undefined.');
            }
            if (!methodName) {
              throw Error('methodName is undefined.');
            }

            const output = rawOutput;
            const methodABI = find(contractABI, { name: methodName });
            if (methodABI && 'executionResult' in output && 'output' in output.executionResult) {
              const formattedOutput = EthjsAbi.decodeMethod(
                methodABI,
                Utils.appendHexPrefix(output.executionResult.output),
              );

              if (removeHexPrefix) {
                each(Object.keys(formattedOutput), (key) => {
                  formattedOutput[key] = Decoder.removeHexPrefix(formattedOutput[key]);
                });
              }
              output.executionResult.formattedOutput = formattedOutput;
            }
            return output;
          }
        }

        module.exports = Decoder;

        /* WEBPACK VAR INJECTION */
      }.call(this, __webpack_require__(/*! ./../../../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/buffer/index.js */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/buffer/index.js").Buffer))

      /***/
    }),

/***/ "./src/formatters/encoder.js":
/*!***********************************!*\
  !*** ./src/formatters/encoder.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

      const _ = __webpack_require__(/*! lodash */ "../lodash/lodash.js");
      const Web3Utils = __webpack_require__(/*! web3-utils */ "../web3-utils/src/index.js");
      const BigNumber = __webpack_require__(/*! bignumber.js */ "../bignumber.js/bignumber.js");
      const bs58 = __webpack_require__(/*! bs58 */ "../bs58/index.js");

      const Utils = __webpack_require__(/*! ../utils */ "./src/utils/index.js");
      const Constants = __webpack_require__(/*! ../constants */ "./src/constants.js");

      class Encoder {
        /**
         * Converts an ABI object signature to its hash format.
         * @param {object} obj The object of the ABI object.
         * @param {boolean} isFunction Is converting a function object.
         * @return {string} The object hash.
         */
        static objToHash(obj, isFunction) {
          if (_.isUndefined(obj)) {
            throw new Error('obj should not be undefined');
          }
          if (_.isUndefined(isFunction)) {
            throw new Error('isFunction should not be undefined');
          }

          const { name } = obj;
          let params = '';
          for (let i = 0; i < obj.inputs.length; i++) {
            params = params.concat(obj.inputs[i].type);

            if (i < obj.inputs.length - 1) {
              params = params.concat(',');
            }
          }
          const hash = name.concat(`(${params})`);

          if (isFunction) {
            // Return only the first 4 bytes
            return Web3Utils.sha3(hash).slice(2, 10);
          }
          return Web3Utils.sha3(hash).slice(2);
        }

        /**
         * Converts a Qtum or hex address to a padded hex string.
         * @param {string} address The Qtum/hex address to convert.
         * @return {string} The 32 bytes padded-left hex string.
         */
        static addressToHex(address) {
          if (!address) {
            throw new Error('address should not be undefined');
          }

          // Remove '0x' from beginning of address
          const addr = Utils.trimHexPrefix(address);

          let hexAddr;
          if (Web3Utils.isHex(addr)) {
            hexAddr = addr;
          } else {
            const bytes = bs58.decode(addr);
            hexAddr = bytes.toString('hex');
            hexAddr = hexAddr.slice(2, 42); // Removes first byte (version) & last 4 bytes (checksum)
          }

          return Web3Utils.padLeft(hexAddr, Constants.MAX_HEX_CHARS_PER_BYTE);
        }

        /**
         * Converts a boolean to hex padded-left to 32 bytes. Accepts it in true/false or 1/0 format.
         * @param {boolean} value The boolean to convert.
         * @return {string} The converted boolean to padded-left hex string.
         */
        static boolToHex(value) {
          if (_.isUndefined(value)) {
            throw new Error('value should not be undefined');
          }

          return this.uintToHex(value ? 1 : 0);
        }

        /**
         * Converts an int to hex padded-left to 32 bytes.
         * Accepts the following formats:
         *    decimal: 12345
         *    string: '-12345'
         *    hex string (with 0x hex prefix): '0xbd614e' or 0xbd614e
         *    bignumber.js: <BigNumber: 3039>
         *    BN.js: <BN: 3039>
         * @param {number|string|BigNumber|BN} num The number to convert.
         * @return {string} The converted int to padded-left hex string.
         */
        static intToHex(num) {
          if (_.isUndefined(num)) {
            throw new Error('num should not be undefined');
          }

          return Web3Utils.toTwosComplement(num).slice(2);
        }

        /**
         * Converts a uint to hex padded-left to 32 bytes.
         * Accepts the following formats:
         *    decimal: 12345
         *    string: '12345'
         *    hex string (with 0x hex prefix): '0xbd614e' or 0xbd614e
         *    bignumber.js: <BigNumber: 3039>
         *    BN.js: <BN: 3039>
         * @param {number|string|BigNumber|BN} num The number to convert.
         * @return {string} The converted uint to padded-left hex string.
         */
        static uintToHex(num) {
          if (_.isUndefined(num)) {
            throw new Error('num should not be undefined');
          }

          let bigNum;
          if (Web3Utils.isHexStrict(num)) {
            bigNum = new BigNumber(num, 16);
          } else {
            bigNum = new BigNumber(num, 10);
          }

          const hexNum = Web3Utils.numberToHex(bigNum);
          return Web3Utils.padLeft(hexNum, Constants.MAX_HEX_CHARS_PER_BYTE).slice(2);
        }

        /**
         * Converts a string into a hex string up to the max length.
         * @param {string} string The string to convert to hex.
         * @param {number} maxCharLen The total length of the hex string allowed.
         * @return {string} The converted string to single padded-right hex string.
         */
        static stringToHex(string, maxCharLen) {
          if (!_.isString(string)) {
            throw new Error('string should be a String');
          }
          if (!_.isNumber(maxCharLen)) {
            throw new Error('maxCharLen should be a Number');
          }

          let hexString = Web3Utils.utf8ToHex(string);
          hexString = Web3Utils.padRight(hexString, maxCharLen).slice(2, maxCharLen + 2);

          return hexString;
        }

        /**
         * Converts an array of string elements (max 32 bytes) into a concatenated hex string.
         * @param {Array} strArray The string array to convert to hex.
         * @param {number} numOfItems The total number of items the string array should have.
         * @return {string} The converted string array to single padded-right hex string.
         */
        static stringArrayToHex(strArray, numOfItems) {
          if (!Array.isArray(strArray)) {
            throw new Error('strArray is not an Array');
          }
          if (!_.isNumber(numOfItems)) {
            throw new Error('numOfItems is not a Number');
          }
          if (numOfItems <= 0) {
            throw new Error('numOfItems should be greater than 0');
          }

          const array = new Array(10);
          for (let i = 0; i < numOfItems; i++) {
            let hexString;
            if (strArray[i] !== undefined) {
              hexString = Web3Utils.utf8ToHex(strArray[i].toString());
            } else {
              hexString = Web3Utils.utf8ToHex('');
            }

            // Remove the 0x hex prefix
            array[i] = Web3Utils
              .padRight(hexString, Constants.MAX_HEX_CHARS_PER_BYTE)
              .slice(2, Constants.MAX_HEX_CHARS_PER_BYTE + 2);
          }

          return array.join('');
        }

        /**
         * Pads a hex string padded-left to 32 bytes.
         * @param {string} hexStr The hex string to pad.
         * @return {string} The padded-left hex string.
         */
        static padHexString(hexStr) {
          if (_.isUndefined(hexStr)) {
            throw new Error('hexStr should not be undefined');
          }
          if (!Web3Utils.isHex(hexStr)) {
            throw new TypeError('hexStr should be a hex string');
          }

          const trimmed = Utils.trimHexPrefix(hexStr);
          return Web3Utils.padLeft(trimmed, Constants.MAX_HEX_CHARS_PER_BYTE);
        }

        /**
         * Encodes a parameter to hex based on its type.
         * @param {string} type The type of the value.
         * @param {any} value Value to convert to hex.
         * @return {string} The value converted to hex string.
         */
        static encodeParam(type, value) {
          let hex = '';
          if (type.match(Constants.ADDRESS)) {
            if (value instanceof Array) {
              _.each(value, (addr) => {
                hex += this.addressToHex(addr);
              });
            } else {
              hex = this.addressToHex(value);
            }
          } else if (type.match(Constants.BOOL)) {
            if (value instanceof Array) {
              _.each(value, (bool) => {
                hex += this.boolToHex(bool);
              });
            } else {
              hex = this.boolToHex(value);
            }
          } else if (type.match(Constants.REGEX_INT)) { // match order matters here, match int before uint
            if (value instanceof Array) {
              _.each(value, (int) => {
                hex += this.intToHex(int);
              });
            } else {
              hex = this.intToHex(value);
            }
          } else if (type.match(Constants.REGEX_UINT)) {
            if (value instanceof Array) {
              _.each(value, (uint) => {
                hex += this.uintToHex(uint);
              });
            } else {
              hex = this.uintToHex(value);
            }
          } else if (type.match(Constants.REGEX_BYTES)) { // fixed bytes, ie. bytes32
            hex = this.stringToHex(value, Constants.MAX_HEX_CHARS_PER_BYTE);
          } else if (type.match(Constants.REGEX_STATIC_BYTES_ARRAY)) { // fixed bytes array, ie. bytes32[10]
            const arrCapacity = _.toNumber(type.match(Constants.REGEX_NUMBER)[1]);
            if (value instanceof Array) {
              hex = this.stringArrayToHex(value, arrCapacity);
            } else {
              hex = this.stringToHex(value, Constants.MAX_HEX_CHARS_PER_BYTE * arrCapacity);
            }
          } else {
            console.error(`Unimplemented type: ${type}`);
          }

          return hex;
        }

        /**
         * Validates arguments by ABI schema and throws errors if mismatch.
         * @param {object} abi ABI of the contract.
         * @param {string} methodName The method name.
         * @param {array} methodArgs The method arguments.
         * @return {boolean} If valid methodName and methodArgs.
         */
        static validateMethodAndArgs(abi, methodName, args = []) {
          const methodObj = _.find(abi, { name: methodName });
          if (!abi) {
            throw Error('abi should not be undefined.');
          }
          if (!methodName) {
            throw Error('methodName should not be undefined.');
          }
          if (!methodObj) {
            throw Error(`Method ${methodName} not defined in ABI.`);
          }
          if (methodObj.inputs.length !== args.length) {
            throw Error('Number of arguments supplied does not match ABI method args.');
          }

          return true;
        }

        /**
         * Constructs the data hex string needed for a call() or send().
         * @param {object} abi ABI of the contract.
         * @param {string} methodObj Method name of the function.
         * @param {array} args Arguments for the method.
         * @return Hex string of all the encoded args.
         */
        static constructData(abi, methodName, args = []) {
          if (!this.validateMethodAndArgs(abi, methodName, args)) {
            throw Error('Invalid params to construct data.');
          }

          // Get the method obj from JSON
          const methodObj = _.find(abi, { name: methodName });
          if (!methodObj) {
            throw Error('Could not find method in ABI.');
          }

          // Get function hash
          const funcHash = this.objToHash(methodObj, true);

          // Create an array of data hex strings which will be combined at the end
          const numOfParams = methodObj.inputs.length;
          const dataHexArr = _.times(numOfParams, _.constant(null));

          // Calculate start byte for dynamic data
          let dataLoc = 0;
          _.each(methodObj.inputs, (item) => {
            const { type } = item;
            if (type.match(Constants.REGEX_STATIC_ARRAY)) {
              // treat each static array as an individual slot for dynamic data location purposes
              const arrCap = _.toNumber(type.match(Constants.REGEX_NUMBER)[1]);
              dataLoc += arrCap;
            } else {
              dataLoc += 1;
            }
          });

          _.each(methodObj.inputs, (item, index) => {
            const { type } = item;
            let hex;

            if (type === Constants.BYTES) {
              throw Error('dynamics bytes conversion not implemented.');
            } else if (type === Constants.STRING) {
              throw Error('dynamic string conversion not implemented.');
            } else if (type.match(Constants.REGEX_DYNAMIC_ARRAY)) { // dynamic types
              let data = '';

              // set location of dynamic data
              const startBytesLoc = dataLoc * 32;
              hex = this.uintToHex(startBytesLoc);
              dataHexArr[index] = hex;

              // construct data
              // add length of dynamic data set
              const numOfDynItems = args[index].length;
              data += this.uintToHex(numOfDynItems);

              // add each hex converted item
              _.each(args[index], (dynItem) => {
                data += this.encodeParam(type, dynItem);
              });

              // add the dynamic data to the end
              dataHexArr.push(data);

              // increment starting data location
              // +1 for the length of data set
              dataLoc += numOfDynItems + 1;
            } else if (type === Constants.ADDRESS
              || type === Constants.BOOL
              || type.match(Constants.REGEX_UINT)
              || type.match(Constants.REGEX_INT)
              || type.match(Constants.REGEX_BYTES)
              || type.match(Constants.REGEX_STATIC_ARRAY)) { // static types
              dataHexArr[index] = this.encodeParam(type, args[index]);
            } else {
              console.error(`Found unknown type: ${type}`);
            }
          });

          return funcHash + dataHexArr.join('');
        }
      }

      module.exports = Encoder;


      /***/
    }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

      const Qweb3 = __webpack_require__(/*! ./qweb3 */ "./src/qweb3.js");
      const Encoder = __webpack_require__(/*! ./formatters/encoder */ "./src/formatters/encoder.js");
      const Decoder = __webpack_require__(/*! ./formatters/decoder */ "./src/formatters/decoder.js");
      const Utils = __webpack_require__(/*! ./utils */ "./src/utils/index.js");
      window.Qweb3 = Qweb3;
      module.exports = {
        Qweb3,
        Encoder,
        Decoder,
        Utils,
      };


      /***/
    }),

/***/ "./src/providers/http-provider.js":
/*!****************************************!*\
  !*** ./src/providers/http-provider.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function (Buffer) {
        const url = __webpack_require__(/*! url */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/url/url.js");
        const axios = __webpack_require__(/*! axios */ "../axios/index.js");
        const { isEmpty } = __webpack_require__(/*! lodash */ "../lodash/lodash.js");

        /**
         * HTTP Provider for interacting with the blockchain via JSONRPC POST calls.
         */
        class HttpProvider {
          /**
           * Constructor.
           * @param {string} urlString URL of the blockchain API. eg. http://bodhi:bodhi@127.0.0.1:13889
           */
          constructor(urlString) {
            this.url = url.parse(urlString);
          }

          /**
           * Executes a request to the blockchain via JSONRPC POST request.
           * @param {string} method Blockchain method to call. eg. 'sendtocontract'
           * @param {array} args Raw arguments for the call. [contractAddress, data, amount?, gasLimit?, gasPrice?]
           */
          async rawCall(method, args = []) {
            if (isEmpty(method)) {
              throw Error('method cannot be empty.');
            }

            // Construct body
            const body = {
              id: new Date().getTime(),
              jsonrpc: '1.0',
              method,
              params: args,
            };

            // Execute POST request
            const { result, error } = (await axios({
              method: 'post',
              url: `${this.url.protocol}//${this.url.host}`,
              headers: {
                'Content-Type': 'text/plain',
                Authorization: `Basic ${Buffer.from(this.url.auth).toString('base64')}`,
              },
              data: JSON.stringify(body),
            })).data;

            // Handle error
            if (error) {
              throw Error(error);
            }

            return result;
          }
        }

        module.exports = HttpProvider;

        /* WEBPACK VAR INJECTION */
      }.call(this, __webpack_require__(/*! ./../../../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/buffer/index.js */ "../../../../../AppData/Roaming/npm/node_modules/webpack/node_modules/buffer/index.js").Buffer))

      /***/
    }),

/***/ "./src/providers/index.js":
/*!********************************!*\
  !*** ./src/providers/index.js ***!
  \********************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

      const { includes } = __webpack_require__(/*! lodash */ "../lodash/lodash.js");

      const HttpProvider = __webpack_require__(/*! ./http-provider */ "./src/providers/http-provider.js");

      const compatibleProviders = [
        'HttpProvider',
        'QryptoRPCProvider',
        'o',
      ];

      const initProvider = (provider) => {
        if (!provider) {
          throw Error('Provider cannot be undefined.');
        }

        if (typeof provider === 'string') {
          return new HttpProvider(provider);
        }

        const className = provider.constructor.name;
        if (!includes(compatibleProviders, className)) {
          throw Error(`Incompatible provider: ${className}`);
        }

        return provider;
      };

      module.exports = { initProvider };


      /***/
    }),

/***/ "./src/qweb3.js":
/*!**********************!*\
  !*** ./src/qweb3.js ***!
  \**********************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

      const _ = __webpack_require__(/*! lodash */ "../lodash/lodash.js");

      const { initProvider } = __webpack_require__(/*! ./providers */ "./src/providers/index.js");
      const Contract = __webpack_require__(/*! ./contract */ "./src/contract.js");
      const HttpProvider = __webpack_require__(/*! ./providers/http-provider */ "./src/providers/http-provider.js");
      const Encoder = __webpack_require__(/*! ./formatters/encoder */ "./src/formatters/encoder.js");
      const Decoder = __webpack_require__(/*! ./formatters/decoder */ "./src/formatters/decoder.js");
      const Utils = __webpack_require__(/*! ./utils */ "./src/utils/index.js");

      class Qweb3 {
        /**
         * Qweb3 constructor.
         * @param {string|Qweb3Provider} provider Either URL string to create HttpProvider or a Qweb3 compatible provider.
         */
        constructor(provider) {
          this.provider = initProvider(provider);
          this.encoder = Encoder;
          this.decoder = Decoder;
          this.utils = Utils;
        }

        /**
         * Constructs a new Contract instance.
         * @param {string} address Address of the contract.
         * @param {array} abi ABI of the contract.
         * @return {Contract} Contract instance.
         */
        Contract(address, abi) {
          return new Contract(this.provider, address, abi);
        }

        /**
         * Constructs a new HttpProvider instance.
         * @param {string} urlString URL of the blockchain API. eg. http://bodhi:bodhi@127.0.0.1:13889
         * @return {HttpProvider} HttpProvider instance.
         */
        HttpProvider(urlString) {
          return new HttpProvider(urlString);
        }

        /** ******** MISC ********* */
        /**
         * Checks if the blockchain is connected.
         * @return If blockchain is connected.
         */
        async isConnected() {
          try {
            const res = await this.provider.rawCall('getnetworkinfo');
            return typeof res === 'object';
          } catch (err) {
            return false;
          }
        }

        /** ******** BLOCKCHAIN ********* */
        /**
         * Returns the block info for a given block hash.
         * @param {string} blockHash The block hash to look up.
         * @param {boolean} verbose True for a json object or false for the hex encoded data.
         * @return {Promise} Latest block info or Error.
         */
        getBlock(blockHash, verbose = true) {
          return this.provider.rawCall('getblock', [blockHash, verbose]);
        }

        /**
         * Returns various state info regarding blockchain processing.
         * @return {Promise} Latest block info or Error.
         */
        getBlockchainInfo() {
          return this.provider.rawCall('getblockchaininfo');
        }

        /**
         * Returns the current block height that is synced.
         * @return {Promise} Current block count or Error.
         */
        getBlockCount() {
          return this.provider.rawCall('getblockcount');
        }

        /**
         * Returns the block hash of the block height number specified.
         * @param {number} blockNum The block number to look up.
         * @return {Promise} Block hash or Error.
         */
        getBlockHash(blockNum) {
          return this.provider.rawCall('getblockhash', [blockNum]);
        }

        /**
         * Returns the transaction receipt given the txid.
         * @param {string} txid The transaction id to look up.
         * @return {Promise} Transaction receipt or Error.
         */
        getTransactionReceipt(txid) {
          return this.provider.rawCall('gettransactionreceipt', [txid]);
        }

        /**
         * Returns an array of deployed contract addresses.
         * @param {number} startingAcctIndex The starting account index.
         * @param {number} maxDisplay Max accounts to list.
         * @return {Promise} Array of contract addresses or Error.
         */
        listContracts(startingAcctIndex = 1, maxDisplay = 20) {
          return this.provider.rawCall('listcontracts', [startingAcctIndex, maxDisplay]);
        }

        /**
         * Search logs with given filters
         * @param  {number} fromBlock Starting block to search.
         * @param  {number} toBlock Ending block to search. Use -1 for latest.
         * @param  {string or array} addresses One or more addresses to search against
         * @param  {string or array} topics One or more topic hashes to search against
         * @param  {object} contractMetadata Metadata of all contracts and their events with topic hashes
         * @param  {bool} removeHexPrefix Flag to indicate whether to remove the hex prefix (0x) from hex values
         * @return {Promise} Promise containing returned logs or Error
         */
        searchLogs(fromBlock, toBlock, addresses, topics, contractMetadata, removeHexPrefix) {
          if (!_.isNumber(fromBlock)) {
            throw new Error(`fromBlock expects a number. Got ${fromBlock} instead.`);
          }
          if (!_.isNumber(toBlock)) {
            throw new Error(`toBlock expects a number. Got ${toBlock} instead.`);
          }

          const addrObj = { addresses: undefined };
          if (_.isString(addresses)) {
            addrObj.addresses = [addresses];
          } else if (_.isArray(addresses)) {
            addrObj.addresses = addresses;
          } else {
            throw new Error('addresses expects a string or an array.');
          }

          const topicsObj = { topics: undefined };
          if (_.isString(topics)) {
            topicsObj.topics = [topics];
          } else if (_.isArray(topics)) {
            topicsObj.topics = topics;
          } else {
            throw new Error('topics expects a string or an array.');
          }

          return this.provider.rawCall('searchlogs', [fromBlock, toBlock, addrObj, topicsObj])
            .then(results => Decoder.decodeSearchLog(results, contractMetadata, removeHexPrefix));
        }

        /** ******** CONTROL ********* */
        /**
         * Get the blockchain info.
         * @return {Promise} Blockchain info object or Error
         */
        getInfo() {
          return this.provider.rawCall('getinfo');
        }

        /** ******** NETWORK ********* */
        /**
         * Returns data about each connected network node as a json array of objects.
         * @return {Promise} Node info object or Error
         */
        getPeerInfo() {
          return this.provider.rawCall('getpeerinfo');
        }

        /** ******** RAW TRANSACTIONS ********* */
        /**
         * Get the hex address of a Qtum address.
         * @param {string} address Qtum address
         * @return {Promise} Hex string of the converted address or Error
         */
        getHexAddress(address) {
          return this.provider.rawCall('gethexaddress', [address]);
        }

        /**
         * Converts a hex address to qtum address.
         * @param {string} hexAddress Qtum address in hex format.
         * @return {Promise} Qtum address or Error.
         */
        fromHexAddress(hexAddress) {
          return this.provider.rawCall('fromhexaddress', [hexAddress]);
        }

        /** ******** UTIL ********* */
        /**
         * Validates if a valid Qtum address.
         * @param {string} address Qtum address to validate.
         * @return {Promise} Object with validation info or Error.
         */
        validateAddress(address) {
          return this.provider.rawCall('validateaddress', [address]);
        }

        /** ******** WALLET ********* */
        /**
         * Backs up the wallet.
         * @param {string} destination The destination directory or file.
         * @return {Promise} Success or Error.
         */
        backupWallet(destination) {
          return this.provider.rawCall('backupwallet', [destination]);
        }

        /**
         * Reveals the private key corresponding to the address.
         * @param {string} address The qtum address for the private key.
         * @return {Promise} Private key or Error.
         */
        dumpPrivateKey(address) {
          return this.provider.rawCall('dumpprivkey', [address]);
        }

        /**
         * Encrypts the wallet for the first time. This will shut down the qtum server.
         * @param {string} passphrase The passphrase to encrypt the wallet with. Must be at least 1 character.
         * @return {Promise} Success or Error.
         */
        encryptWallet(passphrase) {
          return this.provider.rawCall('encryptwallet', [passphrase]);
        }

        /**
         * Gets the account name associated with the Qtum address.
         * @param {string} address The qtum address for account lookup.
         * @return {Promise} Account name or Error.
         */
        getAccount(address) {
          return this.provider.rawCall('getaccount', [address]);
        }

        /**
         * Gets the Qtum address based on the account name.
         * @param {string} acctName The account name for the address ("" for default).
         * @return {Promise} Qtum address or Error.
         */
        getAccountAddress(acctName = '') {
          return this.provider.rawCall('getaccountaddress', [acctName]);
        }

        /**
         * Gets the Qtum address with the account name.
         * @param {string} acctName The account name ("" for default).
         * @return {Promise} Qtum address array or Error.
         */
        getAddressesByAccount(acctName = '') {
          return this.provider.rawCall('getaddressesbyaccount', [acctName]);
        }

        /**
         * Gets a new Qtum address for receiving payments.
         * @param {string} acctName The account name for the address to be linked to ("" for default).
         * @return {Promise} Qtum address or Error.
         */
        getNewAddress(acctName = '') {
          return this.provider.rawCall('getnewaddress', [acctName]);
        }

        /**
         * Get transaction details by txid
         * @param {string} txid The transaction id (64 char hex string).
         * @return {Promise} Promise containing result object or Error
         */
        getTransaction(txid) {
          return this.provider.rawCall('gettransaction', [txid]);
        }

        /**
         * Gets the wallet info
         * @return {Promise} Promise containing result object or Error
         */
        getWalletInfo() {
          return this.provider.rawCall('getwalletinfo');
        }

        /**
         * Gets the total unconfirmed balance.
         * @return {Promise} Unconfirmed balance or Error.
         */
        getUnconfirmedBalance() {
          return this.provider.rawCall('getunconfirmedbalance');
        }

        /**
         * Adds an address that is watch-only. Cannot be used to spend.
         * @param {string} address The hex-encoded script (or address).
         * @param {string} label An optional label.
         * @param {boolean} rescan Rescan the wallet for transactions.
         * @return {Promise} Success or Error.
         */
        importAddress(address, label = '', rescan = true) {
          return this.provider.rawCall('importaddress', [address, label, rescan]);
        }

        /**
         * Adds an address by private key.
         * @param {string} privateKey The private key.
         * @param {string} label An optional label.
         * @param {boolean} rescan Rescan the wallet for transactions.
         * @return {Promise} Success or Error.
         */
        importPrivateKey(privateKey, label = '', rescan = true) {
          return this.provider.rawCall('importprivkey', [privateKey, label, rescan]);
        }

        /**
         * Adds an watch-only address by public key. Cannot be used to spend.
         * @param {string} publicKey The public key.
         * @param {string} label An optional label.
         * @param {boolean} rescan Rescan the wallet for transactions.
         * @return {Promise} Success or Error.
         */
        importPublicKey(publicKey, label = '', rescan = true) {
          return this.provider.rawCall('importpubkey', [publicKey, label, rescan]);
        }

        /**
         * Imports keys from a wallet dump file
         * @param {string} filename The wallet file.
         * @return {Promise} Success or Error.
         */
        importWallet(filename) {
          return this.provider.rawCall('importwallet', [filename]);
        }

        /**
         * Lists groups of addresses which have had their common ownership made public by common use as inputs
         *  or as the resulting change in past transactions.
         * @return {Promise} Array of addresses with QTUM balances or Error.
         */
        listAddressGroupings() {
          return this.provider.rawCall('listaddressgroupings');
        }

        /**
         * Lists temporary unspendable outputs.
         * @return {Promise} Array of unspendable outputs or Error
         */
        listLockUnspent() {
          return this.provider.rawCall('listlockunspent');
        }

        /**
         * Lists unspent transaction outputs.
         * @return {Promise} Array of unspent transaction outputs or Error
         */
        listUnspent() {
          return this.provider.rawCall('listunspent');
        }

        /**
         * Lists unspent transaction outputs.
         * @param {string} address Address to send QTUM to.
         * @param {number} amount Amount of QTUM to send.
         * @param {string} comment Comment used to store what the transaction is for.
         * @param {string} commentTo Comment to store name/organization to which you're sending the transaction.
         * @param {boolean} subtractFeeFromAmount The fee will be deducted from the amount being sent.
         * @param {boolean} replaceable Allow this transaction to be replaced by a transaction with higher fees via BIP 125.
         * @param {number} confTarget Confirmation target (in blocks).
         * @param {string} estimateMode The fee estimate mode, must be one of: "UNSET", "ECONOMICAL", "CONSERVATIVE"
         * @param {string} senderAddress The QTUM address that will be used to send money from.
         * @param {boolean} changeToSender Return the change to the sender.
         * @return {Promise} Transaction ID or Error
         */
        sendToAddress(
          address,
          amount,
          comment = '',
          commentTo = '',
          subtractFeeFromAmount = false,
          replaceable = true,
          confTarget = 6,
          estimateMode = 'UNSET',
          senderAddress,
          changeToSender = false,
        ) {
          return this.provider.rawCall('sendtoaddress', [
            address,
            amount,
            comment,
            commentTo,
            subtractFeeFromAmount,
            replaceable,
            confTarget,
            estimateMode,
            senderAddress,
            changeToSender,
          ]);
        }

        /**
         * Set the transaction fee per kB. Overwrites the paytxfee parameter.
         * @param {bumber} amount The transaction fee in QTUM/kB.
         * @return {Promise} True/false for success or Error.
         */
        setTxFee(amount) {
          return this.provider.rawCall('settxfee', [amount]);
        }

        /**
         * Locks the encrypted wallet.
         * @return {Promise} Success or Error.
         */
        walletLock() {
          return this.provider.rawCall('walletlock');
        }

        /**
         * Unlocks the encrypted wallet with the wallet passphrase.
         * @param {string} passphrase The wallet passphrase.
         * @param {number} timeout The number of seconds to keep the wallet unlocked.
         * @param {boolean} stakingOnly Unlock wallet for staking only.
         * @return {Promise} Success or Error.
         */
        walletPassphrase(passphrase, timeout, stakingOnly = false) {
          return this.provider.rawCall('walletpassphrase', [passphrase, timeout, stakingOnly]);
        }

        /**
         * Changes the encrypted wallets passphrase.
         * @param {string} oldPassphrase The old wallet passphrase.
         * @param {string} newPassphrase The new wallet passphrase.
         * @return {Promise} Success or Error.
         */
        walletPassphraseChange(oldPassphrase, newPassphrase) {
          return this.provider.rawCall('walletpassphrasechange', [oldPassphrase, newPassphrase]);
        }
      }

      module.exports = Qweb3;


      /***/
    }),

/***/ "./src/utils/index.js":
/*!****************************!*\
  !*** ./src/utils/index.js ***!
  \****************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

      const _ = __webpack_require__(/*! lodash */ "../lodash/lodash.js");
      const utf8 = __webpack_require__(/*! utf8 */ "../utf8/utf8.js");

      class Utils {
        /**
         * Parameter check at the beginning of a function
         * Throw errors if required keys are missing in params object
         * @param  {string} methodName Function name used for error message
         * @param  {object} params     params object
         * @param  {array} required    Array of key strings in params, e.g. ['resultNames', 'sender']
         * @param  {func} validators  Custom functions used to validate params
         * @return {}
         */
        static paramsCheck(methodName, params, required, validators) {
          if (_.isUndefined(params)) {
            throw new Error(`params is undefined in params of ${methodName}; expected: ${_.isEmpty(required)
              ? undefined : required.join(',')}`);
          }

          if (required) {
            if (_.isArray(required)) {
              _.each(required, (value) => {
                if (_.isUndefined(params[value])) {
                  throw new Error(`${value} is undefined in params of ${methodName}`);
                }
              });
            } else if (_.isUndefined(params[required])) {
              throw new Error(`${required} is undefined in params of ${methodName}`);
            }
          }

          if (!_.isEmpty(validators)) {
            _.each(validators, (validFunc, key) => {
              // Check whether each validator is a function
              if (typeof validFunc !== 'function') {
                throw new Error('validators are defined but not functions ...');
              }

              // Check whether key defined in validator is in params
              if (_.indexOf(params, key) < 0) {
                throw new Error(`${key} in validator is not found in params.`);
              }

              // Run validator funcs and check result
              // If result === 'undefined', pass; otherwise throw error with message
              const error = validFunc(params[key], key);
              if (error instanceof Error) {
                throw new Error(`validation for ${key} failed; message:${error.message}`);
              }
            });
          }
        }

        /**
         * Validate format string and append '0x' to it if there's not one.
         * @param  {string} value  Hex string to format
         * @return {string}
         */
        static appendHexPrefix(value) {
          if (_.startsWith(value, '0x')) {
            return value;
          }
          return `0x${value}`;
        }

        /**
         * Removes the '0x' hex prefix if necessary.
         * @param str The string to remove the prefix from.
         * @return The str without the hex prefix.
         */
        static trimHexPrefix(str) {
          if (str && str.indexOf('0x') === 0) {
            return str.slice(2);
          }
          return str;
        }

        /**
         * Breaks down a string by {length} and returns an array of string
         * @param {string} Input string
         * @param {number} Length of each chunk.
         * @return {array} broken-down string array
         */
        static chunkString(str, length) {
          return str.match(new RegExp(`.{1,${length}}`, 'g'));
        }

        /**
         * Should be called to get utf8 from it's hex representation
         *
         * @method toUtf8
         * @param {String} string in hex
         * @returns {String} ascii string representation of hex value
         */
        static toUtf8(hex) {
          let i = 0;
          if (hex.substring(0, 2) === '0x') {
            i = 2;
          }

          let str = '';
          for (; i < hex.length; i += 2) {
            const code = parseInt(hex.substr(i, 2), 16);
            if (code === 0) { break; }
            str += String.fromCharCode(code);
          }

          return utf8.decode(str);
        }

        /**
         * Should be called to get hex representation (prefixed by 0x) of utf8 string
         * @method fromUtf8
         * @param {String} string
         * @param {Number} optional padding
         * @returns {String} hex representation of input string
         */
        static fromUtf8(str) {
          const string = utf8.encode(str);
          let hex = '';
          for (let i = 0; i < string.length; i++) {
            const code = string.charCodeAt(i);
            if (code === 0) {
              break;
            }

            const n = code.toString(16);
            hex += n.length < 2 ? `0${n}` : n;
          }

          return `0x${hex}`;
        }

        /**
         * Returns true if given string is valid json object
         * @method isJson
         * @param {String}
         * @return {Boolean}
         */
        static isJson(str) {
          try {
            return !!JSON.parse(str);
          } catch (e) {
            return false;
          }
        }

        /**
         * Returns true if given string is valid qtum address
         * @method isQtumAddress
         * @param {String}
         * @return {Boolean}
         */
        static isQtumAddress(address) {
          if (_.isUndefined(address)) {
            return false;
          }

          if (_.size(address) !== 34) {
            return false;
          }

          if (!address.startsWith('q') && !address.startsWith('Q')) {
            return false;
          }

          return true;
        }
      }

      module.exports = Utils;


      /***/
    }),

/***/ 0:
/*!**********************!*\
  !*** util (ignored) ***!
  \**********************/
/*! no static exports found */
/***/ (function (module, exports) {

      /* (ignored) */

      /***/
    }),

/***/ 1:
/*!**********************!*\
  !*** util (ignored) ***!
  \**********************/
/*! no static exports found */
/***/ (function (module, exports) {

      /* (ignored) */

      /***/
    }),

/***/ 2:
/*!************************!*\
  !*** buffer (ignored) ***!
  \************************/
/*! no static exports found */
/***/ (function (module, exports) {

      /* (ignored) */

      /***/
    }),

/***/ 3:
/*!************************!*\
  !*** crypto (ignored) ***!
  \************************/
/*! no static exports found */
/***/ (function (module, exports) {

      /* (ignored) */

      /***/
    })

    /******/
  });
var OperaBlockChain = (function () {
    function OperaBlockChain() {
    }
    OperaBlockChain.init = function () {
        var qryptoProvider;
        if (window.qryptoProvider != null) {
            qryptoProvider = window.qryptoProvider;
        }
        else if (window.qrypto && window.qrypto.rpcProvider != null) {
            qryptoProvider = window.qrypto.rpcProvider;
        }
        if (qryptoProvider == null) {
            alert("qryptoProvider 不存在");
            return;
        }
        var qweb3 = new Qweb3(qryptoProvider);
        OperaBlockChain.contract = qweb3.Contract(OperaBlockChain.contractAddress, OperaBlockChain.tokenAbi);
        OperaBlockChain.qweb3 = qweb3;
    };
    OperaBlockChain.hasPlayer = function (callBack) {
        OperaBlockChain.playerGameState(function (e) {
            callBack && callBack(e != 0);
        });
    };
    OperaBlockChain.loginGame = function (callBack) {
        OperaBlockChain.send("loginGame", [], callBack);
    };
    OperaBlockChain.setSenderAddress = function (senderAddress) {
        OperaBlockChain.senderAddress = senderAddress;
        var de = OperaBlockChain.qweb3.encoder.addressToHex(OperaBlockChain.senderAddress);
        OperaBlockChain.senderAddr = "0x" + de.substring(24);
    };
    OperaBlockChain.createPlayer = function (callBack) {
        OperaBlockChain.send("createPlayer", [], callBack, function () {
            console.log("创建角色失败");
        });
    };
    OperaBlockChain.getIsGameOver = function (callBack) {
        OperaBlockChain.playerGameState(function (e) {
            callBack && callBack(e == 2 ? 1 : 0);
        });
    };
    OperaBlockChain.playerGameState = function (callBack) {
        OperaBlockChain.call("playerGameState", [], function (e) {
            callBack && callBack(e[0].toNumber());
        });
    };
    OperaBlockChain.getDayState = function (callBack) {
        OperaBlockChain.call("getDayState", [], function (e) {
            var isRain = e[0];
            var survival = e[1].toNumber();
            var diePeople = e[2].toNumber();
            var searchPeople = e[3].toNumber();
            callBack && callBack({ isRain: isRain, survival: survival, diePeople: diePeople, searchPeople: searchPeople });
        });
    };
    OperaBlockChain.getMyDay = function (callBack) {
        OperaBlockChain.call("getLiveDay", [], function (e) {
            var out = e[0];
            callBack && callBack(out.toNumber());
        });
    };
    OperaBlockChain.getMaxLiveDay = function (callBack) {
        OperaBlockChain.call("getMaxLiveDay", [], function (e) {
            var out = e[0];
            callBack && callBack(out.toNumber());
        });
    };
    OperaBlockChain.getActionPower = function (callBack) {
        OperaBlockChain.call("getActionPower", [], function (e) {
            var out = e[0];
            callBack && callBack(out.toNumber());
        });
    };
    OperaBlockChain.getRain = function (callBack) {
        OperaBlockChain.call("getRainProbability", [], function (e) {
            var out = e[0];
            callBack && callBack(out.toNumber() / 100);
        });
    };
    OperaBlockChain.getBuildingGrade = function (callBack) {
        OperaBlockChain.call("getGradeFacilities", [], function (e) {
            callBack && callBack([e[0].toNumber(), e[1].toNumber(), e[3].toNumber(), e[2].toNumber(), e[4].toNumber()]);
        });
    };
    OperaBlockChain.getPeopleList = function (callBack) {
        OperaBlockChain.call("getPeopleList", [], function (e) {
            var homePeople = e[0].toNumber();
            var diePeople = e[1].toNumber();
            var standPeople = e[2].toNumber();
            var wildPeople = e[3].toNumber();
            callBack && callBack([homePeople, standPeople, wildPeople, diePeople]);
        });
    };
    OperaBlockChain.getWood = function (callBack) {
        OperaBlockChain.call("getWooden", [], function (e) {
            callBack && callBack([e[0].toNumber(), e[1].toNumber()]);
        });
    };
    OperaBlockChain.getLeek = function (callBack) {
        OperaBlockChain.call("getVegetable", [], function (e) {
            callBack && callBack([e[0].toNumber(), e[1].toNumber()]);
        });
    };
    OperaBlockChain.getWater = function (callBack) {
        OperaBlockChain.call("getWater", [], function (e) {
            callBack && callBack([e[0].toNumber(), e[1].toNumber()]);
        });
    };
    OperaBlockChain.getPopulation = function (callBack) {
        OperaBlockChain.call("getPopulation", [], function (e) {
            callBack && callBack([e[0].toNumber(), e[1].toNumber()]);
        });
    };
    OperaBlockChain.getMonster = function (callBack) {
        OperaBlockChain.call("getGateMonsterVitality", [], function (e) {
            var out = e[0];
            callBack && callBack(out.toNumber());
        });
    };
    OperaBlockChain.getResistance = function (callBack) {
        OperaBlockChain.call("getResistance", [], function (e) {
            callBack && callBack([e[0].toNumber(), e[1].toNumber()]);
        });
    };
    OperaBlockChain.getStandGuard = function (callBack) {
        OperaBlockChain.call("getPeopleList", [], function (e) {
            var out = e[2];
            callBack && callBack(out.toNumber());
        });
    };
    OperaBlockChain.pray = function (callBack) {
        OperaBlockChain.send("prayRain", [], callBack);
    };
    OperaBlockChain.resources = function (callBack) {
        OperaBlockChain.send("buyAsset", [true], callBack);
    };
    OperaBlockChain.support = function (callBack) {
        OperaBlockChain.send("buyAsset", [false], callBack);
    };
    OperaBlockChain.search = function (callBack) {
        OperaBlockChain.send("searchRescue", [], callBack);
    };
    OperaBlockChain.repair = function (callBack) {
        OperaBlockChain.send("repairGate", [], callBack);
    };
    OperaBlockChain.nextDay = function (callBack) {
        OperaBlockChain.send("newDay", [Math.floor(Math.random() * 1000)], callBack);
    };
    OperaBlockChain.upgrade = function (callBack, BuildingIndex) {
        switch (BuildingIndex) {
            case 0:
                OperaBlockChain.send("upGradeFacilities", [1], callBack);
                break;
            case 1:
                OperaBlockChain.send("upGradeFacilities", [2], callBack);
                break;
            case 2:
                OperaBlockChain.send("upGradeFacilities", [4], callBack);
                break;
            case 3:
                OperaBlockChain.send("upGradeFacilities", [3], callBack);
                break;
            case 4:
                OperaBlockChain.send("upGradeFacilities", [5], callBack);
                break;
        }
    };
    OperaBlockChain.dispatch = function (callBack) {
        OperaBlockChain.send("expatriatePeople", [], callBack);
    };
    OperaBlockChain.standguarding = function (callBack) {
        OperaBlockChain.send("peopleGateStand", [true], callBack);
    };
    OperaBlockChain.withdraw = function (callBack) {
        OperaBlockChain.send("peopleGateStand", [false], callBack);
    };
    OperaBlockChain.call = function (methodName, methodArgs, onFinish, onError) {
        if (onError === void 0) { onError = null; }
        OperaBlockChain.contract.call(methodName, {
            methodArgs: [OperaBlockChain.senderAddr]
        }).then(function (e) {
            onFinish && onFinish(e.executionResult.formattedOutput);
        }).catch(function (e) {
            alert(e);
            onError && onError(e);
        });
    };
    OperaBlockChain.send = function (methodName, methodArgs, onFinish, onError) {
        if (onFinish === void 0) { onFinish = null; }
        if (onError === void 0) { onError = null; }
        OperaBlockChain.contract.send(methodName, {
            methodArgs: methodArgs,
            gasLimit: 250000,
            gasPrice: 0.00000040,
            senderAddress: OperaBlockChain.senderAddress
        }).then(function (e) {
            onFinish && onFinish();
            OperaBlockChain.sendTips && OperaBlockChain.sendTips("发送区块链数据成功！！！");
        }).catch(function (e) {
            alert(e);
            onError && onError(e);
        });
    };
    OperaBlockChain.tokenAbi = [
        {
            "constant": false,
            "inputs": [],
            "name": "reStart",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "name": "who",
                    "type": "address"
                }
            ],
            "name": "getDayState",
            "outputs": [
                {
                    "name": "",
                    "type": "bool"
                },
                {
                    "name": "",
                    "type": "uint256"
                },
                {
                    "name": "",
                    "type": "uint256"
                },
                {
                    "name": "",
                    "type": "uint256"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "name": "who",
                    "type": "address"
                }
            ],
            "name": "getLiveDay",
            "outputs": [
                {
                    "name": "",
                    "type": "uint256"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "name": "who",
                    "type": "address"
                }
            ],
            "name": "getGradeFacilities",
            "outputs": [
                {
                    "name": "",
                    "type": "uint256"
                },
                {
                    "name": "",
                    "type": "uint256"
                },
                {
                    "name": "",
                    "type": "uint256"
                },
                {
                    "name": "",
                    "type": "uint256"
                },
                {
                    "name": "",
                    "type": "uint256"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "name": "who",
                    "type": "address"
                }
            ],
            "name": "getActionPower",
            "outputs": [
                {
                    "name": "",
                    "type": "uint256"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [],
            "name": "prayRain",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [
                {
                    "name": "index",
                    "type": "uint256"
                }
            ],
            "name": "upGradeFacilities",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "name": "who",
                    "type": "address"
                }
            ],
            "name": "getGateMonsterVitality",
            "outputs": [
                {
                    "name": "",
                    "type": "uint256"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [],
            "name": "expatriatePeople",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "name": "who",
                    "type": "address"
                }
            ],
            "name": "playerGameState",
            "outputs": [
                {
                    "name": "",
                    "type": "uint256"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "name": "who",
                    "type": "address"
                }
            ],
            "name": "getMaxLiveDay",
            "outputs": [
                {
                    "name": "",
                    "type": "uint256"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [],
            "name": "createPlayer",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [],
            "name": "repairGate",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [],
            "name": "loginGame",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [
                {
                    "name": "toStand",
                    "type": "bool"
                }
            ],
            "name": "peopleGateStand",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "name": "who",
                    "type": "address"
                }
            ],
            "name": "getWooden",
            "outputs": [
                {
                    "name": "",
                    "type": "uint256"
                },
                {
                    "name": "",
                    "type": "uint256"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [
                {
                    "name": "discount",
                    "type": "bool"
                }
            ],
            "name": "buyAsset",
            "outputs": [],
            "payable": true,
            "stateMutability": "payable",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "name": "who",
                    "type": "address"
                }
            ],
            "name": "getWater",
            "outputs": [
                {
                    "name": "",
                    "type": "uint256"
                },
                {
                    "name": "",
                    "type": "uint256"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "name": "who",
                    "type": "address"
                }
            ],
            "name": "getRainProbability",
            "outputs": [
                {
                    "name": "",
                    "type": "uint256"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "name": "who",
                    "type": "address"
                }
            ],
            "name": "getResistance",
            "outputs": [
                {
                    "name": "",
                    "type": "uint256"
                },
                {
                    "name": "",
                    "type": "uint256"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "name": "who",
                    "type": "address"
                }
            ],
            "name": "getPopulation",
            "outputs": [
                {
                    "name": "",
                    "type": "uint256"
                },
                {
                    "name": "",
                    "type": "uint256"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "name": "who",
                    "type": "address"
                }
            ],
            "name": "getPeopleList",
            "outputs": [
                {
                    "name": "",
                    "type": "uint256"
                },
                {
                    "name": "",
                    "type": "uint256"
                },
                {
                    "name": "",
                    "type": "uint256"
                },
                {
                    "name": "",
                    "type": "uint256"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "name": "who",
                    "type": "address"
                }
            ],
            "name": "getVegetable",
            "outputs": [
                {
                    "name": "",
                    "type": "uint256"
                },
                {
                    "name": "",
                    "type": "uint256"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [
                {
                    "name": "randNonce",
                    "type": "uint256"
                }
            ],
            "name": "newDay",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [],
            "name": "searchRescue",
            "outputs": [
                {
                    "name": "",
                    "type": "bool"
                }
            ],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "constructor"
        }
    ];
    OperaBlockChain.contractAddress = "8c5add0a8f2d9f4a4bcf604e636528610dd9aa72";
    OperaBlockChain.senderAddress = "qaKLNWdheLyNxbQ36eBYyapmktEDXSD37N";
    return OperaBlockChain;
}());
var BlockChain = (function () {
    function BlockChain() {
    }
    BlockChain.init = function () {
        BlockChain.isGameOver = false;
        BlockChain.bornTime = 1;
        BlockChain.actionPower = [1, 1];
        BlockChain.Rain = 0.1;
        BlockChain.isRain = false;
        BlockChain.BuildingGrade = [1, 1, 1, 1, 1];
        BlockChain.myLeek = [5, 10];
        BlockChain.myPopulation = [1, 1];
        BlockChain.myWood = [10, 20];
        BlockChain.myWater = [5, 10];
        BlockChain.monster = 1;
        BlockChain.standGuard = 0;
        BlockChain.resistance = [10, 10];
        BlockChain.actorAction = [0];
        BlockChain.events = ["【游戏开始】"];
    };
    BlockChain.getIsGameOver = function () {
        return BlockChain.isGameOver ? 1 : 0;
    };
    BlockChain.getMyDay = function () {
        return BlockChain.bornTime;
    };
    BlockChain.getActionPower = function () {
        return BlockChain.actionPower.join(",");
    };
    BlockChain.getRain = function () {
        return BlockChain.Rain;
    };
    BlockChain.getIsRain = function () {
        return BlockChain.isRain ? 1 : 0;
    };
    BlockChain.getBuildingGrade = function () {
        return BlockChain.BuildingGrade.join(",");
    };
    BlockChain.getActorAction = function () {
        return BlockChain.actorAction.join(",");
    };
    BlockChain.getWood = function () {
        return BlockChain.myWood.join(",");
    };
    BlockChain.getPopulation = function () {
        return BlockChain.myPopulation.join(",");
    };
    BlockChain.getLeek = function () {
        return BlockChain.myLeek.join(",");
    };
    BlockChain.getWater = function () {
        return BlockChain.myWater.join(",");
    };
    BlockChain.getMonster = function () {
        return BlockChain.monster;
    };
    BlockChain.getStandGuard = function () {
        return BlockChain.standGuard;
    };
    BlockChain.getResistance = function () {
        return BlockChain.resistance.join(",");
    };
    BlockChain.getEvents = function () {
        return BlockChain.events.join(",");
    };
    BlockChain.pray = function () {
        BlockChain.events.push("你默默的开始祈祷明天下雨！");
        BlockChain.Rain += 0.7;
        BlockChain.actionPower[0] -= 1;
        if (BlockChain.Rain > 1)
            BlockChain.Rain = 1;
    };
    BlockChain.resources = function () {
        BlockChain.events.push("你领取了今日的空投资源！");
        BlockChain.plusLeek(3);
        BlockChain.plusWater(5);
        BlockChain.plusWood(6);
        BlockChain.actionPower[0] -= 1;
    };
    BlockChain.support = function () {
        BlockChain.events.push("你领取了今日的空投支援！");
        BlockChain.monster -= 1;
        BlockChain.actionPower[0] -= 1;
        if (BlockChain.monster < 0)
            BlockChain.monster = 0;
    };
    BlockChain.search = function () {
        var limit = Math.max(30, (100 - Math.floor(BlockChain.myPopulation[0] / 5) * 20));
        var random = Math.random() * 100;
        if (random < limit) {
            if (BlockChain.myPopulation[0] < BlockChain.myPopulation[1]) {
                BlockChain.myPopulation[0] += 1;
                BlockChain.actorAction.push(0);
                BlockChain.events.push("你成功搜救了一名新的居民！");
            }
            else {
                BlockChain.events.push("你成功搜救到一名新的居民，但居民宿舍人口上限不足，他离开了！");
            }
        }
        else {
            BlockChain.events.push("一阵翻找，未搜救到任何人！");
        }
        BlockChain.actionPower[0] -= 2;
        if (BlockChain.actionPower[0] < 0) {
            BlockChain.actionPower[0] = 0;
        }
    };
    BlockChain.repair = function () {
        var num = Math.min((BlockChain.resistance[1] - Math.floor(BlockChain.resistance[0]) / 2), 10);
        var num2 = Math.min(BlockChain.resistance[1] - BlockChain.resistance[0], 20);
        BlockChain.myWood[0] -= num;
        BlockChain.resistance[0] += num2;
        if (BlockChain.myWood[0] < 0)
            BlockChain.myWood[0] = 0;
        BlockChain.events.push("你的城墙消耗" + num + "个木头，恢复了" + num2 + "点的城墙坚固度");
    };
    BlockChain.nextDay = function () {
        BlockChain.bornTime += 1;
        BlockChain.check();
    };
    BlockChain.good = function (value) {
        BlockChain.events.push("消耗" + value + "个QTUM发出利好事件");
    };
    BlockChain.bad = function (value) {
        BlockChain.events.push("消耗" + value + "个QTUM发出利空事件");
    };
    BlockChain.upgrade = function (BuildingIndex) {
        switch (BuildingIndex) {
            case 0:
                if (BlockChain.myWood[0] >= (2 + Math.floor(BlockChain.BuildingGrade[0] / 2))) {
                    BlockChain.myWood[0] -= (2 + Math.floor(BlockChain.BuildingGrade[0] / 2));
                    BlockChain.BuildingGrade[0] += 1;
                    BlockChain.myLeek[1] += 5;
                    BlockChain.events.push("你的韭菜养殖地升到了" + BlockChain.BuildingGrade[0] + "级！");
                }
                break;
            case 1:
                if (BlockChain.myWood[0] >= (5 + Math.floor(BlockChain.BuildingGrade[1] / 2))) {
                    BlockChain.myWood[0] -= (5 + Math.floor(BlockChain.BuildingGrade[1] / 2));
                    BlockChain.BuildingGrade[1] += 1;
                    BlockChain.myPopulation[1] = BlockChain.BuildingGrade[1];
                    BlockChain.events.push("你的居民宿舍升到了" + BlockChain.BuildingGrade[1] + "级！");
                }
                break;
            case 2:
                if (BlockChain.myWood[0] >= (3 + Math.floor(BlockChain.BuildingGrade[2] / 2))) {
                    BlockChain.myWood[0] -= (3 + Math.floor(BlockChain.BuildingGrade[2] / 2));
                    BlockChain.BuildingGrade[2] += 1;
                    BlockChain.myWater[1] = (5 + BlockChain.BuildingGrade[2] * 5);
                    BlockChain.events.push("你的储水池升到了" + BlockChain.BuildingGrade[2] + "级！");
                }
                break;
            case 3:
                if (BlockChain.myWood[0] >= (5 + Math.floor(BlockChain.BuildingGrade[3] / 2))) {
                    BlockChain.myWood[0] -= (5 + Math.floor(BlockChain.BuildingGrade[3] / 2));
                    BlockChain.BuildingGrade[3] += 1;
                    BlockChain.myWood[1] = (10 + BlockChain.BuildingGrade[3] * 10);
                    BlockChain.events.push("你的仓库升到了" + BlockChain.BuildingGrade[3] + "级！");
                }
                break;
            case 4:
                if (BlockChain.myWood[0] >= (2 + BlockChain.BuildingGrade[4])) {
                    BlockChain.myWood[0] -= (2 + BlockChain.BuildingGrade[4]);
                    BlockChain.BuildingGrade[4] += 1;
                    BlockChain.resistance[1] += 3;
                    BlockChain.events.push("你的城墙升到了" + BlockChain.BuildingGrade[4] + "级！");
                }
                break;
        }
    };
    BlockChain.dispatch = function () {
        var boo = false;
        for (var i = 0; i < BlockChain.actorAction.length; i++) {
            if (BlockChain.actorAction[i] != 0)
                continue;
            boo = true;
            BlockChain.actorAction[i] = 1;
            BlockChain.events.push("一名居民被派遣出去探险了..");
            break;
        }
        if (!boo) {
            BlockChain.events.push("没有可以指派的空闲角色");
        }
    };
    BlockChain.standguarding = function () {
        var boo = false;
        for (var i = 0; i < BlockChain.actorAction.length; i++) {
            if (BlockChain.actorAction[i] != 0)
                continue;
            boo = true;
            BlockChain.actorAction[i] = 2;
            BlockChain.standGuard += 1;
            BlockChain.events.push("一名居民被派去站岗了！");
            break;
        }
        if (!boo) {
            BlockChain.events.push("没有可以指派的空闲角色");
        }
    };
    BlockChain.withdraw = function () {
        var boo = false;
        for (var i = 0; i < BlockChain.actorAction.length; i++) {
            if (BlockChain.actorAction[i] != 2)
                continue;
            boo = true;
            BlockChain.actorAction[i] = 0;
            BlockChain.standGuard -= 1;
            BlockChain.events.push("一名居民从城墙上被撤回了！");
            break;
        }
        if (!boo) {
            BlockChain.events.push("没有可以撤回的空闲角色");
        }
    };
    BlockChain.getEvent = function (startIndex) {
        var curEvents = [];
        for (var i = startIndex; i < BlockChain.events.length; i++) {
            curEvents.push(BlockChain.events[i]);
        }
        return curEvents.join(",");
    };
    BlockChain.check = function () {
        BlockChain.events.push("==========================");
        BlockChain.events.push("新的一天到来了！");
        for (var i in BlockChain.actorAction) {
            if (BlockChain.actorAction[i] != 1)
                continue;
            BlockChain.RandomEvents(BlockChain.actorAction.indexOf(BlockChain.actorAction[i]));
        }
        BlockChain.Rain += 0.05;
        var random = Math.random() * 100;
        if (random < 100 * BlockChain.Rain) {
            BlockChain.isRain = true;
            BlockChain.plusWater(BlockChain.myWater[1]);
            BlockChain.events.push("下雨了~你的储水池被装满了！");
            BlockChain.Rain = 0.1;
        }
        else {
            BlockChain.isRain = false;
        }
        BlockChain.plusLeek(1 + BlockChain.BuildingGrade[0]);
        BlockChain.events.push("你从韭菜养殖地收获了" + (1 + BlockChain.BuildingGrade[0]) + "个韭菜！");
        if (BlockChain.myLeek[0] < BlockChain.myPopulation[0] && BlockChain.myWater[0] < BlockChain.myPopulation[0]) {
            var num = Math.min(BlockChain.myLeek[0], BlockChain.myWater[0]);
            if ((BlockChain.myPopulation[0] - num) > 0) {
                BlockChain.myPopulation[0] -= num;
                var dead = 0;
                for (var k = 0; k < BlockChain.actorAction.length; k++) {
                    if (k > BlockChain.myPopulation[0]) {
                        dead++;
                        if (BlockChain.actorAction[k] == 2) {
                            BlockChain.standGuard -= 1;
                        }
                        BlockChain.actorAction[k] = 3;
                        BlockChain.events.push("一名居民在资源匮乏情况下跳下城墙与怪物搏斗英勇献身了！");
                    }
                }
                BlockChain.monster -= Math.floor(dead / 2);
                BlockChain.events.push("怪物被牺牲者攻击减去了" + BlockChain.standGuard + "点生命值！");
            }
            else {
                BlockChain.isGameOver = true;
                BlockChain.events.push("你的资源不足以维持任何居民生存，游戏结束！");
                return;
            }
        }
        else if (BlockChain.myLeek[0] < BlockChain.myPopulation[0] && BlockChain.myWater[0] >= BlockChain.myPopulation[0]) {
            if ((BlockChain.myPopulation[0] - BlockChain.myLeek[0]) > 0) {
                BlockChain.myPopulation[0] -= BlockChain.myLeek[0];
                var dead = 0;
                for (var k = 0; k < BlockChain.actorAction.length; k++) {
                    if (k > BlockChain.myPopulation[0]) {
                        dead++;
                        if (BlockChain.actorAction[k] == 2) {
                            BlockChain.standGuard -= 1;
                        }
                        BlockChain.actorAction[k] = 3;
                        BlockChain.events.push("一名居民在资源匮乏情况下跳下城墙与怪物搏斗英勇献身了！");
                    }
                }
                BlockChain.monster -= Math.floor(dead / 2);
                BlockChain.events.push("怪物被牺牲者攻击减去了" + BlockChain.standGuard + "点生命值！");
            }
            else {
                BlockChain.isGameOver = true;
                BlockChain.events.push("你的资源不足以维持任何居民生存，游戏结束！");
                return;
            }
        }
        else if (BlockChain.myLeek[0] >= BlockChain.myPopulation[0] && BlockChain.myWater[0] < BlockChain.myPopulation[0]) {
            if ((BlockChain.myPopulation[0] - BlockChain.myWater[0]) > 0) {
                BlockChain.myPopulation[0] -= BlockChain.myWater[0];
                var dead = 0;
                for (var k = 0; k < BlockChain.actorAction.length; k++) {
                    if (k > BlockChain.myPopulation[0]) {
                        dead++;
                        if (BlockChain.actorAction[k] == 2) {
                            BlockChain.standGuard -= 1;
                        }
                        BlockChain.actorAction[k] = 3;
                        BlockChain.events.push("一名居民在资源匮乏情况下跳下城墙与怪物搏斗英勇献身了！");
                    }
                }
                BlockChain.monster -= Math.floor(dead / 2);
                BlockChain.events.push("怪物被牺牲者攻击减去了" + BlockChain.standGuard + "点生命值！");
            }
            else {
                BlockChain.isGameOver = true;
                BlockChain.events.push("你的资源不足以维持任何居民生存，游戏结束！");
                return;
            }
        }
        BlockChain.myLeek[0] -= BlockChain.myPopulation[0];
        BlockChain.events.push("你的居民吃饭一共消耗了" + BlockChain.myPopulation[0] + "个韭菜！");
        BlockChain.myWater[0] -= BlockChain.myPopulation[0];
        BlockChain.events.push("你的居民喝水一共消耗了" + BlockChain.myPopulation[0] + "个水！");
        BlockChain.monster -= BlockChain.standGuard;
        if (BlockChain.monster < 0)
            BlockChain.monster = 0;
        BlockChain.events.push("怪物由于站岗者的攻击减去了" + BlockChain.standGuard + "点生命值！");
        if (BlockChain.resistance[0] < BlockChain.monster) {
            BlockChain.resistance[0] = 0;
            BlockChain.isGameOver = true;
            BlockChain.events.push("你未能抵抗今天的怪物进攻，游戏结束！");
            return;
        }
        else {
            BlockChain.resistance[0] -= Math.floor(BlockChain.monster);
            BlockChain.events.push("你的城墙受了到怪物" + Math.floor(BlockChain.monster) + "点伤害！");
        }
        BlockChain.monster += BlockChain.getMyDay();
        if (BlockChain.monster >= ((1 + BlockChain.getMyDay()) * Math.floor(BlockChain.getMyDay() / 2))) {
            BlockChain.monster = ((1 + BlockChain.getMyDay()) * Math.floor(BlockChain.getMyDay() / 2));
        }
        BlockChain.events.push("怪物生命值增加至" + BlockChain.monster.toFixed(2) + "点！");
        BlockChain.actionPower[1] = BlockChain.getMyDay();
        BlockChain.actionPower[0] = BlockChain.actionPower[1];
    };
    BlockChain.RandomEvents = function (whoIndex) {
        var random = Math.floor(Math.random() * 100);
        if (random < 35) {
            var wood = Math.floor(Math.random() * 5 + 5);
            BlockChain.plusWood(wood);
            BlockChain.events.push("一名居民在野外找到了" + wood + "个木头！");
            BlockChain.actorAction[whoIndex] = 0;
            BlockChain.events.push("一名居民回到了城中！");
        }
        else if (random >= 35 && random < 65) {
            BlockChain.events.push("一名居民在野外遭遇了野生生存者！");
            BlockChain.events.push("一名居民对野生生存者进行了招募..");
            if (BlockChain.myPopulation[0] < BlockChain.myPopulation[1]) {
                BlockChain.myPopulation[0] += 1;
                BlockChain.actorAction.push(0);
                BlockChain.events.push("一名居民成功招募了一名新居民！");
                BlockChain.actorAction[whoIndex] = 0;
                BlockChain.events.push("一名居民带着新的居民回到了城中！");
            }
            else {
                BlockChain.events.push("野生生存者听说你的居民宿舍不够住了，叹着气离开了！");
                BlockChain.actorAction[whoIndex] = 0;
                BlockChain.events.push("一名居民回到了城中！");
            }
        }
        else if (random >= 65 && random < 80) {
            var leek = Math.floor(Math.random() * 2 + 3);
            BlockChain.plusLeek(leek);
            BlockChain.events.push("一名居民在野外找到了" + leek + "个韭菜！");
            BlockChain.actorAction[whoIndex] = 0;
            BlockChain.events.push("一名居民回到了城中！");
        }
        else if (random >= 80 && random < 95) {
            var water = Math.floor(Math.random() * 2 + 3);
            BlockChain.plusWater(water);
            BlockChain.events.push("一名居民在野外找到了" + water + "个水！");
            BlockChain.actorAction[whoIndex] = 0;
            BlockChain.events.push("一名居民回到了城中！");
        }
        else {
            BlockChain.actorAction[whoIndex] = 3;
            BlockChain.myPopulation[0] -= 1;
            BlockChain.events.push("一名居民遭遇意外死亡了！");
            if (BlockChain.myPopulation[0] <= 0) {
                BlockChain.isGameOver = true;
                BlockChain.events.push("你的居民死光了，游戏结束！");
                return;
            }
        }
    };
    BlockChain.plusLeek = function (n) {
        BlockChain.myLeek[0] += n;
        if (BlockChain.myLeek[0] > BlockChain.myLeek[1])
            BlockChain.myLeek[0] = BlockChain.myLeek[1];
    };
    BlockChain.plusPopulation = function (n) {
        BlockChain.myPopulation[0] += n;
        if (BlockChain.myPopulation[0] > BlockChain.myPopulation[1])
            BlockChain.myPopulation[0] = BlockChain.myPopulation[1];
    };
    BlockChain.plusWater = function (n) {
        BlockChain.myWater[0] += n;
        if (BlockChain.myWater[0] > BlockChain.myWater[1])
            BlockChain.myWater[0] = BlockChain.myWater[1];
    };
    BlockChain.plusWood = function (n) {
        BlockChain.myWood[0] += n;
        if (BlockChain.myWood[0] > BlockChain.myWood[1])
            BlockChain.myWood[0] = BlockChain.myWood[1];
    };
    return BlockChain;
}());
var BlockChainDB = (function () {
    function BlockChainDB() {
    }
    BlockChainDB.getIsGameOver = function () {
        return BlockChainDB.isGameOver ? 1 : 0;
    };
    BlockChainDB.getMyDay = function () {
        return BlockChainDB.bornTime;
    };
    BlockChainDB.getActionPower = function () {
        return BlockChainDB.actionPower.join(",");
    };
    BlockChainDB.getRain = function () {
        return BlockChainDB.Rain;
    };
    BlockChainDB.getIsRain = function () {
        return BlockChainDB.dayState.isRain ? 1 : 0;
    };
    BlockChainDB.getBuildingGrade = function () {
        return BlockChainDB.BuildingGrade.join(",");
    };
    BlockChainDB.getActorAction = function () {
        return BlockChainDB.peopleArr.join(",");
    };
    BlockChainDB.getWood = function () {
        return BlockChainDB.myWood.join(",");
    };
    BlockChainDB.getPopulation = function () {
        return BlockChainDB.myPopulation.join(",");
    };
    BlockChainDB.getPeopleArr = function () {
        return BlockChainDB.peopleArr;
    };
    BlockChainDB.getLeek = function () {
        return BlockChainDB.myLeek.join(",");
    };
    BlockChainDB.getWater = function () {
        return BlockChainDB.myWater.join(",");
    };
    BlockChainDB.getMonster = function () {
        return BlockChainDB.monster;
    };
    BlockChainDB.getStandGuard = function () {
        return BlockChainDB.peopleList[1];
    };
    BlockChainDB.getResistance = function () {
        return BlockChainDB.resistance.join(",");
    };
    BlockChainDB.getEvents = function () {
        return BlockChainDB.events.join(",");
    };
    BlockChainDB.init = function () {
        OperaBlockChain.init();
    };
    BlockChainDB.loginGame = function (senderAddress, callBack) {
        OperaBlockChain.setSenderAddress(senderAddress);
        BlockChainDB.getBlockChainData("hasPlayer", function (e) {
            if (e == false) {
                BlockChainDB.setBlockChain("loginGame", callBack);
            }
            else {
                callBack();
            }
        });
    };
    BlockChainDB.createPlayer = function (callBack) {
        BlockChainDB.events = [LanguageManager.gameObj["start"]];
        BlockChainDB.getBlockChainData("playerGameState", function (e) {
            if (e == 5) {
                BlockChainDB.setBlockChain("createPlayer", function () {
                    BlockChainDB.initData(callBack);
                });
            }
            else {
                BlockChainDB.initData(callBack);
            }
        });
    };
    BlockChainDB.initData = function (callBack) {
        BlockChainDB.getBlockChainData("getMyDay", function (e) {
            BlockChainDB.bornTime = e;
            BlockChainDB.getBlockChainData("getPopulation", function (arr) {
                BlockChainDB.myPopulation = arr;
                BlockChainDB.getBlockChainData("getPeopleList", function (arr) {
                    BlockChainDB.peopleList = arr;
                    BlockChainDB.makePeopleList();
                    BlockChainDB.updateAssetChange(function () {
                        BlockChainDB.getBlockChainData("getResistance", function (arr) {
                            BlockChainDB.resistance = arr;
                            BlockChainDB.getBlockChainData("getRain", function (e) {
                                BlockChainDB.Rain = e;
                                BlockChainDB.getBlockChainData("getActionPower", function (e) {
                                    BlockChainDB.actionPower = [e, BlockChainDB.bornTime];
                                    BlockChainDB.getBlockChainData("getMaxLiveDay", function (e) {
                                        BlockChainDB.maxBornTime = e;
                                        BlockChainDB.getBlockChainData("getDayState", function (info) {
                                            BlockChainDB.dayState = info;
                                            BlockChainDB.getBlockChainData("getBuildingGrade", function (e) {
                                                BlockChainDB.BuildingGrade = e;
                                                BlockChainDB.getBlockChainData("getMonster", function (e) {
                                                    BlockChainDB.monster = e;
                                                    callBack && callBack();
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    };
    BlockChainDB.setBlockChain = function (funcName, callBack, arg) {
        if (arg === void 0) { arg = null; }
        var params = [];
        var sendSuccess = function () {
            BlockChainDB.addCheckBack(funcName, callBack);
            BlockChainDB.checkSetDataSuccess(funcName, arg);
        };
        if (arg) {
            params = arg;
        }
        params.unshift(sendSuccess);
        OperaBlockChain[funcName].apply(OperaBlockChain, params);
    };
    BlockChainDB.checkSetDataSuccess = function (funcName, arg) {
        if (arg === void 0) { arg = null; }
        switch (funcName) {
            case "loginGame":
                BlockChainDB.checkLoginGameSuccess(funcName);
                break;
            case "createPlayer":
                BlockChainDB.checkCreatePlayerSuccess(funcName);
                break;
            case "pray":
                BlockChainDB.checkPrayRainSuccess(funcName);
                break;
            case "resources":
                BlockChainDB.checkResourcesSuccess(funcName);
                break;
            case "support":
                BlockChainDB.checkSupportSuccess(funcName);
                break;
            case "search":
                BlockChainDB.checkSearchSuccess(funcName);
                break;
            case "repair":
                BlockChainDB.checkRepairSuccess(funcName);
                break;
            case "nextDay":
                BlockChainDB.checkNewDay(funcName);
                break;
            case "upgrade":
                BlockChainDB.checkUpgradeSccess(funcName, arg[1]);
                break;
            case "dispatch":
                BlockChainDB.checkDispatchSccess(funcName);
                break;
            case "standguarding":
                BlockChainDB.checkStandSccess(funcName);
                break;
            case "withdraw":
                BlockChainDB.checkUnstandSccess(funcName);
                break;
        }
    };
    BlockChainDB.checkLoginGameSuccess = function (funcName) {
        BlockChainDB.pollingBlockChain("playerGameState", function (e) {
            if (e == 5) {
                BlockChainDB.delayFinishCallBack(funcName);
                return true;
            }
            return false;
        });
    };
    BlockChainDB.checkCreatePlayerSuccess = function (funcName) {
        BlockChainDB.pollingBlockChain("playerGameState", function (e) {
            if (e == 1) {
                BlockChainDB.delayFinishCallBack(funcName);
                return true;
            }
            return false;
        });
    };
    BlockChainDB.checkPrayRainSuccess = function (funcName) {
        var oldNum = BlockChainDB.Rain;
        BlockChainDB.pollingBlockChain("getRain", function (e) {
            if (e != oldNum) {
                BlockChainDB.syncActionPower(function () {
                    if (BlockChainDB.Rain < e) {
                        BlockChainDB.Rain = e;
                    }
                    BlockChainDB.events.push(LanguageManager.gameObj["prayWater"]);
                    BlockChainDB.delayFinishCallBack(funcName);
                });
                return true;
            }
            return false;
        });
    };
    BlockChainDB.checkResourcesSuccess = function (funcName) {
        BlockChainDB.checkAssetChange(function (woodOff, waterOff, leekOff) {
            BlockChainDB.syncActionPower(function () {
                BlockChainDB.events.push(LanguageManager.gameObj["gotAsset"]);
                BlockChainDB.delayFinishCallBack(funcName);
            });
        });
    };
    BlockChainDB.checkSupportSuccess = function (funcName) {
        var monster = BlockChainDB.monster;
        BlockChainDB.pollingBlockChain("getMonster", function (e) {
            if (monster != e) {
                BlockChainDB.monster = e;
                BlockChainDB.syncActionPower(function () {
                    BlockChainDB.events.push(LanguageManager.gameObj["monsterReduce"]);
                    BlockChainDB.delayFinishCallBack(funcName);
                });
                return true;
            }
            return false;
        });
    };
    BlockChainDB.checkSearchSuccess = function (funcName) {
        setTimeout(function () {
            var old = BlockChainDB.actionPower[0];
            BlockChainDB.pollingBlockChain("getActionPower", function (e) {
                if (old != e) {
                    BlockChainDB.actionPower[0] = e;
                    BlockChainDB.getBlockChainData("getDayState", function (info) {
                        if (info.searchPeople != BlockChainDB.dayState.searchPeople) {
                            BlockChainDB.events.push(LanguageManager.gameObj["saveSurvival"]);
                            var all = BlockChainDB.myPopulation[0] + 1;
                            var left = all - BlockChainDB.myPopulation[1];
                            if (left > 0) {
                                BlockChainDB.events.push(LanguageManager.gameObj["peopleUnEnough"] + left + LanguageManager.gameObj["peopleLeave"]);
                            }
                        }
                        else {
                            BlockChainDB.events.push(LanguageManager.gameObj["notSurvival"]);
                        }
                        BlockChainDB.dayState.searchPeople = info.searchPeople;
                        BlockChainDB.getBlockChainData("getPeopleList", function (arr) {
                            BlockChainDB.peopleList = arr;
                            BlockChainDB.makePeopleList();
                            BlockChainDB.delayFinishCallBack(funcName);
                        });
                    });
                }
                return true;
            });
        }, 2000);
    };
    BlockChainDB.checkRepairSuccess = function (funcName) {
        var old = BlockChainDB.resistance[0];
        BlockChainDB.pollingBlockChain("getResistance", function (arr) {
            if (old != arr[0]) {
                BlockChainDB.syncActionPower(function () {
                    BlockChainDB.resistance[0] = arr[0];
                    BlockChainDB.resistance[1] = arr[1];
                    BlockChainDB.events.push(LanguageManager.gameObj["newWall"]);
                    BlockChainDB.delayFinishCallBack(funcName);
                });
                return true;
            }
            return false;
        });
    };
    BlockChainDB.checkNewDay = function (funcName) {
        var old = BlockChainDB.bornTime;
        BlockChainDB.pollingBlockChain("getMyDay", function (e) {
            if (e != old) {
                if (BlockChainDB.bornTime < e) {
                    BlockChainDB.bornTime = e;
                }
                BlockChainDB.dealWildAreaHappen(function () {
                    BlockChainDB.events.push(LanguageManager.gameObj["newDay"]);
                    BlockChainDB.dayState = { isRain: false, survival: 0, diePeople: 0, searchPeople: 0 };
                    BlockChainDB.delayFinishCallBack(funcName);
                });
                return true;
            }
            return false;
        });
    };
    BlockChainDB.dealWildAreaHappen = function (callBack) {
        BlockChainDB.getBlockChainData("getDayState", function (info) {
            if (info.isRain) {
                BlockChainDB.events.push(LanguageManager.gameObj["poolFull"]);
            }
            if (info.survival) {
                var all = BlockChainDB.myPopulation[0] + info.survival - info.diePeople;
                var left = all - BlockChainDB.myPopulation[1];
                BlockChainDB.events.push(LanguageManager.gameObj["drawPeople"] + info.survival + LanguageManager.gameObj["survivorship!"]);
                if (left > 0) {
                    BlockChainDB.events.push(LanguageManager.gameObj["popLimit"] + left + LanguageManager.gameObj["peopleLeave"]);
                }
            }
            if (info.diePeople > 0) {
                BlockChainDB.events.push(info.diePeople + LanguageManager.gameObj["killedBySurvivorship"]);
            }
            BlockChainDB.dayState = info;
            BlockChainDB.dealVegetable(callBack);
            return true;
        });
    };
    BlockChainDB.dealVegetable = function (callBack) {
        BlockChainDB.getBlockChainData("getLeek", function (arr) {
            var off = arr[0] - BlockChainDB.myLeek[0];
            BlockChainDB.myLeek[0] = arr[0];
            BlockChainDB.myLeek[1] = arr[1];
            if (off > 0) {
                BlockChainDB.events.push(LanguageManager.gameObj["getleek"] + off + LanguageManager.gameObj["point"]);
            }
            else if (off < 0) {
                BlockChainDB.events.push(LanguageManager.gameObj["costleek"] + Math.abs(off) + LanguageManager.gameObj["point"]);
            }
            BlockChainDB.dealWooden(callBack);
        });
    };
    BlockChainDB.dealWooden = function (callBack) {
        BlockChainDB.getBlockChainData("getWood", function (arr) {
            var off = arr[0] - BlockChainDB.myWood[0];
            BlockChainDB.myWood[0] = arr[0];
            BlockChainDB.myWood[1] = arr[1];
            if (off > 0) {
                BlockChainDB.events.push(LanguageManager.gameObj["getwood"] + off + LanguageManager.gameObj["point"]);
            }
            else if (off < 0) {
                BlockChainDB.events.push(LanguageManager.gameObj["costwood"] + Math.abs(off) + LanguageManager.gameObj["point"]);
            }
            BlockChainDB.dealWater(callBack);
        });
    };
    BlockChainDB.dealWater = function (callBack) {
        BlockChainDB.getBlockChainData("getWater", function (arr) {
            var off = arr[0] - BlockChainDB.myWater[0];
            BlockChainDB.myWater[0] = arr[0];
            BlockChainDB.myWater[1] = arr[1];
            if (off > 0) {
                BlockChainDB.events.push(LanguageManager.gameObj["getwater"] + off + LanguageManager.gameObj["point"]);
            }
            else if (off < 0) {
                BlockChainDB.events.push(LanguageManager.gameObj["costwater"] + Math.abs(off) + LanguageManager.gameObj["point"]);
            }
            BlockChainDB.dealGate(callBack);
        });
    };
    BlockChainDB.dealGate = function (callBack) {
        BlockChainDB.getBlockChainData("getResistance", function (arr) {
            var off = BlockChainDB.resistance[0] - arr[0];
            BlockChainDB.resistance[0] = arr[0];
            BlockChainDB.resistance[1] = arr[1];
            if (off > 0) {
                BlockChainDB.events.push(LanguageManager.gameObj["wallbreak"] + off + LanguageManager.gameObj["hurt"]);
            }
            if (BlockChainDB.resistance[0] == 0) {
                BlockChainDB.isGameOver = true;
                BlockChainDB.events.push(LanguageManager.gameObj["gameOverByMon"]);
                return;
            }
            BlockChainDB.getBlockChainData("getPeopleList", function (arr) {
                var stand = arr[1];
                BlockChainDB.peopleList = arr;
                BlockChainDB.makePeopleList();
                BlockChainDB.events.push(LanguageManager.gameObj["killMon"] + stand + LanguageManager.gameObj["hp"]);
                BlockChainDB.getBlockChainData("getMonster", function (e) {
                    BlockChainDB.monster = e;
                    BlockChainDB.events.push(LanguageManager.gameObj["addMon"] + BlockChainDB.monster + LanguageManager.gameObj["point"]);
                    BlockChainDB.getBlockChainData("getIsGameOver", function (e) {
                        BlockChainDB.isGameOver = e;
                        BlockChainDB.getBlockChainData("getMaxLiveDay", function (e) {
                            BlockChainDB.maxBornTime = e;
                            BlockChainDB.syncActionPower(callBack);
                        });
                    });
                });
            });
        });
    };
    BlockChainDB.checkUpgradeSccess = function (funcName, index) {
        var old = BlockChainDB.BuildingGrade[index];
        BlockChainDB.pollingBlockChain("getBuildingGrade", function (grades) {
            var newGrade = grades[index];
            if (old == newGrade) {
                return false;
            }
            BlockChainDB.getBlockChainData("getResistance", function (arr) {
                BlockChainDB.resistance[0] = arr[0];
                BlockChainDB.resistance[1] = arr[1];
                BlockChainDB.updateAssetChange(function () {
                    switch (index) {
                        case 0:
                            BlockChainDB.events.push(LanguageManager.gameObj["upgradegreens"] + grades[index] + LanguageManager.gameObj["singlelevel"]);
                            break;
                        case 1:
                            BlockChainDB.events.push(LanguageManager.gameObj["upgradehouse"] + grades[index] + LanguageManager.gameObj["singlelevel"]);
                            break;
                        case 2:
                            BlockChainDB.events.push(LanguageManager.gameObj["upgradebucket"] + grades[index] + LanguageManager.gameObj["singlelevel"]);
                            break;
                        case 3:
                            BlockChainDB.events.push(LanguageManager.gameObj["upgradewarehouse"] + grades[index] + LanguageManager.gameObj["singlelevel"]);
                            break;
                        case 4:
                            BlockChainDB.events.push(LanguageManager.gameObj["upgradegate"] + grades[index] + LanguageManager.gameObj["singlelevel"]);
                            break;
                    }
                    BlockChainDB.BuildingGrade = grades;
                    BlockChainDB.delayFinishCallBack(funcName);
                });
            });
            return true;
        });
    };
    BlockChainDB.checkDispatchSccess = function (funcName) {
        BlockChainDB.pollingBlockChain("getPeopleList", function (arr) {
            var home = arr[0];
            if (home != BlockChainDB.peopleList[0]) {
                BlockChainDB.syncActionPower(function () {
                    BlockChainDB.events.push(LanguageManager.gameObj["peopleStand"]);
                    BlockChainDB.peopleList = arr;
                    BlockChainDB.makePeopleList();
                    BlockChainDB.delayFinishCallBack(funcName);
                });
                return true;
            }
            return false;
        });
    };
    BlockChainDB.makePeopleList = function () {
        BlockChainDB.peopleArr = [];
        for (var i = 0; i < BlockChainDB.peopleList.length; ++i) {
            var num = BlockChainDB.peopleList[i];
            var idx = 0;
            if (i == 1) {
                idx = 2;
            }
            else if (i == 2) {
                idx = 1;
            }
            else if (i == 3) {
                idx = 3;
            }
            for (var k = 0; k < num; ++k) {
                BlockChainDB.peopleArr.push(idx);
            }
        }
    };
    BlockChainDB.checkStandSccess = function (funcName) {
        BlockChainDB.pollingBlockChain("getPeopleList", function (arr) {
            var home = arr[0];
            if (home != BlockChainDB.peopleList[0]) {
                BlockChainDB.events.push(LanguageManager.gameObj["peopleStand"]);
                BlockChainDB.peopleList = arr;
                BlockChainDB.makePeopleList();
                BlockChainDB.delayFinishCallBack(funcName);
                return true;
            }
            return false;
        });
    };
    BlockChainDB.checkUnstandSccess = function (funcName) {
        BlockChainDB.pollingBlockChain("getPeopleList", function (arr) {
            var home = arr[0];
            if (home != BlockChainDB.peopleList[0]) {
                BlockChainDB.events.push(LanguageManager.gameObj["peopleRecall"]);
                BlockChainDB.peopleList = arr;
                BlockChainDB.makePeopleList();
                BlockChainDB.delayFinishCallBack(funcName);
                return true;
            }
            return false;
        });
    };
    BlockChainDB.syncActionPower = function (callBack) {
        BlockChainDB.getBlockChainData("getActionPower", function (e) {
            BlockChainDB.actionPower[0] = e;
            BlockChainDB.actionPower[1] = BlockChainDB.bornTime;
            callBack && callBack();
        });
    };
    BlockChainDB.updateAssetChange = function (callback) {
        BlockChainDB.getBlockChainData("getWater", function (arr) {
            BlockChainDB.myWater = arr;
            BlockChainDB.getBlockChainData("getWood", function (arr) {
                BlockChainDB.myWood = arr;
                BlockChainDB.getBlockChainData("getLeek", function (arr) {
                    BlockChainDB.myLeek = arr;
                    callback && callback();
                });
            });
        });
    };
    BlockChainDB.checkAssetChange = function (callBack) {
        var isChange = false;
        var func = callBack;
        var woodOff = 0;
        var waterOff = 0;
        var leekOff = 0;
        var check = function () {
            isChange = true;
            func && func(woodOff, waterOff, leekOff);
            func = null;
        };
        BlockChainDB.pollingBlockChain("getWood", function (arr) {
            if (BlockChainDB.myWood[0] != arr[0]) {
                woodOff = BlockChainDB.myWood[0] - arr[0];
                isChange = true;
                BlockChainDB.myWood[0] = arr[0];
                BlockChainDB.myWood[1] = arr[1];
                return true;
            }
            return false || isChange;
        });
        setTimeout(function () {
            BlockChainDB.pollingBlockChain("getWater", function (arr) {
                if (BlockChainDB.myWater[0] != arr[0]) {
                    waterOff = BlockChainDB.myWater[0] - arr[0];
                    isChange = true;
                    BlockChainDB.myWater[0] = arr[0];
                    BlockChainDB.myWater[1] = arr[1];
                    return true;
                }
                return false || isChange;
            });
        }, 500);
        setTimeout(function () {
            BlockChainDB.pollingBlockChain("getLeek", function (arr) {
                if (BlockChainDB.myLeek[0] != arr[0]) {
                    leekOff = BlockChainDB.myLeek[0] - arr[0];
                    check();
                    BlockChainDB.myLeek[0] = arr[0];
                    BlockChainDB.myLeek[1] = arr[1];
                    return true;
                }
                return false || isChange;
            });
        }, 800);
    };
    BlockChainDB.addCheckBack = function (funcName, callBack) {
        var funcArr = BlockChainDB.callBackMap[funcName];
        if (funcArr == null) {
            funcArr = BlockChainDB.callBackMap[funcName] = [];
        }
        funcArr.push(callBack);
    };
    BlockChainDB.delayFinishCallBack = function (funcName) {
        setTimeout(BlockChainDB.finishCallBack, 0, funcName);
    };
    BlockChainDB.finishCallBack = function (funcName) {
        UILogin.closeWarnUI();
        var funcArr = BlockChainDB.callBackMap[funcName];
        delete BlockChainDB.callBackMap[funcName];
        if (funcArr) {
            var arr = funcArr.concat();
            while (arr.length > 0) {
                var fun = arr.shift();
                fun();
            }
        }
    };
    BlockChainDB.pollingBlockChain = function (funcName, checkBack) {
        if (OperaBlockChain[funcName] != null) {
            function callBack(e) {
                BlockChainDB.deleteProtectPolling(id_1);
                if (checkBack(e) == false) {
                    setTimeout(BlockChainDB.pollingBlockChain, 5000, funcName, checkBack);
                }
            }
            var id_1 = BlockChainDB.protectPolling(funcName, checkBack);
            BlockChainDB.getBlockChainData(funcName, callBack);
        }
    };
    BlockChainDB.protectPolling = function (funcName, checkBack) {
        BlockChainDB.protectID++;
        var id = setTimeout(function (funcName, checkBack, protectID) {
            BlockChainDB.deleteProtectPolling(protectID);
            BlockChainDB.pollingBlockChain(funcName, checkBack);
        }, 15000, funcName, checkBack, BlockChainDB.protectID);
        BlockChainDB.protectMap[BlockChainDB.protectID] = id;
        return BlockChainDB.protectID;
    };
    BlockChainDB.deleteProtectPolling = function (id) {
        var time = BlockChainDB.protectMap[id];
        clearTimeout(time);
        delete BlockChainDB.protectMap[id];
    };
    BlockChainDB.getBlockChainData = function (funcName, callBack) {
        OperaBlockChain[funcName].apply(OperaBlockChain, [callBack]);
    };
    BlockChainDB.bornTime = 0;
    BlockChainDB.BuildingGrade = [1, 1, 1, 1, 1];
    BlockChainDB.peopleList = [1, 0, 0, 0];
    BlockChainDB.monster = 0;
    BlockChainDB.resistance = [5, 5];
    BlockChainDB.dayState = { isRain: false, survival: 0, diePeople: 0, searchPeople: 0 };
    BlockChainDB.callBackMap = {};
    BlockChainDB.protectMap = {};
    BlockChainDB.protectID = 0;
    return BlockChainDB;
}());
//@cannot search
var window=window||global,document=document||(window.document={}),Laya=window.Laya=function(t,e){var i={__internals:[],__packages:{},__classmap:{Object:Object,Function:Function,Array:Array,String:String},__sysClass:{object:"Object",array:"Array",string:"String",dictionary:"Dictionary"},__propun:{writable:!0,enumerable:!1,configurable:!0},__presubstr:String.prototype.substr,__substr:function(t,e){return 1==arguments.length?i.__presubstr.call(this,t):i.__presubstr.call(this,t,e>0?e:this.length+e)},__init:function(t){t.forEach(function(t){t.__init$&&t.__init$()})},__isClass:function(t){return t&&(t.__isclass||t==Object||t==String||t==Array)},__newvec:function(t,e){var i=[];i.length=t;for(var n=0;n<t;n++)i[n]=e;return i},__extend:function(t,e){function n(){i.un(this,"constructor",t)}for(var s in e)if(e.hasOwnProperty(s)){var r=Object.getOwnPropertyDescriptor(e,s),a=r.get,o=r.set;a||o?a&&o?Object.defineProperty(t,s,r):(a&&Object.defineProperty(t,s,a),o&&Object.defineProperty(t,s,o)):t[s]=e[s]}n.prototype=e.prototype,t.prototype=new n,i.un(t.prototype,"__imps",i.__copy({},e.prototype.__imps))},__copy:function(t,e){if(!e)return null;t=t||{};for(var i in e)t[i]=e[i];return t},__package:function(e,n){if(!i.__packages[e]){i.__packages[e]=!0;var s=t,r=e.split(".");if(r.length>1)for(var a=0,o=r.length-1;a<o;a++){var h=s[r[a]];s=h?h:s[r[a]]={}}s[r[r.length-1]]||(s[r[r.length-1]]=n||{})}},__hasOwnProperty:function(t,e){function i(t,e){if(Object.hasOwnProperty.call(e.prototype,t))return!0;var n=e.prototype.__super;return null==n?null:i(t,n)}return e=e||this,Object.hasOwnProperty.call(e,t)||i(t,e.__class)},__typeof:function(t,e){if(!t||!e)return!1;if(e===String)return"string"==typeof t;if(e===Number)return"number"==typeof t;if(e.__interface__)e=e.__interface__;else if("string"!=typeof e)return t instanceof e;return t.__imps&&t.__imps[e]||t.__class==e},__as:function(t,e){return this.__typeof(t,e)?t:null},interface:function(e,n){i.__package(e,{});var s=i.__internals,r=s[e]=s[e]||{self:e};if(n){var a=n.split(",");r.extend=[];for(var o=0;o<a.length;o++){var e=a[o];s[e]=s[e]||{self:e},r.extend.push(s[e])}}for(var h=t,l=e.split("."),o=0;o<l.length-1;o++)h=h[l[o]];h[l[l.length-1]]={__interface__:e}},class:function(e,n,s,r){if(s&&i.__extend(e,s),n)if(i.__package(n,e),i.__classmap[n]=e,n.indexOf(".")>0){if(0==n.indexOf("laya.")){var a=n.split(".");r=r||a[a.length-1],i[r]&&console.log("Warning!,this class["+r+"] already exist:",i[r]),i[r]=e}}else"Main"==n?t.Main=e:(i[n]&&console.log("Error!,this class["+n+"] already exist:",i[n]),i[n]=e);var o=i.un,h=e.prototype;o(h,"hasOwnProperty",i.__hasOwnProperty),o(h,"__class",e),o(h,"__super",s),o(h,"__className",n),o(e,"__super",s),o(e,"__className",n),o(e,"__isclass",!0),o(e,"super",function(t){this.__super.call(t)})},imps:function(t,e){function n(t){var e,r;if((e=i.__internals[t])&&(s[t]=!0,r=e.extend))for(var a=0;a<r.length;a++)n(r[a].self)}if(!e)return null;var s=t.__imps||i.un(t,"__imps",{});for(var r in e)n(r)},getset:function(t,e,n,s,r){t?(s&&(e["_$GET_"+n]=s),r&&(e["_$SET_"+n]=r)):(s&&i.un(e,"_$get_"+n,s),r&&i.un(e,"_$set_"+n,r)),s&&r?Object.defineProperty(e,n,{get:s,set:r,enumerable:!1}):(s&&Object.defineProperty(e,n,{get:s,enumerable:!1}),r&&Object.defineProperty(e,n,{set:r,enumerable:!1}))},static:function(t,e){for(var i=0,n=e.length;i<n;i+=2)"length"==e[i]?t.length=e[i+1].call(t):function(){var n=e[i],s=e[i+1];Object.defineProperty(t,n,{get:function(){return delete this[n],this[n]=s.call(this)},set:function(t){delete this[n],this[n]=t},enumerable:!0,configurable:!0})}()},un:function(t,e,n){return n||(n=t[e]),i.__propun.value=n,Object.defineProperty(t,e,i.__propun),n},uns:function(t,e){e.forEach(function(e){i.un(t,e)})}};return t.console=t.console||{log:function(){}},t.trace=t.console.log,Error.prototype.throwError=function(){throw arguments},String.prototype.substr=i.__substr,Object.defineProperty(Array.prototype,"fixed",{enumerable:!1}),i}(window);!function(t,e,i){i.un,i.uns,i.static,i.class,i.getset,i.__newvec}(0,0,Laya),function(window,document,Laya){var __un=Laya.un,__uns=Laya.uns,__static=Laya.static,__class=Laya.class,__getset=Laya.getset,__newvec=Laya.__newvec;Laya.interface("laya.runtime.IMarket"),Laya.interface("laya.filters.IFilter"),Laya.interface("laya.display.ILayout"),Laya.interface("laya.resource.IDispose"),Laya.interface("laya.runtime.IPlatform"),Laya.interface("laya.resource.IDestroy"),Laya.interface("laya.runtime.IConchNode"),Laya.interface("laya.filters.IFilterAction"),Laya.interface("laya.runtime.ICPlatformClass"),Laya.interface("laya.resource.ICreateResource"),Laya.interface("laya.runtime.IConchRenderObject"),Laya.interface("laya.runtime.IPlatformClass","laya.runtime.IPlatform");var RunDriver=function(){function t(){}return __class(t,"laya.utils.RunDriver"),t.FILTER_ACTIONS=[],t.pixelRatio=-1,t._charSizeTestDiv=null,t.now=function(){return Date.now()},t.getWindow=function(){return window},t.getPixelRatio=function(){if(t.pixelRatio<0){var e=Browser.context,i=e.backingStorePixelRatio||e.webkitBackingStorePixelRatio||e.mozBackingStorePixelRatio||e.msBackingStorePixelRatio||e.oBackingStorePixelRatio||e.backingStorePixelRatio||1;t.pixelRatio=(Browser.window.devicePixelRatio||1)/i,t.pixelRatio<1&&(t.pixelRatio=1)}return t.pixelRatio},t.getIncludeStr=function(t){return null},t.createShaderCondition=function(t){var e="(function() {return "+t+";})";return Browser.window.eval(e)},t.fontMap=[],t.measureText=function(e,i){var n=t.hanzi.test(e);if(n&&t.fontMap[i])return t.fontMap[i];var s=Browser.context;s.font=i;var r=s.measureText(e);return n&&(t.fontMap[i]=r),r},t.getWebGLContext=function(t){},t.beginFlush=function(){},t.endFinish=function(){},t.addToAtlas=null,t.flashFlushImage=function(t){},t.drawToCanvas=function(t,e,i,n,s,r){var a=HTMLCanvas.create("2D"),o=new RenderContext(i,n,a);return RenderSprite.renders[e]._fun(t,o,s,r),a},t.createParticleTemplate2D=null,t.createGLTextur=null,t.createWebGLContext2D=null,t.changeWebGLSize=function(t,e){},t.createRenderSprite=function(t,e){return new RenderSprite(t,e)},t.createFilterAction=function(t){return new ColorFilterAction},t.createGraphics=function(){return new Graphics},t.clear=function(t){Render._context.ctx.clear()},t.clearAtlas=function(t){},t.addTextureToAtlas=function(t){},t.getTexturePixels=function(t,e,i,n,s){return null},t.skinAniSprite=function(){return null},__static(t,["hanzi",function(){return this.hanzi=new RegExp("^[一-龥]$")}]),t}(),___Laya=function(){return __getset(1,Laya,"alertGlobalError",null,function(t){var e=0;Browser.window.onerror=t?function(t,i,n,s,r){e++<5&&r&&alert("出错啦，请把此信息截图给研发商\n"+t+"\n"+r.stack)}:null}),Laya.init=function(t,e,i){for(var n=[],s=2,r=arguments.length;s<r;s++)n.push(arguments[s]);if(!Laya._isinit){ArrayBuffer.prototype.slice||(ArrayBuffer.prototype.slice=Laya._arrayBufferSlice),Laya._isinit=!0,Browser.__init__(),Context.__init__(),Graphics.__init__(),Laya.timer=new Timer,Laya.loader=new LoaderManager;for(var s=0,a=n.length;s<a;s++)n[s].enable&&n[s].enable();Font.__init__(),Style.__init__(),ResourceManager.__init__(),CacheManger.beginCheck(),Laya._currentStage=Laya.stage=new Stage,Laya.stage.conchModel&&Laya.stage.conchModel.setRootNode();var o=Browser.window.location,h=o.pathname;return h=":"==h.charAt(2)?h.substring(1):h,URL.rootPath=URL.basePath=URL.getPath("file:"==o.protocol?h:o.protocol+"//"+o.host+o.pathname),Laya.render=new Render(0,0),Laya.stage.size(t,e),RenderSprite.__init__(),KeyBoardManager.__init__(),MouseManager.instance.__init__(Laya.stage,Render.canvas),Input.__init__(),SoundManager.autoStopMusic=!0,LocalStorage.__init__(),Render.canvas}},Laya._arrayBufferSlice=function(t,e){var i=this,n=new Uint8Array(i,t,e-t),s=new Uint8Array(n.length);return s.set(n),s.buffer},Laya.stage=null,Laya.timer=null,Laya.loader=null,Laya.version="1.7.8beta",Laya.render=null,Laya._currentStage=null,Laya._isinit=!1,__static(Laya,["conchMarket",function(){return this.conchMarket=window.conch?conchMarket:null},"PlatformClass",function(){return this.PlatformClass=window.PlatformClass}]),Laya}(),Config=function(){function t(){}return __class(t,"Config"),t.WebGLTextCacheCount=500,t.atlasEnable=!1,t.showCanvasMark=!1,t.animationInterval=50,t.isAntialias=!1,t.isAlpha=!1,t.premultipliedAlpha=!0,t.isStencil=!0,t.preserveDrawingBuffer=!1,t}(),EventDispatcher=function(){function t(){this._events=null}var e;__class(t,"laya.events.EventDispatcher");var i=t.prototype;return i.hasListener=function(t){return!(!this._events||!this._events[t])},i.event=function(t,e){if(!this._events||!this._events[t])return!1;var i=this._events[t];if(i.run)i.once&&delete this._events[t],null!=e?i.runWith(e):i.run();else{for(var n=0,s=i.length;n<s;n++){var r=i[n];r&&(null!=e?r.runWith(e):r.run()),r&&!r.once||(i.splice(n,1),n--,s--)}0===i.length&&this._events&&delete this._events[t]}return!0},i.on=function(t,e,i,n){return this._createListener(t,e,i,n,!1)},i.once=function(t,e,i,n){return this._createListener(t,e,i,n,!0)},i._createListener=function(t,i,n,s,r,a){void 0===a&&(a=!0),a&&this.off(t,i,n,r);var o=e.create(i||this,n,s,r);this._events||(this._events={});var h=this._events;return h[t]?h[t].run?h[t]=[h[t],o]:h[t].push(o):h[t]=o,this},i.off=function(t,e,i,n){if(void 0===n&&(n=!1),!this._events||!this._events[t])return this;var s=this._events[t];if(null!=i)if(s.run)e&&s.caller!==e||s.method!==i||n&&!s.once||(delete this._events[t],s.recover());else{for(var r=0,a=0,o=s.length;a<o;a++){var h=s[a];!h||e&&h.caller!==e||h.method!==i||n&&!h.once||(r++,s[a]=null,h.recover())}r===o&&delete this._events[t]}return this},i.offAll=function(t){var e=this._events;if(!e)return this;if(t)this._recoverHandlers(e[t]),delete e[t];else{for(var i in e)this._recoverHandlers(e[i]);this._events=null}return this},i._recoverHandlers=function(t){if(t)if(t.run)t.recover();else for(var e=t.length-1;e>-1;e--)t[e]&&(t[e].recover(),t[e]=null)},i.isMouseEvent=function(e){return t.MOUSE_EVENTS[e]},t.MOUSE_EVENTS={rightmousedown:!0,rightmouseup:!0,rightclick:!0,mousedown:!0,mouseup:!0,mousemove:!0,mouseover:!0,mouseout:!0,click:!0,doubleclick:!0},t.__init$=function(){Object.defineProperty(laya.events.EventDispatcher.prototype,"_events",{enumerable:!1,writable:!0}),e=function(t){function e(t,i,n,s){e.__super.call(this,t,i,n,s)}return __class(e,"",t),e.prototype.recover=function(){this._id>0&&(this._id=0,e._pool.push(this.clear()))},e.create=function(t,i,n,s){return void 0===s&&(s=!0),e._pool.length?e._pool.pop().setTo(t,i,n,s):new e(t,i,n,s)},e._pool=[],e}(Handler)},t}(),Handler=function(){function t(t,e,i,n){this.once=!1,this._id=0,void 0===n&&(n=!1),this.setTo(t,e,i,n)}__class(t,"laya.utils.Handler");var e=t.prototype;return e.setTo=function(e,i,n,s){return this._id=t._gid++,this.caller=e,this.method=i,this.args=n,this.once=s,this},e.run=function(){if(null==this.method)return null;var t=this._id,e=this.method.apply(this.caller,this.args);return this._id===t&&this.once&&this.recover(),e},e.runWith=function(t){if(null==this.method)return null;var e=this._id;if(null==t)var i=this.method.apply(this.caller,this.args);else i=this.args||t.unshift?this.args?this.method.apply(this.caller,this.args.concat(t)):this.method.apply(this.caller,t):this.method.call(this.caller,t);return this._id===e&&this.once&&this.recover(),i},e.clear=function(){return this.caller=null,this.method=null,this.args=null,this},e.recover=function(){this._id>0&&(this._id=0,t._pool.push(this.clear()))},t.create=function(e,i,n,s){return void 0===s&&(s=!0),t._pool.length?t._pool.pop().setTo(e,i,n,s):new t(e,i,n,s)},t._pool=[],t._gid=1,t}(),BitmapFont=function(){function t(){this._texture=null,this._fontCharDic={},this._fontWidthMap={},this._complete=null,this._path=null,this._maxWidth=0,this._spaceWidth=10,this._padding=null,this.fontSize=12,this.autoScaleSize=!1,this.letterSpacing=0}__class(t,"laya.display.BitmapFont");var e=t.prototype;return e.loadFont=function(t,e){this._path=t,this._complete=e,Laya.loader.load([{url:this._path,type:"xml"},{url:this._path.replace(".fnt",".png"),type:"image"}],Handler.create(this,this.onLoaded))},e.onLoaded=function(){this.parseFont(Loader.getRes(this._path),Loader.getRes(this._path.replace(".fnt",".png"))),this._complete&&this._complete.run()},e.parseFont=function(t,e){if(null!=t&&null!=e){this._texture=e;var i=t.getElementsByTagName("info");this.fontSize=parseInt(i[0].attributes.size.nodeValue);var n=i[0].attributes.padding.nodeValue,s=n.split(",");this._padding=[parseInt(s[0]),parseInt(s[1]),parseInt(s[2]),parseInt(s[3])];var r=t.getElementsByTagName("char"),a=0;for(a=0;a<r.length;a++){var o=r[a].attributes,h=parseInt(o.id.nodeValue),l=parseInt(o.xoffset.nodeValue)/1,c=parseInt(o.yoffset.nodeValue)/1,u=parseInt(o.xadvance.nodeValue)/1,_=new Rectangle;_.x=parseInt(o.x.nodeValue),_.y=parseInt(o.y.nodeValue),_.width=parseInt(o.width.nodeValue),_.height=parseInt(o.height.nodeValue);var d=Texture.create(e,_.x,_.y,_.width,_.height,l,c);this._maxWidth=Math.max(this._maxWidth,u+this.letterSpacing),this._fontCharDic[h]=d,this._fontWidthMap[h]=u}}},e.getCharTexture=function(t){return this._fontCharDic[t.charCodeAt(0)]},e.destroy=function(){if(this._texture){for(var t in this._fontCharDic){var e=this._fontCharDic[t];e&&e.destroy()}this._texture.destroy(),this._fontCharDic=null,this._fontWidthMap=null,this._texture=null}},e.setSpaceWidth=function(t){this._spaceWidth=t},e.getCharWidth=function(t){var e=t.charCodeAt(0);return this._fontWidthMap[e]?this._fontWidthMap[e]+this.letterSpacing:" "==t?this._spaceWidth+this.letterSpacing:0},e.getTextWidth=function(t){for(var e=0,i=0,n=t.length;i<n;i++)e+=this.getCharWidth(t.charAt(i));return e},e.getMaxWidth=function(){return this._maxWidth},e.getMaxHeight=function(){return this.fontSize},e.drawText=function(t,e,i,n,s,r){var a,o=this.getTextWidth(t),h=0;"center"===s&&(h=(r-o)/2),"right"===s&&(h=r-o);for(var l=0,c=0,u=t.length;c<u;c++)(a=this.getCharTexture(t.charAt(c)))&&(e.graphics.drawTexture(a,i+l+h,n),l+=this.getCharWidth(t.charAt(c)))},t}(),Style=function(){function t(){this.alpha=1,this.visible=!0,this.scrollRect=null,this.blendMode=null,this._type=0,this._tf=t._TF_EMPTY}__class(t,"laya.display.css.Style");var e=t.prototype;return e.getTransform=function(){return this._tf},e.setTransform=function(e){this._tf="none"!==e&&e?e:t._TF_EMPTY},e.setTranslateX=function(e){this._tf===t._TF_EMPTY&&(this._tf=new TransformInfo),this._tf.translateX=e},e.setTranslateY=function(e){this._tf===t._TF_EMPTY&&(this._tf=new TransformInfo),this._tf.translateY=e},e.setScaleX=function(e){this._tf===t._TF_EMPTY&&(this._tf=new TransformInfo),this._tf.scaleX=e},e.setScale=function(e,i){this._tf===t._TF_EMPTY&&(this._tf=new TransformInfo),this._tf.scaleX=e,this._tf.scaleY=i},e.setScaleY=function(e){this._tf===t._TF_EMPTY&&(this._tf=new TransformInfo),this._tf.scaleY=e},e.setRotate=function(e){this._tf===t._TF_EMPTY&&(this._tf=new TransformInfo),this._tf.rotate=e},e.setSkewX=function(e){this._tf===t._TF_EMPTY&&(this._tf=new TransformInfo),this._tf.skewX=e},e.setSkewY=function(e){this._tf===t._TF_EMPTY&&(this._tf=new TransformInfo),this._tf.skewY=e},e.destroy=function(){this.scrollRect=null},e.render=function(t,e,i,n){},e.getCSSStyle=function(){return CSSStyle.EMPTY},e._enableLayout=function(){return!1},__getset(0,e,"scaleX",function(){return this._tf.scaleX},function(t){this.setScaleX(t)}),__getset(0,e,"transform",function(){return this.getTransform()},function(t){this.setTransform(t)}),__getset(0,e,"translateX",function(){return this._tf.translateX},function(t){this.setTranslateX(t)}),__getset(0,e,"translateY",function(){return this._tf.translateY},function(t){this.setTranslateY(t)}),__getset(0,e,"scaleY",function(){return this._tf.scaleY},function(t){this.setScaleY(t)}),__getset(0,e,"block",function(){return 0!=(1&this._type)}),__getset(0,e,"skewY",function(){return this._tf.skewY},function(t){this.setSkewY(t)}),__getset(0,e,"rotate",function(){return this._tf.rotate},function(t){this.setRotate(t)}),__getset(0,e,"skewX",function(){return this._tf.skewX},function(t){this.setSkewX(t)}),__getset(0,e,"paddingLeft",function(){return 0}),__getset(0,e,"paddingTop",function(){return 0}),__getset(0,e,"absolute",function(){return!0}),t.__init__=function(){t._TF_EMPTY=new TransformInfo,t.EMPTY=new t},t.EMPTY=null,t._TF_EMPTY=null,t}(),Font=function(){function t(e){this._type=0,this._weight=0,this._decoration=null,this._text=null,this.indent=0,this._color=Color.create(t.defaultColor),this.family=t.defaultFamily,this.stroke=t._STROKE,this.size=t.defaultSize,e&&e!==t.EMPTY&&e.copyTo(this)}__class(t,"laya.display.css.Font");var e=t.prototype;return e.set=function(t){this._text=null;for(var e=t.split(" "),i=0,n=e.length;i<n;i++){var s=e[i];switch(s){case"italic":this.italic=!0;continue;case"bold":this.bold=!0;continue}s.indexOf("px")>0&&(this.size=parseInt(s),this.family=e[i+1],i++)}},e.toString=function(){return this._text="",this.italic&&(this._text+="italic "),this.bold&&(this._text+="bold "),this._text+=this.size+"px "+this.family},e.copyTo=function(e){e._type=this._type,e._text=this._text,e._weight=this._weight,e._color=this._color,e.family=this.family,e.stroke=this.stroke!=t._STROKE?this.stroke.slice():t._STROKE,e.indent=this.indent,e.size=this.size},__getset(0,e,"password",function(){return 0!=(1024&this._type)},function(t){t?this._type|=1024:this._type&=-1025}),__getset(0,e,"color",function(){return this._color.strColor},function(t){this._color=Color.create(t)}),__getset(0,e,"italic",function(){return 0!=(512&this._type)},function(t){t?this._type|=512:this._type&=-513}),__getset(0,e,"bold",function(){return 0!=(2048&this._type)},function(t){t?this._type|=2048:this._type&=-2049}),__getset(0,e,"weight",function(){return""+this._weight},function(t){var e=0;switch(t){case"normal":break;case"bold":this.bold=!0,e=700;break;case"bolder":e=800;break;case"lighter":e=100;break;default:e=parseInt(t)}this._weight=e,this._text=null}),__getset(0,e,"decoration",function(){return this._decoration?this._decoration.value:"none"},function(t){var e=t.split(" ");switch(this._decoration||(this._decoration={}),e[0]){case"_":this._decoration.type="underline";break;case"-":this._decoration.type="line-through";break;case"overline":this._decoration.type="overline";break;default:this._decoration.type=e[0]}e[1]&&(this._decoration.color=Color.create(e)),this._decoration.value=t}),t.__init__=function(){t.EMPTY=new t(null)},t.EMPTY=null,t.defaultColor="#000000",t.defaultSize=12,t.defaultFamily="Arial",t.defaultFont="12px Arial",t._STROKE=[0,"#000000"],t._ITALIC=512,t._PASSWORD=1024,t._BOLD=2048,t}(),TransformInfo=function(){function t(){this.translateX=0,this.translateY=0,this.scaleX=1,this.scaleY=1,this.rotate=0,this.skewX=0,this.skewY=0}return __class(t,"laya.display.css.TransformInfo"),t}(),Graphics=function(){function t(){this._one=null,this._cmds=null,this._render=this._renderEmpty,Render.isConchNode&&(this._nativeObj=new _conchGraphics,this.id=this._nativeObj.conchID)}__class(t,"laya.display.Graphics");var e=t.prototype;return e.destroy=function(){this.clear(),this._graphicBounds&&this._graphicBounds.destroy(),this._graphicBounds=null,this._vectorgraphArray=null,this._sp&&(this._sp._renderType=0),this._sp=null},e.clear=function(e){if(void 0===e&&(e=!1),e){var i=this._one;if(this._cmds){var n=0,s=this._cmds.length;for(n=0;n<s;n++)!(i=this._cmds[n])||i.callee!==Render._context._drawTexture&&i.callee!==Render._context._drawTextureWithTransform||(i[0]=null,t._cache.push(i));this._cmds.length=0}else i&&(!i||i.callee!==Render._context._drawTexture&&i.callee!==Render._context._drawTextureWithTransform||(i[0]=null,t._cache.push(i)))}else this._cmds=null;if(this._one=null,this._render=this._renderEmpty,this._sp&&(this._sp._renderType&=-514),this._repaint(),this._vectorgraphArray){for(n=0,s=this._vectorgraphArray.length;n<s;n++)VectorGraphManager.getInstance().deleteShape(this._vectorgraphArray[n]);this._vectorgraphArray.length=0}},e._clearBoundsCache=function(){this._graphicBounds&&this._graphicBounds.reset()},e._initGraphicBounds=function(){this._graphicBounds||(this._graphicBounds=new GraphicsBounds,this._graphicBounds._graphics=this)},e._repaint=function(){this._clearBoundsCache(),this._sp&&this._sp.repaint()},e._isOnlyOne=function(){return!this._cmds||0===this._cmds.length},e.getBounds=function(t){return void 0===t&&(t=!1),this._initGraphicBounds(),this._graphicBounds.getBounds(t)},e.getBoundPoints=function(t){return void 0===t&&(t=!1),this._initGraphicBounds(),this._graphicBounds.getBoundPoints(t)},e._addCmd=function(t){this._cmds=this._cmds||[],t.callee=t.shift(),this._cmds.push(t)},e.drawTexture=function(e,i,n,s,r,a,o){if(void 0===i&&(i=0),void 0===n&&(n=0),void 0===s&&(s=0),void 0===r&&(r=0),void 0===o&&(o=1),!e||o<.01)return null;s||(s=e.sourceWidth),r||(r=e.sourceHeight);var h=s/e.sourceWidth,l=r/e.sourceHeight;if(s=e.width*h,r=e.height*l,e.loaded&&(s<=0||r<=0))return null;if(i+=e.offsetX*h,n+=e.offsetY*l,this._sp&&(this._sp._renderType|=512),t._cache.length){var c=t._cache.pop();c[0]=e,c[1]=i,c[2]=n,c[3]=s,c[4]=r,c[5]=a,c[6]=o}else c=[e,i,n,s,r,a,o];return c.callee=a||1!=o?Render._context._drawTextureWithTransform:Render._context._drawTexture,null!=this._one||a||1!=o?this._saveToCmd(c.callee,c):(this._one=c,this._render=this._renderOneImg),e.loaded||e.once("loaded",this,this._textureLoaded,[e,c]),this._repaint(),c},e.cleanByTexture=function(t,e,i,n,s){if(void 0===n&&(n=0),void 0===s&&(s=0),!t)return this.clear();if(this._one&&this._render===this._renderOneImg){n||(n=t.sourceWidth),s||(s=t.sourceHeight);var r=n/t.sourceWidth,a=s/t.sourceHeight;n=t.width*r,s=t.height*a,e+=t.offsetX*r,i+=t.offsetY*a,this._one[0]=t,this._one[1]=e,this._one[2]=i,this._one[3]=n,this._one[4]=s}else this.clear(),t&&this.drawTexture(t,e,i,n,s)},e.drawTextures=function(t,e){t&&this._saveToCmd(Render._context._drawTextures,[t,e])},e.fillTexture=function(t,e,i,n,s,r,a){if(void 0===n&&(n=0),void 0===s&&(s=0),void 0===r&&(r="repeat"),t){var o=[t,e,i,n,s,r,a||Point.EMPTY,{}];t.loaded||t.once("loaded",this,this._textureLoaded,[t,o]),this._saveToCmd(Render._context._fillTexture,o)}},e._textureLoaded=function(t,e){e[3]=e[3]||t.width,e[4]=e[4]||t.height,this._repaint()},e._saveToCmd=function(t,e){return this._sp&&(this._sp._renderType|=512),null==this._one?(this._one=e,this._render=this._renderOne):(this._sp&&(this._sp._renderType&=-2),this._render=this._renderAll,0===(this._cmds||(this._cmds=[])).length&&this._cmds.push(this._one),this._cmds.push(e)),e.callee=t,this._repaint(),e},e.clipRect=function(t,e,i,n){this._saveToCmd(Render._context._clipRect,[t,e,i,n])},e.fillText=function(t,e,i,n,s,r){this._saveToCmd(Render._context._fillText,[t,e,i,n||Font.defaultFont,s,r])},e.fillBorderText=function(t,e,i,n,s,r,a,o){this._saveToCmd(Render._context._fillBorderText,[t,e,i,n||Font.defaultFont,s,r,a,o])},e.strokeText=function(t,e,i,n,s,r,a){this._saveToCmd(Render._context._strokeText,[t,e,i,n||Font.defaultFont,s,r,a])},e.alpha=function(t){this._saveToCmd(Render._context._alpha,[t])},e.setAlpha=function(t){this._saveToCmd(Render._context._setAlpha,[t])},e.transform=function(t,e,i){void 0===e&&(e=0),void 0===i&&(i=0),this._saveToCmd(Render._context._transform,[t,e,i])},e.rotate=function(t,e,i){void 0===e&&(e=0),void 0===i&&(i=0),this._saveToCmd(Render._context._rotate,[t,e,i])},e.scale=function(t,e,i,n){void 0===i&&(i=0),void 0===n&&(n=0),this._saveToCmd(Render._context._scale,[t,e,i,n])},e.translate=function(t,e){this._saveToCmd(Render._context._translate,[t,e])},e.save=function(){this._saveToCmd(Render._context._save,[])},e.restore=function(){this._saveToCmd(Render._context._restore,[])},e.replaceText=function(t){this._repaint();var e=this._cmds;if(e){for(var i=e.length-1;i>-1;i--)if(this._isTextCmd(e[i].callee))return e[i][0].toUpperCase?e[i][0]=t:e[i][0].setText(t),!0}else if(this._one&&this._isTextCmd(this._one.callee))return this._one[0].toUpperCase?this._one[0]=t:this._one[0].setText(t),!0;return!1},e._isTextCmd=function(t){return t===Render._context._fillText||t===Render._context._fillBorderText||t===Render._context._strokeText},e.replaceTextColor=function(t){this._repaint();var e=this._cmds;if(e)for(var i=e.length-1;i>-1;i--)this._isTextCmd(e[i].callee)&&(e[i][4]=t,e[i][0].toUpperCase||(e[i][0].changed=!0));else this._one&&this._isTextCmd(this._one.callee)&&(this._one[4]=t,this._one[0].toUpperCase||(this._one[0].changed=!0))},e.loadImage=function(t,e,i,n,s,r){function a(t){t&&(o.drawTexture(t,e,i,n,s),null!=r&&r.call(o._sp,t))}var o=this;void 0===e&&(e=0),void 0===i&&(i=0),void 0===n&&(n=0),void 0===s&&(s=0);var h=Loader.getRes(t);h?a(h):Laya.loader.load(t,Handler.create(null,a),null,"image")},e._renderEmpty=function(t,e,i,n){},e._renderAll=function(t,e,i,n){for(var s,r=this._cmds,a=0,o=r.length;a<o;a++)(s=r[a]).callee.call(e,i,n,s)},e._renderOne=function(t,e,i,n){this._one.callee.call(e,i,n,this._one)},e._renderOneImg=function(t,e,i,n){this._one.callee.call(e,i,n,this._one),2305!==t._renderType&&(t._renderType|=1)},e.drawLine=function(t,e,i,n,s,r){void 0===r&&(r=1);var a=0;Render.isWebGL&&(a=VectorGraphManager.getInstance().getId(),null==this._vectorgraphArray&&(this._vectorgraphArray=[]),this._vectorgraphArray.push(a));var o=r%2==0?0:.5,h=[t+o,e+o,i+o,n+o,s,r,a];this._saveToCmd(Render._context._drawLine,h)},e.drawLines=function(t,e,i,n,s){void 0===s&&(s=1);var r=0;if(i&&!(i.length<1)){Render.isWebGL&&(r=VectorGraphManager.getInstance().getId(),null==this._vectorgraphArray&&(this._vectorgraphArray=[]),this._vectorgraphArray.push(r));var a=s%2==0?0:.5,o=[t+a,e+a,i,n,s,r];this._saveToCmd(Render._context._drawLines,o)}},e.drawCurves=function(t,e,i,n,s){void 0===s&&(s=1);var r=[t,e,i,n,s];this._saveToCmd(Render._context._drawCurves,r)},e.drawRect=function(t,e,i,n,s,r,a){void 0===a&&(a=1);var o=r?a/2:0,h=r?a:0,l=[t+o,e+o,i-h,n-h,s,r,a];this._saveToCmd(Render._context._drawRect,l)},e.drawCircle=function(t,e,i,n,s,r){void 0===r&&(r=1);var a=s?r/2:0,o=0;Render.isWebGL&&(o=VectorGraphManager.getInstance().getId(),null==this._vectorgraphArray&&(this._vectorgraphArray=[]),this._vectorgraphArray.push(o));var h=[t,e,i-a,n,s,r,o];this._saveToCmd(Render._context._drawCircle,h)},e.drawPie=function(t,e,i,n,s,r,a,o){void 0===o&&(o=1);var h=a?o/2:0,l=a?o:0,c=0;Render.isWebGL&&(c=VectorGraphManager.getInstance().getId(),null==this._vectorgraphArray&&(this._vectorgraphArray=[]),this._vectorgraphArray.push(c));var u=[t+h,e+h,i-l,n,s,r,a,o,c];u[3]=Utils.toRadian(n),u[4]=Utils.toRadian(s),this._saveToCmd(Render._context._drawPie,u)},e.drawPoly=function(t,e,i,n,s,r){void 0===r&&(r=1);var a=0;if(Render.isWebGL){a=VectorGraphManager.getInstance().getId(),null==this._vectorgraphArray&&(this._vectorgraphArray=[]),this._vectorgraphArray.push(a);var o=!1;o=!(i.length>6)}var h=s?r%2==0?0:.5:0,l=[t+h,e+h,i,n,s,r,a,o];this._saveToCmd(Render._context._drawPoly,l)},e.drawPath=function(t,e,i,n,s){var r=[t,e,i,n,s];this._saveToCmd(Render._context._drawPath,r)},__getset(0,e,"cmds",function(){return this._cmds},function(t){this._sp&&(this._sp._renderType|=512),this._cmds=t,this._render=this._renderAll,this._repaint()}),t.__init__=function(){if(Render.isConchNode){for(var t=laya.display.Graphics.prototype,e=ConchGraphics.prototype,i=["clear","destroy","alpha","rotate","transform","scale","translate","save","restore","clipRect","blendMode","fillText","fillBorderText","_fands","drawRect","drawCircle","drawPie","drawPoly","drawPath","drawImageM","drawLine","drawLines","_drawPs","drawCurves","replaceText","replaceTextColor","_fillImage","fillTexture","setSkinMesh","drawParticle","drawImageS"],n=0,s=i.length;n<=s;n++){var r=i[n];t[r]=e[r]}t._saveToCmd=null,e.drawImageS&&(t.drawTextures=function(t,e){if(t&&t.loaded&&t.bitmap&&t.source){var i=t.uv,n=t.bitmap.width,s=t.bitmap.height;this.drawImageS(t.bitmap.source,i[0]*n,i[1]*s,(i[2]-i[0])*n,(i[5]-i[3])*s,t.offsetX,t.offsetY,t.width,t.height,e)}}),t.drawTexture=function(t,e,i,n,s,r,a){if(void 0===e&&(e=0),void 0===i&&(i=0),void 0===n&&(n=0),void 0===s&&(s=0),void 0===a&&(a=1),t){if(!t.loaded)return void t.once("loaded",this,function(){this.drawTexture(t,e,i,n,s,r)});if(t.loaded&&t.bitmap&&t.source&&(n||(n=t.sourceWidth),s||(s=t.sourceHeight),n=n-t.sourceWidth+t.width,s=s-t.sourceHeight+t.height,!(n<=0||s<=0))){e+=t.offsetX,i+=t.offsetY;var o=t.uv,h=t.bitmap.width,l=t.bitmap.height;this.drawImageM(t.bitmap.source,o[0]*h,o[1]*l,(o[2]-o[0])*h,(o[5]-o[3])*l,e,i,n,s,r,a),this._repaint()}}},t.fillTexture=function(t,e,i,n,s,r,a){if(void 0===n&&(n=0),void 0===s&&(s=0),void 0===r&&(r="repeat"),t&&t.loaded){var o,h=Render._context.ctx,l=t.bitmap.width,c=t.bitmap.height,u=t.uv;o=t.uv!=Texture.DEF_UV?h.createPattern(t.bitmap.source,r,u[0]*l,u[1]*c,(u[2]-u[0])*l,(u[5]-u[3])*c):h.createPattern(t.bitmap.source,r);var _=0,d=0;a&&(e+=a.x%t.width,i+=a.y%t.height,_-=a.x%t.width,d-=a.y%t.height),this._fillImage(o,e,i,_,d,n,s)}}}},t._cache=[],t}(),GraphicsBounds=function(){function t(){this._cacheBoundsType=!1}__class(t,"laya.display.GraphicsBounds");var e=t.prototype;return e.destroy=function(){this._graphics=null,this._temp=null,this._rstBoundPoints=null,this._bounds=null},e.reset=function(){this._temp&&(this._temp.length=0)},e.getBounds=function(t){return void 0===t&&(t=!1),(!this._bounds||!this._temp||this._temp.length<1||t!=this._cacheBoundsType)&&(this._bounds=Rectangle._getWrapRec(this.getBoundPoints(t),this._bounds)),this._cacheBoundsType=t,this._bounds},e.getBoundPoints=function(t){return void 0===t&&(t=!1),(!this._temp||this._temp.length<1||t!=this._cacheBoundsType)&&(this._temp=this._getCmdPoints(t)),this._cacheBoundsType=t,this._rstBoundPoints=Utils.copyArray(this._rstBoundPoints,this._temp)},e._getCmdPoints=function(e){void 0===e&&(e=!1);var i,n=Render._context,s=this._graphics.cmds;if(i=this._temp||(this._temp=[]),i.length=0,s||null==this._graphics._one||(t._tempCmds.length=0,t._tempCmds.push(this._graphics._one),s=t._tempCmds),!s)return i;var r;r=t._tempMatrixArrays,r.length=0;var a=t._initMatrix;a.identity();for(var o,h,l=t._tempMatrix,c=0,u=s.length;c<u;c++)switch(o=s[c],o.callee){case n._save:case 7:r.push(a),a=a.clone();break;case n._restore:case 8:a=r.pop();break;case n._scale:case 5:l.identity(),l.translate(-o[2],-o[3]),l.scale(o[0],o[1]),l.translate(o[2],o[3]),this._switchMatrix(a,l);break;case n._rotate:case 3:l.identity(),l.translate(-o[1],-o[2]),l.rotate(o[0]),l.translate(o[1],o[2]),this._switchMatrix(a,l);break;case n._translate:case 6:l.identity(),l.translate(o[0],o[1]),this._switchMatrix(a,l);break;case n._transform:case 4:l.identity(),l.translate(-o[1],-o[2]),l.concat(o[0]),l.translate(o[1],o[2]),this._switchMatrix(a,l);break;case 16:case 24:t._addPointArrToRst(i,Rectangle._getBoundPointS(o[0],o[1],o[2],o[3]),a);break;case 17:a.copyTo(l),l.concat(o[4]),t._addPointArrToRst(i,Rectangle._getBoundPointS(o[0],o[1],o[2],o[3]),l);break;case n._drawTexture:if(h=o[0],e)o[3]&&o[4]?t._addPointArrToRst(i,Rectangle._getBoundPointS(o[1],o[2],o[3],o[4]),a):(h=o[0],t._addPointArrToRst(i,Rectangle._getBoundPointS(o[1],o[2],h.width,h.height),a));else{var _=(o[3]||h.sourceWidth)/h.width,d=(o[4]||h.sourceHeight)/h.height,f=_*h.sourceWidth,p=d*h.sourceHeight,g=h.offsetX>0?h.offsetX:0,m=h.offsetY>0?h.offsetY:0;g*=_,m*=d,t._addPointArrToRst(i,Rectangle._getBoundPointS(o[1]-g,o[2]-m,f,p),a)}break;case n._fillTexture:o[3]&&o[4]?t._addPointArrToRst(i,Rectangle._getBoundPointS(o[1],o[2],o[3],o[4]),a):(h=o[0],t._addPointArrToRst(i,Rectangle._getBoundPointS(o[1],o[2],h.width,h.height),a));break;case n._drawTextureWithTransform:var v;o[5]?(a.copyTo(l),l.concat(o[5]),v=l):v=a,e?o[3]&&o[4]?t._addPointArrToRst(i,Rectangle._getBoundPointS(o[1],o[2],o[3],o[4]),v):(h=o[0],t._addPointArrToRst(i,Rectangle._getBoundPointS(o[1],o[2],h.width,h.height),v)):(h=o[0],_=(o[3]||h.sourceWidth)/h.width,d=(o[4]||h.sourceHeight)/h.height,f=_*h.sourceWidth,p=d*h.sourceHeight,g=h.offsetX>0?h.offsetX:0,m=h.offsetY>0?h.offsetY:0,g*=_,m*=d,t._addPointArrToRst(i,Rectangle._getBoundPointS(o[1]-g,o[2]-m,f,p),v));break
;case n._drawRect:case 13:t._addPointArrToRst(i,Rectangle._getBoundPointS(o[0],o[1],o[2],o[3]),a);break;case n._drawCircle:case n._fillCircle:case 14:t._addPointArrToRst(i,Rectangle._getBoundPointS(o[0]-o[2],o[1]-o[2],o[2]+o[2],o[2]+o[2]),a);break;case n._drawLine:case 20:t._tempPoints.length=0;var y=NaN;y=.5*o[5],o[0]==o[2]?t._tempPoints.push(o[0]+y,o[1],o[2]+y,o[3],o[0]-y,o[1],o[2]-y,o[3]):o[1]==o[3]?t._tempPoints.push(o[0],o[1]+y,o[2],o[3]+y,o[0],o[1]-y,o[2],o[3]-y):t._tempPoints.push(o[0],o[1],o[2],o[3]),t._addPointArrToRst(i,t._tempPoints,a);break;case n._drawCurves:case 22:t._addPointArrToRst(i,Bezier.I.getBezierPoints(o[2]),a,o[0],o[1]);break;case n._drawPoly:case n._drawLines:case 18:t._addPointArrToRst(i,o[2],a,o[0],o[1]);break;case n._drawPath:case 19:t._addPointArrToRst(i,this._getPathPoints(o[2]),a,o[0],o[1]);break;case n._drawPie:case 15:t._addPointArrToRst(i,this._getPiePoints(o[0],o[1],o[2],o[3],o[4]),a)}return i.length>200?i=Utils.copyArray(i,Rectangle._getWrapRec(i)._getBoundPoints()):i.length>8&&(i=GrahamScan.scanPList(i)),i},e._switchMatrix=function(t,e){e.concat(t),e.copyTo(t)},e._getPiePoints=function(e,i,n,s,r){var a=t._tempPoints;t._tempPoints.length=0,a.push(e,i);var o=Math.PI/10,h=NaN;for(h=s;h<r;h+=o)a.push(e+n*Math.cos(h),i+n*Math.sin(h));return r!=h&&a.push(e+n*Math.cos(r),i+n*Math.sin(r)),a},e._getPathPoints=function(e){var i=0,n=0,s=t._tempPoints;s.length=0,n=e.length;var r;for(i=0;i<n;i++)r=e[i],r.length>1&&(s.push(r[1],r[2]),r.length>3&&s.push(r[3],r[4]));return s},t._addPointArrToRst=function(e,i,n,s,r){void 0===s&&(s=0),void 0===r&&(r=0);var a=0,o=0;for(o=i.length,a=0;a<o;a+=2)t._addPointToRst(e,i[a]+s,i[a+1]+r,n)},t._addPointToRst=function(t,e,i,n){var s=Point.TEMP;s.setTo(e?e:0,i?i:0),n.transformPoint(s),t.push(s.x,s.y)},t._tempPoints=[],t._tempMatrixArrays=[],t._tempCmds=[],__static(t,["_tempMatrix",function(){return this._tempMatrix=new Matrix},"_initMatrix",function(){return this._initMatrix=new Matrix}]),t}(),Event=function(){function t(){}__class(t,"laya.events.Event");var e=t.prototype;return e.setTo=function(t,e,i){return this.type=t,this.currentTarget=e,this.target=i,this},e.stopPropagation=function(){this._stoped=!0},__getset(0,e,"stageY",function(){return Laya.stage.mouseY}),__getset(0,e,"charCode",function(){return this.nativeEvent.charCode}),__getset(0,e,"touches",function(){var t=this.nativeEvent.touches;if(t)for(var e=Laya.stage,i=0,n=t.length;i<n;i++){var s=t[i],r=Point.TEMP;r.setTo(s.clientX,s.clientY),e._canvasTransform.invertTransformPoint(r),e.transform.invertTransformPoint(r),s.stageX=r.x,s.stageY=r.y}return t}),__getset(0,e,"keyLocation",function(){return this.nativeEvent.keyLocation}),__getset(0,e,"ctrlKey",function(){return this.nativeEvent.ctrlKey}),__getset(0,e,"altKey",function(){return this.nativeEvent.altKey}),__getset(0,e,"shiftKey",function(){return this.nativeEvent.shiftKey}),__getset(0,e,"stageX",function(){return Laya.stage.mouseX}),t.EMPTY=new t,t.MOUSE_DOWN="mousedown",t.MOUSE_UP="mouseup",t.CLICK="click",t.RIGHT_MOUSE_DOWN="rightmousedown",t.RIGHT_MOUSE_UP="rightmouseup",t.RIGHT_CLICK="rightclick",t.MOUSE_MOVE="mousemove",t.MOUSE_OVER="mouseover",t.MOUSE_OUT="mouseout",t.MOUSE_WHEEL="mousewheel",t.ROLL_OVER="mouseover",t.ROLL_OUT="mouseout",t.DOUBLE_CLICK="doubleclick",t.CHANGE="change",t.CHANGED="changed",t.RESIZE="resize",t.ADDED="added",t.REMOVED="removed",t.DISPLAY="display",t.UNDISPLAY="undisplay",t.ERROR="error",t.COMPLETE="complete",t.LOADED="loaded",t.PROGRESS="progress",t.INPUT="input",t.RENDER="render",t.OPEN="open",t.MESSAGE="message",t.CLOSE="close",t.KEY_DOWN="keydown",t.KEY_PRESS="keypress",t.KEY_UP="keyup",t.FRAME="enterframe",t.DRAG_START="dragstart",t.DRAG_MOVE="dragmove",t.DRAG_END="dragend",t.ENTER="enter",t.SELECT="select",t.BLUR="blur",t.FOCUS="focus",t.VISIBILITY_CHANGE="visibilitychange",t.FOCUS_CHANGE="focuschange",t.PLAYED="played",t.PAUSED="paused",t.STOPPED="stopped",t.START="start",t.END="end",t.ENABLE_CHANGED="enablechanged",t.ACTIVE_IN_HIERARCHY_CHANGED="activeinhierarchychanged",t.COMPONENT_ADDED="componentadded",t.COMPONENT_REMOVED="componentremoved",t.LAYER_CHANGED="layerchanged",t.HIERARCHY_LOADED="hierarchyloaded",t.RECOVERING="recovering",t.RECOVERED="recovered",t.RELEASED="released",t.LINK="link",t.LABEL="label",t.FULL_SCREEN_CHANGE="fullscreenchange",t.DEVICE_LOST="devicelost",t.MESH_CHANGED="meshchanged",t.MATERIAL_CHANGED="materialchanged",t.RENDERQUEUE_CHANGED="renderqueuechanged",t.WORLDMATRIX_NEEDCHANGE="worldmatrixneedchanged",t.ANIMATION_CHANGED="animationchanged",t}(),Keyboard=function(){function t(){}return __class(t,"laya.events.Keyboard"),t.NUMBER_0=48,t.NUMBER_1=49,t.NUMBER_2=50,t.NUMBER_3=51,t.NUMBER_4=52,t.NUMBER_5=53,t.NUMBER_6=54,t.NUMBER_7=55,t.NUMBER_8=56,t.NUMBER_9=57,t.A=65,t.B=66,t.C=67,t.D=68,t.E=69,t.F=70,t.G=71,t.H=72,t.I=73,t.J=74,t.K=75,t.L=76,t.M=77,t.N=78,t.O=79,t.P=80,t.Q=81,t.R=82,t.S=83,t.T=84,t.U=85,t.V=86,t.W=87,t.X=88,t.Y=89,t.Z=90,t.F1=112,t.F2=113,t.F3=114,t.F4=115,t.F5=116,t.F6=117,t.F7=118,t.F8=119,t.F9=120,t.F10=121,t.F11=122,t.F12=123,t.F13=124,t.F14=125,t.F15=126,t.NUMPAD=21,t.NUMPAD_0=96,t.NUMPAD_1=97,t.NUMPAD_2=98,t.NUMPAD_3=99,t.NUMPAD_4=100,t.NUMPAD_5=101,t.NUMPAD_6=102,t.NUMPAD_7=103,t.NUMPAD_8=104,t.NUMPAD_9=105,t.NUMPAD_ADD=107,t.NUMPAD_DECIMAL=110,t.NUMPAD_DIVIDE=111,t.NUMPAD_ENTER=108,t.NUMPAD_MULTIPLY=106,t.NUMPAD_SUBTRACT=109,t.SEMICOLON=186,t.EQUAL=187,t.COMMA=188,t.MINUS=189,t.PERIOD=190,t.SLASH=191,t.BACKQUOTE=192,t.LEFTBRACKET=219,t.BACKSLASH=220,t.RIGHTBRACKET=221,t.QUOTE=222,t.ALTERNATE=18,t.BACKSPACE=8,t.CAPS_LOCK=20,t.COMMAND=15,t.CONTROL=17,t.DELETE=46,t.ENTER=13,t.ESCAPE=27,t.PAGE_UP=33,t.PAGE_DOWN=34,t.END=35,t.HOME=36,t.LEFT=37,t.UP=38,t.RIGHT=39,t.DOWN=40,t.SHIFT=16,t.SPACE=32,t.TAB=9,t.INSERT=45,t}(),KeyBoardManager=function(){function t(){}return __class(t,"laya.events.KeyBoardManager"),t.__init__=function(){t._addEvent("keydown"),t._addEvent("keypress"),t._addEvent("keyup")},t._addEvent=function(t){Browser.document.addEventListener(t,function(e){laya.events.KeyBoardManager._dispatch(e,t)},!0)},t._dispatch=function(e,i){if(t.enabled){t._event._stoped=!1,t._event.nativeEvent=e,t._event.keyCode=e.keyCode||e.which||e.charCode,"keydown"===i?t._pressKeys[t._event.keyCode]=!0:"keyup"===i&&(t._pressKeys[t._event.keyCode]=null);for(var n=Laya.stage.focus&&null!=Laya.stage.focus.event&&Laya.stage.focus.displayedInStage?Laya.stage.focus:Laya.stage,s=n;s;)s.event(i,t._event.setTo(i,s,n)),s=s.parent}},t.hasKeyDown=function(e){return t._pressKeys[e]},t._pressKeys={},t.enabled=!0,__static(t,["_event",function(){return this._event=new Event}]),t}(),KeyLocation=function(){function t(){}return __class(t,"laya.events.KeyLocation"),t.STANDARD=0,t.LEFT=1,t.RIGHT=2,t.NUM_PAD=3,t}(),MouseManager=function(){function t(){this.mouseX=0,this.mouseY=0,this.disableMouseEvent=!1,this.mouseDownTime=0,this.mouseMoveAccuracy=2,this._stage=null,this._target=null,this._lastMoveTimer=0,this._isLeftMouse=!1,this._eventList=[],this._touchIDs={},this._id=1,this._tTouchID=0,this._event=new Event,this._matrix=new Matrix,this._point=new Point,this._rect=new Rectangle,this._prePoint=new Point,this._curTouchID=NaN}__class(t,"laya.events.MouseManager");var e=t.prototype;return e.__init__=function(e,i){this._stage=e;var n=this,s=this._eventList;i.oncontextmenu=function(e){if(t.enabled)return!1},i.addEventListener("mousedown",function(e){t.enabled&&(Browser.onIE||e.preventDefault(),s.push(e),n.mouseDownTime=Browser.now())}),i.addEventListener("mouseup",function(e){t.enabled&&(e.preventDefault(),s.push(e),n.mouseDownTime=-Browser.now())},!0),i.addEventListener("mousemove",function(e){if(t.enabled){e.preventDefault();var i=Browser.now();if(i-n._lastMoveTimer<10)return;n._lastMoveTimer=i,s.push(e)}},!0),i.addEventListener("mouseout",function(e){t.enabled&&s.push(e)}),i.addEventListener("mouseover",function(e){t.enabled&&s.push(e)}),i.addEventListener("touchstart",function(e){t.enabled&&(s.push(e),Input.isInputting||e.preventDefault(),n.mouseDownTime=Browser.now())}),i.addEventListener("touchend",function(e){t.enabled&&(Input.isInputting||e.preventDefault(),s.push(e),n.mouseDownTime=-Browser.now())},!0),i.addEventListener("touchmove",function(e){t.enabled&&(e.preventDefault(),s.push(e))},!0),i.addEventListener("touchcancel",function(e){t.enabled&&(e.preventDefault(),s.push(e))},!0),i.addEventListener("mousewheel",function(e){t.enabled&&s.push(e)}),i.addEventListener("DOMMouseScroll",function(e){t.enabled&&s.push(e)})},e.initEvent=function(t,e){var i=this;i._event._stoped=!1,i._event.nativeEvent=e||t,i._target=null,this._point.setTo(t.pageX||t.clientX,t.pageY||t.clientY),this._stage._canvasTransform.invertTransformPoint(this._point),i.mouseX=this._point.x,i.mouseY=this._point.y,i._event.touchId=t.identifier||0,this._tTouchID=i._event.touchId;var n;n=TouchManager.I._event,n._stoped=!1,n.nativeEvent=i._event.nativeEvent,n.touchId=i._event.touchId},e.checkMouseWheel=function(t){this._event.delta=t.wheelDelta?.025*t.wheelDelta:-t.detail;for(var e=TouchManager.I.getLastOvers(),i=0,n=e.length;i<n;i++){var s=e[i];s.event("mousewheel",this._event.setTo("mousewheel",s,this._target))}},e.onMouseMove=function(t){TouchManager.I.onMouseMove(t,this._tTouchID)},e.onMouseDown=function(t){if(Input.isInputting&&Laya.stage.focus&&Laya.stage.focus.focus&&!Laya.stage.focus.contains(this._target)){var e=Laya.stage.focus._tf||Laya.stage.focus,i=t._tf||t;i instanceof laya.display.Input&&i.multiline==e.multiline?e._focusOut():e.focus=!1}TouchManager.I.onMouseDown(t,this._tTouchID,this._isLeftMouse)},e.onMouseUp=function(t){TouchManager.I.onMouseUp(t,this._tTouchID,this._isLeftMouse)},e.check=function(t,e,i,n){this._point.setTo(e,i),t.fromParentPoint(this._point),e=this._point.x,i=this._point.y;var s=t.scrollRect;if(s&&(this._rect.setTo(s.x,s.y,s.width,s.height),!this._rect.contains(e,i)))return!1;if(!this.disableMouseEvent){if(t.hitTestPrior&&!t.mouseThrough&&!this.hitTest(t,e,i))return!1;for(var r=t._childs.length-1;r>-1;r--){var a=t._childs[r];if(!a.destroyed&&a.mouseEnabled&&a.visible&&this.check(a,e,i,n))return!0}}var o=!(!t.hitTestPrior||t.mouseThrough||this.disableMouseEvent)||this.hitTest(t,e,i);return o?(this._target=t,n.call(this,t)):n===this.onMouseUp&&t===this._stage&&(this._target=this._stage,n.call(this,this._target)),o},e.hitTest=function(t,e,i){var n=!1;if(t.scrollRect&&(e-=t.scrollRect.x,i-=t.scrollRect.y),t.hitArea instanceof laya.utils.HitArea)return t.hitArea.isHit(e,i);if(t.width>0&&t.height>0||t.mouseThrough||t.hitArea)if(t.mouseThrough)n=t.getGraphicBounds().contains(e,i);else{var s=this._rect;t.hitArea?s=t.hitArea:s.setTo(0,0,t.width,t.height),n=s.contains(e,i)}return n},e.runEvent=function(){var e=this._eventList.length;if(e){for(var i=this,n=0;n<e;){var s=this._eventList[n];switch("mousemove"!==s.type&&(this._prePoint.x=this._prePoint.y=-1e6),s.type){case"mousedown":this._touchIDs[0]=this._id++,t._isTouchRespond?t._isTouchRespond=!1:(i._isLeftMouse=0===s.button,i.initEvent(s),i.check(i._stage,i.mouseX,i.mouseY,i.onMouseDown));break;case"mouseup":i._isLeftMouse=0===s.button,i.initEvent(s),i.check(i._stage,i.mouseX,i.mouseY,i.onMouseUp);break;case"mousemove":Math.abs(this._prePoint.x-s.clientX)+Math.abs(this._prePoint.y-s.clientY)>=this.mouseMoveAccuracy&&(this._prePoint.x=s.clientX,this._prePoint.y=s.clientY,i.initEvent(s),i.check(i._stage,i.mouseX,i.mouseY,i.onMouseMove));break;case"touchstart":t._isTouchRespond=!0,i._isLeftMouse=!0;for(var r=s.changedTouches,a=0,o=r.length;a<o;a++){var h=r[a];(t.multiTouchEnabled||isNaN(this._curTouchID))&&(this._curTouchID=h.identifier,this._id%200==0&&(this._touchIDs={}),this._touchIDs[h.identifier]=this._id++,i.initEvent(h,s),i.check(i._stage,i.mouseX,i.mouseY,i.onMouseDown))}break;case"touchend":case"touchcancel":t._isTouchRespond=!0,i._isLeftMouse=!0;var l=s.changedTouches;for(a=0,o=l.length;a<o;a++)if(h=l[a],t.multiTouchEnabled||h.identifier==this._curTouchID){this._curTouchID=NaN,i.initEvent(h,s);var c=!1;c=i.check(i._stage,i.mouseX,i.mouseY,i.onMouseUp),c||i.onMouseUp(null)}break;case"touchmove":var u=s.changedTouches;for(a=0,o=u.length;a<o;a++)h=u[a],(t.multiTouchEnabled||h.identifier==this._curTouchID)&&(i.initEvent(h,s),i.check(i._stage,i.mouseX,i.mouseY,i.onMouseMove));break;case"wheel":case"mousewheel":case"DOMMouseScroll":i.checkMouseWheel(s);break;case"mouseout":i._stage.event("mouseout",i._event.setTo("mouseout",i._stage,i._stage));break;case"mouseover":i._stage.event("mouseover",i._event.setTo("mouseover",i._stage,i._stage))}n++}this._eventList.length=0}},t.enabled=!0,t.multiTouchEnabled=!0,t._isTouchRespond=!1,__static(t,["instance",function(){return this.instance=new t}]),t}(),TouchManager=function(){function t(){this.preOvers=[],this.preDowns=[],this.preRightDowns=[],this.enable=!0,this._lastClickTime=0,this._event=new Event}__class(t,"laya.events.TouchManager");var e=t.prototype;return e.getTouchFromArr=function(t,e){var i=0,n=0;n=e.length;var s;for(i=0;i<n;i++)if(s=e[i],s.id==t)return s;return null},e.removeTouchFromArr=function(t,e){var i=0;for(i=e.length-1;i>=0;i--)e[i].id==t&&e.splice(i,1)},e.createTouchO=function(t,e){var i;return i=Pool.getItem("TouchData")||{},i.id=e,i.tar=t,i},e.onMouseDown=function(e,i,n){if(void 0===n&&(n=!1),this.enable){var s,r,a;s=this.getTouchFromArr(i,this.preOvers),a=this.getEles(e,null,t._tEleArr),s?s.tar=e:(r=this.createTouchO(e,i),this.preOvers.push(r)),Browser.onMobile&&this.sendEvents(a,"mouseover",i);var o;o=n?this.preDowns:this.preRightDowns,s=this.getTouchFromArr(i,o),s?s.tar=e:(r=this.createTouchO(e,i),o.push(r)),this.sendEvents(a,n?"mousedown":"rightmousedown",i)}},e.sendEvents=function(t,e,i){void 0===i&&(i=0);var n=0,s=0;s=t.length,this._event._stoped=!1;var r;r=t[0];var a;for(n=0;n<s;n++){if(a=t[n],a.destroyed)return;if(a.event(e,this._event.setTo(e,a,r)),this._event._stoped)break}},e.getEles=function(t,e,i){for(i?i.length=0:i=[];t&&t!=e;)i.push(t),t=t.parent;return i},e.checkMouseOutAndOverOfMove=function(e,i,n){if(void 0===n&&(n=0),i!=e){var s,r,a=0,o=0;if(i.contains(e))r=this.getEles(e,i,t._tEleArr),this.sendEvents(r,"mouseover",n);else if(e.contains(i))r=this.getEles(i,e,t._tEleArr),this.sendEvents(r,"mouseout",n);else{r=t._tEleArr,r.length=0;var h;h=this.getEles(i,null,t._oldArr);var l;l=this.getEles(e,null,t._newArr),o=h.length;var c=0;for(a=0;a<o;a++){if(s=h[a],(c=l.indexOf(s))>=0){l.splice(c,l.length-c);break}r.push(s)}r.length>0&&this.sendEvents(r,"mouseout",n),l.length>0&&this.sendEvents(l,"mouseover",n)}}},e.onMouseMove=function(e,i){if(this.enable){var n;n=this.getTouchFromArr(i,this.preOvers);var s;n?(this.checkMouseOutAndOverOfMove(e,n.tar),n.tar=e,s=this.getEles(e,null,t._tEleArr)):(s=this.getEles(e,null,t._tEleArr),this.sendEvents(s,"mouseover",i),this.preOvers.push(this.createTouchO(e,i))),this.sendEvents(s,"mousemove",i)}},e.getLastOvers=function(){return t._tEleArr.length=0,this.preOvers.length>0&&this.preOvers[0].tar?this.getEles(this.preOvers[0].tar,null,t._tEleArr):(t._tEleArr.push(Laya.stage),t._tEleArr)},e.onMouseUp=function(e,i,n){if(void 0===n&&(n=!1),this.enable){var s,r,a,o,h,l=0,c=0,u=Browser.onMobile;r=this.getEles(e,null,t._tEleArr),this.sendEvents(r,n?"mouseup":"rightmouseup",i);var _;if(_=n?this.preDowns:this.preRightDowns,s=this.getTouchFromArr(i,_)){var d=!1,f=Browser.now();if(d=f-this._lastClickTime<300,this._lastClickTime=f,e==s.tar)h=r;else for(a=this.getEles(s.tar,null,t._oldArr),h=t._newArr,h.length=0,c=a.length,l=0;l<c;l++)o=a[l],r.indexOf(o)>=0&&h.push(o);h.length>0&&this.sendEvents(h,n?"click":"rightclick",i),n&&d&&this.sendEvents(h,"doubleclick",i),this.removeTouchFromArr(i,_),s.tar=null,Pool.recover("TouchData",s)}else;s=this.getTouchFromArr(i,this.preOvers),s&&u&&(h=this.getEles(s.tar,null,h),h&&h.length>0&&this.sendEvents(h,"mouseout",i),this.removeTouchFromArr(i,this.preOvers),s.tar=null,Pool.recover("TouchData",s))}},t._oldArr=[],t._newArr=[],t._tEleArr=[],__static(t,["I",function(){return this.I=new t}]),t}(),Filter=function(){function t(){this._action=null}__class(t,"laya.filters.Filter");var e=t.prototype;return Laya.imps(e,{"laya.filters.IFilter":!0}),e.callNative=function(t){},__getset(0,e,"type",function(){return-1}),__getset(0,e,"action",function(){return this._action}),t.BLUR=16,t.COLOR=32,t.GLOW=8,t._filterStart=null,t._filterEnd=null,t._EndTarget=null,t._recycleScope=null,t._filter=null,t._useSrc=null,t._endSrc=null,t._useOut=null,t._endOut=null,t}(),ColorFilterAction=function(){function t(){this.data=null}__class(t,"laya.filters.ColorFilterAction");var e=t.prototype;return Laya.imps(e,{"laya.filters.IFilterAction":!0}),e.apply=function(t){var e=t.ctx.ctx,i=t.ctx.ctx.canvas;if(0==i.width||0==i.height)return i;for(var n,s=e.getImageData(0,0,i.width,i.height),r=s.data,a=0,o=r.length;a<o;a+=4)n=this.getColor(r[a],r[a+1],r[a+2],r[a+3]),0!=r[a+3]&&(r[a]=n[0],r[a+1]=n[1],r[a+2]=n[2],r[a+3]=n[3]);return e.putImageData(s,0,0),t},e.getColor=function(t,e,i,n){var s=[];if(this.data._mat&&this.data._alpha){var r=this.data._mat,a=this.data._alpha;s[0]=r[0]*t+r[1]*e+r[2]*i+r[3]*n+a[0],s[1]=r[4]*t+r[5]*e+r[6]*i+r[7]*n+a[1],s[2]=r[8]*t+r[9]*e+r[10]*i+r[11]*n+a[2],s[3]=r[12]*t+r[13]*e+r[14]*i+r[15]*n+a[3]}return s},t}(),Arith=function(){function t(){}return __class(t,"laya.maths.Arith"),t.formatR=function(t){return t>Math.PI&&(t-=2*Math.PI),t<-Math.PI&&(t+=2*Math.PI),t},t.isPOT=function(t,e){return t>0&&0==(t&t-1)&&e>0&&0==(e&e-1)},t.setMatToArray=function(t,e){t.a,t.b,t.c,t.d,t.tx,t.ty,e[0]=t.a,e[1]=t.b,e[4]=t.c,e[5]=t.d,e[12]=t.tx,e[13]=t.ty},t}(),Bezier=function(){function t(){this._controlPoints=[new Point,new Point,new Point],this._calFun=this.getPoint2}__class(t,"laya.maths.Bezier");var e=t.prototype;return e._switchPoint=function(t,e){var i=this._controlPoints.shift();i.setTo(t,e),this._controlPoints.push(i)},e.getPoint2=function(t,e){var i=this._controlPoints[0],n=this._controlPoints[1],s=this._controlPoints[2],r=Math.pow(1-t,2)*i.x+2*t*(1-t)*n.x+Math.pow(t,2)*s.x,a=Math.pow(1-t,2)*i.y+2*t*(1-t)*n.y+Math.pow(t,2)*s.y;e.push(r,a)},e.getPoint3=function(t,e){var i=this._controlPoints[0],n=this._controlPoints[1],s=this._controlPoints[2],r=this._controlPoints[3],a=Math.pow(1-t,3)*i.x+3*n.x*t*(1-t)*(1-t)+3*s.x*t*t*(1-t)+r.x*Math.pow(t,3),o=Math.pow(1-t,3)*i.y+3*n.y*t*(1-t)*(1-t)+3*s.y*t*t*(1-t)+r.y*Math.pow(t,3);e.push(a,o)},e.insertPoints=function(t,e){var i=NaN;t=t>0?t:5;var n=NaN;for(n=1/t,i=0;i<=1;i+=n)this._calFun(i,e)},e.getBezierPoints=function(t,e,i){void 0===e&&(e=5),void 0===i&&(i=2);var n=0,s=0;if((s=t.length)<2*(i+1))return[];var r;switch(r=[],i){case 2:this._calFun=this.getPoint2;break;case 3:this._calFun=this.getPoint3;break;default:return[]}for(;this._controlPoints.length<=i;)this._controlPoints.push(new Point);for(n=0;n<2*i;n+=2)this._switchPoint(t[n],t[n+1]);for(n=2*i;n<s;n+=2)this._switchPoint(t[n],t[n+1]),n/2%i==0&&this.insertPoints(e,r);return r},__static(t,["I",function(){return this.I=new t}]),t}(),GrahamScan=function(){function t(){}return __class(t,"laya.maths.GrahamScan"),t.multiply=function(t,e,i){return(t.x-i.x)*(e.y-i.y)-(e.x-i.x)*(t.y-i.y)},t.dis=function(t,e){return(t.x-e.x)*(t.x-e.x)+(t.y-e.y)*(t.y-e.y)},t._getPoints=function(e,i,n){for(void 0===i&&(i=!1),t._mPointList||(t._mPointList=[]);t._mPointList.length<e;)t._mPointList.push(new Point);return n||(n=[]),n.length=0,i?t.getFrom(n,t._mPointList,e):t.getFromR(n,t._mPointList,e),n},t.getFrom=function(t,e,i){var n=0;for(n=0;n<i;n++)t.push(e[n]);return t},t.getFromR=function(t,e,i){var n=0;for(n=0;n<i;n++)t.push(e.pop());return t},t.pListToPointList=function(e,i){void 0===i&&(i=!1);var n=0,s=e.length/2,r=t._getPoints(s,i,t._tempPointList);for(n=0;n<s;n++)r[n].setTo(e[n+n],e[n+n+1]);return r},t.pointListToPlist=function(e){var i,n=0,s=e.length,r=t._temPList;for(r.length=0,n=0;n<s;n++)i=e[n],r.push(i.x,i.y);return r},t.scanPList=function(e){return Utils.copyArray(e,t.pointListToPlist(t.scan(t.pListToPointList(e,!0))))},t.scan=function(e){var i,n,s,r=0,a=0,o=0,h=e.length,l={};for(n=t._temArr,n.length=0,h=e.length,r=h-1;r>=0;r--)i=e[r],s=i.x+"_"+i.y,l.hasOwnProperty(s)||(l[s]=!0,n.push(i));for(h=n.length,Utils.copyArray(e,n),r=1;r<h;r++)(e[r].y<e[o].y||e[r].y==e[o].y&&e[r].x<e[o].x)&&(o=r);for(i=e[0],e[0]=e[o],e[o]=i,r=1;r<h-1;r++){for(o=r,a=r+1;a<h;a++)(t.multiply(e[a],e[o],e[0])>0||0==t.multiply(e[a],e[o],e[0])&&t.dis(e[0],e[a])<t.dis(e[0],e[o]))&&(o=a);i=e[r],e[r]=e[o],e[o]=i}if(n=t._temArr,n.length=0,e.length<3)return Utils.copyArray(n,e);for(n.push(e[0],e[1],e[2]),r=3;r<h;r++){for(;n.length>=2&&t.multiply(e[r],n[n.length-1],n[n.length-2])>=0;)n.pop();e[r]&&n.push(e[r])}return n},t._mPointList=null,t._tempPointList=[],t._temPList=[],t._temArr=[],t}(),MathUtil=function(){function t(){}return __class(t,"laya.maths.MathUtil"),t.subtractVector3=function(t,e,i){i[0]=t[0]-e[0],i[1]=t[1]-e[1],i[2]=t[2]-e[2]},t.lerp=function(t,e,i){return t*(1-i)+e*i},t.scaleVector3=function(t,e,i){i[0]=t[0]*e,i[1]=t[1]*e,i[2]=t[2]*e},t.lerpVector3=function(t,e,i,n){var s=t[0],r=t[1],a=t[2];n[0]=s+i*(e[0]-s),n[1]=r+i*(e[1]-r),n[2]=a+i*(e[2]-a)},t.lerpVector4=function(t,e,i,n){var s=t[0],r=t[1],a=t[2],o=t[3];n[0]=s+i*(e[0]-s),n[1]=r+i*(e[1]-r),n[2]=a+i*(e[2]-a),n[3]=o+i*(e[3]-o)},t.slerpQuaternionArray=function(t,e,i,n,s,r,a){var o,h,l,c,u,_=t[e+0],d=t[e+1],f=t[e+2],p=t[e+3],g=i[n+0],m=i[n+1],v=i[n+2],y=i[n+3];return h=_*g+d*m+f*v+p*y,h<0&&(h=-h,g=-g,m=-m,v=-v,y=-y),1-h>1e-6?(o=Math.acos(h),l=Math.sin(o),c=Math.sin((1-s)*o)/l,u=Math.sin(s*o)/l):(c=1-s,u=s),r[a+0]=c*_+u*g,r[a+1]=c*d+u*m,r[a+2]=c*f+u*v,r[a+3]=c*p+u*y,r},t.getRotation=function(t,e,i,n){return Math.atan2(n-e,i-t)/Math.PI*180},t.sortBigFirst=function(t,e){return t==e?0:e>t?1:-1},t.sortSmallFirst=function(t,e){return t==e?0:e>t?-1:1},t.sortNumBigFirst=function(t,e){return parseFloat(e)-parseFloat(t)},t.sortNumSmallFirst=function(t,e){return parseFloat(t)-parseFloat(e)},t.sortByKey=function(e,i,n){void 0===i&&(i=!1),void 0===n&&(n=!0);var s;return s=i?n?t.sortNumBigFirst:t.sortBigFirst:n?t.sortNumSmallFirst:t.sortSmallFirst,function(t,i){return s(t[e],i[e])}},t}(),Matrix=function(){function t(t,e,i,n,s,r){this.inPool=!1,this.bTransform=!1,void 0===t&&(t=1),void 0===e&&(e=0),void 0===i&&(i=0),void 0===n&&(n=1),void 0===s&&(s=0),void 0===r&&(r=0),this.a=t,this.b=e,this.c=i,this.d=n,this.tx=s,this.ty=r,this._checkTransform()}__class(t,"laya.maths.Matrix");var e=t.prototype;return e.identity=function(){return this.a=this.d=1,this.b=this.tx=this.ty=this.c=0,this.bTransform=!1,this},e._checkTransform=function(){return this.bTransform=1!==this.a||0!==this.b||0!==this.c||1!==this.d},e.setTranslate=function(t,e){return this.tx=t,this.ty=e,this},e.translate=function(t,e){return this.tx+=t,this.ty+=e,this},e.scale=function(t,e){this.a*=t,this.d*=e,this.c*=t,this.b*=e,this.tx*=t,this.ty*=e,this.bTransform=!0},e.rotate=function(t){var e=Math.cos(t),i=Math.sin(t),n=this.a,s=this.c,r=this.tx;this.a=n*e-this.b*i,this.b=n*i+this.b*e,this.c=s*e-this.d*i,this.d=s*i+this.d*e,this.tx=r*e-this.ty*i,this.ty=r*i+this.ty*e,this.bTransform=!0},e.skew=function(t,e){var i=Math.tan(t),n=Math.tan(e),s=this.a,r=this.b;return this.a+=n*this.c,this.b+=n*this.d,this.c+=i*s,this.d+=i*r,this},e.invertTransformPoint=function(t){var e=this.a,i=this.b,n=this.c,s=this.d,r=this.tx,a=e*s-i*n,o=s/a,h=-i/a,l=-n/a,c=e/a,u=(n*this.ty-s*r)/a,_=-(e*this.ty-i*r)/a;return t.setTo(o*t.x+l*t.y+u,h*t.x+c*t.y+_)},e.transformPoint=function(t){return t.setTo(this.a*t.x+this.c*t.y+this.tx,this.b*t.x+this.d*t.y+this.ty)},e.transformPointN=function(t){return t.setTo(this.a*t.x+this.c*t.y,this.b*t.x+this.d*t.y)},e.transformPointArray=function(t,e){for(var i=t.length,n=0;n<i;n+=2){var s=t[n],r=t[n+1];e[n]=this.a*s+this.c*r+this.tx,e[n+1]=this.b*s+this.d*r+this.ty}return e},e.transformPointArrayScale=function(t,e){for(var i=t.length,n=0;n<i;n+=2){var s=t[n],r=t[n+1];e[n]=this.a*s+this.c*r,e[n+1]=this.b*s+this.d*r}return e},e.getScaleX=function(){return 0===this.b?this.a:Math.sqrt(this.a*this.a+this.b*this.b)},e.getScaleY=function(){return 0===this.c?this.d:Math.sqrt(this.c*this.c+this.d*this.d)},e.invert=function(){var t=this.a,e=this.b,i=this.c,n=this.d,s=this.tx,r=t*n-e*i;return this.a=n/r,this.b=-e/r,this.c=-i/r,this.d=t/r,this.tx=(i*this.ty-n*s)/r,this.ty=-(t*this.ty-e*s)/r,this},e.setTo=function(t,e,i,n,s,r){return this.a=t,this.b=e,this.c=i,this.d=n,this.tx=s,this.ty=r,this},e.concat=function(t){var e=this.a,i=this.c,n=this.tx;return this.a=e*t.a+this.b*t.c,this.b=e*t.b+this.b*t.d,this.c=i*t.a+this.d*t.c,this.d=i*t.b+this.d*t.d,this.tx=n*t.a+this.ty*t.c+t.tx,this.ty=n*t.b+this.ty*t.d+t.ty,this},e.scaleEx=function(t,e){var i=this.a,n=this.b,s=this.c,r=this.d;0!==n||0!==s?(this.a=t*i,this.b=t*n,this.c=e*s,this.d=e*r):(this.a=t*i,this.b=0*r,this.c=0*i,this.d=e*r),this.bTransform=!0},e.rotateEx=function(t){var e=Math.cos(t),i=Math.sin(t),n=this.a,s=this.b,r=this.c,a=this.d;0!==s||0!==r?(this.a=e*n+i*r,this.b=e*s+i*a,this.c=-i*n+e*r,this.d=-i*s+e*a):(this.a=e*n,this.b=i*a,this.c=-i*n,this.d=e*a),this.bTransform=!0},e.clone=function(){var e=t.create();return e.a=this.a,e.b=this.b,e.c=this.c,e.d=this.d,e.tx=this.tx,e.ty=this.ty,e.bTransform=this.bTransform,e},e.copyTo=function(t){return t.a=this.a,t.b=this.b,t.c=this.c,t.d=this.d,t.tx=this.tx,t.ty=this.ty,t.bTransform=this.bTransform,t},e.toString=function(){return this.a+","+this.b+","+this.c+","+this.d+","+this.tx+","+this.ty},e.destroy=function(){if(!this.inPool){var e=t._cache;this.inPool=!0,e._length||(e._length=0),e[e._length++]=this,this.a=this.d=1,this.b=this.c=this.tx=this.ty=0,this.bTransform=!1}},t.mul=function(t,e,i){var n=t.a,s=t.b,r=t.c,a=t.d,o=t.tx,h=t.ty,l=e.a,c=e.b,u=e.c,_=e.d,d=e.tx,f=e.ty;return 0!==c||0!==u?(i.a=n*l+s*u,i.b=n*c+s*_,i.c=r*l+a*u,i.d=r*c+a*_,i.tx=l*o+u*h+d,i.ty=c*o+_*h+f):(i.a=n*l,i.b=s*_,i.c=r*l,i.d=a*_,i.tx=l*o+d,i.ty=_*h+f),i},t.mul16=function(t,e,i){var n=t.a,s=t.b,r=t.c,a=t.d,o=t.tx,h=t.ty,l=e.a,c=e.b,u=e.c,_=e.d,d=e.tx,f=e.ty;return 0!==c||0!==u?(i[0]=n*l+s*u,i[1]=n*c+s*_,i[4]=r*l+a*u,i[5]=r*c+a*_,i[12]=l*o+u*h+d,i[13]=c*o+_*h+f):(i[0]=n*l,i[1]=s*_,i[4]=r*l,i[5]=a*_,i[12]=l*o+d,i[13]=_*h+f),i},t.mulPre=function(t,e,i,n,s,r,a,o){var h=t.a,l=t.b,c=t.c,u=t.d,_=t.tx,d=t.ty;return 0!==i||0!==n?(o.a=h*e+l*n,o.b=h*i+l*s,o.c=c*e+u*n,o.d=c*i+u*s,o.tx=e*_+n*d+r,o.ty=i*_+s*d+a):(o.a=h*e,o.b=l*s,o.c=c*e,o.d=u*s,o.tx=e*_+r,o.ty=s*d+a),o},t.mulPos=function(t,e,i,n,s,r,a,o){var h=t.a,l=t.b,c=t.c,u=t.d,_=t.tx,d=t.ty;return 0!==l||0!==c?(o.a=e*h+i*c,o.b=e*l+i*u,o.c=n*h+s*c,o.d=n*l+s*u,o.tx=h*r+c*a+_,o.ty=l*r+u*a+d):(o.a=e*h,o.b=i*u,o.c=n*h,o.d=s*u,o.tx=h*r+_,o.ty=u*a+d),o},t.preMul=function(t,e,i){var n=t.a,s=t.b,r=t.c,a=t.d,o=e.a,h=e.b,l=e.c,c=e.d,u=e.tx,_=e.ty;return i.a=o*n,i.b=i.c=0,i.d=c*a,i.tx=u*n+t.tx,i.ty=_*a+t.ty,0===h&&0===l&&0===s&&0===r||(i.a+=h*r,i.d+=l*s,i.b+=o*s+h*a,i.c+=l*n+c*r,i.tx+=_*r,i.ty+=u*s),i},t.preMulXY=function(t,e,i,n){var s=t.a,r=t.b,a=t.c,o=t.d;return n.a=s,n.b=r,n.c=a,n.d=o,n.tx=e*s+t.tx+i*a,n.ty=i*o+t.ty+e*r,n},t.create=function(){var e=t._cache,i=e._length?e[--e._length]:new t;return i.inPool=!1,i},t.EMPTY=new t,t.TEMP=new t,t._cache=[],t}(),Point=function(){function t(t,e){void 0===t&&(t=0),void 0===e&&(e=0),this.x=t,this.y=e}__class(t,"laya.maths.Point");var e=t.prototype;return e.setTo=function(t,e){return this.x=t,this.y=e,this},e.distance=function(t,e){return Math.sqrt((this.x-t)*(this.x-t)+(this.y-e)*(this.y-e))},e.toString=function(){return this.x+","+this.y},e.normalize=function(){var t=Math.sqrt(this.x*this.x+this.y*this.y);if(t>0){var e=1/t;this.x*=e,this.y*=e}},t.TEMP=new t,t.EMPTY=new t,t}(),Rectangle=function(){function t(t,e,i,n){void 0===t&&(t=0),void 0===e&&(e=0),void 0===i&&(i=0),void 0===n&&(n=0),this.x=t,this.y=e,this.width=i,this.height=n}__class(t,"laya.maths.Rectangle");var e=t.prototype;return e.setTo=function(t,e,i,n){return this.x=t,this.y=e,this.width=i,this.height=n,this},e.copyFrom=function(t){return this.x=t.x,this.y=t.y,this.width=t.width,this.height=t.height,this},e.contains=function(t,e){return!(this.width<=0||this.height<=0)&&(t>=this.x&&t<this.right&&e>=this.y&&e<this.bottom)},e.intersects=function(t){return!(t.x>this.x+this.width||t.x+t.width<this.x||t.y>this.y+this.height||t.y+t.height<this.y)},e.intersection=function(e,i){return this.intersects(e)?(i||(i=new t),i.x=Math.max(this.x,e.x),i.y=Math.max(this.y,e.y),i.width=Math.min(this.right,e.right)-i.x,i.height=Math.min(this.bottom,e.bottom)-i.y,i):null},e.union=function(e,i){return i||(i=new t),this.clone(i),e.width<=0||e.height<=0?i:(i.addPoint(e.x,e.y),i.addPoint(e.right,e.bottom),this)},e.clone=function(e){return e||(e=new t),e.x=this.x,e.y=this.y,e.width=this.width,e.height=this.height,e},e.toString=function(){return this.x+","+this.y+","+this.width+","+this.height},e.equals=function(t){return!(!t||t.x!==this.x||t.y!==this.y||t.width!==this.width||t.height!==this.height)},e.addPoint=function(t,e){return this.x>t&&(this.width+=this.x-t,this.x=t),this.y>e&&(this.height+=this.y-e,this.y=e),this.width<t-this.x&&(this.width=t-this.x),this.height<e-this.y&&(this.height=e-this.y),this},e._getBoundPoints=function(){var e=t._temB;return e.length=0,0==this.width||0==this.height?e:(e.push(this.x,this.y,this.x+this.width,this.y,this.x,this.y+this.height,this.x+this.width,this.y+this.height),e)},e.isEmpty=function(){return this.width<=0||this.height<=0},__getset(0,e,"right",function(){return this.x+this.width}),__getset(0,e,"bottom",function(){return this.y+this.height}),t._getBoundPointS=function(e,i,n,s){var r=t._temA;return r.length=0,0==n||0==s?r:(r.push(e,i,e+n,i,e,i+s,e+n,i+s),r)},t._getWrapRec=function(e,i){if(!e||e.length<1)return i?i.setTo(0,0,0,0):t.TEMP.setTo(0,0,0,0);i=i?i:new t;var n,s,r,a,o,h=e.length,l=Point.TEMP;for(s=a=99999,r=o=-s,n=0;n<h;n+=2)l.x=e[n],l.y=e[n+1],s=s<l.x?s:l.x,a=a<l.y?a:l.y,r=r>l.x?r:l.x,o=o>l.y?o:l.y;return i.setTo(s,a,r-s,o-a)},t.EMPTY=new t,t.TEMP=new t,t._temB=[],t._temA=[],t}(),SoundManager=function(){function t(){}return __class(t,"laya.media.SoundManager"),__getset(1,t,"autoStopMusic",function(){return t._autoStopMusic},function(e){Laya.stage.off("blur",null,t._stageOnBlur),Laya.stage.off("focus",null,t._stageOnFocus),Laya.stage.off("visibilitychange",null,t._visibilityChange),t._autoStopMusic=e,e&&(Laya.stage.on("blur",null,t._stageOnBlur),Laya.stage.on("focus",null,t._stageOnFocus),Laya.stage.on("visibilitychange",null,t._visibilityChange))}),__getset(1,t,"muted",function(){return t._muted},function(e){e&&t.stopAllSound(),t.musicMuted=e,t._muted=e}),__getset(1,t,"musicMuted",function(){return t._musicMuted},function(e){e?(t._tMusic&&t.stopSound(t._tMusic),t._musicMuted=e):(t._musicMuted=e,t._tMusic&&t.playMusic(t._tMusic))}),__getset(1,t,"soundMuted",function(){return t._soundMuted},function(e){t._soundMuted=e}),t.addChannel=function(e){t._channels.indexOf(e)>=0||t._channels.push(e)},t.removeChannel=function(e){var i=0;for(i=t._channels.length-1;i>=0;i--)t._channels[i]==e&&t._channels.splice(i,1)},t.disposeSoundIfNotUsed=function(e){var i=0;for(i=t._channels.length-1;i>=0;i--)if(t._channels[i].url==e)return;t.destroySound(e)},t._visibilityChange=function(){Laya.stage.isVisibility?t._stageOnFocus():t._stageOnBlur()},t._stageOnBlur=function(){t._isActive=!1,t._musicChannel&&(t._musicChannel.isStopped||(t._blurPaused=!0,t._musicLoops=t._musicChannel.loops,t._musicCompleteHandler=t._musicChannel.completeHandler,t._musicPosition=t._musicChannel.position,t._musicChannel.stop(),Laya.stage.once("mousedown",null,t._stageOnFocus))),t.stopAllSound()},t._stageOnFocus=function(){t._isActive=!0,Laya.stage.off("mousedown",null,t._stageOnFocus),t._blurPaused&&(t._tMusic&&t.playMusic(t._tMusic,t._musicLoops,t._musicCompleteHandler,t._musicPosition),t._blurPaused=!1)},t.playSound=function(e,i,n,s,r){if(void 0===i&&(i=1),void 0===r&&(r=0),!t._isActive||!e)return null;if(t._muted)return null;if((e=URL.formatURL(e))==t._tMusic){if(t._musicMuted)return null}else{if(Render.isConchApp){var a=Utils.getFileExtension(e)
;if("wav"!=a&&"ogg"!=a)return alert("The sound only supports wav or ogg format,for optimal performance reason,please refer to the official website document."),null}if(t._soundMuted)return null}var o=Laya.loader.getRes(e);s||(s=t._soundClass),o||(o=new s,o.load(e),Loader.cacheRes(e,o));var h;return(h=o.play(r,i))?(h.url=e,h.volume=e==t._tMusic?t.musicVolume:t.soundVolume,h.completeHandler=n,h):null},t.destroySound=function(t){var e=Laya.loader.getRes(t);e&&(Loader.clearRes(t),e.dispose())},t.playMusic=function(e,i,n,s){return void 0===i&&(i=0),void 0===s&&(s=0),e=URL.formatURL(e),t._tMusic=e,t._musicChannel&&t._musicChannel.stop(),t._musicChannel=t.playSound(e,i,n,AudioSound,s)},t.stopSound=function(e){e=URL.formatURL(e);var i,n=0;for(n=t._channels.length-1;n>=0;n--)i=t._channels[n],i.url==e&&i.stop()},t.stopAll=function(){t._tMusic=null;var e,i=0;for(i=t._channels.length-1;i>=0;i--)e=t._channels[i],e.stop()},t.stopAllSound=function(){var e,i=0;for(i=t._channels.length-1;i>=0;i--)e=t._channels[i],e.url!=t._tMusic&&e.stop()},t.stopMusic=function(){t._musicChannel&&t._musicChannel.stop(),t._tMusic=null},t.setSoundVolume=function(e,i){if(i)i=URL.formatURL(i),t._setVolume(i,e);else{t.soundVolume=e;var n,s=0;for(s=t._channels.length-1;s>=0;s--)n=t._channels[s],n.url!=t._tMusic&&(n.volume=e)}},t.setMusicVolume=function(e){t.musicVolume=e,t._setVolume(t._tMusic,e)},t._setVolume=function(e,i){e=URL.formatURL(e);var n,s=0;for(s=t._channels.length-1;s>=0;s--)n=t._channels[s],n.url==e&&(n.volume=i)},t.musicVolume=1,t.soundVolume=1,t.playbackRate=1,t._muted=!1,t._soundMuted=!1,t._musicMuted=!1,t._tMusic=null,t._musicChannel=null,t._channels=[],t._autoStopMusic=!1,t._blurPaused=!1,t._isActive=!0,t._musicLoops=0,t._musicPosition=0,t._musicCompleteHandler=null,t._soundClass=null,t.autoReleaseSound=!0,t}(),LocalStorage=function(){function t(){}var e;return __class(t,"laya.net.LocalStorage"),t.__init__=function(){t._baseClass||(t._baseClass=e,e.init()),t.items=t._baseClass.items,t.support=t._baseClass.support},t.setItem=function(e,i){t._baseClass.setItem(e,i)},t.getItem=function(e){return t._baseClass.getItem(e)},t.setJSON=function(e,i){t._baseClass.setJSON(e,i)},t.getJSON=function(e){return t._baseClass.getJSON(e)},t.removeItem=function(e){t._baseClass.removeItem(e)},t.clear=function(){t._baseClass.clear()},t._baseClass=null,t.items=null,t.support=!1,t.__init$=function(){e=function(){function t(){}return __class(t,""),t.init=function(){try{t.items=window.localStorage,t.setItem("laya","1"),t.removeItem("laya"),t.support=!0}catch(t){}t.support||console.log("LocalStorage is not supprot or browser is private mode.")},t.setItem=function(e,i){try{t.support&&t.items.setItem(e,i)}catch(t){console.warn("set localStorage failed",t)}},t.getItem=function(e){return t.support?t.items.getItem(e):null},t.setJSON=function(e,i){try{t.support&&t.items.setItem(e,JSON.stringify(i))}catch(t){console.warn("set localStorage failed",t)}},t.getJSON=function(e){return JSON.parse(t.support?t.items.getItem(e):null)},t.removeItem=function(e){t.support&&t.items.removeItem(e)},t.clear=function(){t.support&&t.items.clear()},t.items=null,t.support=!1,t}()},t}(),ResourceVersion=function(){function t(){}return __class(t,"laya.net.ResourceVersion"),t.enable=function(e,i){Laya.loader.load(e,Handler.create(null,t.onManifestLoaded,[i]),null,"json"),URL.customFormat=t.addVersionPrefix},t.onManifestLoaded=function(e,i){t.manifest=i,e.run(),i||console.warn("资源版本清单文件不存在，不使用资源版本管理。忽略ERR_FILE_NOT_FOUND错误。")},t.addVersionPrefix=function(e){return t.manifest&&t.manifest[e]?t.manifest[e]+"/"+e:e},t.manifest=null,t}(),URL=function(){function t(e){this._url=null,this._path=null,this._url=t.formatURL(e),this._path=t.getPath(e)}__class(t,"laya.net.URL");var e=t.prototype;return __getset(0,e,"path",function(){return this._path}),__getset(0,e,"url",function(){return this._url}),t.formatURL=function(e,i){if(!e)return"null path";if(e.indexOf(":")>0)return e;null!=t.customFormat&&(e=t.customFormat(e,i));var n=e.charAt(0);if("."===n)return t.formatRelativePath((i||t.basePath)+e);if("~"===n)return t.rootPath+e.substring(1);if("d"===n){if(0===e.indexOf("data:image"))return e}else if("/"===n)return e;return(i||t.basePath)+e},t.formatRelativePath=function(t){for(var e=t.split("/"),i=0,n=e.length;i<n;i++)".."==e[i]&&(e.splice(i-1,2),i-=2);return e.join("/")},t.isAbsolute=function(t){return t.indexOf(":")>0||"/"==t.charAt(0)},t.getPath=function(t){var e=t.lastIndexOf("/");return e>0?t.substr(0,e+1):""},t.getFileName=function(t){var e=t.lastIndexOf("/");return e>0?t.substr(e+1):t},t.version={},t.basePath="",t.rootPath="",t.customFormat=function(e){var i=t.version[e];return!Render.isConchApp&&i&&(e+="?v="+i),e},t}(),Render=function(){function t(e,i){function n(){Laya.stage._loop(),Browser.window.requestAnimationFrame(n)}this._timeId=0;var s=t._mainCanvas.source.style;s.position="absolute",s.top=s.left="0px",s.background="#000000",t._mainCanvas.source.id="layaCanvas";var r=laya.renders.Render.isWebGL;t._mainCanvas.source.width=e,t._mainCanvas.source.height=i,r&&t.WebGL.init(t._mainCanvas,e,i),Browser.container.appendChild(t._mainCanvas.source),t._context=new RenderContext(e,i,r?null:t._mainCanvas),t._context.ctx.setIsMainContext(),Browser.window.requestAnimationFrame(n),Laya.stage.on("visibilitychange",this,this._onVisibilitychange)}__class(t,"laya.renders.Render");var e=t.prototype;return e._onVisibilitychange=function(){Laya.stage.isVisibility?0!=this._timeId&&Browser.window.clearInterval(this._timeId):this._timeId=Browser.window.setInterval(this._enterFrame,1e3)},e._enterFrame=function(t){Laya.stage._loop()},__getset(1,t,"context",function(){return t._context}),__getset(1,t,"canvas",function(){return t._mainCanvas.source}),t._context=null,t._mainCanvas=null,t.WebGL=null,t.isConchNode=!1,t.isConchApp=!1,t.isConchWebGL=!1,t.isWebGL=!1,t.is3DMode=!1,t.optimizeTextureMemory=function(t,e){return!0},t.__init$=function(){window.ConchRenderType=window.ConchRenderType||1,window.ConchRenderType|=window.conch?4:0,t.isConchNode=5==(5&window.ConchRenderType),t.isConchApp=4==(4&window.ConchRenderType),t.isConchWebGL=6==window.ConchRenderType},t}(),RenderContext=function(){function t(e,i,n){this.x=0,this.y=0,this._drawTexture=function(t,e,i){i[0].loaded&&this.ctx.drawTexture(i[0],i[1],i[2],i[3],i[4],t,e)},this._fillTexture=function(t,e,i){i[0].loaded&&this.ctx.fillTexture(i[0],i[1]+t,i[2]+e,i[3],i[4],i[5],i[6],i[7])},this._drawTextureWithTransform=function(t,e,i){i[0].loaded&&this.ctx.drawTextureWithTransform(i[0],i[1],i[2],i[3],i[4],i[5],t,e,i[6])},this._fillQuadrangle=function(t,e,i){this.ctx.fillQuadrangle(i[0],i[1],i[2],i[3],i[4])},this._drawRect=function(t,e,i){var n=this.ctx;null!=i[4]&&(n.fillStyle=i[4],n.fillRect(t+i[0],e+i[1],i[2],i[3],null)),null!=i[5]&&(n.strokeStyle=i[5],n.lineWidth=i[6],n.strokeRect(t+i[0],e+i[1],i[2],i[3],i[6]))},this._drawPie=function(t,e,i){var n=this.ctx;Render.isWebGL&&n.setPathId(i[8]),n.beginPath(),Render.isWebGL?(n.movePath(i[0]+t,i[1]+e),n.moveTo(0,0)):n.moveTo(t+i[0],e+i[1]),n.arc(t+i[0],e+i[1],i[2],i[3],i[4]),n.closePath(),this._fillAndStroke(i[5],i[6],i[7],!0)},this._clipRect=function(t,e,i){this.ctx.clipRect(t+i[0],e+i[1],i[2],i[3])},this._fillRect=function(t,e,i){this.ctx.fillRect(t+i[0],e+i[1],i[2],i[3],i[4])},this._drawCircle=function(e,i,n){var s=this.ctx;Render.isWebGL&&s.setPathId(n[6]),Stat.drawCall++,s.beginPath(),Render.isWebGL&&s.movePath(n[0]+e,n[1]+i),s.arc(n[0]+e,n[1]+i,n[2],0,t.PI2),s.closePath(),this._fillAndStroke(n[3],n[4],n[5],!0)},this._fillCircle=function(e,i,n){Stat.drawCall++;var s=this.ctx;s.beginPath(),s.fillStyle=n[3],s.arc(n[0]+e,n[1]+i,n[2],0,t.PI2),s.fill()},this._setShader=function(t,e,i){this.ctx.setShader(i[0])},this._drawLine=function(t,e,i){var n=this.ctx;Render.isWebGL&&n.setPathId(i[6]),n.beginPath(),n.strokeStyle=i[4],n.lineWidth=i[5],Render.isWebGL?(n.movePath(t,e),n.moveTo(i[0],i[1]),n.lineTo(i[2],i[3])):(n.moveTo(t+i[0],e+i[1]),n.lineTo(t+i[2],e+i[3])),n.stroke()},this._drawLines=function(t,e,i){var n=this.ctx;Render.isWebGL&&n.setPathId(i[5]),n.beginPath(),t+=i[0],e+=i[1],Render.isWebGL&&n.movePath(t,e),n.strokeStyle=i[3],n.lineWidth=i[4];var s=i[2],r=2,a=s.length;if(Render.isWebGL)for(n.moveTo(s[0],s[1]);r<a;)n.lineTo(s[r++],s[r++]);else for(n.moveTo(t+s[0],e+s[1]);r<a;)n.lineTo(t+s[r++],e+s[r++]);n.stroke()},this._drawLinesWebGL=function(t,e,i){this.ctx.drawLines(t+this.x+i[0],e+this.y+i[1],i[2],i[3],i[4])},this._drawCurves=function(t,e,i){this.ctx.drawCurves(t,e,i)},this._draw=function(t,e,i){i[0].call(null,this,t,e)},this._transformByMatrix=function(t,e,i){this.ctx.transformByMatrix(i[0])},this._setTransform=function(t,e,i){this.ctx.setTransform(i[0],i[1],i[2],i[3],i[4],i[5])},this._setTransformByMatrix=function(t,e,i){this.ctx.setTransformByMatrix(i[0])},this._save=function(t,e,i){this.ctx.save()},this._restore=function(t,e,i){this.ctx.restore()},this._translate=function(t,e,i){this.ctx.translate(i[0],i[1])},this._transform=function(t,e,i){this.ctx.translate(i[1]+t,i[2]+e);var n=i[0];this.ctx.transform(n.a,n.b,n.c,n.d,n.tx,n.ty),this.ctx.translate(-t-i[1],-e-i[2])},this._rotate=function(t,e,i){this.ctx.translate(i[1]+t,i[2]+e),this.ctx.rotate(i[0]),this.ctx.translate(-t-i[1],-e-i[2])},this._scale=function(t,e,i){this.ctx.translate(i[2]+t,i[3]+e),this.ctx.scale(i[0],i[1]),this.ctx.translate(-t-i[2],-e-i[3])},this._alpha=function(t,e,i){this.ctx.globalAlpha*=i[0]},this._setAlpha=function(t,e,i){this.ctx.globalAlpha=i[0]},this._fillText=function(t,e,i){this.ctx.fillText(i[0],i[1]+t,i[2]+e,i[3],i[4],i[5])},this._strokeText=function(t,e,i){this.ctx.strokeText(i[0],i[1]+t,i[2]+e,i[3],i[4],i[5],i[6])},this._fillBorderText=function(t,e,i){this.ctx.fillBorderText(i[0],i[1]+t,i[2]+e,i[3],i[4],i[5],i[6],i[7])},this._blendMode=function(t,e,i){this.ctx.globalCompositeOperation=i[0]},this._beginClip=function(t,e,i){this.ctx.beginClip&&this.ctx.beginClip(t+i[0],e+i[1],i[2],i[3])},this._setIBVB=function(t,e,i){this.ctx.setIBVB(i[0]+t,i[1]+e,i[2],i[3],i[4],i[5],i[6],i[7])},this._fillTrangles=function(t,e,i){this.ctx.fillTrangles(i[0],i[1]+t,i[2]+e,i[3],i[4])},this._drawPath=function(t,e,i){var n=this.ctx;Render.isWebGL&&n.setPathId(-1),n.beginPath(),t+=i[0],e+=i[1];for(var s=i[2],r=0,a=s.length;r<a;r++){var o=s[r];switch(o[0]){case"moveTo":n.moveTo(t+o[1],e+o[2]);break;case"lineTo":n.lineTo(t+o[1],e+o[2]);break;case"arcTo":n.arcTo(t+o[1],e+o[2],t+o[3],e+o[4],o[5]);break;case"closePath":n.closePath()}}var h=i[3];null!=h&&(n.fillStyle=h.fillStyle,n.fill());var l=i[4];null!=l&&(n.strokeStyle=l.strokeStyle,n.lineWidth=l.lineWidth||1,n.lineJoin=l.lineJoin,n.lineCap=l.lineCap,n.miterLimit=l.miterLimit,n.stroke())},this.drawPoly=function(t,e,i){this.ctx.drawPoly(t+this.x+i[0],e+this.y+i[1],i[2],i[3],i[4],i[5],i[6])},this._drawPoly=function(t,e,i){var n=this.ctx,s=i[2],r=2,a=s.length;if(Render.isWebGL)for(n.setPathId(i[6]),n.beginPath(),t+=i[0],e+=i[1],n.movePath(t,e),n.moveTo(s[0],s[1]);r<a;)n.lineTo(s[r++],s[r++]);else for(n.beginPath(),t+=i[0],e+=i[1],n.moveTo(t+s[0],e+s[1]);r<a;)n.lineTo(t+s[r++],e+s[r++]);n.closePath(),this._fillAndStroke(i[3],i[4],i[5],i[7])},this._drawSkin=function(t,e,i){var n=i[0];if(n){var s=this.ctx;n.render(s,t,e)}},this._drawParticle=function(t,e,i){this.ctx.drawParticle(t+this.x,e+this.y,i[0])},n?this.ctx=n.getContext("2d"):(n=HTMLCanvas.create("3D"),this.ctx=RunDriver.createWebGLContext2D(n),n._setContext(this.ctx)),n.size(e,i),this.canvas=n}__class(t,"laya.renders.RenderContext");var e=t.prototype;return e.destroy=function(){this.canvas&&(this.canvas.destroy(),this.canvas=null),this.ctx&&(this.ctx.destroy(),this.ctx=null)},e.drawTexture=function(t,e,i,n,s){t.loaded&&this.ctx.drawTexture(t,e,i,n,s,this.x,this.y)},e._drawTextures=function(t,e,i){i[0].loaded&&this.ctx.drawTextures(i[0],i[1],t+this.x,e+this.y)},e.drawTextureWithTransform=function(t,e,i,n,s,r,a){t.loaded&&this.ctx.drawTextureWithTransform(t,e,i,n,s,r,this.x,this.y,a)},e.fillQuadrangle=function(t,e,i,n,s){this.ctx.fillQuadrangle(t,e,i,n,s)},e.drawCanvas=function(t,e,i,n,s){this.ctx.drawCanvas(t,e+this.x,i+this.y,n,s)},e.drawRect=function(t,e,i,n,s,r){void 0===r&&(r=1);var a=this.ctx;a.strokeStyle=s,a.lineWidth=r,a.strokeRect(t+this.x,e+this.y,i,n,r)},e._fillAndStroke=function(t,e,i,n){void 0===n&&(n=!1);var s=this.ctx;null!=t&&(s.fillStyle=t,Render.isWebGL?s.fill(n):s.fill()),null!=e&&i>0&&(s.strokeStyle=e,s.lineWidth=i,s.stroke())},e.clipRect=function(t,e,i,n){this.ctx.clipRect(t+this.x,e+this.y,i,n)},e.fillRect=function(t,e,i,n,s){this.ctx.fillRect(t+this.x,e+this.y,i,n,s)},e.drawCircle=function(e,i,n,s,r){void 0===r&&(r=1),Stat.drawCall++;var a=this.ctx;a.beginPath(),a.strokeStyle=s,a.lineWidth=r,a.arc(e+this.x,i+this.y,n,0,t.PI2),a.stroke()},e.fillCircle=function(e,i,n,s){Stat.drawCall++;var r=this.ctx;r.beginPath(),r.fillStyle=s,r.arc(e+this.x,i+this.y,n,0,t.PI2),r.fill()},e.setShader=function(t){this.ctx.setShader(t)},e.drawLine=function(t,e,i,n,s,r){void 0===r&&(r=1);var a=this.ctx;a.beginPath(),a.strokeStyle=s,a.lineWidth=r,a.moveTo(this.x+t,this.y+e),a.lineTo(this.x+i,this.y+n),a.stroke()},e.clear=function(){this.ctx.clear()},e.transformByMatrix=function(t){this.ctx.transformByMatrix(t)},e.setTransform=function(t,e,i,n,s,r){this.ctx.setTransform(t,e,i,n,s,r)},e.setTransformByMatrix=function(t){this.ctx.setTransformByMatrix(t)},e.save=function(){this.ctx.save()},e.restore=function(){this.ctx.restore()},e.translate=function(t,e){this.ctx.translate(t,e)},e.transform=function(t,e,i,n,s,r){this.ctx.transform(t,e,i,n,s,r)},e.rotate=function(t){this.ctx.rotate(t)},e.scale=function(t,e){this.ctx.scale(t,e)},e.alpha=function(t){this.ctx.globalAlpha*=t},e.setAlpha=function(t){this.ctx.globalAlpha=t},e.fillWords=function(t,e,i,n,s){this.ctx.fillWords(t,e,i,n,s)},e.fillBorderWords=function(t,e,i,n,s,r,a){this.ctx.fillBorderWords(t,e,i,n,s,r,a)},e.fillText=function(t,e,i,n,s,r){this.ctx.fillText(t,e+this.x,i+this.y,n,s,r)},e.strokeText=function(t,e,i,n,s,r,a){this.ctx.strokeText(t,e+this.x,i+this.y,n,s,r,a)},e.blendMode=function(t){this.ctx.globalCompositeOperation=t},e.flush=function(){this.ctx.flush&&this.ctx.flush()},e.addRenderObject=function(t){this.ctx.addRenderObject(t)},e.beginClip=function(t,e,i,n){this.ctx.beginClip&&this.ctx.beginClip(t,e,i,n)},e.endClip=function(){this.ctx.endClip&&this.ctx.endClip()},e.fillTrangles=function(t,e,i){this.ctx.fillTrangles(i[0],i[1],i[2],i[3],i.length>4?i[4]:null)},t.PI2=2*Math.PI,t}(),RenderSprite=function(){function t(e,i){switch(this._next=i||t.NORENDER,e){case 0:return void(this._fun=this._no);case 1:return void(this._fun=this._image);case 2:return void(this._fun=this._alpha);case 4:return void(this._fun=this._transform);case 8:return void(this._fun=this._blend);case 16:return void(this._fun=this._canvas);case 64:return void(this._fun=this._mask);case 128:return void(this._fun=this._clip);case 256:return void(this._fun=this._style);case 512:return void(this._fun=this._graphics);case 2048:return void(this._fun=this._childs);case 1024:return void(this._fun=this._custom);case 513:return void(this._fun=this._image2);case 517:return void(this._fun=this._image2);case 32:return void(this._fun=Filter._filter);case 69905:return void(this._fun=t._initRenderFun)}this.onCreate(e)}__class(t,"laya.renders.RenderSprite");var e=t.prototype;return e.onCreate=function(t){},e._style=function(t,e,i,n){t._style.render(t,e,i,n);var s=this._next;s._fun.call(s,t,e,i,n)},e._no=function(t,e,i,n){},e._custom=function(t,e,i,n){t.customRender(e,i,n);var s=t._style._tf;this._next._fun.call(this._next,t,e,i-s.translateX,n-s.translateY)},e._clip=function(e,i,n,s){var r=this._next;if(r!=t.NORENDER){var a=e._style.scrollRect;i.ctx.save(),i.ctx.clipRect(n,s,a.width,a.height),r._fun.call(r,e,i,n-a.x,s-a.y),i.ctx.restore()}},e._blend=function(t,e,i,n){var s=t._style;s.blendMode&&(e.ctx.globalCompositeOperation=s.blendMode);var r=this._next;r._fun.call(r,t,e,i,n),e.ctx.globalCompositeOperation="source-over"},e._mask=function(t,e,i,n){var s=this._next;s._fun.call(s,t,e,i,n);var r=t.mask;r&&(e.ctx.globalCompositeOperation="destination-in",(r.numChildren>0||!r.graphics._isOnlyOne())&&(r.cacheAsBitmap=!0),r.render(e,i-t.pivotX,n-t.pivotY)),e.ctx.globalCompositeOperation="source-over"},e._graphics=function(t,e,i,n){var s=t._style._tf;t._graphics&&t._graphics._render(t,e,i-s.translateX,n-s.translateY);var r=this._next;r._fun.call(r,t,e,i,n)},e._image=function(t,e,i,n){var s=t._style;e.ctx.drawTexture2(i,n,s._tf.translateX,s._tf.translateY,t.transform,s.alpha,s.blendMode,t._graphics._one)},e._image2=function(t,e,i,n){var s=t._style._tf;e.ctx.drawTexture2(i,n,s.translateX,s.translateY,t.transform,1,null,t._graphics._one)},e._alpha=function(t,e,i,n){var s,r=t._style;if((s=r.alpha)>.01||t._needRepaint()){var a=e.ctx.globalAlpha;e.ctx.globalAlpha*=s;var o=this._next;o._fun.call(o,t,e,i,n),e.ctx.globalAlpha=a}},e._transform=function(e,i,n,s){var r=e.transform,a=this._next;r&&a!=t.NORENDER?(i.save(),i.transform(r.a,r.b,r.c,r.d,r.tx+n,r.ty+s),a._fun.call(a,e,i,0,0),i.restore()):a._fun.call(a,e,i,n,s)},e._childs_max=function(t,e,i,n){var s=t._style,r=s._tf;if(i=i-r.translateX+s.paddingLeft,n=n-r.translateY+s.paddingTop,s._calculation){var a=t._getWords();if(a){var o=s;o&&(o.stroke?e.fillBorderWords(a,i,n,o.font,o.color,o.strokeColor,o.stroke):e.fillWords(a,i,n,o.font,o.color))}}var h,l=t._childs,c=l.length;if(t.viewport||t.optimizeScrollRect&&t._style.scrollRect){var u=t.viewport||t._style.scrollRect,_=u.x,d=u.y,f=u.right,p=u.bottom,g=NaN,m=NaN;for(v=0;v<c;++v)(h=l[v]).visible&&(g=h._x)<f&&g+h.width>_&&(m=h._y)<p&&m+h.height>d&&h.render(e,i,n)}else for(var v=0;v<c;++v)(h=l[v])._style.visible&&h.render(e,i,n)},e._childs=function(t,e,i,n){if(t._childRenderMax)return void this._childs_max(t,e,i,n);for(var s,r=t._childs,a=r.length,o=0;o<a;++o)(s=r[o])._style.visible&&s.render(e,i,n)},e._canvas=function(t,e,i,n){var s=t._$P.cacheCanvas;if(!s)return void this._next._fun.call(this._next,t,e,i,n);"bitmap"===s.type?Stat.canvasBitmap++:Stat.canvasNormal++;var r=s.ctx;if(t._needRepaint()||!r)this._canvas_repaint(t,e,i,n);else{var a=s._cacheRec;e.drawCanvas(r.canvas,i+a.x,n+a.y,a.width,a.height)}},e._canvas_repaint=function(t,e,i,n){var s=t._$P.cacheCanvas,r=this._next;if(!s)return void r._fun.call(r,t,c,i,n);var a,o,h,l,c=s.ctx,u=t._needRepaint()||!c,_=s.type;if("bitmap"===_?Stat.canvasBitmap++:Stat.canvasNormal++,u){s._cacheRec||(s._cacheRec=new Rectangle);var d,f;Render.isWebGL&&"bitmap"!==_?s._cacheRec.setTo(-t.pivotX,-t.pivotY,1,1):(l=t.getSelfBounds(),l.x=l.x-t.pivotX,l.y=l.y-t.pivotY,l.x=l.x-16,l.y=l.y-16,l.width=l.width+32,l.height=l.height+32,l.x=Math.floor(l.x+i)-i,l.y=Math.floor(l.y+n)-n,l.width=Math.floor(l.width),l.height=Math.floor(l.height),s._cacheRec.copyFrom(l)),l=s._cacheRec;var p=Render.isWebGL?1:Browser.pixelRatio*Laya.stage.clientScaleX,g=Render.isWebGL?1:Browser.pixelRatio*Laya.stage.clientScaleY;if(!Render.isWebGL){var m,v=1,y=1;for(m=t;m&&m!=Laya.stage;)v*=m.scaleX,y*=m.scaleY,m=m.parent;Render.isWebGL?(v<1&&(p*=v),y<1&&(g*=y)):(v>1&&(p*=v),y>1&&(g*=y))}if(t.scrollRect){var w=t.scrollRect;l.x-=w.x,l.y-=w.y}if(d=l.width*p,f=l.height*g,o=l.x,h=l.y,Render.isWebGL&&"bitmap"===_&&(d>2048||f>2048))return console.warn("cache bitmap size larger than 2048,cache ignored"),s.ctx&&(Pool.recover("RenderContext",s.ctx),s.ctx.canvas.size(0,0),s.ctx=null),void r._fun.call(r,t,e,i,n);c||(c=s.ctx=Pool.getItem("RenderContext")||new RenderContext(d,f,HTMLCanvas.create("AUTO"))),c.ctx.sprite=t,a=c.canvas,a.clear(),(a.width!=d||a.height!=f)&&a.size(d,f),"bitmap"===_?a.context.asBitmap=!0:"normal"===_&&(a.context.asBitmap=!1);var x;if(1!=p||1!=g){var T=c.ctx;T.save(),T.scale(p,g),!Render.isConchWebGL&&Render.isConchApp&&(x=t._$P.cf)&&T.setFilterMatrix&&T.setFilterMatrix(x._mat,x._alpha),r._fun.call(r,t,c,-o,-h),T.restore(),Render.isConchApp&&!Render.isConchWebGL||t._applyFilters()}else T=c.ctx,!Render.isConchWebGL&&Render.isConchApp&&(x=t._$P.cf)&&T.setFilterMatrix&&T.setFilterMatrix(x._mat,x._alpha),r._fun.call(r,t,c,-o,-h),Render.isConchApp&&!Render.isConchWebGL||t._applyFilters();t._$P.staticCache&&(s.reCache=!1),Stat.canvasReCache++}else l=s._cacheRec,o=l.x,h=l.y,a=c.canvas;e.drawCanvas(a,i+o,n+h,l.width,l.height)},t.__init__=function(){var e,i=0,n=0;for(e=RunDriver.createRenderSprite(69905,null),n=t.renders.length=4096,i=0;i<n;i++)t.renders[i]=e;t.renders[0]=RunDriver.createRenderSprite(0,null),function(e,i){for(var n=0,s=0;s<e.length;s++)n|=e[s],t.renders[n]=i}([1,512,4,2],new t(1,null)),t.renders[513]=RunDriver.createRenderSprite(513,null),t.renders[517]=new t(517,null)},t._initRenderFun=function(e,i,n,s){var r=e._renderType;(t.renders[r]=t._getTypeRender(r))._fun(e,i,n,s)},t._getTypeRender=function(t){for(var e=null,i=2048;i>1;)i&t&&(e=RunDriver.createRenderSprite(i,e)),i>>=1;return e},t.IMAGE=1,t.ALPHA=2,t.TRANSFORM=4,t.BLEND=8,t.CANVAS=16,t.FILTERS=32,t.MASK=64,t.CLIP=128,t.STYLE=256,t.GRAPHICS=512,t.CUSTOM=1024,t.CHILDS=2048,t.INIT=69905,t.renders=[],t.NORENDER=new t(0,null),t}(),Context=function(){function t(){this._repaint=!1}__class(t,"laya.resource.Context");var e=t.prototype;return e.replaceReset=function(){var e=0,i=0;i=t.replaceKeys.length;var n;for(e=0;e<i;e++)n=t.replaceKeys[e],this[t.newKeys[e]]=this[n]},e.replaceResotre=function(){this.__restore(),this.__reset()},e.setIsMainContext=function(){},e.drawTextures=function(t,e,i,n){Stat.drawCall+=e.length/2;for(var s=t.width,r=t.height,a=0,o=e.length;a<o;a+=2)this.drawTexture(t,e[a],e[a+1],s,r,i,n)},e.drawCanvas=function(t,e,i,n,s){Stat.drawCall++,this.drawImage(t.source,e,i,n,s)},e.fillRect=function(t,e,i,n,s){Stat.drawCall++,s&&(this.fillStyle=s),this.__fillRect(t,e,i,n)},e.fillText=function(t,e,i,n,s,r){Stat.drawCall++,arguments.length>3&&null!=n&&(this.font=n,this.fillStyle=s,this.textAlign=r,this.textBaseline="top"),this.__fillText(t,e,i)},e.fillBorderText=function(t,e,i,n,s,r,a,o){Stat.drawCall++,this.font=n,this.fillStyle=s,this.textBaseline="top",this.strokeStyle=r,this.lineWidth=a,this.textAlign=o,this.__strokeText(t,e,i),this.__fillText(t,e,i)},e.strokeText=function(t,e,i,n,s,r,a){Stat.drawCall++,arguments.length>3&&null!=n&&(this.font=n,this.strokeStyle=s,this.lineWidth=r,this.textAlign=a,this.textBaseline="top"),this.__strokeText(t,e,i)},e.transformByMatrix=function(t){this.transform(t.a,t.b,t.c,t.d,t.tx,t.ty)},e.setTransformByMatrix=function(t){this.setTransform(t.a,t.b,t.c,t.d,t.tx,t.ty)},e.clipRect=function(t,e,i,n){Stat.drawCall++,this.beginPath(),this.rect(t,e,i,n),this.clip()},e.drawTexture=function(t,e,i,n,s,r,a){Stat.drawCall++;var o=t.uv,h=t.bitmap.width,l=t.bitmap.height;this.drawImage(t.source,o[0]*h,o[1]*l,(o[2]-o[0])*h,(o[5]-o[3])*l,e+r,i+a,n,s)},e.drawTextureWithTransform=function(t,e,i,n,s,r,a,o,h){Stat.drawCall++;var l=t.uv,c=t.bitmap.width,u=t.bitmap.height;this.save(),1!=h&&(this.globalAlpha*=h),r?(this.transform(r.a,r.b,r.c,r.d,r.tx+a,r.ty+o),this.drawImage(t.source,l[0]*c,l[1]*u,(l[2]-l[0])*c,(l[5]-l[3])*u,e,i,n,s)):this.drawImage(t.source,l[0]*c,l[1]*u,(l[2]-l[0])*c,(l[5]-l[3])*u,e+a,i+o,n,s),this.restore()},e.drawTexture2=function(t,e,i,n,s,r,a,o){"use strict";var h=o[0];if(h.loaded&&h.bitmap&&h.source){Stat.drawCall++;var l=1!==r;if(l){var c=this.globalAlpha;this.globalAlpha*=r}var u=h.uv,_=h.bitmap.width,d=h.bitmap.height;s?(this.save(),this.transform(s.a,s.b,s.c,s.d,s.tx+t,s.ty+e),this.drawImage(h.source,u[0]*_,u[1]*d,(u[2]-u[0])*_,(u[5]-u[3])*d,o[1]-i,o[2]-n,o[3],o[4]),this.restore()):this.drawImage(h.source,u[0]*_,u[1]*d,(u[2]-u[0])*_,(u[5]-u[3])*d,o[1]-i+t,o[2]-n+e,o[3],o[4]),l&&(this.globalAlpha=c)}},e.fillTexture=function(t,e,i,n,s,r,a,o){if(!o.pat){if(t.uv!=Texture.DEF_UV){var h=new HTMLCanvas("2D");h.getContext("2d"),h.size(t.width,t.height),h.context.drawTexture(t,0,0,t.width,t.height,0,0),t=new Texture(h)}o.pat=this.createPattern(t.bitmap.source,r)}var l=e,c=i,u=0,_=0;a&&(l+=a.x%t.width,c+=a.y%t.height,u-=a.x%t.width,_-=a.y%t.height),this.translate(l,c),this.fillRect(u,_,n,s,o.pat),this.translate(-l,-c)},e.flush=function(){return 0},e.fillWords=function(t,e,i,n,s){n&&(this.font=n),s&&(this.fillStyle=s);this.textBaseline="top",this.textAlign="left";for(var r=0,a=t.length;r<a;r++){var o=t[r];this.__fillText(o.char,o.x+e,o.y+i)}},e.fillBorderWords=function(t,e,i,n,s,r,a){n&&(this.font=n),s&&(this.fillStyle=s),this.textBaseline="top",this.lineWidth=a,this.textAlign="left",this.strokeStyle=r;for(var o=0,h=t.length;o<h;o++){var l=t[o];this.__strokeText(l.char,l.x+e,l.y+i),this.__fillText(l.char,l.x+e,l.y+i)}},e.destroy=function(){this.canvas.width=this.canvas.height=0},e.clear=function(){this.clearRect(0,0,this._canvas.width,this._canvas.height),this._repaint=!1},e.drawCurves=function(t,e,i){this.beginPath(),this.strokeStyle=i[3],this.lineWidth=i[4];var n=i[2];t+=i[0],e+=i[1],this.moveTo(t+n[0],e+n[1]);for(var s=2,r=n.length;s<r;)this.quadraticCurveTo(t+n[s++],e+n[s++],t+n[s++],e+n[s++]);this.stroke()},t.__init__=function(e){var i=laya.resource.Context.prototype;e=e||CanvasRenderingContext2D.prototype,e.__fillText=e.fillText,e.__fillRect=e.fillRect,e.__strokeText=e.strokeText,["drawTextures","fillWords","fillBorderWords","setIsMainContext","fillRect","strokeText","fillTexture","fillText","transformByMatrix","setTransformByMatrix","clipRect","drawTexture","drawTexture2","drawTextureWithTransform","flush","clear","destroy","drawCanvas","fillBorderText","drawCurves"].forEach(function(t){e[t]=i[t]});var n=HTMLCanvasElement.prototype;if(t.replaceCanvasGetSet(n,"width")&&t.replaceCanvasGetSet(n,"height")){var s=0,r=0;for(r=t.replaceKeys.length,s=0;s<r;s++)if(!t.replaceGetSet(e,t.replaceKeys[s]))return;e.__reset=i.replaceReset,e.__restore=e.restore,e.restore=i.replaceResotre}},t.replaceCanvasGetSet=function(t,e){var i=Object.getOwnPropertyDescriptor(t,e);if(!i||!i.configurable)return!1;var n,s={};for(n in i)"set"!=n&&(s[n]=i[n]);var r=i.set;return s.set=function(t){var e=this;r.call(e,t);var i=e.getContext("2d");i&&"__reset"in i&&i.__reset()},Object.defineProperty(t,e,s),!0},t.replaceGetSet=function(e,i){var n=Object.getOwnPropertyDescriptor(e,i);if(!n||!n.configurable)return!1;var s,r={};for(s in n)"set"!=s&&(r[s]=n[s]);var a=n.set,o="___"+i+"__";return t.newKeys.push(o),r.set=function(t){var e=this;t!=e[o]&&(e[o]=t,a.call(e,t))},Object.defineProperty(e,i,r),!0},t._default=new t,t.newKeys=[],__static(t,["replaceKeys",function(){return this.replaceKeys=["font","fillStyle","textBaseline"]}]),t}(),ResourceManager=function(){function t(){this._id=0,this._name=null,this._resources=null,this._memorySize=0,this._garbageCollectionRate=NaN,this._isOverflow=!1,this.autoRelease=!1,this.autoReleaseMaxSize=0,this._id=++t._uniqueIDCounter,this._name="Content Manager",t._isResourceManagersSorted=!1,this._memorySize=0,this._isOverflow=!1,this.autoRelease=!1,this.autoReleaseMaxSize=536870912,this._garbageCollectionRate=.2,t._resourceManagers.push(this),this._resources=[]}__class(t,"laya.resource.ResourceManager");var e=t.prototype;return Laya.imps(e,{"laya.resource.IDispose":!0}),e.getResourceByIndex=function(t){return this._resources[t]},e.getResourcesLength=function(){return this._resources.length},e.addResource=function(t){return t.resourceManager&&t.resourceManager.removeResource(t),this._resources.indexOf(t)===-1&&(t._resourceManager=this,this._resources.push(t),this.addSize(t.memorySize),!0)},e.removeResource=function(t){var e=this._resources.indexOf(t);return e!==-1&&(this._resources.splice(e,1),t._resourceManager=null,this._memorySize-=t.memorySize,!0)},e.unload=function(){for(var t=this._resources.slice(0,this._resources.length),e=0;e<t.length;e++){t[e].dispose()}t.length=0},e.setUniqueName=function(e){for(var i=!0,n=0;n<t._resourceManagers.length;n++)if(t._resourceManagers[n]._name===e&&t._resourceManagers[n]!==this)return void(i=!1);i?this.name!=e&&(this.name=e,t._isResourceManagersSorted=!1):this.setUniqueName(e.concat("-copy"))},e.dispose=function(){if(this===t._systemResourceManager)throw new Error("systemResourceManager不能被释放！");t._resourceManagers.splice(t._resourceManagers.indexOf(this),1),t._isResourceManagersSorted=!1;for(var e=this._resources.slice(0,this._resources.length),i=0;i<e.length;i++){var n=e[i];n.resourceManager.removeResource(n),n.dispose()}e.length=0},e.addSize=function(t){t&&(this.autoRelease&&t>0&&this._memorySize+t>this.autoReleaseMaxSize&&this.garbageCollection((1-this._garbageCollectionRate)*this.autoReleaseMaxSize),this._memorySize+=t)},e.garbageCollection=function(t){var e=this._resources;e=e.slice(),e.sort(function(t,e){if(!t||!e)throw new Error("a或b不能为空！");return t.released&&e.released?0:t.released?1:e.released?-1:t.lastUseFrameCount-e.lastUseFrameCount});for(var i=Stat.loopCount,n=0,s=e.length;n<s;n++){var r=e[n];if(!(i-r.lastUseFrameCount>1))return void(this._memorySize>=t&&(this._isOverflow=!0));if(r.releaseResource(),this._memorySize<t)return void(this._isOverflow=!1)}},__getset(0,e,"id",function(){return this._id}),__getset(0,e,"name",function(){return this._name},function(e){!e&&""===e||this._name===e||(this._name=e,t._isResourceManagersSorted=!1)}),__getset(0,e,"memorySize",function(){return this._memorySize}),__getset(1,t,"systemResourceManager",function(){return null===t._systemResourceManager&&(t._systemResourceManager=new t,t._systemResourceManager._name="System Resource Manager"),t._systemResourceManager}),__getset(1,t,"sortedResourceManagersByName",function(){return t._isResourceManagersSorted||(t._isResourceManagersSorted=!0,t._resourceManagers.sort(t.compareResourceManagersByName)),t._resourceManagers}),t.__init__=function(){t.currentResourceManager=t.systemResourceManager},t.getLoadedResourceManagerByIndex=function(e){return t._resourceManagers[e]},t.getLoadedResourceManagersCount=function(){return t._resourceManagers.length},t.recreateContentManagers=function(e){void 0===e&&(e=!1);for(var i=t.currentResourceManager,n=0;n<t._resourceManagers.length;n++){t.currentResourceManager=t._resourceManagers[n];for(var s=0;s<t.currentResourceManager._resources.length;s++)t.currentResourceManager._resources[s].releaseResource(e),t.currentResourceManager._resources[s].activeResource(e)}t.currentResourceManager=i},t.releaseContentManagers=function(e){void 0===e&&(e=!1);for(var i=t.currentResourceManager,n=0;n<t._resourceManagers.length;n++){t.currentResourceManager=t._resourceManagers[n];for(var s=0;s<t.currentResourceManager._resources.length;s++){var r=t.currentResourceManager._resources[s];!r.released&&r.releaseResource(e)}}t.currentResourceManager=i},t.compareResourceManagersByName=function(t,e){if(t==e)return 0;var i=t._name,n=e._name;if(null==i)return null==n?0:-1;if(null==n)return 1;var s=i.localeCompare(n);return 0!=s?s:(e.setUniqueName(n),n=e._name,i.localeCompare(n))},t._uniqueIDCounter=0,t._systemResourceManager=null,t._isResourceManagersSorted=!1,t._resourceManagers=[],t.currentResourceManager=null,t}(),System=function(){function System(){}return __class(System,"laya.system.System"),System.changeDefinition=function(name,classObj){Laya[name]=classObj;var str=name+"=classObj";eval(str)},System.__init__=function(){Render.isConchApp&&(conch.disableConchResManager(),conch.disableConchAutoRestoreLostedDevice())},System}(),Browser=function(){function t(){}return __class(t,"laya.utils.Browser"),__getset(1,t,"pixelRatio",function(){return t.__init__(),t.userAgent.indexOf("Mozilla/6.0(Linux; Android 6.0; HUAWEI NXT-AL10 Build/HUAWEINXT-AL10)")>-1?2:RunDriver.getPixelRatio()}),__getset(1,t,"height",function(){return t.__init__(),(Laya.stage&&Laya.stage.canvasRotation?t.clientWidth:t.clientHeight)*t.pixelRatio}),__getset(1,t,"clientWidth",function(){return t.__init__(),t.window.innerWidth||t.document.body.clientWidth}),__getset(1,t,"window",function(){return t.__init__(),t._window}),__getset(1,t,"clientHeight",function(){return t.__init__(),t.window.innerHeight||t.document.body.clientHeight||t.document.documentElement.clientHeight}),__getset(1,t,"width",function(){return t.__init__(),
(Laya.stage&&Laya.stage.canvasRotation?t.clientHeight:t.clientWidth)*t.pixelRatio}),__getset(1,t,"container",function(){return t.__init__(),t._container||(t._container=t.createElement("div"),t._container.id="layaContainer",t.document.body.appendChild(t._container)),t._container},function(e){t._container=e}),__getset(1,t,"document",function(){return t.__init__(),t._document}),t.__init__=function(){if(!t._window){t._window=RunDriver.getWindow(),t._document=t.window.document,t._window.addEventListener("message",function(t){laya.utils.Browser._onMessage(t)},!1),t.document.__createElement=t.document.createElement,window.requestAnimationFrame=window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||window.oRequestAnimationFrame||window.msRequestAnimationFrame||function(t){return window.setTimeout(t,1e3/60)};var e=window.document.body.style;e.margin=0,e.overflow="hidden";for(var i=window.document.getElementsByTagName("meta"),n=0,s=!1,r="width=device-width,initial-scale=1.0,minimum-scale=1.0,maximum-scale=1.0,user-scalable=no";n<i.length;){var a=i[n];if("viewport"==a.name){a.content=r,s=!0;break}n++}s||(a=document.createElement("meta"),a.name="viewport",a.content=r,document.getElementsByTagName("head")[0].appendChild(a)),t.userAgent=t.window.navigator.userAgent,t.u=t.userAgent,t.onIOS=!!t.u.match(/\(i[^;]+;(U;)? CPU.+Mac OS X/),t.onMobile=t.u.indexOf("Mobile")>-1,t.onIPhone=t.u.indexOf("iPhone")>-1,t.onIPad=t.u.indexOf("iPad")>-1,t.onAndriod=t.u.indexOf("Android")>-1||t.u.indexOf("Adr")>-1,t.onWP=t.u.indexOf("Windows Phone")>-1,t.onQQBrowser=t.u.indexOf("QQBrowser")>-1,t.onMQQBrowser=t.u.indexOf("MQQBrowser")>-1,t.onIE=!!t.window.ActiveXObject||"ActiveXObject"in t.window,t.onWeiXin=t.u.indexOf("MicroMessenger")>-1,t.onPC=!t.onMobile,t.onSafari=!!t.u.match(/Version\/\d+\.\d\x20Mobile\/\S+\x20Safari/),t.httpProtocol="http:"==t.window.location.protocol,t.webAudioEnabled=!!(t.window.AudioContext||t.window.webkitAudioContext||t.window.mozAudioContext),t.soundType=t.webAudioEnabled?"WEBAUDIOSOUND":"AUDIOSOUND",Sound=t.webAudioEnabled?WebAudioSound:AudioSound,t.webAudioEnabled&&WebAudioSound.initWebAudio(),t.enableTouch="ontouchstart"in window||window.DocumentTouch&&document instanceof DocumentTouch,window.focus(),SoundManager._soundClass=Sound,Render._mainCanvas=Render._mainCanvas||HTMLCanvas.create("2D"),t.canvas||(t.canvas=HTMLCanvas.create("2D"),t.context=t.canvas.getContext("2d"))}},t._onMessage=function(e){if(e.data&&"size"==e.data.name){if(t.window.innerWidth=e.data.width,t.window.innerHeight=e.data.height,t.window.__innerHeight=e.data.clientHeight,!t.document.createEvent)return void console.warn("no document.createEvent");var i=t.document.createEvent("HTMLEvents");return i.initEvent("resize",!1,!1),void t.window.dispatchEvent(i)}},t.createElement=function(e){return t.__init__(),t.document.__createElement(e)},t.getElementById=function(e){return t.__init__(),t.document.getElementById(e)},t.removeElement=function(t){t&&t.parentNode&&t.parentNode.removeChild(t)},t.now=function(){return RunDriver.now()},t._window=null,t._document=null,t._container=null,t.userAgent=null,t.u=null,t.onIOS=!1,t.onMobile=!1,t.onIPhone=!1,t.onIPad=!1,t.onAndriod=!1,t.onAndroid=!1,t.onWP=!1,t.onQQBrowser=!1,t.onMQQBrowser=!1,t.onSafari=!1,t.onIE=!1,t.onWeiXin=!1,t.onPC=!1,t.httpProtocol=!1,t.webAudioEnabled=!1,t.soundType=null,t.enableTouch=!1,t.canvas=null,t.context=null,t.__init$=function(){},t}(),Byte=function(){function t(t){this._xd_=!0,this._allocated_=8,this._pos_=0,this._length=0,t?(this._u8d_=new Uint8Array(t),this._d_=new DataView(this._u8d_.buffer),this._length=this._d_.byteLength):this.___resizeBuffer(this._allocated_)}__class(t,"laya.utils.Byte");var e=t.prototype;return e.___resizeBuffer=function(t){try{var e=new Uint8Array(t);null!=this._u8d_&&(this._u8d_.length<=t?e.set(this._u8d_):e.set(this._u8d_.subarray(0,t))),this._u8d_=e,this._d_=new DataView(e.buffer)}catch(e){throw"___resizeBuffer err:"+t}},e.getString=function(){return this.rUTF(this.getUint16())},e.getFloat32Array=function(t,e){var i=t+e;i=i>this._length?this._length:i;var n=new Float32Array(this._d_.buffer.slice(t,i));return this._pos_=i,n},e.getUint8Array=function(t,e){var i=t+e;i=i>this._length?this._length:i;var n=new Uint8Array(this._d_.buffer.slice(t,i));return this._pos_=i,n},e.getInt16Array=function(t,e){var i=t+e;i=i>this._length?this._length:i;var n=new Int16Array(this._d_.buffer.slice(t,i));return this._pos_=i,n},e.getFloat32=function(){if(this._pos_+4>this._length)throw"getFloat32 error - Out of bounds";var t=this._d_.getFloat32(this._pos_,this._xd_);return this._pos_+=4,t},e.getFloat64=function(){if(this._pos_+8>this._length)throw"getFloat64 error - Out of bounds";var t=this._d_.getFloat64(this._pos_,this._xd_);return this._pos_+=8,t},e.writeFloat32=function(t){this.ensureWrite(this._pos_+4),this._d_.setFloat32(this._pos_,t,this._xd_),this._pos_+=4},e.writeFloat64=function(t){this.ensureWrite(this._pos_+8),this._d_.setFloat64(this._pos_,t,this._xd_),this._pos_+=8},e.getInt32=function(){if(this._pos_+4>this._length)throw"getInt32 error - Out of bounds";var t=this._d_.getInt32(this._pos_,this._xd_);return this._pos_+=4,t},e.getUint32=function(){if(this._pos_+4>this._length)throw"getUint32 error - Out of bounds";var t=this._d_.getUint32(this._pos_,this._xd_);return this._pos_+=4,t},e.writeInt32=function(t){this.ensureWrite(this._pos_+4),this._d_.setInt32(this._pos_,t,this._xd_),this._pos_+=4},e.writeUint32=function(t){this.ensureWrite(this._pos_+4),this._d_.setUint32(this._pos_,t,this._xd_),this._pos_+=4},e.getInt16=function(){if(this._pos_+2>this._length)throw"getInt16 error - Out of bounds";var t=this._d_.getInt16(this._pos_,this._xd_);return this._pos_+=2,t},e.getUint16=function(){if(this._pos_+2>this._length)throw"getUint16 error - Out of bounds";var t=this._d_.getUint16(this._pos_,this._xd_);return this._pos_+=2,t},e.writeUint16=function(t){this.ensureWrite(this._pos_+2),this._d_.setUint16(this._pos_,t,this._xd_),this._pos_+=2},e.writeInt16=function(t){this.ensureWrite(this._pos_+2),this._d_.setInt16(this._pos_,t,this._xd_),this._pos_+=2},e.getUint8=function(){if(this._pos_+1>this._length)throw"getUint8 error - Out of bounds";return this._d_.getUint8(this._pos_++)},e.writeUint8=function(t){this.ensureWrite(this._pos_+1),this._d_.setUint8(this._pos_,t),this._pos_++},e._getUInt8=function(t){return this._d_.getUint8(t)},e._getUint16=function(t){return this._d_.getUint16(t,this._xd_)},e._getMatrix=function(){return new Matrix(this.getFloat32(),this.getFloat32(),this.getFloat32(),this.getFloat32(),this.getFloat32(),this.getFloat32())},e.rUTF=function(t){for(var e="",i=this._pos_+t,n=0,s=0,r=0,a=String.fromCharCode,o=this._u8d_,h=0;this._pos_<i;)n=o[this._pos_++],n<128?0!=n&&(e+=a(n)):n<224?e+=a((63&n)<<6|127&o[this._pos_++]):n<240?(s=o[this._pos_++],e+=a((31&n)<<12|(127&s)<<6|127&o[this._pos_++])):(s=o[this._pos_++],r=o[this._pos_++],e+=a((15&n)<<18|(127&s)<<12|r<<6&127|127&o[this._pos_++])),h++;return e},e.getCustomString=function(t){for(var e="",i=0,n=0,s=0,r=String.fromCharCode,a=this._u8d_;t>0;)if((n=a[this._pos_])<128)e+=r(n),this._pos_++,t--;else for(i=n-128,this._pos_++,t-=i;i>0;)n=a[this._pos_++],s=a[this._pos_++],e+=r(s<<8|n),i--;return e},e.clear=function(){this._pos_=0,this.length=0},e.__getBuffer=function(){return this._d_.buffer},e.writeUTFBytes=function(t){t+="";for(var e=0,i=t.length;e<i;e++){var n=t.charCodeAt(e);n<=127?this.writeByte(n):n<=2047?(this.ensureWrite(this._pos_+2),this._u8d_.set([192|n>>6,128|63&n],this._pos_),this._pos_+=2):n<=65535?(this.ensureWrite(this._pos_+3),this._u8d_.set([224|n>>12,128|n>>6&63,128|63&n],this._pos_),this._pos_+=3):(this.ensureWrite(this._pos_+4),this._u8d_.set([240|n>>18,128|n>>12&63,128|n>>6&63,128|63&n],this._pos_),this._pos_+=4)}},e.writeUTFString=function(t){var e=this.pos;this.writeUint16(1),this.writeUTFBytes(t);var i=this.pos-e-2;if(i>=65536)throw"writeUTFString byte len more than 65536";this._d_.setUint16(e,i,this._xd_)},e.readUTFString=function(){return this.readUTFBytes(this.getUint16())},e.getUTFString=function(){return this.readUTFString()},e.readUTFBytes=function(t){if(void 0===t&&(t=-1),0==t)return"";var e=this.bytesAvailable;if(t>e)throw"readUTFBytes error - Out of bounds";return t=t>0?t:e,this.rUTF(t)},e.getUTFBytes=function(t){return void 0===t&&(t=-1),this.readUTFBytes(t)},e.writeByte=function(t){this.ensureWrite(this._pos_+1),this._d_.setInt8(this._pos_,t),this._pos_+=1},e.readByte=function(){if(this._pos_+1>this._length)throw"readByte error - Out of bounds";return this._d_.getInt8(this._pos_++)},e.getByte=function(){return this.readByte()},e.ensureWrite=function(t){this._length<t&&(this._length=t),this._allocated_<t&&(this.length=t)},e.writeArrayBuffer=function(t,e,i){if(void 0===e&&(e=0),void 0===i&&(i=0),e<0||i<0)throw"writeArrayBuffer error - Out of bounds";0==i&&(i=t.byteLength-e),this.ensureWrite(this._pos_+i);var n=new Uint8Array(t);this._u8d_.set(n.subarray(e,e+i),this._pos_),this._pos_+=i},__getset(0,e,"buffer",function(){var t=this._d_.buffer;return t.byteLength==this.length?t:t.slice(0,this.length)}),__getset(0,e,"endian",function(){return this._xd_?"littleEndian":"bigEndian"},function(t){this._xd_="littleEndian"==t}),__getset(0,e,"length",function(){return this._length},function(t){this._allocated_<t?this.___resizeBuffer(this._allocated_=Math.floor(Math.max(t,2*this._allocated_))):this._allocated_>t&&this.___resizeBuffer(this._allocated_=t),this._length=t}),__getset(0,e,"pos",function(){return this._pos_},function(t){this._pos_=t}),__getset(0,e,"bytesAvailable",function(){return this._length-this._pos_}),t.getSystemEndian=function(){if(!t._sysEndian){var e=new ArrayBuffer(2);new DataView(e).setInt16(0,256,!0),t._sysEndian=256===new Int16Array(e)[0]?"littleEndian":"bigEndian"}return t._sysEndian},t.BIG_ENDIAN="bigEndian",t.LITTLE_ENDIAN="littleEndian",t._sysEndian=null,t}(),CacheManger=function(){function t(){}return __class(t,"laya.utils.CacheManger"),t.regCacheByFunction=function(e,i){t.unRegCacheByFunction(e,i);var n;n={tryDispose:e,getCacheList:i},t._cacheList.push(n)},t.unRegCacheByFunction=function(e,i){var n=0,s=0;for(s=t._cacheList.length,n=0;n<s;n++)if(t._cacheList[n].tryDispose==e&&t._cacheList[n].getCacheList==i)return void t._cacheList.splice(n,1)},t.forceDispose=function(){var e=0,i=t._cacheList.length;for(e=0;e<i;e++)t._cacheList[e].tryDispose(!0)},t.beginCheck=function(e){void 0===e&&(e=15e3),Laya.timer.loop(e,null,t._checkLoop)},t.stopCheck=function(){Laya.timer.clear(null,t._checkLoop)},t._checkLoop=function(){var e=t._cacheList;if(!(e.length<1)){var i=Browser.now(),n=0,s=0;for(s=n=e.length;n>0&&(t._index++,t._index=t._index%s,e[t._index].tryDispose(!1),!(Browser.now()-i>t.loopTimeLimit));)n--}},t.loopTimeLimit=2,t._cacheList=[],t._index=0,t}(),ClassUtils=function(){function t(){}return __class(t,"laya.utils.ClassUtils"),t.regClass=function(e,i){t._classMap[e]=i},t.getRegClass=function(e){return t._classMap[e]},t.getInstance=function(e){var i=t.getClass(e);return i?new i:(console.warn("[error] Undefined class:",e),null)},t.createByJson=function(e,i,n,s,r){"string"==typeof e&&(e=JSON.parse(e));var a=e.props;if(!i&&!(i=r?r.runWith(e):t.getInstance(a.runtime||e.type)))return null;var o=e.child;if(o)for(var h=0,l=o.length;h<l;h++){var c=o[h];if("render"!==c.props.name&&"render"!==c.props.renderType||!i._$set_itemRender)if("Graphic"==c.type)t.addGraphicsToSprite(c,i);else if(t.isDrawType(c.type))t.addGraphicToSprite(c,i,!0);else{var u=t.createByJson(c,null,n,s,r);"Script"==c.type?u.hasOwnProperty("owner")?u.owner=i:u.hasOwnProperty("target")&&(u.target=i):"mask"==c.props.renderType?i.mask=u:i.addChild(u)}else i.itemRender=c}if(a)for(var _ in a){var d=a[_];"var"===_&&n?n[d]=i:d instanceof Array&&"function"==typeof i[_]?i[_].apply(i,d):i[_]=d}return s&&e.customProps&&s.runWith([i,e]),i.created&&i.created(),i},t.addGraphicsToSprite=function(e,i){var n;if((n=e.child)&&!(n.length<1)){var s;s=t._getGraphicsFromSprite(e,i);var r=0,a=0;e.props&&(r=t._getObjVar(e.props,"x",0),a=t._getObjVar(e.props,"y",0)),0!=r&&0!=a&&s.translate(r,a);var o=0,h=0;for(h=n.length,o=0;o<h;o++)t._addGraphicToGraphics(n[o],s);0!=r&&0!=a&&s.translate(-r,-a)}},t.addGraphicToSprite=function(e,i,n){void 0===n&&(n=!1);var s;s=n?t._getGraphicsFromSprite(e,i):i.graphics,t._addGraphicToGraphics(e,s)},t._getGraphicsFromSprite=function(t,e){var i;if(!t||!t.props)return e.graphics;var n;switch(n=t.props.renderType){case"hit":case"unHit":var s;e.hitArea||(e.hitArea=new HitArea),s=e.hitArea,s[n]||(s[n]=new Graphics),i=s[n]}return i||(i=e.graphics),i},t._getTransformData=function(e){var i;(e.hasOwnProperty("pivotX")||e.hasOwnProperty("pivotY"))&&(i=i||new Matrix,i.translate(-t._getObjVar(e,"pivotX",0),-t._getObjVar(e,"pivotY",0)));var n=t._getObjVar(e,"scaleX",1),s=t._getObjVar(e,"scaleY",1),r=t._getObjVar(e,"rotation",0);t._getObjVar(e,"skewX",0),t._getObjVar(e,"skewY",0);return 1==n&&1==s&&0==r||(i=i||new Matrix,i.scale(n,s),i.rotate(.0174532922222222*r)),i},t._addGraphicToGraphics=function(e,i){var n;if(n=e.props){var s;if(s=t.DrawTypeDic[e.type]){var r;r=i;var a,o=t._getParams(n,s[1],s[2],s[3]);a=t._tM,(a||1!=t._alpha)&&(r.save(),a&&r.transform(a),1!=t._alpha&&r.alpha(t._alpha)),r[s[0]].apply(r,o),(a||1!=t._alpha)&&r.restore()}}},t._adptLineData=function(t){return t[2]=parseFloat(t[0])+parseFloat(t[2]),t[3]=parseFloat(t[1])+parseFloat(t[3]),t},t._adptTextureData=function(t){return t[0]=Loader.getRes(t[0]),t},t._adptLinesData=function(e){return e[2]=t._getPointListByStr(e[2]),e},t.isDrawType=function(e){return"Image"!=e&&t.DrawTypeDic.hasOwnProperty(e)},t._getParams=function(e,i,n,s){void 0===n&&(n=0);var r;r=t._temParam,r.length=i.length;var a=0,o=0;for(o=i.length,a=0;a<o;a++)r[a]=t._getObjVar(e,i[a][0],i[a][1]);t._alpha=t._getObjVar(e,"alpha",1);var h;return h=t._getTransformData(e),h?(n||(n=0),h.translate(r[n],r[n+1]),r[n]=r[n+1]=0,t._tM=h):t._tM=null,s&&t[s]&&(r=t[s](r)),r},t._getPointListByStr=function(t){var e;e=t.split(",");var i=0,n=0;for(n=e.length,i=0;i<n;i++)e[i]=parseFloat(e[i]);return e},t._getObjVar=function(t,e,i){return t.hasOwnProperty(e)?t[e]:i},t._temParam=[],t._classMap={Sprite:"laya.display.Sprite",Text:"laya.display.Text",Animation:"laya.display.Animation",Skeleton:"laya.ani.bone.Skeleton",Particle2D:"laya.particle.Particle2D",div:"laya.html.dom.HTMLDivElement",p:"laya.html.dom.HTMLElement",img:"laya.html.dom.HTMLImageElement",span:"laya.html.dom.HTMLElement",br:"laya.html.dom.HTMLBrElement",style:"laya.html.dom.HTMLStyleElement",font:"laya.html.dom.HTMLElement",a:"laya.html.dom.HTMLElement","#text":"laya.html.dom.HTMLElement"},t.getClass=function(e){var i=t._classMap[e]||e;return"string"==typeof i?Laya.__classmap[i]:i},t._tM=null,t._alpha=NaN,__static(t,["DrawTypeDic",function(){return this.DrawTypeDic={Rect:["drawRect",[["x",0],["y",0],["width",0],["height",0],["fillColor",null],["lineColor",null],["lineWidth",1]]],Circle:["drawCircle",[["x",0],["y",0],["radius",0],["fillColor",null],["lineColor",null],["lineWidth",1]]],Pie:["drawPie",[["x",0],["y",0],["radius",0],["startAngle",0],["endAngle",0],["fillColor",null],["lineColor",null],["lineWidth",1]]],Image:["drawTexture",[["x",0],["y",0],["width",0],["height",0]]],Texture:["drawTexture",[["skin",null],["x",0],["y",0],["width",0],["height",0]],1,"_adptTextureData"],FillTexture:["fillTexture",[["skin",null],["x",0],["y",0],["width",0],["height",0],["repeat",null]],1,"_adptTextureData"],FillText:["fillText",[["text",""],["x",0],["y",0],["font",null],["color",null],["textAlign",null]],1],Line:["drawLine",[["x",0],["y",0],["toX",0],["toY",0],["lineColor",null],["lineWidth",0]],0,"_adptLineData"],Lines:["drawLines",[["x",0],["y",0],["points",""],["lineColor",null],["lineWidth",0]],0,"_adptLinesData"],Curves:["drawCurves",[["x",0],["y",0],["points",""],["lineColor",null],["lineWidth",0]],0,"_adptLinesData"],Poly:["drawPoly",[["x",0],["y",0],["points",""],["fillColor",null],["lineColor",null],["lineWidth",1]],0,"_adptLinesData"]}}]),t}(),Color=function(){function t(e){if(this._color=[],"string"==typeof e){this.strColor=e,null===e&&(e="#000000"),"#"==e.charAt(0)&&(e=e.substr(1));var i=e.length;if(3==i||4==i){for(var n="",s=0;s<i;s++)n+=e[s]+e[s];e=n}var r=this.numColor=parseInt(e,16);if(8==e.length)return void(this._color=[parseInt(e.substr(0,2),16)/255,((16711680&r)>>16)/255,((65280&r)>>8)/255,(255&r)/255])}else r=this.numColor=e,this.strColor=Utils.toHexColor(r);this._color=[((16711680&r)>>16)/255,((65280&r)>>8)/255,(255&r)/255,1],this._color.__id=++t._COLODID}return __class(t,"laya.utils.Color"),t._initDefault=function(){t._DEFAULT={};for(var e in t._COLOR_MAP)t._SAVE[e]=t._DEFAULT[e]=new t(t._COLOR_MAP[e]);return t._DEFAULT},t._initSaveMap=function(){t._SAVE_SIZE=0,t._SAVE={};for(var e in t._DEFAULT)t._SAVE[e]=t._DEFAULT[e]},t.create=function(e){var i=t._SAVE[e+""];return null!=i?i:(t._SAVE_SIZE<1e3||t._initSaveMap(),t._SAVE[e+""]=new t(e))},t._SAVE={},t._SAVE_SIZE=0,t._COLOR_MAP={white:"#FFFFFF",red:"#FF0000",green:"#00FF00",blue:"#0000FF",black:"#000000",yellow:"#FFFF00",gray:"#AAAAAA"},t._DEFAULT=t._initDefault(),t._COLODID=1,t}(),Dictionary=function(){function t(){this._values=[],this._keys=[]}__class(t,"laya.utils.Dictionary");var e=t.prototype;return e.set=function(t,e){var i=this.indexOf(t);if(i>=0)return void(this._values[i]=e);this._keys.push(t),this._values.push(e)},e.indexOf=function(t){var e=this._keys.indexOf(t);return e>=0?e:(t="string"==typeof t?Number(t):"number"==typeof t?t.toString():t,this._keys.indexOf(t))},e.get=function(t){var e=this.indexOf(t);return e<0?null:this._values[e]},e.remove=function(t){var e=this.indexOf(t);return e>=0&&(this._keys.splice(e,1),this._values.splice(e,1),!0)},e.clear=function(){this._values.length=0,this._keys.length=0},__getset(0,e,"values",function(){return this._values}),__getset(0,e,"keys",function(){return this._keys}),t}(),Dragging=function(){function t(){this.ratio=.92,this.maxOffset=60,this._dragging=!1,this._clickOnly=!0}__class(t,"laya.utils.Dragging");var e=t.prototype;return e.start=function(t,e,i,n,s,r,a,o){void 0===o&&(o=.92),this.clearTimer(),this.target=t,this.area=e,this.hasInertia=i,this.elasticDistance=e?n:0,this.elasticBackTime=s,this.data=r,this._disableMouseEvent=a,this.ratio=o,1!=t.globalScaleX||1!=t.globalScaleY?this._parent=t.parent:this._parent=Laya.stage,this._clickOnly=!0,this._dragging=!0,this._elasticRateX=this._elasticRateY=1,this._lastX=this._parent.mouseX,this._lastY=this._parent.mouseY,Laya.stage.on("mouseup",this,this.onStageMouseUp),Laya.stage.on("mouseout",this,this.onStageMouseUp),Laya.timer.frameLoop(1,this,this.loop)},e.clearTimer=function(){Laya.timer.clear(this,this.loop),Laya.timer.clear(this,this.tweenMove),this._tween&&(this._tween.recover(),this._tween=null)},e.stop=function(){this._dragging&&(MouseManager.instance.disableMouseEvent=!1,Laya.stage.off("mouseup",this,this.onStageMouseUp),Laya.stage.off("mouseout",this,this.onStageMouseUp),this._dragging=!1,this.target&&this.area&&this.backToArea(),this.clear())},e.loop=function(){var t=this._parent.getMousePoint(),e=t.x,i=t.y,n=e-this._lastX,s=i-this._lastY;if(this._clickOnly){if(!(Math.abs(n*Laya.stage._canvasTransform.getScaleX())>1||Math.abs(s*Laya.stage._canvasTransform.getScaleY())>1))return;this._clickOnly=!1,this._offsets||(this._offsets=[]),this._offsets.length=0,this.target.event("dragstart",this.data),MouseManager.instance.disableMouseEvent=this._disableMouseEvent,this.target._set$P("$_MOUSEDOWN",!1)}else this._offsets.push(n,s);0===n&&0===s||(this._lastX=e,this._lastY=i,this.target.x+=n*this._elasticRateX,this.target.y+=s*this._elasticRateY,this.area&&this.checkArea(),this.target.event("dragmove",this.data))},e.checkArea=function(){if(this.elasticDistance<=0)this.backToArea();else{if(this.target.x<this.area.x)var t=this.area.x-this.target.x;else t=this.target.x>this.area.x+this.area.width?this.target.x-this.area.x-this.area.width:0;if(this._elasticRateX=Math.max(0,1-t/this.elasticDistance),this.target.y<this.area.y)var e=this.area.y-this.target.y;else e=this.target.y>this.area.y+this.area.height?this.target.y-this.area.y-this.area.height:0;this._elasticRateY=Math.max(0,1-e/this.elasticDistance)}},e.backToArea=function(){this.target.x=Math.min(Math.max(this.target.x,this.area.x),this.area.x+this.area.width),this.target.y=Math.min(Math.max(this.target.y,this.area.y),this.area.y+this.area.height)},e.onStageMouseUp=function(t){if(MouseManager.instance.disableMouseEvent=!1,Laya.stage.off("mouseup",this,this.onStageMouseUp),Laya.stage.off("mouseout",this,this.onStageMouseUp),Laya.timer.clear(this,this.loop),!this._clickOnly&&this.target)if(this.hasInertia){this._offsets.length<1&&this._offsets.push(this._parent.mouseX-this._lastX,this._parent.mouseY-this._lastY),this._offsetX=this._offsetY=0;for(var e=this._offsets.length,i=Math.min(e,6),n=this._offsets.length-i,s=e-1;s>n;s--)this._offsetY+=this._offsets[s--],this._offsetX+=this._offsets[s];this._offsetX=this._offsetX/i*2,this._offsetY=this._offsetY/i*2,Math.abs(this._offsetX)>this.maxOffset&&(this._offsetX=this._offsetX>0?this.maxOffset:-this.maxOffset),Math.abs(this._offsetY)>this.maxOffset&&(this._offsetY=this._offsetY>0?this.maxOffset:-this.maxOffset),Laya.timer.frameLoop(1,this,this.tweenMove)}else this.elasticDistance>0?this.checkElastic():this.clear()},e.checkElastic=function(){var t=NaN,e=NaN;if(this.target.x<this.area.x?t=this.area.x:this.target.x>this.area.x+this.area.width&&(t=this.area.x+this.area.width),this.target.y<this.area.y?e=this.area.y:this.target.y>this.area.y+this.area.height&&(e=this.area.y+this.area.height),isNaN(t)&&isNaN(e))this.clear();else{var i={};isNaN(t)||(i.x=t),isNaN(e)||(i.y=e),this._tween=Tween.to(this.target,i,this.elasticBackTime,Ease.sineOut,Handler.create(this,this.clear),0,!1,!1)}},e.tweenMove=function(){this._offsetX*=this.ratio*this._elasticRateX,this._offsetY*=this.ratio*this._elasticRateY,this.target.x+=this._offsetX,this.target.y+=this._offsetY,this.area&&this.checkArea(),this.target.event("dragmove",this.data),(Math.abs(this._offsetX)<1&&Math.abs(this._offsetY)<1||this._elasticRateX<.5||this._elasticRateY<.5)&&(Laya.timer.clear(this,this.tweenMove),this.elasticDistance>0?this.checkElastic():this.clear())},e.clear=function(){if(this.target){this.clearTimer();var t=this.target;this.target=null,this._parent=null,t.event("dragend",this.data)}},t}(),Ease=function(){function t(){}return __class(t,"laya.utils.Ease"),t.linearNone=function(t,e,i,n){return i*t/n+e},t.linearIn=function(t,e,i,n){return i*t/n+e},t.linearInOut=function(t,e,i,n){return i*t/n+e},t.linearOut=function(t,e,i,n){return i*t/n+e},t.bounceIn=function(e,i,n,s){return n-t.bounceOut(s-e,0,n,s)+i},t.bounceInOut=function(e,i,n,s){return e<.5*s?.5*t.bounceIn(2*e,0,n,s)+i:.5*t.bounceOut(2*e-s,0,n,s)+.5*n+i},t.bounceOut=function(t,e,i,n){return(t/=n)<1/2.75?i*(7.5625*t*t)+e:t<2/2.75?i*(7.5625*(t-=1.5/2.75)*t+.75)+e:t<2.5/2.75?i*(7.5625*(t-=2.25/2.75)*t+.9375)+e:i*(7.5625*(t-=2.625/2.75)*t+.984375)+e},t.backIn=function(t,e,i,n,s){return void 0===s&&(s=1.70158),i*(t/=n)*t*((s+1)*t-s)+e},t.backInOut=function(t,e,i,n,s){return void 0===s&&(s=1.70158),(t/=.5*n)<1?.5*i*(t*t*((1+(s*=1.525))*t-s))+e:i/2*((t-=2)*t*((1+(s*=1.525))*t+s)+2)+e},t.backOut=function(t,e,i,n,s){return void 0===s&&(s=1.70158),i*((t=t/n-1)*t*((s+1)*t+s)+1)+e},t.elasticIn=function(e,i,n,s,r,a){void 0===r&&(r=0),void 0===a&&(a=0);var o;return 0==e?i:1==(e/=s)?i+n:(a||(a=.3*s),!r||n>0&&r<n||n<0&&r<-n?(r=n,o=a/4):o=a/t.PI2*Math.asin(n/r),-(r*Math.pow(2,10*(e-=1))*Math.sin((e*s-o)*t.PI2/a))+i)},t.elasticInOut=function(e,i,n,s,r,a){void 0===r&&(r=0),void 0===a&&(a=0);var o;return 0==e?i:2==(e/=.5*s)?i+n:(a||(a=s*(.3*1.5)),!r||n>0&&r<n||n<0&&r<-n?(r=n,o=a/4):o=a/t.PI2*Math.asin(n/r),e<1?-.5*(r*Math.pow(2,10*(e-=1))*Math.sin((e*s-o)*t.PI2/a))+i:r*Math.pow(2,-10*(e-=1))*Math.sin((e*s-o)*t.PI2/a)*.5+n+i)},t.elasticOut=function(e,i,n,s,r,a){void 0===r&&(r=0),void 0===a&&(a=0);var o;return 0==e?i:1==(e/=s)?i+n:(a||(a=.3*s),!r||n>0&&r<n||n<0&&r<-n?(r=n,o=a/4):o=a/t.PI2*Math.asin(n/r),r*Math.pow(2,-10*e)*Math.sin((e*s-o)*t.PI2/a)+n+i)},t.strongIn=function(t,e,i,n){return i*(t/=n)*t*t*t*t+e},t.strongInOut=function(t,e,i,n){return(t/=.5*n)<1?.5*i*t*t*t*t*t+e:.5*i*((t-=2)*t*t*t*t+2)+e},t.strongOut=function(t,e,i,n){return i*((t=t/n-1)*t*t*t*t+1)+e},t.sineInOut=function(t,e,i,n){return.5*-i*(Math.cos(Math.PI*t/n)-1)+e},t.sineIn=function(e,i,n,s){return-n*Math.cos(e/s*t.HALF_PI)+n+i},t.sineOut=function(e,i,n,s){return n*Math.sin(e/s*t.HALF_PI)+i},t.quintIn=function(t,e,i,n){return i*(t/=n)*t*t*t*t+e},t.quintInOut=function(t,e,i,n){return(t/=.5*n)<1?.5*i*t*t*t*t*t+e:.5*i*((t-=2)*t*t*t*t+2)+e},t.quintOut=function(t,e,i,n){return i*((t=t/n-1)*t*t*t*t+1)+e},t.quartIn=function(t,e,i,n){return i*(t/=n)*t*t*t+e},t.quartInOut=function(t,e,i,n){return(t/=.5*n)<1?.5*i*t*t*t*t+e:.5*-i*((t-=2)*t*t*t-2)+e},t.quartOut=function(t,e,i,n){return-i*((t=t/n-1)*t*t*t-1)+e},t.cubicIn=function(t,e,i,n){return i*(t/=n)*t*t+e},t.cubicInOut=function(t,e,i,n){return(t/=.5*n)<1?.5*i*t*t*t+e:.5*i*((t-=2)*t*t+2)+e},t.cubicOut=function(t,e,i,n){return i*((t=t/n-1)*t*t+1)+e},t.quadIn=function(t,e,i,n){return i*(t/=n)*t+e},t.quadInOut=function(t,e,i,n){return(t/=.5*n)<1?.5*i*t*t+e:.5*-i*(--t*(t-2)-1)+e},t.quadOut=function(t,e,i,n){return-i*(t/=n)*(t-2)+e},t.expoIn=function(t,e,i,n){return 0==t?e:i*Math.pow(2,10*(t/n-1))+e-.001*i},t.expoInOut=function(t,e,i,n){return 0==t?e:t==n?e+i:(t/=.5*n)<1?.5*i*Math.pow(2,10*(t-1))+e:.5*i*(2-Math.pow(2,-10*--t))+e},t.expoOut=function(t,e,i,n){return t==n?e+i:i*(1-Math.pow(2,-10*t/n))+e},t.circIn=function(t,e,i,n){return-i*(Math.sqrt(1-(t/=n)*t)-1)+e},t.circInOut=function(t,e,i,n){return(t/=.5*n)<1?.5*-i*(Math.sqrt(1-t*t)-1)+e:.5*i*(Math.sqrt(1-(t-=2)*t)+1)+e},t.circOut=function(t,e,i,n){return i*Math.sqrt(1-(t=t/n-1)*t)+e},t.HALF_PI=.5*Math.PI,t.PI2=2*Math.PI,t}(),HitArea=function(){function t(){this._hit=null,this._unHit=null}__class(t,"laya.utils.HitArea");var e=t.prototype;return e.isHit=function(e,i){return!!t.isHitGraphic(e,i,this.hit)&&!t.isHitGraphic(e,i,this.unHit)},e.contains=function(t,e){return this.isHit(t,e)},__getset(0,e,"hit",function(){return this._hit||(this._hit=new Graphics),this._hit},function(t){this._hit=t}),__getset(0,e,"unHit",function(){return this._unHit||(this._unHit=new Graphics),this._unHit},function(t){this._unHit=t}),t.isHitGraphic=function(e,i,n){if(!n)return!1;var s;if(s=n.cmds,!s&&n._one&&(s=t._cmds,s.length=1,s[0]=n._one),!s)return!1;var r=0,a=0;a=s.length;var o;for(r=0;r<a;r++)if(o=s[r]){var h=Render._context;switch(o.callee){case h._translate:case 6:e-=o[0],i-=o[1]}if(t.isHitCmd(e,i,o))return!0}return!1},t.isHitCmd=function(e,i,n){if(!n)return!1;var s=Render._context,r=!1;switch(n.callee){case s._drawRect:case 13:t._rec.setTo(n[0],n[1],n[2],n[3]),r=t._rec.contains(e,i);break;case s._drawCircle:case s._fillCircle:case 14:var a=NaN;e-=n[0],i-=n[1],a=e*e+i*i,r=a<n[2]*n[2];break;case s._drawPoly:case 18:e-=n[0],i-=n[1],r=t.ptInPolygon(e,i,n[2])}return r},t.ptInPolygon=function(e,i,n){var s;s=t._ptPoint,s.setTo(e,i);var r=0,a=NaN,o=NaN,h=NaN,l=NaN,c=0;c=n.length;for(var u=0;u<c;u+=2)if(a=n[u],o=n[u+1],h=n[(u+2)%c],l=n[(u+3)%c],o!=l&&!(s.y<Math.min(o,l)||s.y>=Math.max(o,l))){var _=(s.y-o)*(h-a)/(l-o)+a;_>s.x&&r++}return r%2==1},t._cmds=[],__static(t,["_rec",function(){return this._rec=new Rectangle},"_ptPoint",function(){return this._ptPoint=new Point}]),t}(),HTMLChar=function(){function t(e,i,n,s){this.char=e,this.charNum=e.charCodeAt(0),this._x=this._y=0,this.width=i,this.height=n,this.style=s,this.isWord=!t._isWordRegExp.test(e)}__class(t,"laya.utils.HTMLChar");var e=t.prototype;return Laya.imps(e,{"laya.display.ILayout":!0}),e.setSprite=function(t){this._sprite=t},e.getSprite=function(){return this._sprite},e._isChar=function(){return!0},e._getCSSStyle=function(){return this.style},__getset(0,e,"width",function(){return this._w},function(t){this._w=t}),__getset(0,e,"x",function(){return this._x},function(t){this._sprite&&(this._sprite.x=t),this._x=t}),__getset(0,e,"y",function(){return this._y},function(t){this._sprite&&(this._sprite.y=t),this._y=t}),__getset(0,e,"height",function(){return this._h},function(t){this._h=t}),t._isWordRegExp=new RegExp("[\\w.]",""),t}(),Log=function(){function t(){}return __class(t,"laya.utils.Log"),t.enable=function(){t._logdiv||(t._logdiv=Browser.window.document.createElement("div"),Browser.window.document.body.appendChild(t._logdiv),t._logdiv.style.cssText="pointer-events:none;border:white;overflow:hidden;z-index:1000000;background:rgba(100,100,100,0.6);color:white;position: absolute;left:0px;top:0px;width:50%;height:50%;")},t.toggle=function(){var e=t._logdiv.style;"1px"==e.width?e.width=e.height="50%":e.width=e.height="1px"},t.print=function(e){t._logdiv&&(t._count>=t.maxCount&&t.clear(),t._count++,t._logdiv.innerText+=e+"\n",t._logdiv.scrollTop=t._logdiv.scrollHeight)},t.clear=function(){t._logdiv.innerText="",t._count=0},t._logdiv=null,t._count=0,t.maxCount=20,t}(),Mouse=function(){function t(){}return __class(t,"laya.utils.Mouse"),__getset(1,t,"cursor",function(){return t._style.cursor},function(e){t._style.cursor=e}),t.hide=function(){"none"!=t.cursor&&(t._preCursor=t.cursor,t.cursor="none")},t.show=function(){"none"==t.cursor&&(t._preCursor?t.cursor=t._preCursor:t.cursor="auto")},t._preCursor=null,__static(t,["_style",function(){return this._style=Browser.document.body.style}]),t}(),Pool=function(){function t(){}return __class(t,"laya.utils.Pool"),t.getPoolBySign=function(e){return t._poolDic[e]||(t._poolDic[e]=[])},t.clearBySign=function(e){t._poolDic[e]&&(t._poolDic[e].length=0)},t.recover=function(e,i){i.__InPool||(i.__InPool=!0,t.getPoolBySign(e).push(i))},t.getItemByClass=function(e,i){var n=t.getPoolBySign(e),s=n.length?n.pop():new i;return s.__InPool=!1,s},t.getItemByCreateFun=function(e,i){var n=t.getPoolBySign(e),s=n.length?n.pop():i();return s.__InPool=!1,s},t.getItem=function(e){var i=t.getPoolBySign(e),n=i.length?i.pop():null;return n&&(n.__InPool=!1),n},t._poolDic={},t.InPoolSign="__InPool",t}(),PoolCache=function(){function t(){this.sign=null,this.maxCount=1e3}__class(t,"laya.utils.PoolCache");var e=t.prototype;return e.getCacheList=function(){return Pool.getPoolBySign(this.sign)},e.tryDispose=function(t){var e;e=Pool.getPoolBySign(this.sign),e.length>this.maxCount&&e.splice(this.maxCount,e.length-this.maxCount)},t.addPoolCacheManager=function(e,i){void 0===i&&(i=100);var n;n=new t,n.sign=e,n.maxCount=i,CacheManger.regCacheByFunction(Utils.bind(n.tryDispose,n),Utils.bind(n.getCacheList,n))},t}(),Stat=function(){function t(){}return __class(t,"laya.utils.Stat"),__getset(1,t,"onclick",null,function(e){t._canvas.source.onclick=e,t._canvas.source.style.pointerEvents=""}),t.show=function(e,i){if(void 0===e&&(e=0),void 0===i&&(i=0),Render.isConchApp)return void(conch.showFPS&&conch.showFPS(e,i));var n=Browser.pixelRatio;t._width=130*n,t._vx=75*n,t._view[0]={title:"FPS(Canvas)",value:"_fpsStr",color:"yellow",units:"int"},t._view[1]={title:"Sprite",value:"spriteCount",color:"white",units:"int"},t._view[2]={title:"DrawCall",value:"drawCall",color:"white",units:"int"},t._view[3]={title:"CurMem",value:"currentMemorySize",color:"yellow",units:"M"},Render.isWebGL?(t._view[4]={title:"Shader",value:"shaderCall",color:"white",units:"int"},Render.is3DMode?(t._view[0].title="FPS(3D)",t._view[5]={title:"TriFaces",value:"trianglesFaces",color:"white",units:"int"},t._view[6]={title:"treeNodeColl",value:"treeNodeCollision",color:"white",units:"int"},t._view[7]={title:"treeSpriteColl",value:"treeSpriteCollision",color:"white",units:"int"}):(t._view[0].title="FPS(WebGL)",t._view[5]={title:"Canvas",value:"_canvasStr",color:"white",units:"int"})):t._view[4]={title:"Canvas",value:"_canvasStr",color:"white",units:"int"},t._fontSize=12*n;for(var s=0;s<t._view.length;s++)t._view[s].x=4,t._view[s].y=s*t._fontSize+2*n;t._height=n*(12*t._view.length+3*n)+4,
t._canvas||(t._canvas=new HTMLCanvas("2D"),t._canvas.size(t._width,t._height),t._ctx=t._canvas.getContext("2d"),t._ctx.textBaseline="top",t._ctx.font=t._fontSize+"px Sans-serif",t._canvas.source.style.cssText="pointer-events:none;background:rgba(150,150,150,0.8);z-index:100000;position: absolute;left:"+e+"px;top:"+i+"px;width:"+t._width/n+"px;height:"+t._height/n+"px;"),t._first=!0,t.loop(),t._first=!1,Browser.container.appendChild(t._canvas.source),t.enable()},t.enable=function(){Laya.timer.frameLoop(1,t,t.loop)},t.hide=function(){t._canvas&&(Browser.removeElement(t._canvas.source),Laya.timer.clear(t,t.loop))},t.clear=function(){t.trianglesFaces=t.drawCall=t.shaderCall=t.spriteCount=t.treeNodeCollision=t.treeSpriteCollision=t.canvasNormal=t.canvasBitmap=t.canvasReCache=0},t.loop=function(){t._count++;var e=Browser.now();if(!(e-t._timer<1e3)){var i=t._count;if(t.FPS=Math.round(1e3*i/(e-t._timer)),t._canvas){t.trianglesFaces=Math.round(t.trianglesFaces/i),t.drawCall=Math.round(t.drawCall/i)-2,t.shaderCall=Math.round(t.shaderCall/i),t.spriteCount=Math.round(t.spriteCount/i)-1,t.canvasNormal=Math.round(t.canvasNormal/i),t.canvasBitmap=Math.round(t.canvasBitmap/i),t.canvasReCache=Math.ceil(t.canvasReCache/i),t.treeNodeCollision=Math.round(t.treeNodeCollision/i),t.treeSpriteCollision=Math.round(t.treeSpriteCollision/i);var n=t.FPS>0?Math.floor(1e3/t.FPS).toString():" ";t._fpsStr=t.FPS+(t.renderSlow?" slow":"")+" "+n,t._canvasStr=t.canvasReCache+"/"+t.canvasNormal+"/"+t.canvasBitmap,t.currentMemorySize=ResourceManager.systemResourceManager.memorySize;var s=t._ctx;s.clearRect(t._first?0:t._vx,0,t._width,t._height);for(var r=0;r<t._view.length;r++){var a=t._view[r];t._first&&(s.fillStyle="white",s.fillText(a.title,a.x,a.y,null,null,null)),s.fillStyle=a.color;var o=t[a.value];"M"==a.units&&(o=Math.floor(o/1048576*100)/100+" M"),s.fillText(o+"",a.x+t._vx,a.y,null,null,null)}t.clear()}t._count=0,t._timer=e}},t.FPS=0,t.loopCount=0,t.shaderCall=0,t.drawCall=0,t.trianglesFaces=0,t.spriteCount=0,t.treeNodeCollision=0,t.treeSpriteCollision=0,t.canvasNormal=0,t.canvasBitmap=0,t.canvasReCache=0,t.renderSlow=!1,t.currentMemorySize=0,t._fpsStr=null,t._canvasStr=null,t._canvas=null,t._ctx=null,t._timer=0,t._count=0,t._width=0,t._height=100,t._view=[],t._fontSize=12,t._first=!1,t._vx=NaN,t}(),StringKey=function(){function t(){this._strsToID={},this._idToStrs=[],this._length=0}__class(t,"laya.utils.StringKey");var e=t.prototype;return e.add=function(t){var e=this._strsToID[t];return null!=e?e:(this._idToStrs[this._length]=t,this._strsToID[t]=this._length++)},e.getID=function(t){var e=this._strsToID[t];return null==e?-1:e},e.getName=function(t){var e=this._idToStrs[t];return null==e?void 0:e},t}(),Timer=function(){function t(){this._delta=0,this.scale=1,this.currFrame=0,this._mid=1,this._map=[],this._laters=[],this._handlers=[],this._temp=[],this._count=0,this.currTimer=Browser.now(),this._lastTimer=Browser.now(),Laya.timer&&Laya.timer.frameLoop(1,this,this._update)}var e;__class(t,"laya.utils.Timer");var i=t.prototype;return i._update=function(){if(this.scale<=0)return void(this._lastTimer=Browser.now());var t=this.currFrame=this.currFrame+this.scale,e=Browser.now();this._delta=(e-this._lastTimer)*this.scale;var i=this.currTimer=this.currTimer+this._delta;this._lastTimer=e;var n=this._handlers;for(this._count=0,a=0,o=n.length;a<o;a++)if(h=n[a],null!==h.method){var s=h.userFrame?t:i;if(s>=h.exeTime)if(h.repeat)if(h.jumpFrame)for(;s>=h.exeTime;)h.exeTime+=h.delay,h.run(!1);else h.exeTime+=h.delay,h.run(!1),s>h.exeTime&&(h.exeTime+=Math.ceil((s-h.exeTime)/h.delay)*h.delay);else h.run(!0)}else this._count++;(this._count>30||t%200==0)&&this._clearHandlers();for(var r=this._laters,a=0,o=r.length-1;a<=o;a++){var h=r[a];null!==h.method&&(this._map[h.key]=null,h.run(!1)),this._recoverHandler(h),a===o&&(o=r.length-1)}r.length=0},i._clearHandlers=function(){for(var t=this._handlers,e=0,i=t.length;e<i;e++){var n=t[e];null!==n.method?this._temp.push(n):this._recoverHandler(n)}this._handlers=this._temp,this._temp=t,this._temp.length=0},i._recoverHandler=function(e){this._map[e.key]==e&&(this._map[e.key]=null),e.clear(),t._pool.push(e)},i._create=function(i,n,s,r,a,o,h){if(!s)return a.apply(r,o),null;if(h){var l=this._getHandler(r,a);if(l)return l.repeat=n,l.userFrame=i,l.delay=s,l.caller=r,l.method=a,l.args=o,l.exeTime=s+(i?this.currFrame:this.currTimer+Browser.now()-this._lastTimer),l}return l=t._pool.length>0?t._pool.pop():new e,l.repeat=n,l.userFrame=i,l.delay=s,l.caller=r,l.method=a,l.args=o,l.exeTime=s+(i?this.currFrame:this.currTimer+Browser.now()-this._lastTimer),this._indexHandler(l),this._handlers.push(l),l},i._indexHandler=function(t){var e=t.caller,i=t.method,n=e?e.$_GID||(e.$_GID=Utils.getGID()):0,s=i.$_TID||(i.$_TID=1e5*this._mid++);t.key=n+s,this._map[t.key]=t},i.once=function(t,e,i,n,s){void 0===s&&(s=!0),this._create(!1,!1,t,e,i,n,s)},i.loop=function(t,e,i,n,s,r){void 0===s&&(s=!0),void 0===r&&(r=!1);var a=this._create(!1,!0,t,e,i,n,s);a&&(a.jumpFrame=r)},i.frameOnce=function(t,e,i,n,s){void 0===s&&(s=!0),this._create(!0,!1,t,e,i,n,s)},i.frameLoop=function(t,e,i,n,s){void 0===s&&(s=!0),this._create(!0,!0,t,e,i,n,s)},i.toString=function(){return"callLater:"+this._laters.length+" handlers:"+this._handlers.length+" pool:"+t._pool.length},i.clear=function(t,e){var i=this._getHandler(t,e);i&&(this._map[i.key]=null,i.key=0,i.clear())},i.clearAll=function(t){if(t)for(var e=0,i=this._handlers.length;e<i;e++){var n=this._handlers[e];n.caller===t&&(this._map[n.key]=null,n.key=0,n.clear())}},i._getHandler=function(t,e){var i=t?t.$_GID||(t.$_GID=Utils.getGID()):0,n=e.$_TID||(e.$_TID=1e5*this._mid++);return this._map[i+n]},i.callLater=function(i,n,s){if(null==this._getHandler(i,n)){if(t._pool.length)var r=t._pool.pop();else r=new e;r.caller=i,r.method=n,r.args=s,this._indexHandler(r),this._laters.push(r)}},i.runCallLater=function(t,e){var i=this._getHandler(t,e);i&&null!=i.method&&(this._map[i.key]=null,i.run(!0))},i.runTimer=function(t,e){this.runCallLater(t,e)},__getset(0,i,"delta",function(){return this._delta}),t._pool=[],t.__init$=function(){e=function(){function t(){this.key=0,this.repeat=!1,this.delay=0,this.userFrame=!1,this.exeTime=0,this.caller=null,this.method=null,this.args=null,this.jumpFrame=!1}__class(t,"");var e=t.prototype;return e.clear=function(){this.caller=null,this.method=null,this.args=null},e.run=function(t){var e=this.caller;if(e&&e.destroyed)return this.clear();var i=this.method,n=this.args;t&&this.clear(),null!=i&&(n?i.apply(e,n):i.call(e))},t}()},t}(),Tween=function(){function t(){this.gid=0}__class(t,"laya.utils.Tween");var e=t.prototype;return e.to=function(t,e,i,n,s,r,a){return void 0===r&&(r=0),void 0===a&&(a=!1),this._create(t,e,i,n,s,r,a,!0,!1,!0)},e.from=function(t,e,i,n,s,r,a){return void 0===r&&(r=0),void 0===a&&(a=!1),this._create(t,e,i,n,s,r,a,!1,!1,!0)},e._create=function(e,i,n,s,r,a,o,h,l,c){if(!e)throw new Error("Tween:target is null");this._target=e,this._duration=n,this._ease=s||i.ease||t.easeNone,this._complete=r||i.complete,this._delay=a,this._props=[],this._usedTimer=0,this._startTimer=Browser.now(),this._usedPool=l,this.update=i.update;var u=e.$_GID||(e.$_GID=Utils.getGID());return t.tweenMap[u]?(o&&t.clearTween(e),t.tweenMap[u].push(this)):t.tweenMap[u]=[this],c?a<=0?this.firstStart(e,i,h):Laya.timer.once(a,this,this.firstStart,[e,i,h]):this._initProps(e,i,h),this},e.firstStart=function(t,e,i){if(t.destroyed)return void this.clear();this._initProps(t,e,i),this._beginLoop()},e._initProps=function(t,e,i){for(var n in e)if("number"==typeof t[n]){var s=i?t[n]:e[n],r=i?e[n]:t[n];this._props.push([n,s,r-s]),i||(t[n]=s)}},e._beginLoop=function(){Laya.timer.frameLoop(1,this,this._doEase)},e._doEase=function(){this._updateEase(Browser.now())},e._updateEase=function(e){var i=this._target;if(i){if(i.destroyed)return t.clearTween(i);var n=this._usedTimer=e-this._startTimer-this._delay;if(!(n<0)){if(n>=this._duration)return this.complete();for(var s=n>0?this._ease(n,0,1,this._duration):0,r=this._props,a=0,o=r.length;a<o;a++){var h=r[a];i[h[0]]=h[1]+s*h[2]}this.update&&this.update.run()}}},e.complete=function(){if(this._target){Laya.timer.runTimer(this,this.firstStart);for(var t=this._target,e=this._props,i=this._complete,n=0,s=e.length;n<s;n++){var r=e[n];t[r[0]]=r[1]+r[2]}this.update&&this.update.run(),this.clear(),i&&i.run()}},e.pause=function(){Laya.timer.clear(this,this._beginLoop),Laya.timer.clear(this,this._doEase)},e.setStartTime=function(t){this._startTimer=t},e.clear=function(){this._target&&(this._remove(),this._clear())},e._clear=function(){this.pause(),Laya.timer.clear(this,this.firstStart),this._complete=null,this._target=null,this._ease=null,this._props=null,this._usedPool&&(this.update=null,Pool.recover("tween",this))},e.recover=function(){this._usedPool=!0,this._clear()},e._remove=function(){var e=t.tweenMap[this._target.$_GID];if(e)for(var i=0,n=e.length;i<n;i++)if(e[i]===this){e.splice(i,1);break}},e.restart=function(){this.pause(),this._usedTimer=0,this._startTimer=Browser.now();for(var t=this._props,e=0,i=t.length;e<i;e++){var n=t[e];this._target[n[0]]=n[1]}Laya.timer.once(this._delay,this,this._beginLoop)},e.resume=function(){this._usedTimer>=this._duration||(this._startTimer=Browser.now()-this._usedTimer-this._delay,this._beginLoop())},__getset(0,e,"progress",null,function(t){var e=t*this._duration;this._startTimer=Browser.now()-this._delay-e}),t.to=function(e,i,n,s,r,a,o,h){return void 0===a&&(a=0),void 0===o&&(o=!1),void 0===h&&(h=!0),Pool.getItemByClass("tween",t)._create(e,i,n,s,r,a,o,!0,h,!0)},t.from=function(e,i,n,s,r,a,o,h){return void 0===a&&(a=0),void 0===o&&(o=!1),void 0===h&&(h=!0),Pool.getItemByClass("tween",t)._create(e,i,n,s,r,a,o,!1,h,!0)},t.clearAll=function(e){if(e&&e.$_GID){var i=t.tweenMap[e.$_GID];if(i){for(var n=0,s=i.length;n<s;n++)i[n]._clear();i.length=0}}},t.clear=function(t){t.clear()},t.clearTween=function(e){t.clearAll(e)},t.easeNone=function(t,e,i,n){return i*t/n+e},t.tweenMap={},t}(),Utils=function(){function t(){}return __class(t,"laya.utils.Utils"),t.toRadian=function(e){return e*t._pi2},t.toAngle=function(e){return e*t._pi},t.toHexColor=function(t){if(t<0||isNaN(t))return null;for(var e=t.toString(16);e.length<6;)e="0"+e;return"#"+e},t.getGID=function(){return t._gid++},t.concatArray=function(t,e){if(!e)return t;if(!t)return e;var i=0,n=e.length;for(i=0;i<n;i++)t.push(e[i]);return t},t.clearArray=function(t){return t?(t.length=0,t):t},t.copyArray=function(t,e){if(t||(t=[]),!e)return t;t.length=e.length;var i=0,n=e.length;for(i=0;i<n;i++)t[i]=e[i];return t},t.getGlobalRecByPoints=function(t,e,i,n,s){var r;r=new Point(e,i),r=t.localToGlobal(r);var a;return a=new Point(n,s),a=t.localToGlobal(a),Rectangle._getWrapRec([r.x,r.y,a.x,a.y])},t.getGlobalPosAndScale=function(e){return t.getGlobalRecByPoints(e,0,0,1,1)},t.bind=function(t,e){return t.bind(e)},t.measureText=function(t,e){return RunDriver.measureText(t,e)},t.updateOrder=function(t){if(!t||t.length<2)return!1;for(var e,i=1,n=0,s=t.length,r=NaN;i<s;){for(n=i,e=t[n],r=t[n]._zOrder;--n>-1&&t[n]._zOrder>r;)t[n+1]=t[n];t[n+1]=e,i++}var a=e.parent.conchModel;if(a)if(null!=a.updateZOrder)a.updateZOrder();else{for(i=0;i<s;i++)a.removeChild(t[i].conchModel);for(i=0;i<s;i++)a.addChildAt(t[i].conchModel,i)}return!0},t.transPointList=function(t,e,i){var n=0,s=t.length;for(n=0;n<s;n+=2)t[n]+=e,t[n+1]+=i},t.parseInt=function(t,e){void 0===e&&(e=0);var i=Browser.window.parseInt(t,e);return isNaN(i)?0:i},t.getFileExtension=function(e){t._extReg.lastIndex=e.lastIndexOf(".");var i=t._extReg.exec(e);return i&&i.length>1?i[1].toLowerCase():null},t.getTransformRelativeToWindow=function(t,e,i){var n=Laya.stage,s=laya.utils.Utils.getGlobalPosAndScale(t),r=n._canvasTransform.clone(),a=r.tx,o=r.ty;r.rotate(-Math.PI/180*Laya.stage.canvasDegree),r.scale(Laya.stage.clientScaleX,Laya.stage.clientScaleY);var h=Laya.stage.canvasDegree%180!=0,l=NaN,c=NaN;h?(l=i+s.y,c=e+s.x,l*=r.d,c*=r.a,90==Laya.stage.canvasDegree?(l=a-l,c+=o):(l+=a,c=o-c)):(l=e+s.x,c=i+s.y,l*=r.a,c*=r.d,l+=a,c+=o),c+=Laya.stage._safariOffsetY;var u=NaN,_=NaN;return h?(u=r.d*s.height,_=r.a*s.width):(u=r.a*s.width,_=r.d*s.height),{x:l,y:c,scaleX:u,scaleY:_}},t.fitDOMElementInArea=function(e,i,n,s,r,a){e._fitLayaAirInitialized||(e._fitLayaAirInitialized=!0,e.style.transformOrigin=e.style.webKittransformOrigin="left top",e.style.position="absolute");var o=t.getTransformRelativeToWindow(i,n,s);e.style.transform=e.style.webkitTransform="scale("+o.scaleX+","+o.scaleY+") rotate("+Laya.stage.canvasDegree+"deg)",e.style.width=r+"px",e.style.height=a+"px",e.style.left=o.x+"px",e.style.top=o.y+"px"},t._gid=1,t._pi=180/Math.PI,t._pi2=Math.PI/180,t._extReg=/\.(\w+)\??/g,t.parseXMLFromString=function(t){var e;if(t=t.replace(/>\s+</g,"><"),e=(new DOMParser).parseFromString(t,"text/xml"),e.firstChild.textContent.indexOf("This page contains the following errors")>-1)throw new Error(e.firstChild.firstChild.textContent);return e},t}(),VectorGraphManager=function(){function t(){this.useDic={},this.shapeDic={},this.shapeLineDic={},this._id=0,this._checkKey=!1,this._freeIdArray=[],Render.isWebGL&&CacheManger.regCacheByFunction(Utils.bind(this.startDispose,this),Utils.bind(this.getCacheList,this))}__class(t,"laya.utils.VectorGraphManager");var e=t.prototype;return e.getId=function(){return this._id++},e.addShape=function(t,e){this.shapeDic[t]=e,this.useDic[t]||(this.useDic[t]=!0)},e.addLine=function(t,e){this.shapeLineDic[t]=e,this.shapeLineDic[t]||(this.shapeLineDic[t]=!0)},e.getShape=function(t){this._checkKey&&null!=this.useDic[t]&&(this.useDic[t]=!0)},e.deleteShape=function(t){this.shapeDic[t]&&(this.shapeDic[t]=null,delete this.shapeDic[t]),this.shapeLineDic[t]&&(this.shapeLineDic[t]=null,delete this.shapeLineDic[t]),null!=this.useDic[t]&&delete this.useDic[t]},e.getCacheList=function(){var t,e=[];for(t in this.shapeDic)e.push(this.shapeDic[t]);for(t in this.shapeLineDic)e.push(this.shapeLineDic[t]);return e},e.startDispose=function(t){var e;for(e in this.useDic)this.useDic[e]=!1;this._checkKey=!0},e.endDispose=function(){if(this._checkKey){var t;for(t in this.useDic)this.useDic[t]||this.deleteShape(t);this._checkKey=!1}},t.getInstance=function(){return t.instance=t.instance||new t},t.instance=null,t}(),WordText=function(){function t(){this.id=NaN,this.save=[],this.toUpperCase=null,this.changed=!1,this._text=null}__class(t,"laya.utils.WordText");var e=t.prototype;return e.setText=function(t){this.changed=!0,this._text=t},e.toString=function(){return this._text},e.charCodeAt=function(t){return this._text?this._text.charCodeAt(t):NaN},e.charAt=function(t){return this._text?this._text.charAt(t):null},__getset(0,e,"length",function(){return this._text?this._text.length:0}),t}(),Node=function(t){function e(){this._bits=0,this._displayedInStage=!1,this._parent=null,this.conchModel=null,this.name="",this.destroyed=!1,e.__super.call(this),this._childs=e.ARRAY_EMPTY,this._$P=e.PROP_EMPTY,this.timer=Laya.timer,this.conchModel=Render.isConchNode?this.createConchModel():null}__class(e,"laya.display.Node",t);var i=e.prototype;return i._setBit=function(t,e){if(1==t){this._getBit(t)!=e&&this._updateDisplayedInstage()}e?this._bits|=t:this._bits&=~t},i._getBit=function(t){return 0!=(this._bits&t)},i._setUpNoticeChain=function(){this._getBit(1)&&this._setUpNoticeType(1)},i._setUpNoticeType=function(t){var e=this;for(e._setBit(t,!0),e=e.parent;e;){if(e._getBit(t))return;e._setBit(t,!0),e=e.parent}},i.on=function(t,e,i,n){return"display"!==t&&"undisplay"!==t||this._getBit(1)||this._setUpNoticeType(1),this._createListener(t,e,i,n,!1)},i.once=function(t,e,i,n){return"display"!==t&&"undisplay"!==t||this._getBit(1)||this._setUpNoticeType(1),this._createListener(t,e,i,n,!0)},i.createConchModel=function(){return null},i.destroy=function(t){void 0===t&&(t=!0),this.destroyed=!0,this._parent&&this._parent.removeChild(this),this._childs&&(t?this.destroyChildren():this.removeChildren()),this._childs=null,this._$P=null,this.offAll(),this.timer.clearAll(this)},i.destroyChildren=function(){if(this._childs)for(var t=this._childs.length-1;t>-1;t--)this._childs[t].destroy(!0)},i.addChild=function(t){if(!t||this.destroyed||t===this)return t;if(t.zOrder&&this._set$P("hasZorder",!0),t._parent===this){var i=this.getChildIndex(t);i!==this._childs.length-1&&(this._childs.splice(i,1),this._childs.push(t),this.conchModel&&(this.conchModel.removeChild(t.conchModel),this.conchModel.addChildAt(t.conchModel,this._childs.length-1)),this._childChanged())}else t.parent&&t.parent.removeChild(t),this._childs===e.ARRAY_EMPTY&&(this._childs=[]),this._childs.push(t),this.conchModel&&this.conchModel.addChildAt(t.conchModel,this._childs.length-1),t.parent=this,this._childChanged();return t},i.addChildren=function(t){for(var e=arguments,i=0,n=e.length;i<n;)this.addChild(e[i++])},i.addChildAt=function(t,i){if(!t||this.destroyed||t===this)return t;if(t.zOrder&&this._set$P("hasZorder",!0),i>=0&&i<=this._childs.length){if(t._parent===this){var n=this.getChildIndex(t);this._childs.splice(n,1),this._childs.splice(i,0,t),this.conchModel&&(this.conchModel.removeChild(t.conchModel),this.conchModel.addChildAt(t.conchModel,i)),this._childChanged()}else t.parent&&t.parent.removeChild(t),this._childs===e.ARRAY_EMPTY&&(this._childs=[]),this._childs.splice(i,0,t),this.conchModel&&this.conchModel.addChildAt(t.conchModel,i),t.parent=this;return t}throw new Error("appendChildAt:The index is out of bounds")},i.getChildIndex=function(t){return this._childs.indexOf(t)},i.getChildByName=function(t){var e=this._childs;if(e)for(var i=0,n=e.length;i<n;i++){var s=e[i];if(s.name===t)return s}return null},i._get$P=function(t){return this._$P[t]},i._set$P=function(t,i){return this.destroyed||(this._$P===e.PROP_EMPTY&&(this._$P={}),this._$P[t]=i),i},i.getChildAt=function(t){return this._childs[t]},i.setChildIndex=function(t,e){var i=this._childs;if(e<0||e>=i.length)throw new Error("setChildIndex:The index is out of bounds.");var n=this.getChildIndex(t);if(n<0)throw new Error("setChildIndex:node is must child of this object.");return i.splice(n,1),i.splice(e,0,t),this.conchModel&&(this.conchModel.removeChild(t.conchModel),this.conchModel.addChildAt(t.conchModel,e)),this._childChanged(),t},i._childChanged=function(t){},i.removeChild=function(t){if(!this._childs)return t;var e=this._childs.indexOf(t);return this.removeChildAt(e)},i.removeSelf=function(){return this._parent&&this._parent.removeChild(this),this},i.removeChildByName=function(t){var e=this.getChildByName(t);return e&&this.removeChild(e),e},i.removeChildAt=function(t){var e=this.getChildAt(t);return e&&(this._childs.splice(t,1),this.conchModel&&this.conchModel.removeChild(e.conchModel),e.parent=null),e},i.removeChildren=function(t,i){if(void 0===t&&(t=0),void 0===i&&(i=2147483647),this._childs&&this._childs.length>0){var n=this._childs;if(0===t&&i>=a){var s=n;this._childs=e.ARRAY_EMPTY}else s=n.splice(t,i-t);for(var r=0,a=s.length;r<a;r++)s[r].parent=null,this.conchModel&&this.conchModel.removeChild(s[r].conchModel)}return this},i.replaceChild=function(t,e){var i=this._childs.indexOf(e);return i>-1?(this._childs.splice(i,1,t),this.conchModel&&(this.conchModel.removeChild(e.conchModel),this.conchModel.addChildAt(t.conchModel,i)),e.parent=null,t.parent=this,t):null},i._updateDisplayedInstage=function(){var t;t=this;var e=Laya.stage;for(this._displayedInStage=!1;t;){if(t._getBit(1)){this._displayedInStage=t._displayedInStage;break}if(t==e||t._displayedInStage){this._displayedInStage=!0;break}t=t.parent}},i._setDisplay=function(t){this._displayedInStage!==t&&(this._displayedInStage=t,t?this.event("display"):this.event("undisplay"))},i._displayChild=function(t,e){var i=t._childs;if(i)for(var n=0,s=i.length;n<s;n++){var r=i[n];r._getBit(1)&&(r._childs.length>0?this._displayChild(r,e):r._setDisplay(e))}t._setDisplay(e)},i.contains=function(t){if(t===this)return!0;for(;t;){if(t.parent===this)return!0;t=t.parent}return!1},i.timerLoop=function(t,e,i,n,s,r){void 0===s&&(s=!0),void 0===r&&(r=!1),this.timer.loop(t,e,i,n,s,r)},i.timerOnce=function(t,e,i,n,s){void 0===s&&(s=!0),this.timer._create(!1,!1,t,e,i,n,s)},i.frameLoop=function(t,e,i,n,s){void 0===s&&(s=!0),this.timer._create(!0,!0,t,e,i,n,s)},i.frameOnce=function(t,e,i,n,s){void 0===s&&(s=!0),this.timer._create(!0,!1,t,e,i,n,s)},i.clearTimer=function(t,e){this.timer.clear(t,e)},__getset(0,i,"numChildren",function(){return this._childs.length}),__getset(0,i,"parent",function(){return this._parent},function(t){this._parent!==t&&(t?(this._parent=t,this.event("added"),this._getBit(1)&&(this._setUpNoticeChain(),t.displayedInStage&&this._displayChild(this,!0)),t._childChanged(this)):(this.event("removed"),this._parent._childChanged(),this._getBit(1)&&this._displayChild(this,!1),this._parent=t))}),__getset(0,i,"displayedInStage",function(){return this._getBit(1)?this._displayedInStage:(this._setUpNoticeType(1),this._displayedInStage)}),e.ARRAY_EMPTY=[],e.PROP_EMPTY={},e.NOTICE_DISPLAY=1,e.MOUSEENABLE=2,e}(EventDispatcher),CSSStyle=function(t){function e(t){this._bgground=null,this._border=null,this._rect=null,this.lineHeight=0,e.__super.call(this),this._padding=e._PADDING,this._spacing=e._SPACING,this._aligns=e._ALIGNS,this._font=Font.EMPTY,this._ower=t}__class(e,"laya.display.css.CSSStyle",t);var i=e.prototype;return i.destroy=function(){this._ower=null,this._font=null,this._rect=null},i.inherit=function(t){this._font=t._font,this._spacing=t._spacing===e._SPACING?e._SPACING:t._spacing.slice(),this.lineHeight=t.lineHeight},i._widthAuto=function(){return 0!=(262144&this._type)},i.widthed=function(t){return 0!=(8&this._type)},i._calculation=function(t,e){function i(t,e,i){return t*i[0]+e*i[1]+i[2]}function n(t){var e=r.width,n=s.width;a.width&&(s.width=i(e,n,a.width)),a.height&&(s.height=i(e,n,a.height)),a.left&&(s.x=i(e,n,a.left)),a.top&&(s.y=i(e,n,a.top))}if(e.indexOf("%")<0)return!1;var s=this._ower,r=s.parent,a=this._rect;null===a&&(r._getCSSStyle()._type|=524288,r.on("resize",this,n),this._rect=a={input:{}});var o=e.split(" ");return o[0]=parseFloat(o[0])/100,1==o.length?o[1]=o[2]=0:(o[1]=parseFloat(o[1])/100,o[2]=parseFloat(o[2])),a[t]=o,a.input[t]=e,n(t),!0},i.heighted=function(t){return 0!=(8192&this._type)},i.size=function(t,e){var i=this._ower,n=!1;t!==-1&&t!=this._ower.width&&(this._type|=8,this._ower.width=t,n=!0),e!==-1&&e!=this._ower.height&&(this._type|=8192,this._ower.height=e,n=!0),n&&(i._layoutLater(),524288&this._type&&i.event("resize",this))},i._getAlign=function(){return this._aligns[0]},i._getValign=function(){return this._aligns[1]},i._getCssFloat=function(){return 0!=(32768&this._type)?32768:0},i._createFont=function(){return 4096&this._type?this._font:(this._type|=4096,this._font=new Font(this._font))},i.render=function(t,e,i,n){var s=t.width,r=t.height;i-=t.pivotX,n-=t.pivotY,this._bgground&&null!=this._bgground.color&&e.ctx.fillRect(i,n,s,r,this._bgground.color),this._border&&this._border.color&&e.drawRect(i,n,s,r,this._border.color.strColor,this._border.size)},i.getCSSStyle=function(){return this},i.cssText=function(t){this.attrs(e.parseOneCSS(t,";"))},i.attrs=function(t){if(t)for(var e=0,i=t.length;e<i;e++){var n=t[e];this[n[0]]=n[1]}},i.setTransform=function(t){"none"===t?this._tf=Style._TF_EMPTY:this.attrs(e.parseOneCSS(t,","))},i.translate=function(t,e){this._tf===Style._TF_EMPTY&&(this._tf=new TransformInfo),this._tf.translateX=t,this._tf.translateY=e},i.scale=function(t,e){this._tf===Style._TF_EMPTY&&(this._tf=new TransformInfo),this._tf.scaleX=t,this._tf.scaleY=e},i._enableLayout=function(){return 0==(2&this._type)&&0==(4&this._type)},__getset(0,i,"block",t.prototype._$get_block,function(t){t?this._type|=1:this._type&=-2}),__getset(0,i,"valign",function(){return e._valigndef[this._aligns[1]]},function(t){this._aligns===e._ALIGNS&&(this._aligns=[0,0,0]),this._aligns[1]=e._valigndef[t]}),__getset(0,i,"height",null,function(t){if(this._type|=8192,"string"==typeof t){if(this._calculation("height",t))return;t=parseInt(t)}this.size(-1,t)}),__getset(0,i,"width",null,function(t){if(this._type|=8,"string"==typeof t){var e=t.indexOf("auto");if(e>=0&&(this._type|=262144,t=t.substr(0,e)),this._calculation("width",t))return;t=parseInt(t)}this.size(t,-1)}),__getset(0,i,"fontWeight",function(){return this._font.weight},function(t){this._createFont().weight=t}),__getset(0,i,"left",null,function(t){var e=this._ower;if("string"==typeof t){if("center"===t?t="50% -50% 0":"right"===t&&(t="100% -100% 0"),this._calculation("left",t))return;t=parseInt(t)}e.x=t}),__getset(0,i,"_translate",null,function(t){this.translate(t[0],t[1])}),__getset(0,i,"absolute",function(){return 0!=(4&this._type)}),__getset(0,i,"top",null,function(t){var e=this._ower;if("string"==typeof t){if("middle"===t?t="50% -50% 0":"bottom"===t&&(t="100% -100% 0"),this._calculation("top",t))return;t=parseInt(t)}e.y=t}),__getset(0,i,"align",function(){return e._aligndef[this._aligns[0]]},function(t){this._aligns===e._ALIGNS&&(this._aligns=[0,0,0]),this._aligns[0]=e._aligndef[t]}),__getset(0,i,"bold",function(){return this._font.bold},function(t){this._createFont().bold=t}),__getset(0,i,"padding",function(){return this._padding},function(t){this._padding=t}),__getset(0,i,"leading",function(){return this._spacing[1]},function(t){"string"==typeof t&&(t=parseInt(t+"")),this._spacing===e._SPACING&&(this._spacing=[0,0]),this._spacing[1]=t}),__getset(0,i,"lineElement",function(){return 0!=(65536&this._type)},function(t){t?this._type|=65536:this._type&=-65537}),__getset(0,i,"cssFloat",function(){return 0!=(32768&this._type)?"right":"left"},function(t){this.lineElement=!1,"right"===t?this._type|=32768:this._type&=-32769}),__getset(0,i,"textDecoration",function(){return this._font.decoration},function(t){this._createFont().decoration=t}),__getset(0,i,"whiteSpace",function(){return 131072&this._type?"nowrap":""},function(t){"nowrap"===t&&(this._type|=131072),"none"===t&&(this._type&=-131073)}),__getset(0,i,"background",null,function(t){if(!t)return void(this._bgground=null);this._bgground||(this._bgground={}),this._bgground.color=t,this._ower.conchModel&&this._ower.conchModel.bgColor(t),this._type|=16384,this._ower._renderType|=256}),__getset(0,i,"wordWrap",function(){return 0==(131072&this._type)},function(t){t?this._type&=-131073:this._type|=131072}),__getset(0,i,"color",function(){return this._font.color},function(t){this._createFont().color=t}),__getset(0,i,"password",function(){return this._font.password},function(t){this._createFont().password=t}),__getset(0,i,"backgroundColor",function(){return this._bgground?this._bgground.color:null},function(t){"none"===t?this._bgground=null:(this._bgground||(this._bgground={}),this._bgground.color=t),this._ower.conchModel&&this._ower.conchModel.bgColor(t),this._ower._renderType|=256}),__getset(0,i,"font",function(){return this._font.toString()},function(t){this._createFont().set(t)}),__getset(0,i,"weight",null,function(t){this._createFont().weight=t}),__getset(0,i,"letterSpacing",function(){return this._spacing[0]},function(t){"string"==typeof t&&(t=parseInt(t+"")),this._spacing===e._SPACING&&(this._spacing=[0,0]),this._spacing[0]=t}),__getset(0,i,"fontSize",function(){return this._font.size},function(t){this._createFont().size=t}),__getset(0,i,"italic",function(){return this._font.italic},function(t){this._createFont().italic=t}),__getset(0,i,"fontFamily",function(){return this._font.family},function(t){this._createFont().family=t}),__getset(0,i,"stroke",function(){return this._font.stroke[0]},function(t){this._createFont().stroke===Font._STROKE&&(this._font.stroke=[0,"#000000"]),this._font.stroke[0]=t}),__getset(0,i,"strokeColor",function(){return this._font.stroke[1]},function(t){this._createFont().stroke===Font._STROKE&&(this._font.stroke=[0,"#000000"]),this._font.stroke[1]=t}),__getset(0,i,"border",function(){return this._border?this._border.value:""},function(t){if("none"==t)return void(this._border=null);this._border||(this._border={}),this._border.value=t;var e=t.split(" ");if(this._border.color=Color.create(e[e.length-1]),1==e.length)return this._border.size=1,void(this._border.type="solid");var i=0;e[0].indexOf("px")>0?(this._border.size=parseInt(e[0]),i++):this._border.size=1,this._border.type=e[i],this._ower._renderType|=256}),__getset(0,i,"borderColor",function(){return this._border&&this._border.color?this._border.color.strColor:null},function(t){if(!t)return void(this._border=null);this._border||(this._border={size:1,type:"solid"}),this._border.color=null==t?null:Color.create(t),this._ower.conchModel&&this._ower.conchModel.border(this._border.color.strColor),this._ower._renderType|=256}),__getset(0,i,"position",function(){return 4&this._type?"absolute":""},function(t){"absolute"==t?this._type|=4:this._type&=-5}),__getset(0,i,"display",null,function(t){switch(t){case"":this._type&=-3,this.visible=!0;break;case"none":this._type|=2,this.visible=!1,this._ower._layoutLater()}}),__getset(0,i,"paddingLeft",function(){return this.padding[3]}),__getset(0,i,"paddingTop",function(){return this.padding[0]}),__getset(0,i,"_scale",null,function(t){this._ower.scale(t[0],t[1])}),__getset(0,i,"_rotate",null,function(t){this._ower.rotation=t}),e.parseOneCSS=function(t,i){for(var n,s=[],r=t.split(i),a=0,o=r.length;a<o;a++){var h=r[a],l=h.indexOf(":"),c=h.substr(0,l).replace(/^\s+|\s+$/g,"");if(0!=c.length){var u=h.substr(l+1).replace(/^\s+|\s+$/g,""),_=[c,u];switch(c){case"italic":case"bold":_[1]="true"==u;break;case"line-height":_[0]="lineHeight",_[1]=parseInt(u);break;case"font-size":_[0]="fontSize",_[1]=parseInt(u);break;case"padding":n=u.split(" "),n.length>1||(n[1]=n[2]=n[3]=n[0]),_[1]=[parseInt(n[0]),parseInt(n[1]),parseInt(n[2]),parseInt(n[3])];break;case"rotate":_[0]="_rotate",_[1]=parseFloat(u);break;case"scale":n=u.split(" "),_[0]="_scale",_[1]=[parseFloat(n[0]),parseFloat(n[1])];break;case"translate":n=u.split(" "),_[0]="_translate",_[1]=[parseInt(n[0]),parseInt(n[1])];break;default:(_[0]=e._CSSTOVALUE[c])||(_[0]=c)}s.push(_)}}return s},e.parseCSS=function(t,i){for(var n;null!=(n=e._parseCSSRegExp.exec(t));)e.styleSheets[n[1]]=e.parseOneCSS(n[2],";")},e.EMPTY=new e(null),e._CSSTOVALUE={"letter-spacing":"letterSpacing","line-spacing":"lineSpacing","white-space":"whiteSpace","line-height":"lineHeight","scale-x":"scaleX","scale-y":"scaleY","translate-x":"translateX","translate-y":"translateY","font-family":"fontFamily","font-weight":"fontWeight","vertical-align":"valign","text-decoration":"textDecoration","background-color":"backgroundColor","border-color":"borderColor",float:"cssFloat"},e._parseCSSRegExp=new RegExp("([.#]\\w+)\\s*{([\\s\\S]*?)}","g"),e._aligndef={left:0,center:1,right:2,0:"left",1:"center",2:"right"},e._valigndef={top:0,middle:1,bottom:2,0:"top",1:"middle",2:"bottom"},e.styleSheets={},e.ALIGN_CENTER=1,e.ALIGN_RIGHT=2,e.VALIGN_MIDDLE=1,e.VALIGN_BOTTOM=2,e._CSS_BLOCK=1,e._DISPLAY_NONE=2,e._ABSOLUTE=4,e._WIDTH_SET=8,e._PADDING=[0,0,0,0],e._RECT=[-1,-1,-1,-1],e._SPACING=[0,0],e._ALIGNS=[0,0,0],e.ADDLAYOUTED=512,e._NEWFONT=4096,e._HEIGHT_SET=8192,e._BACKGROUND_SET=16384,e._FLOAT_RIGHT=32768,e._LINE_ELEMENT=65536,e._NOWARP=131072,e._WIDTHAUTO=262144,e._LISTERRESZIE=524288,e}(Style),AudioSound=function(t){function e(){this.url=null,this.audio=null,this.loaded=!1,e.__super.call(this)}__class(e,"laya.media.h5audio.AudioSound",t);var i=e.prototype;return i.dispose=function(){var t=e._audioCache[this.url];t&&(t.src="",delete e._audioCache[this.url])},i.load=function(t){function i(){s(),a.loaded=!0,a.event("complete")}function n(){r.load=null,s(),a.event("error")}function s(){r.removeEventListener("canplaythrough",i),r.removeEventListener("error",n)}t=URL.formatURL(t),this.url=t;var r;if(t==SoundManager._tMusic?(e._initMusicAudio(),r=e._musicAudio,r.src!=t&&(e._audioCache[r.src]=null,r=null)):r=e._audioCache[t],r&&r.readyState>=2)return void this.event("complete");r||(t==SoundManager._tMusic?(e._initMusicAudio(),
r=e._musicAudio):r=Browser.createElement("audio"),e._audioCache[t]=r,r.src=t),r.addEventListener("canplaythrough",i),r.addEventListener("error",n);var a=this;this.audio=r,r.load?r.load():n()},i.play=function(t,i){if(void 0===t&&(t=0),void 0===i&&(i=0),!this.url)return null;var n;if(!(n=this.url==SoundManager._tMusic?e._musicAudio:e._audioCache[this.url]))return null;var s;s=Pool.getItem("audio:"+this.url),Render.isConchApp?s||(s=Browser.createElement("audio"),s.src=n.src):this.url==SoundManager._tMusic?(e._initMusicAudio(),s=e._musicAudio):s=s?s:n.cloneNode(!0);var r=new AudioSoundChannel(s);return r.url=this.url,r.loops=i,r.startTime=t,r.play(),SoundManager.addChannel(r),r},__getset(0,i,"duration",function(){var t;return t=e._audioCache[this.url],t?t.duration:0}),e._initMusicAudio=function(){e._musicAudio||(e._musicAudio||(e._musicAudio=Browser.createElement("audio")),Browser.document.addEventListener("touchstart",e._makeMusicOK))},e._makeMusicOK=function(){Browser.document.removeEventListener("touchstart",e._makeMusicOK),e._musicAudio.src?e._musicAudio.play():(e._musicAudio.src="",e._musicAudio.load())},e._audioCache={},e._musicAudio=null,e}(EventDispatcher),SoundChannel=function(t){function e(){this.url=null,this.loops=0,this.startTime=NaN,this.isStopped=!1,this.completeHandler=null,e.__super.call(this)}__class(e,"laya.media.SoundChannel",t);var i=e.prototype;return i.play=function(){},i.stop=function(){},i.pause=function(){},i.resume=function(){},i.__runComplete=function(t){t&&t.run()},__getset(0,i,"volume",function(){return 1},function(t){}),__getset(0,i,"position",function(){return 0}),__getset(0,i,"duration",function(){return 0}),e}(EventDispatcher),Sound=function(t){function e(){e.__super.call(this)}__class(e,"laya.media.Sound",t);var i=e.prototype;return i.load=function(t){},i.play=function(t,e){return void 0===t&&(t=0),void 0===e&&(e=0),null},i.dispose=function(){},__getset(0,i,"duration",function(){return 0}),e}(EventDispatcher),WebAudioSound=function(t){function e(){this.url=null,this.loaded=!1,this.data=null,this.audioBuffer=null,this.__toPlays=null,e.__super.call(this)}__class(e,"laya.media.webaudio.WebAudioSound",t);var i=e.prototype;return i.load=function(t){var i=this;if(t=URL.formatURL(t),this.url=t,this.audioBuffer=e._dataCache[t],this.audioBuffer)return void this._loaded(this.audioBuffer);if(e.e.on("loaded:"+t,this,this._loaded),e.e.on("err:"+t,this,this._err),!e.__loadingSound[t]){e.__loadingSound[t]=!0;var n=new Browser.window.XMLHttpRequest;n.open("GET",t,!0),n.responseType="arraybuffer",n.onload=function(){i.data=n.response,e.buffs.push({buffer:i.data,url:i.url}),e.decode()},n.onerror=function(t){i._err()},n.send()}},i._err=function(){this._removeLoadEvents(),e.__loadingSound[this.url]=!1,this.event("error")},i._loaded=function(t){this._removeLoadEvents(),this.audioBuffer=t,e._dataCache[this.url]=this.audioBuffer,this.loaded=!0,this.event("complete")},i._removeLoadEvents=function(){e.e.off("loaded:"+this.url,this,this._loaded),e.e.off("err:"+this.url,this,this._err)},i.__playAfterLoaded=function(){if(this.__toPlays){var t,e=0,i=0;t=this.__toPlays,i=t.length;var n;for(e=0;e<i;e++)n=t[e],n[2]&&!n[2].isStopped&&this.play(n[0],n[1],n[2]);this.__toPlays.length=0}},i.play=function(t,e,i){return void 0===t&&(t=0),void 0===e&&(e=0),i=i?i:new WebAudioSoundChannel,this.audioBuffer||this.url&&(this.__toPlays||(this.__toPlays=[]),this.__toPlays.push([t,e,i]),this.once("complete",this,this.__playAfterLoaded),this.load(this.url)),i.url=this.url,i.loops=e,i.audioBuffer=this.audioBuffer,i.startTime=t,i.play(),SoundManager.addChannel(i),i},i.dispose=function(){delete e._dataCache[this.url],delete e.__loadingSound[this.url]},__getset(0,i,"duration",function(){return this.audioBuffer?this.audioBuffer.duration:0}),e.decode=function(){e.buffs.length<=0||e.isDecoding||(e.isDecoding=!0,e.tInfo=e.buffs.shift(),e.ctx.decodeAudioData(e.tInfo.buffer,e._done,e._fail))},e._done=function(t){e.e.event("loaded:"+e.tInfo.url,t),e.isDecoding=!1,e.decode()},e._fail=function(){e.e.event("err:"+e.tInfo.url,null),e.isDecoding=!1,e.decode()},e._playEmptySound=function(){if(null!=e.ctx){var t=e.ctx.createBufferSource();t.buffer=e._miniBuffer,t.connect(e.ctx.destination),t.start(0,0,0)}},e._unlock=function(){e._unlocked||(e._playEmptySound(),"running"==e.ctx.state&&(Browser.document.removeEventListener("mousedown",e._unlock,!0),Browser.document.removeEventListener("touchend",e._unlock,!0),e._unlocked=!0))},e.initWebAudio=function(){"running"!=e.ctx.state&&(e._unlock(),Browser.document.addEventListener("mousedown",e._unlock,!0),Browser.document.addEventListener("touchend",e._unlock,!0))},e._dataCache={},e.buffs=[],e.isDecoding=!1,e._unlocked=!1,e.tInfo=null,e.__loadingSound={},__static(e,["window",function(){return this.window=Browser.window},"webAudioEnabled",function(){return this.webAudioEnabled=e.window.AudioContext||e.window.webkitAudioContext||e.window.mozAudioContext},"ctx",function(){return this.ctx=e.webAudioEnabled?new(e.window.AudioContext||e.window.webkitAudioContext||e.window.mozAudioContext):void 0},"_miniBuffer",function(){return this._miniBuffer=e.ctx.createBuffer(1,1,22050)},"e",function(){return this.e=new EventDispatcher}]),e}(EventDispatcher),HttpRequest=function(t){function e(){this._responseType=null,this._data=null,e.__super.call(this),this._http=new Browser.window.XMLHttpRequest}__class(e,"laya.net.HttpRequest",t);var i=e.prototype;return i.send=function(t,e,i,n,s){void 0===i&&(i="get"),void 0===n&&(n="text"),this._responseType=n,this._data=null;var r=this,a=this._http;if(a.open(i,t,!0),s)for(var o=0;o<s.length;o++)a.setRequestHeader(s[o++],s[o]);else Render.isConchApp||(e&&"string"!=typeof e?a.setRequestHeader("Content-Type","application/json"):a.setRequestHeader("Content-Type","application/x-www-form-urlencoded"));a.responseType="arraybuffer"!==n?"text":"arraybuffer",a.onerror=function(t){r._onError(t)},a.onabort=function(t){r._onAbort(t)},a.onprogress=function(t){r._onProgress(t)},a.onload=function(t){r._onLoad(t)},a.send(e)},i._onProgress=function(t){t&&t.lengthComputable&&this.event("progress",t.loaded/t.total)},i._onAbort=function(t){this.error("Request was aborted by user")},i._onError=function(t){this.error("Request failed Status:"+this._http.status+" text:"+this._http.statusText)},i._onLoad=function(t){var e=this._http,i=void 0!==e.status?e.status:200;200===i||204===i||0===i?this.complete():this.error("["+e.status+"]"+e.statusText+":"+e.responseURL)},i.error=function(t){this.clear(),this.event("error",t)},i.complete=function(){this.clear();var t=!0;try{"json"===this._responseType?this._data=JSON.parse(this._http.responseText):"xml"===this._responseType?this._data=Utils.parseXMLFromString(this._http.responseText):this._data=this._http.response||this._http.responseText}catch(e){t=!1,this.error(e.message)}t&&this.event("complete",this._data instanceof Array?[this._data]:this._data)},i.clear=function(){var t=this._http;t.onerror=t.onabort=t.onprogress=t.onload=null},__getset(0,i,"url",function(){return this._http.responseURL}),__getset(0,i,"http",function(){return this._http}),__getset(0,i,"data",function(){return this._data}),e}(EventDispatcher),Loader=function(t){function e(){this._data=null,this._url=null,this._type=null,this._cache=!1,this._http=null,e.__super.call(this)}__class(e,"laya.net.Loader",t);var i=e.prototype;return i.load=function(t,i,n,s,r){if(void 0===n&&(n=!0),void 0===r&&(r=!1),this._url=t,0===t.indexOf("data:image")?i="image":t=URL.formatURL(t),this._type=i||(i=this.getTypeFromUrl(t)),this._cache=n,this._data=null,!r&&e.loadedMap[t])return this._data=e.loadedMap[t],this.event("progress",1),void this.event("complete",this._data);if(s&&e.setGroup(t,s),null!=e.parserMap[i])return void(e.parserMap[i]instanceof laya.utils.Handler?e.parserMap[i].runWith(this):e.parserMap[i].call(null,this));if("image"===i||"htmlimage"===i||"nativeimage"===i)return this._loadImage(t);if("sound"===i)return this._loadSound(t);if("atlas"==i&&e.preLoadedAtlasConfigMap[t])return this.onLoaded(e.preLoadedAtlasConfigMap[t]),void delete e.preLoadedAtlasConfigMap[t];this._http||(this._http=new HttpRequest,this._http.on("progress",this,this.onProgress),this._http.on("error",this,this.onError),this._http.on("complete",this,this.onLoaded));var a;switch(i){case"atlas":a="json";break;case"font":a="xml";break;default:a=i}this._http.send(t,null,"get",a)},i.getTypeFromUrl=function(t){var i=Utils.getFileExtension(t);return i?e.typeMap[i]:(console.warn("Not recognize the resources suffix",t),"text")},i._loadImage=function(t){function i(){n.onload=null,n.onerror=null,delete e.imgCache[t]}t=URL.formatURL(t);var n,s=this,r=function(){i(),s.onLoaded(n)},a=function(){i(),s.event("error","Load image failed")};"nativeimage"===this._type?(n=new Browser.window.Image,n.crossOrigin="",n.onload=r,n.onerror=a,n.src=t,e.imgCache[t]=n):new HTMLImage.create(t,{onload:r,onerror:a,onCreate:function(i){n=i,e.imgCache[t]=i}})},i._loadSound=function(t){function e(){n(),r.onLoaded(s)}function i(){n(),s.dispose(),r.event("error","Load sound failed")}function n(){s.offAll()}var s=new SoundManager._soundClass,r=this;s.on("complete",this,e),s.on("error",this,i),s.load(t)},i.onProgress=function(t){"atlas"===this._type?this.event("progress",.3*t):this.event("progress",t)},i.onError=function(t){this.event("error",t)},i.onLoaded=function(t){var i=this._type;if("image"===i){var n=new Texture(t);n.url=this._url,this.complete(n)}else if("sound"===i||"htmlimage"===i||"nativeimage"===i)this.complete(t);else if("atlas"===i){if(!t.src&&!t._setContext){if(!this._data){if(this._data=t,t.meta&&t.meta.image)for(var s=t.meta.image.split(","),r=this._url.indexOf("/")>=0?"/":"\\",a=this._url.lastIndexOf(r),o=a>=0?this._url.substr(0,a+1):"",h=0,l=s.length;h<l;h++)s[h]=o+s[h];else s=[this._url.replace(".json",".png")];s.reverse(),t.toLoads=s,t.pics=[]}return this.event("progress",.3+1/s.length*.6),this._loadImage(s.pop())}if(this._data.pics.push(t),this._data.toLoads.length>0)return this.event("progress",.3+1/this._data.toLoads.length*.6),this._loadImage(this._data.toLoads.pop());var c=this._data.frames,u=this._url.split("?")[0],_=this._data.meta&&this._data.meta.prefix?this._data.meta.prefix:u.substring(0,u.lastIndexOf("."))+"/",d=this._data.pics,f=URL.formatURL(this._url),p=e.atlasMap[f]||(e.atlasMap[f]=[]);p.dir=_;for(var g in c){var m=c[g],v=d[m.frame.idx?m.frame.idx:0],y=URL.formatURL(_+g);e.cacheRes(y,Texture.create(v,m.frame.x,m.frame.y,m.frame.w,m.frame.h,m.spriteSourceSize.x,m.spriteSourceSize.y,m.sourceSize.w,m.sourceSize.h)),e.loadedMap[y].url=y,p.push(y)}delete this._data.pics,this.complete(this._data)}else if("font"==i){if(!t.src)return this._data=t,this.event("progress",.5),this._loadImage(this._url.replace(".fnt",".png"));var w=new BitmapFont;w.parseFont(this._data,t);var x=this._url.split(".fnt")[0].split("/"),T=x[x.length-1];Text.registerBitmapFont(T,w),this._data=w,this.complete(this._data)}else this.complete(t)},i.complete=function(t){this._data=t,e._loaders.push(this),e._isWorking||e.checkNext()},i.endLoad=function(t){t&&(this._data=t),this._cache&&e.cacheRes(this._url,this._data),this.event("progress",1),this.event("complete",this.data instanceof Array?[this.data]:this.data)},__getset(0,i,"url",function(){return this._url}),__getset(0,i,"data",function(){return this._data}),__getset(0,i,"cache",function(){return this._cache}),__getset(0,i,"type",function(){return this._type}),e.checkNext=function(){e._isWorking=!0;for(var t=Browser.now();e._startIndex<e._loaders.length;)if(Browser.now(),e._loaders[e._startIndex].endLoad(),e._startIndex++,Browser.now()-t>e.maxTimeOut)return console.warn("loader callback cost a long time:"+(Browser.now()-t)+" url="+e._loaders[e._startIndex-1].url),void Laya.timer.frameOnce(1,null,e.checkNext);e._loaders.length=0,e._startIndex=0,e._isWorking=!1},e.clearRes=function(t,i){void 0===i&&(i=!1),t=URL.formatURL(t);var n=e.getAtlas(t);if(n){for(var s=0,r=n.length;s<r;s++){var a=n[s],o=e.getRes(a);o&&o.destroy(i),delete e.loadedMap[a]}n.length=0,delete e.atlasMap[t],delete e.loadedMap[t]}else{var h=e.loadedMap[t];h&&(h instanceof laya.resource.Texture&&h.bitmap&&h.destroy(i),delete e.loadedMap[t])}},e.setAtlasConfigs=function(t,i){e.preLoadedAtlasConfigMap[URL.formatURL(t)]=i},e.getRes=function(t){return e.loadedMap[URL.formatURL(t)]},e.getAtlas=function(t){return e.atlasMap[URL.formatURL(t)]},e.cacheRes=function(t,i){t=URL.formatURL(t),null!=e.loadedMap[t]?console.warn("Resources already exist,is repeated loading:",t):e.loadedMap[t]=i},e.setGroup=function(t,i){e.groupMap[i]||(e.groupMap[i]=[]),e.groupMap[i].push(t)},e.clearResByGroup=function(t){if(e.groupMap[t]){var i=e.groupMap[t],n=0,s=i.length;for(n=0;n<s;n++)e.clearRes(i[n]);i.length=0}},e.TEXT="text",e.JSON="json",e.XML="xml",e.BUFFER="arraybuffer",e.IMAGE="image",e.SOUND="sound",e.ATLAS="atlas",e.FONT="font",e.typeMap={png:"image",jpg:"image",jpeg:"image",txt:"text",json:"json",xml:"xml",als:"atlas",atlas:"atlas",mp3:"sound",ogg:"sound",wav:"sound",part:"json",fnt:"font"},e.parserMap={},e.groupMap={},e.maxTimeOut=100,e.loadedMap={},e.preLoadedAtlasConfigMap={},e.atlasMap={},e._loaders=[],e._isWorking=!1,e._startIndex=0,e.imgCache={},e}(EventDispatcher),LoaderManager=function(t){function e(){this.retryNum=1,this.retryDelay=0,this.maxLoader=5,this._loaders=[],this._loaderCount=0,this._resInfos=[],this._infoPool=[],this._maxPriority=5,this._failRes={},e.__super.call(this);for(var t=0;t<this._maxPriority;t++)this._resInfos[t]=[]}var i;__class(e,"laya.net.LoaderManager",t);var n=e.prototype;return n.create=function(t,e,i,n,s,r,a){function o(t,i){u++,t.progress=1,u===c&&e&&e.run()}function h(t,e){t.progress=e;for(var i=0,n=0;n<c;n++){i+=l[n].progress}var s=i/c;_.runWith(s)}if(void 0===r&&(r=1),void 0===a&&(a=!0),t instanceof Array){var l=t,c=l.length,u=0;if(i)var _=Handler.create(i.caller,i.method,i.args,!1);for(var d=0;d<c;d++){var f=l[d];"string"==typeof f&&(f=l[d]={url:f}),f.progress=0;var p=i?Handler.create(null,h,[f],!1):null,g=i||e?Handler.create(null,o,[f]):null;this._create(f.url,g,p,f.clas||n,f.params||s,f.priority||r,a)}return!0}return this._create(t,e,i,n,s,r,a)},n._create=function(t,i,n,s,r,a,o){function h(e){l&&l.onAsynLoaded.call(l,t,e,r),i&&i.run(),Laya.loader.event(t)}void 0===a&&(a=1),void 0===o&&(o=!0),t=URL.formatURL(t);var l=this.getRes(t);if(l)!l.hasOwnProperty("loaded")||l.loaded?(n&&n.runWith(1),i&&i.run()):i&&Laya.loader._createListener(t,i.caller,i.method,i.args,!0,!1);else{var c=Utils.getFileExtension(t),u=e.createMap[c];s||(s=u[0]);var _=u[1];"atlas"==c?this.load(t,i,n,_,a,o):(s===Texture&&(_="htmlimage"),l=s?new s:null,l.hasOwnProperty("_loaded")&&(l._loaded=!1),this.load(t,Handler.create(null,h),n,_,a,!1,null,!0),o&&(this.cacheRes(t,l),l.url=t))}return l},n.load=function(t,n,s,r,a,o,h,l){if(void 0===a&&(a=1),void 0===o&&(o=!0),void 0===l&&(l=!1),t instanceof Array)return this._loadAssets(t,n,s,r,a,o,h);var c=Loader.getRes(t);if(null!=c)s&&s.runWith(1),n&&n.runWith(c),this._loaderCount||this.event("complete");else{var u=e._resMap[t];u?(n&&u._createListener("complete",n.caller,n.method,n.args,!1,!1),s&&u._createListener("progress",s.caller,s.method,s.args,!1,!1)):(u=this._infoPool.length?this._infoPool.pop():new i,u.url=t,u.type=r,u.cache=o,u.group=h,u.ignoreCache=l,n&&u.on("complete",n.caller,n.method,n.args),s&&u.on("progress",s.caller,s.method,s.args),e._resMap[t]=u,a=a<this._maxPriority?a:this._maxPriority-1,this._resInfos[a].push(u),this._next())}return this},n._next=function(){if(!(this._loaderCount>=this.maxLoader)){for(var t=0;t<this._maxPriority;t++){var e=this._resInfos[t];if(e.length>0){var i=e.shift();if(i)return this._doLoad(i)}}this._loaderCount||this.event("complete")}},n._doLoad=function(t){function e(e){i.offAll(),i._data=null,n._loaders.push(i),n._endLoad(t,e instanceof Array?[e]:e),n._loaderCount--,n._next()}this._loaderCount++;var i=this._loaders.length?this._loaders.pop():new Loader;i.on("complete",null,e),i.on("progress",null,function(e){t.event("progress",e)}),i.on("error",null,function(t){e(null)});var n=this;i.load(t.url,t.type,t.cache,t.group,t.ignoreCache)},n._endLoad=function(t,i){var n=t.url;if(null==i){var s=this._failRes[n]||0;if(s<this.retryNum)return console.warn("[warn]Retry to load:",n),this._failRes[n]=s+1,void Laya.timer.once(this.retryDelay,this,this._addReTry,[t],!1);console.warn("[error]Failed to load:",n),this.event("error",n)}this._failRes[n]&&(this._failRes[n]=0),delete e._resMap[n],t.event("complete",i),t.offAll(),this._infoPool.push(t)},n._addReTry=function(t){this._resInfos[this._maxPriority-1].push(t),this._next()},n.clearRes=function(t,e){void 0===e&&(e=!1),Loader.clearRes(t,e)},n.getRes=function(t){return Loader.getRes(t)},n.cacheRes=function(t,e){Loader.cacheRes(t,e)},n.setGroup=function(t,e){Loader.setGroup(t,e)},n.clearResByGroup=function(t){Loader.clearResByGroup(t)},n.clearUnLoaded=function(){for(var t=0;t<this._maxPriority;t++){for(var i=this._resInfos[t],n=i.length-1;n>-1;n--){var s=i[n];s&&(s.offAll(),this._infoPool.push(s))}i.length=0}this._loaderCount=0,e._resMap={}},n.cancelLoadByUrls=function(t){if(t)for(var e=0,i=t.length;e<i;e++)this.cancelLoadByUrl(t[e])},n.cancelLoadByUrl=function(t){for(var i=0;i<this._maxPriority;i++)for(var n=this._resInfos[i],s=n.length-1;s>-1;s--){var r=n[s];r&&r.url===t&&(n[s]=null,r.offAll(),this._infoPool.push(r))}e._resMap[t]&&delete e._resMap[t]},n._loadAssets=function(t,e,i,n,s,r,a){function o(t,i){c++,t.progress=1,i||(d=!1),c===l&&e&&e.runWith(d)}function h(t,e){if(null!=i){t.progress=e;for(var n=0,s=0;s<_.length;s++){var r=_[s];n+=r.size*r.progress}var a=n/u;i.runWith(a)}}void 0===s&&(s=1),void 0===r&&(r=!0);for(var l=t.length,c=0,u=0,_=[],d=!0,f=0;f<l;f++){var p=t[f];"string"==typeof p&&(p={url:p,type:n,size:1,priority:s}),p.size||(p.size=1),p.progress=0,u+=p.size,_.push(p);var g=i?Handler.create(null,h,[p],!1):null,m=e||i?Handler.create(null,o,[p]):null;this.load(p.url,m,g,p.type,p.priority||1,r,p.group||a)}return this},e.cacheRes=function(t,e){Loader.cacheRes(t,e)},e._resMap={},__static(e,["createMap",function(){return this.createMap={atlas:[null,"atlas"]}}]),e.__init$=function(){i=function(t){function e(){this.url=null,this.type=null,this.cache=!1,this.group=null,this.ignoreCache=!1,e.__super.call(this)}return __class(e,"",t),e}(EventDispatcher)},e}(EventDispatcher),ColorFilter=function(t){function e(t){e.__super.call(this),t||(t=[.3,.59,.11,0,0,.3,.59,.11,0,0,.3,.59,.11,0,0,0,0,0,1,0]),this._mat=new Float32Array(16),this._alpha=new Float32Array(4);for(var i=0,n=0,s=0;s<20;s++)s%5!=4?this._mat[i++]=t[s]:this._alpha[n++]=t[s];this._action=RunDriver.createFilterAction(32),this._action.data=this}__class(e,"laya.filters.ColorFilter",t);var i=e.prototype;return Laya.imps(i,{"laya.filters.IFilter":!0}),i.callNative=function(t){t._$P.cf=this;t.conchModel&&t.conchModel.setFilterMatrix&&t.conchModel.setFilterMatrix(this._mat,this._alpha)},__getset(0,i,"type",function(){return 32}),__getset(0,i,"action",function(){return this._action}),e}(Filter),Socket=function(t){function e(t,i,n){this._endian=null,this._stamp=NaN,this._socket=null,this._connected=!1,this._addInputPosition=0,this._input=null,this._output=null,this.timeout=0,this.objectEncoding=0,this.disableInput=!1,this._byteClass=null,this.protocols=[],void 0===i&&(i=0),e.__super.call(this),this._byteClass=n?n:Byte,this.endian="bigEndian",this.timeout=2e4,this._addInputPosition=0,t&&i>0&&i<65535&&this.connect(t,i)}__class(e,"laya.net.Socket",t);var i=e.prototype;return i.connect=function(t,e){var i="ws://"+t+":"+e;this.connectByUrl(i)},i.connectByUrl=function(t){var e=this;null!=this._socket&&this.close(),this._socket&&this.cleanSocket(),this.protocols&&0!=this.protocols.length?this._socket=new Browser.window.WebSocket(t,this.protocols):this._socket=new Browser.window.WebSocket(t),this._socket.binaryType="arraybuffer",this._output=new this._byteClass,this._output.endian=this.endian,this._input=new this._byteClass,this._input.endian=this.endian,this._addInputPosition=0,this._socket.onopen=function(t){e._onOpen(t)},this._socket.onmessage=function(t){e._onMessage(t)},this._socket.onclose=function(t){e._onClose(t)},this._socket.onerror=function(t){e._onError(t)}},i.cleanSocket=function(){try{this._socket.close()}catch(t){}this._connected=!1,this._socket.onopen=null,this._socket.onmessage=null,this._socket.onclose=null,this._socket.onerror=null,this._socket=null},i.close=function(){if(null!=this._socket)try{this._socket.close()}catch(t){}},i._onOpen=function(t){this._connected=!0,this.event("open",t)},i._onMessage=function(t){if(t&&t.data){var e=t.data;if(this.disableInput&&e)return void this.event("message",e);this._input.length>0&&this._input.bytesAvailable<1&&(this._input.clear(),this._addInputPosition=0);var i=this._input.pos;!this._addInputPosition&&(this._addInputPosition=0),this._input.pos=this._addInputPosition,e&&("string"==typeof e?this._input.writeUTFBytes(e):this._input.writeArrayBuffer(e),this._addInputPosition=this._input.pos,this._input.pos=i),this.event("message",e)}},i._onClose=function(t){this._connected=!1,this.event("close",t)},i._onError=function(t){this.event("error",t)},i.send=function(t){this._socket.send(t)},i.flush=function(){if(this._output&&this._output.length>0){var t;try{this._socket&&this._socket.send(this._output.__getBuffer().slice(0,this._output.length))}catch(e){t=e}this._output.endian=this.endian,this._output.clear(),t&&this.event("error",t)}},__getset(0,i,"input",function(){return this._input}),__getset(0,i,"output",function(){return this._output}),__getset(0,i,"connected",function(){return this._connected}),__getset(0,i,"endian",function(){return this._endian},function(t){this._endian=t,null!=this._input&&(this._input.endian=t),null!=this._output&&(this._output.endian=t)}),e.LITTLE_ENDIAN="littleEndian",e.BIG_ENDIAN="bigEndian",e}(EventDispatcher),WorkerLoader=function(t){function e(){this.worker=null,e.__super.call(this);var t=this;this.worker=new Browser.window.Worker(e.workerPath),this.worker.onmessage=function(e){t.workerMessage(e.data)}}__class(e,"laya.net.WorkerLoader",t);var i=e.prototype;return i.workerMessage=function(t){if(t)switch(t.type){case"Image":this.imageLoaded(t);break;case"Msg":this.event("image_msg",t.msg)}},i.imageLoaded=function(t){if(t&&t.buffer&&t.buffer.length<10)return e._enable=!1,this._myTrace("buffer lost when postmessage ,disable workerloader"),this.event(t.url,null),void this.event("image_err",t.url+"\n"+t.msg);if(!t.dataType)return this.event(t.url,null),void this.event("image_err",t.url+"\n"+t.msg);var i,n=new HTMLCanvas("2D");i=n.source.getContext("2d");var s;switch(t.dataType){case"buffer":s=i.createImageData(t.width,t.height),s.data.set(t.buffer),n.size(s.width,s.height),i.putImageData(s,0,0);break;case"imagedata":s=t.imagedata,n.size(s.width,s.height),i.putImageData(s,0,0),s=t.imagedata;break;case"imageBitmap":s=t.imageBitmap,n.size(s.width,s.height),i.drawImage(s,0,0)}Render.isWebGL&&(n.memorySize=0,n=new laya.webgl.resource.WebGLImage(n,t.url)),this.event(t.url,n)},i._myTrace=function(t){var e=arguments,i=[],n=0,s=e.length;for(n=0;n<s;n++)i.push(e[n]);this.event("image_msg",i.join(" "))},i.loadImage=function(t){var e;e={},e.type="load",e.url=t,this.worker.postMessage(e)},i._loadImage=function(t){function i(){laya.net.WorkerLoader.I.off(t,n,s)}var n=this;if(!e._enable||t.toLowerCase().indexOf(".png")<0)return void e._preLoadFun.call(n,t);t=URL.formatURL(t);var s=function(s){i(),s?n.onLoaded(s):e._preLoadFun.call(n,t)};laya.net.WorkerLoader.I.on(t,n,s),laya.net.WorkerLoader.I.loadImage(t)},__getset(1,e,"enable",function(){return e._enable},function(t){e.disableJSDecode&&!Browser.window.createImageBitmap||(e._enable=t,e._enable&&null==e._preLoadFun&&(e._enable=e.__init__()))}),e.__init__=function(){return null==e._preLoadFun&&(!!Browser.window.Worker&&(e._preLoadFun=Loader.prototype._loadImage,Loader.prototype._loadImage=e.prototype._loadImage,e.I||(e.I=new e),!0))},e.workerSupported=function(){return!!Browser.window.Worker},e.IMAGE_LOADED="image_loaded",e.IMAGE_ERR="image_err",e.IMAGE_MSG="image_msg",e.I=null,e._preLoadFun=null,e._enable=!1,e.workerPath="libs/worker.js",e.disableJSDecode=!0,e}(EventDispatcher),Resource=function(t){function e(){e.__super.call(this),this._$1__id=++e._uniqueIDCounter,this.__loaded=!0,this._disposed=!1,e._loadedResources.push(this),e._isLoadedResourcesSorted=!1,this._released=!0,this.lock=!1,this._memorySize=0,this._lastUseFrameCount=-1,ResourceManager.currentResourceManager&&ResourceManager.currentResourceManager.addResource(this)}__class(e,"laya.resource.Resource",t);var i=e.prototype;return Laya.imps(i,{"laya.resource.ICreateResource":!0,"laya.resource.IDispose":!0}),i._endLoaded=function(){this.__loaded=!0,this.event("loaded",this)},i.recreateResource=function(){this.startCreate(),this.completeCreate()},i.detoryResource=function(){},i.activeResource=function(t){void 0===t&&(t=!1),this._lastUseFrameCount=Stat.loopCount,(this._released||t)&&this.recreateResource()},i.releaseResource=function(t){return void 0===t&&(t=!1),!(!t&&this.lock)&&(!(this._released&&!t)&&(this.detoryResource(),this._released=!0,this._lastUseFrameCount=-1,this.event("released",this),!0))},i.setUniqueName=function(t){for(var i=!0,n=0;n<e._loadedResources.length;n++)if(e._loadedResources[n]._name===t&&e._loadedResources[n]!==this)return void(i=!1);i?this.name!=t&&(this.name=t,e._isLoadedResourcesSorted=!1):this.setUniqueName(t.concat("-copy"))},i.onAsynLoaded=function(t,e,i){throw new Error("Resource: must override this function!")},i.dispose=function(){if(null!==this._resourceManager)throw new Error("附属于resourceManager的资源不能独立释放！");this._disposed=!0,this.lock=!1,this.releaseResource();var t=e._loadedResources.indexOf(this);t!==-1&&(e._loadedResources.splice(t,1),e._isLoadedResourcesSorted=!1),Loader.clearRes(this.url)},i.startCreate=function(){this.event("recovering",this)},i.completeCreate=function(){this._released=!1,this.event("recovered",this)},__getset(0,i,"memorySize",function(){return this._memorySize},function(t){var e=t-this._memorySize;this._memorySize=t,this.resourceManager&&this.resourceManager.addSize(e)}),__getset(0,i,"_loaded",null,function(t){this.__loaded=t}),__getset(0,i,"loaded",function(){return this.__loaded}),__getset(0,i,"id",function(){return this._$1__id}),__getset(0,i,"name",function(){return this._name},function(t){!t&&""===t||this.name===t||(this._name=t,e._isLoadedResourcesSorted=!1)}),__getset(0,i,"disposed",function(){return this._disposed}),__getset(0,i,"released",function(){return this._released}),__getset(0,i,"resourceManager",function(){return this._resourceManager}),__getset(0,i,"lastUseFrameCount",function(){return this._lastUseFrameCount}),__getset(0,i,"url",function(){return this._url},function(t){this._url=t}),__getset(1,e,"sortedLoadedResourcesByName",function(){return e._isLoadedResourcesSorted||(e._isLoadedResourcesSorted=!0,e._loadedResources.sort(e.compareResourcesByName)),e._loadedResources},laya.events.EventDispatcher._$SET_sortedLoadedResourcesByName),e.getLoadedResourceByIndex=function(t){return e._loadedResources[t]},e.getLoadedResourcesCount=function(){return e._loadedResources.length},e.compareResourcesByName=function(t,e){if(t===e)return 0;var i=t.name,n=e.name;if(null===i)return null===n?0:-1;if(null==n)return 1;var s=i.localeCompare(n);return 0!=s?s:(e.setUniqueName(n),n=e.name,i.localeCompare(n))},e._uniqueIDCounter=0,e._loadedResources=[],e._isLoadedResourcesSorted=!1,e}(EventDispatcher),Texture=function(t){function e(t,i){this.offsetX=0,this.offsetY=0,this.sourceWidth=0,this.sourceHeight=0,this._w=0,this._h=0,this._uvID=0,e.__super.call(this),t&&t.useNum++,this.setTo(t,i)}__class(e,"laya.resource.Texture",t);var i=e.prototype;return i.setTo=function(t,i){if(this.bitmap=t,this.uv=i||e.DEF_UV,t){this._w=t.width,this._h=t.height,this.sourceWidth=this.sourceWidth||this._w,this.sourceHeight=this.sourceHeight||this._h,this._loaded=this._w>0;var n=this;if(this._loaded)RunDriver.addToAtlas&&RunDriver.addToAtlas(n);else{var s=t;s instanceof laya.resource.HTMLImage&&s.image&&s.image.addEventListener("load",function(t){RunDriver.addToAtlas&&RunDriver.addToAtlas(n)},!1)}}},i.active=function(){this.bitmap&&this.bitmap.activeResource()},i.destroy=function(t){if(void 0===t&&(t=!1),this.bitmap&&this.bitmap.useNum>0){var e=this.bitmap;t?(this.bitmap=null,e.dispose(),e.useNum=0):0==--e.useNum&&(this.bitmap=null,e.dispose()),this.url&&this===Laya.loader.getRes(this.url)&&Laya.loader.clearRes(this.url,t),this._loaded=!1}},i.load=function(t){var e=this;this._loaded=!1,t=URL.customFormat(t);var i=this.bitmap||(this.bitmap=HTMLImage.create(t));i&&i.useNum++;var n=this;i.onload=function(){i.onload=null,n._loaded=!0,e.sourceWidth=e._w=i.width,e.sourceHeight=e._h=i.height,n.event("loaded",this),RunDriver.addToAtlas&&RunDriver.addToAtlas(n)}},i.addTextureToAtlas=function(t){RunDriver.addTextureToAtlas(this)},i.getPixels=function(t,e,i,n){return Render.isWebGL?RunDriver.getTexturePixels(this,t,e,i,n):(Browser.canvas.size(i,n),Browser.canvas.clear(),Browser.context.drawTexture(this,-t,-e,this.width,this.height,0,0),Browser.context.getImageData(0,0,i,n).data)},i.onAsynLoaded=function(t,e){e&&e.useNum++,this.setTo(e,this.uv)},__getset(0,i,"source",function(){return this.bitmap?(this.bitmap.activeResource(),this.bitmap.source):null}),__getset(0,i,"loaded",function(){return this._loaded}),__getset(0,i,"released",function(){return!this.bitmap||this.bitmap.released}),__getset(0,i,"width",function(){return this._w?this._w:this.uv&&this.uv!==e.DEF_UV?(this.uv[2]-this.uv[0])*this.bitmap.width:this.bitmap.width},function(t){this._w=t,this.sourceWidth||(this.sourceWidth=t)}),__getset(0,i,"repeat",function(){return!Render.isWebGL||!this.bitmap||this.bitmap.repeat},function(t){t&&Render.isWebGL&&this.bitmap&&(this.bitmap.repeat=t,t&&(this.bitmap.enableMerageInAtlas=!1))}),__getset(0,i,"height",function(){return this._h?this._h:this.uv&&this.uv!==e.DEF_UV?(this.uv[5]-this.uv[1])*this.bitmap.height:this.bitmap.height},function(t){this._h=t,this.sourceHeight||(this.sourceHeight=t)}),__getset(0,i,"isLinearSampling",function(){return!Render.isWebGL||9728!=this.bitmap.minFifter},function(t){!t&&Render.isWebGL&&(t||this.bitmap.minFifter!=-1||this.bitmap.magFifter!=-1||(this.bitmap.minFifter=9728,this.bitmap.magFifter=9728,this.bitmap.enableMerageInAtlas=!1))}),e.moveUV=function(t,e,i){for(var n=0;n<8;n+=2)i[n]+=t,i[n+1]+=e;return i},e.create=function(t,i,n,s,r,a,o,h,l){void 0===a&&(a=0),void 0===o&&(o=0),void 0===h&&(h=0),void 0===l&&(l=0);var c=t instanceof laya.resource.Texture,u=c?t.uv:e.DEF_UV,_=c?t.bitmap:t,d=new e(_,null);_.width&&i+s>_.width&&(s=_.width-i),_.height&&n+r>_.height&&(r=_.height-n),d.width=s,d.height=r,d.offsetX=a,d.offsetY=o,d.sourceWidth=h||s,d.sourceHeight=l||r;var f=1/_.width,p=1/_.height;i*=f,n*=p,s*=f,r*=p;var g=d.uv[0],m=d.uv[1],v=d.uv[4],y=d.uv[5],w=v-g,x=y-m,T=e.moveUV(u[0],u[1],[i,n,i+s,n,i+s,n+r,i,n+r]);return d.uv=[g+T[0]*w,m+T[1]*x,v-(1-T[2])*w,m+T[3]*x,v-(1-T[4])*w,y-(1-T[5])*x,g+T[6]*w,y-(1-T[7])*x],d},e.createFromTexture=function(t,i,n,s,r){var a=Rectangle.TEMP.setTo(i-t.offsetX,n-t.offsetY,s,r),o=a.intersection(e._rect1.setTo(0,0,t.width,t.height),e._rect2);if(!o)return null;var h=e.create(t,o.x,o.y,o.width,o.height,o.x-a.x,o.y-a.y,s,r);return h.bitmap.useNum--,h},e.DEF_UV=[0,0,1,0,1,1,0,1],e.INV_UV=[0,1,1,1,1,0,0,0],e._rect1=new Rectangle,e._rect2=new Rectangle,e}(EventDispatcher),TimeLine=function(t){function e(){this._labelDic=null,this._tweenDic={},this._tweenDataList=[],this._endTweenDataList=null,this._currTime=0,this._lastTime=0,this._startTime=0,this._index=0,this._gidIndex=0,this._firstTweenDic={},this._startTimeSort=!1,this._endTimeSort=!1,this._loopKey=!1,this.scale=1,this._frameRate=60,this._frameIndex=0,this._total=0,e.__super.call(this)}var i;__class(e,"laya.utils.TimeLine",t);var n=e.prototype;return n.to=function(t,e,i,n,s){
return void 0===s&&(s=0),this._create(t,e,i,n,s,!0)},n.from=function(t,e,i,n,s){return void 0===s&&(s=0),this._create(t,e,i,n,s,!1)},n._create=function(t,e,n,s,r,a){var o=Pool.getItemByClass("tweenData",i);return o.isTo=a,o.type=0,o.target=t,o.duration=n,o.data=e,o.startTime=this._startTime+r,o.endTime=o.startTime+o.duration,o.ease=s,this._startTime=Math.max(o.endTime,this._startTime),this._tweenDataList.push(o),this._startTimeSort=!0,this._endTimeSort=!0,this},n.addLabel=function(t,e){var n=Pool.getItemByClass("tweenData",i);return n.type=1,n.data=t,n.endTime=n.startTime=this._startTime+e,this._labelDic||(this._labelDic={}),this._labelDic[t]=n,this._tweenDataList.push(n),this},n.removeLabel=function(t){if(this._labelDic&&this._labelDic[t]){var e=this._labelDic[t];if(e){var i=this._tweenDataList.indexOf(e);i>-1&&this._tweenDataList.splice(i,1)}delete this._labelDic[t]}},n.gotoTime=function(t){function e(t,e){return t.endTime>e.endTime?1:t.endTime<e.endTime?-1:0}if(null!=this._tweenDataList&&0!=this._tweenDataList.length){var i,n;for(var s in this._firstTweenDic)if(n=this._firstTweenDic[s])for(var r in n)n.diyTarget.hasOwnProperty(r)&&(n.diyTarget[r]=n[r]);for(s in this._tweenDic)i=this._tweenDic[s],i.clear(),delete this._tweenDic[s];this._index=0,this._gidIndex=0,this._currTime=t,this._lastTime=Browser.now();var a;null==this._endTweenDataList||this._endTimeSort?(this._endTimeSort=!1,this._endTweenDataList=a=this._tweenDataList.concat(),a.sort(e)):a=this._endTweenDataList;for(var o,h=0,l=a.length;h<l;h++)if(o=a[h],0==o.type){if(!(t>=o.endTime))break;this._index=Math.max(this._index,h+1);var c=o.data;if(o.isTo)for(var u in c)o.target[u]=c[u]}for(h=0,l=this._tweenDataList.length;h<l;h++)o=this._tweenDataList[h],0==o.type&&t>=o.startTime&&t<o.endTime&&(this._index=Math.max(this._index,h+1),this._gidIndex++,i=Pool.getItemByClass("tween",Tween),i._create(o.target,o.data,o.duration,o.ease,Handler.create(this,this._animComplete,[this._gidIndex]),0,!1,o.isTo,!0,!1),i.setStartTime(this._currTime-(t-o.startTime)),i._updateEase(this._currTime),i.gid=this._gidIndex,this._tweenDic[this._gidIndex]=i)}},n.gotoLabel=function(t){if(null!=this._labelDic){var e=this._labelDic[t];e&&this.gotoTime(e.startTime)}},n.pause=function(){Laya.timer.clear(this,this._update)},n.resume=function(){this.play(this._currTime,this._loopKey)},n.play=function(t,e){function i(t,e){return t.startTime>e.startTime?1:t.startTime<e.startTime?-1:0}if(void 0===t&&(t=0),void 0===e&&(e=!1),this._tweenDataList){if(this._startTimeSort){this._startTimeSort=!1,this._tweenDataList.sort(i);for(var n=0,s=this._tweenDataList.length;n<s;n++){var r=this._tweenDataList[n];if(null!=r&&0==r.type){var a=r.target,o=a.$_GID||(a.$_GID=Utils.getGID()),h=null;null==this._firstTweenDic[o]?(h={},h.diyTarget=a,this._firstTweenDic[o]=h):h=this._firstTweenDic[o];for(var l in r.data)null==h[l]&&(h[l]=a[l])}}}"string"==typeof t?this.gotoLabel(t):this.gotoTime(t),this._loopKey=e,this._lastTime=Browser.now(),Laya.timer.frameLoop(1,this,this._update)}},n._update=function(){if(this._currTime>=this._startTime){if(!this._loopKey){for(var t in this._tweenDic)s=this._tweenDic[t],s.complete();return this._complete(),void this.pause()}if(this._complete(),!this._tweenDataList)return;this.gotoTime(0)}var e=Browser.now(),i=e-this._lastTime,n=this._currTime+=i*this.scale;this._lastTime=e;for(t in this._tweenDic)s=this._tweenDic[t],s._updateEase(n);var s;if(0!=this._tweenDataList.length&&this._index<this._tweenDataList.length){var r=this._tweenDataList[this._index];n>=r.startTime&&(this._index++,0==r.type?(this._gidIndex++,s=Pool.getItemByClass("tween",Tween),s._create(r.target,r.data,r.duration,r.ease,Handler.create(this,this._animComplete,[this._gidIndex]),0,!1,r.isTo,!0,!1),s.setStartTime(n),s.gid=this._gidIndex,this._tweenDic[this._gidIndex]=s,s._updateEase(n)):this.event("label",r.data))}},n._animComplete=function(t){this._tweenDic[t]&&delete this._tweenDic[t]},n._complete=function(){this.event("complete")},n.reset=function(){var t;if(this._labelDic)for(t in this._labelDic)delete this._labelDic[t];var e;for(t in this._tweenDic)e=this._tweenDic[t],e.clear(),delete this._tweenDic[t];for(t in this._firstTweenDic)delete this._firstTweenDic[t];if(this._endTweenDataList=null,this._tweenDataList&&this._tweenDataList.length){var i=0,n=0;for(n=this._tweenDataList.length,i=0;i<n;i++)this._tweenDataList[i]&&this._tweenDataList[i].destroy()}this._tweenDataList.length=0,this._currTime=0,this._lastTime=0,this._startTime=0,this._index=0,this._gidIndex=0,this.scale=1,Laya.timer.clear(this,this._update)},n.destroy=function(){this.reset(),this._labelDic=null,this._tweenDic=null,this._tweenDataList=null,this._firstTweenDic=null},__getset(0,n,"index",function(){return this._frameIndex},function(t){this._frameIndex=t,this.gotoTime(this._frameIndex/this._frameRate*1e3)}),__getset(0,n,"total",function(){return this._total=Math.floor(this._startTime/1e3*this._frameRate),this._total}),e.to=function(t,i,n,s,r){return void 0===r&&(r=0),(new e).to(t,i,n,s,r)},e.from=function(t,i,n,s,r){return void 0===r&&(r=0),(new e).from(t,i,n,s,r)},e.__init$=function(){i=function(){function t(){this.type=0,this.isTo=!0,this.startTime=NaN,this.endTime=NaN,this.target=null,this.duration=NaN,this.ease=null,this.data=null}return __class(t,""),t.prototype.destroy=function(){this.target=null,this.ease=null,this.data=null,this.isTo=!0,this.type=0,Pool.recover("tweenData",this)},t}()},e}(EventDispatcher),Sprite=function(t){function e(){this._transform=null,this._tfChanged=!1,this._x=0,this._y=0,this._width=0,this._height=0,this._repaint=1,this._mouseEnableState=0,this._zOrder=0,this._graphics=null,this._renderType=0,this._optimizeScrollRect=!1,this._texture=null,this._childRenderMax=!1,this.mouseThrough=!1,this.autoSize=!1,this.hitTestPrior=!1,this.viewport=null,e.__super.call(this),this._style=Style.EMPTY}__class(e,"laya.display.Sprite",t);var i=e.prototype;return Laya.imps(i,{"laya.display.ILayout":!0}),i.createConchModel=function(){return new ConchNode},i.destroy=function(e){void 0===e&&(e=!0),t.prototype.destroy.call(this,e),this._style&&this._style.destroy(),this._transform=null,this._style=null,this._graphics=null},i.updateZOrder=function(){Utils.updateOrder(this._childs)&&this.repaint()},i.reCache=function(){this._$P.cacheCanvas&&(this._$P.cacheCanvas.reCache=!0),this._repaint=1},i.setBounds=function(t){this._set$P("uBounds",t)},i.getBounds=function(){return this._$P.mBounds||this._set$P("mBounds",new Rectangle),Rectangle._getWrapRec(this._boundPointsToParent(),this._$P.mBounds)},i.getSelfBounds=function(){return this._$P.uBounds?this._$P.uBounds:(this._$P.mBounds||this._set$P("mBounds",new Rectangle),Rectangle._getWrapRec(this._getBoundPointsM(!1),this._$P.mBounds))},i._boundPointsToParent=function(t){void 0===t&&(t=!1);var e=0,i=0;this._style&&(e=this._style._tf.translateX,i=this._style._tf.translateY,t=t||0!==this._style._tf.rotate,this._style.scrollRect&&(e+=this._style.scrollRect.x,i+=this._style.scrollRect.y));var n=this._getBoundPointsM(t);if(!n||n.length<1)return n;if(8!=n.length&&(n=t?GrahamScan.scanPList(n):Rectangle._getWrapRec(n,Rectangle.TEMP)._getBoundPoints()),!this.transform)return Utils.transPointList(n,this._x-e,this._y-i),n;var s=Point.TEMP,r=0,a=n.length;for(r=0;r<a;r+=2)s.x=n[r],s.y=n[r+1],this.toParentPoint(s),n[r]=s.x,n[r+1]=s.y;return n},i.getGraphicBounds=function(t){return void 0===t&&(t=!1),this._graphics?this._graphics.getBounds(t):Rectangle.TEMP.setTo(0,0,0,0)},i._getBoundPointsM=function(t){if(void 0===t&&(t=!1),this._$P.uBounds)return this._$P.uBounds._getBoundPoints();if(this._$P.temBM||this._set$P("temBM",[]),this.scrollRect){var e=Utils.clearArray(this._$P.temBM),i=Rectangle.TEMP;return i.copyFrom(this.scrollRect),Utils.concatArray(e,i._getBoundPoints()),e}var n,s,r,a=this._graphics?this._graphics.getBoundPoints():Utils.clearArray(this._$P.temBM);r=this._childs;for(var o=0,h=r.length;o<h;o++)(n=r[o])instanceof laya.display.Sprite&&1==n.visible&&(s=n._boundPointsToParent(t))&&(a=a?Utils.concatArray(a,s):s);return a},i.getStyle=function(){return this._style===Style.EMPTY&&(this._style=new Style,this._childRenderMax=!0),this._style},i.setStyle=function(t){this._style=t},i._adjustTransform=function(){"use strict";this._tfChanged=!1;var t,e=this._style,i=e._tf,n=i.scaleX,s=i.scaleY;if(i.rotate||1!==n||1!==s||i.skewX||i.skewY){t=this._transform||(this._transform=Matrix.create()),t.bTransform=!0;var r=.0174532922222222*(i.rotate-i.skewX),a=.0174532922222222*(i.rotate+i.skewY),o=Math.cos(a),h=Math.sin(a),l=Math.sin(r),c=Math.cos(r);return t.a=n*o,t.b=n*h,t.c=-s*l,t.d=s*c,t.tx=t.ty=0,t}return this._transform&&this._transform.destroy(),this._transform=null,this._renderType&=-5,t},i.pos=function(t,e,i){if(void 0===i&&(i=!1),this._x!==t||this._y!==e){if(this.destroyed)return this;if(i){this._x=t,this._y=e,this.conchModel&&this.conchModel.pos(this._x,this._y);var n=this._parent;n&&0===n._repaint&&(n._repaint=1,n.parentRepaint()),this._$P.maskParent&&0===this._$P.maskParent._repaint&&(this._$P.maskParent._repaint=1,this._$P.maskParent.parentRepaint())}else this.x=t,this.y=e}return this},i.pivot=function(t,e){return this.pivotX=t,this.pivotY=e,this},i.size=function(t,e){return this.width=t,this.height=e,this},i.scale=function(t,e,i){void 0===i&&(i=!1);var n=this.getStyle(),s=n._tf;if(s.scaleX!=t||s.scaleY!=e){if(this.destroyed)return this;if(i){n.setScale(t,e),this._tfChanged=!0,this.conchModel&&this.conchModel.scale(t,e),this._renderType|=4;var r=this._parent;r&&0===r._repaint&&(r._repaint=1,r.parentRepaint())}else this.scaleX=t,this.scaleY=e}return this},i.skew=function(t,e){return this.skewX=t,this.skewY=e,this},i.render=function(t,e,i){Stat.spriteCount++,RenderSprite.renders[this._renderType]._fun(this,t,e+this._x,i+this._y),this._repaint=0},i.drawToCanvas=function(t,e,i,n){if(Render.isConchNode){var s=HTMLCanvas.create("2D");return new RenderContext(t,e,s).ctx.setCanvasType(1),this.conchModel.drawToCanvas(s.source,i,n),s}return RunDriver.drawToCanvas(this,this._renderType,t,e,i,n)},i.customRender=function(t,e,i){this._renderType|=1024},i._applyFilters=function(){if(!Render.isWebGL){var t;if((t=this._$P.filters)&&!(t.length<1))for(var e=0,i=t.length;e<i;e++)t[e].action.apply(this._$P.cacheCanvas)}},i._isHaveGlowFilter=function(){var t=0,e=0;if(this.filters)for(t=0;t<this.filters.length;t++)if(8==this.filters[t].type)return!0;for(t=0,e=this._childs.length;t<e;t++)if(this._childs[t]._isHaveGlowFilter())return!0;return!1},i.localToGlobal=function(t,e){void 0===e&&(e=!1),e===!0&&(t=new Point(t.x,t.y));for(var i=this;i&&i!=Laya.stage;)t=i.toParentPoint(t),i=i.parent;return t},i.globalToLocal=function(t,e){void 0===e&&(e=!1),e&&(t=new Point(t.x,t.y));for(var i=this,n=[];i&&i!=Laya.stage;)n.push(i),i=i.parent;for(var s=n.length-1;s>=0;)i=n[s],t=i.fromParentPoint(t),s--;return t},i.toParentPoint=function(t){if(!t)return t;t.x-=this.pivotX,t.y-=this.pivotY,this.transform&&this._transform.transformPoint(t),t.x+=this._x,t.y+=this._y;var e=this._style.scrollRect;return e&&(t.x-=e.x,t.y-=e.y),t},i.fromParentPoint=function(t){if(!t)return t;t.x-=this._x,t.y-=this._y;var e=this._style.scrollRect;return e&&(t.x+=e.x,t.y+=e.y),this.transform&&this._transform.invertTransformPoint(t),t.x+=this.pivotX,t.y+=this.pivotY,t},i.on=function(e,i,n,s){return 1!==this._mouseEnableState&&this.isMouseEvent(e)?(this.mouseEnabled=!0,this._setBit(2,!0),this._parent&&this._$2__onDisplay(),this._createListener(e,i,n,s,!1)):t.prototype.on.call(this,e,i,n,s)},i.once=function(e,i,n,s){return 1!==this._mouseEnableState&&this.isMouseEvent(e)?(this.mouseEnabled=!0,this._setBit(2,!0),this._parent&&this._$2__onDisplay(),this._createListener(e,i,n,s,!0)):t.prototype.once.call(this,e,i,n,s)},i._$2__onDisplay=function(){if(1!==this._mouseEnableState){var t=this;for(t=t.parent;t&&1!==t._mouseEnableState&&!t._getBit(2);)t.mouseEnabled=!0,t._setBit(2,!0),t=t.parent}},i.loadImage=function(t,e,i,n,s,r){function a(t){o.destroyed||(o.size(e+(n||t.width),i+(s||t.height)),o.repaint(),r&&r.runWith(t))}var o=this;return void 0===e&&(e=0),void 0===i&&(i=0),void 0===n&&(n=0),void 0===s&&(s=0),this.graphics.loadImage(t,e,i,n,s,a),this},i.repaint=function(){this.conchModel&&this.conchModel.repaint&&this.conchModel.repaint(),0===this._repaint&&(this._repaint=1,this.parentRepaint()),this._$P&&this._$P.maskParent&&this._$P.maskParent.repaint()},i._needRepaint=function(){return 0!==this._repaint&&this._$P.cacheCanvas&&this._$P.cacheCanvas.reCache},i._childChanged=function(t){this._childs.length?this._renderType|=2048:this._renderType&=-2049,t&&this._get$P("hasZorder")&&Laya.timer.callLater(this,this.updateZOrder),this.repaint()},i.parentRepaint=function(){var t=this._parent;t&&0===t._repaint&&(t._repaint=1,t.parentRepaint())},i.startDrag=function(t,e,i,n,s,r,a){void 0===e&&(e=!1),void 0===i&&(i=0),void 0===n&&(n=300),void 0===r&&(r=!1),void 0===a&&(a=.92),this._$P.dragging||this._set$P("dragging",new Dragging),this._$P.dragging.start(this,t,e,i,n,s,r,a)},i.stopDrag=function(){this._$P.dragging&&this._$P.dragging.stop()},i._setDisplay=function(e){if(!e){var i=this._$P.cacheCanvas;i&&i.ctx&&(Pool.recover("RenderContext",i.ctx),i.ctx.canvas.size(0,0),i.ctx=null);var n=this._$P._filterCache;n&&(n.destroy(),n.recycle(),this._set$P("_filterCache",null)),this._$P._isHaveGlowFilter&&this._set$P("_isHaveGlowFilter",!1)}t.prototype._setDisplay.call(this,e)},i.hitTestPoint=function(t,e){var i=this.globalToLocal(Point.TEMP.setTo(t,e));return(this._$P.hitArea?this._$P.hitArea:this._width>0&&this._height>0?Rectangle.TEMP.setTo(0,0,this._width,this._height):this.getSelfBounds()).contains(i.x,i.y)},i.getMousePoint=function(){return this.globalToLocal(Point.TEMP.setTo(Laya.stage.mouseX,Laya.stage.mouseY))},i._getWords=function(){return null},i._addChildsToLayout=function(t){var e=this._getWords();if(null==e&&0==this._childs.length)return!1;if(e)for(var i=0,n=e.length;i<n;i++)t.push(e[i]);return this._childs.forEach(function(e,i,n){e._style._enableLayout()&&e._addToLayout(t)}),!0},i._addToLayout=function(t){this._style.absolute||(this._style.block?t.push(this):this._addChildsToLayout(t)&&(this.x=this.y=0))},i._isChar=function(){return!1},i._getCSSStyle=function(){return this._style.getCSSStyle()},i._setAttributes=function(t,e){switch(t){case"x":this.x=parseFloat(e);break;case"y":this.y=parseFloat(e);break;case"width":this.width=parseFloat(e);break;case"height":this.height=parseFloat(e);break;default:this[t]=e}},i._layoutLater=function(){this.parent&&this.parent._layoutLater()},__getset(0,i,"optimizeScrollRect",function(){return this._optimizeScrollRect},function(t){this._optimizeScrollRect!=t&&(this._optimizeScrollRect=t,this.conchModel&&this.conchModel.optimizeScrollRect(t))}),__getset(0,i,"customRenderEnable",null,function(t){if(t&&(this._renderType|=1024,Render.isConchNode)){e.CustomList.push(this);var i=new HTMLCanvas("2d");i._setContext(new CanvasRenderingContext2D),this.customContext=new RenderContext(0,0,i),i.context.setCanvasType&&i.context.setCanvasType(2),this.conchModel.custom(i.context)}}),__getset(0,i,"cacheAsBitmap",function(){return"none"!==this.cacheAs},function(t){this.cacheAs=t?this._$P.hasFilter?"none":"normal":"none"}),__getset(0,i,"cacheAs",function(){return null==this._$P.cacheCanvas?"none":this._$P.cacheCanvas.type},function(t){var e=this._$P.cacheCanvas;if(t!==(e?e.type:"none")){if("none"!==t)this._getBit(1)||this._setUpNoticeType(1),e||(e=this._set$P("cacheCanvas",Pool.getItemByClass("cacheCanvas",Object))),e.type=t,e.reCache=!0,this._renderType|=16,"bitmap"==t&&this.conchModel&&this.conchModel.cacheAs(1),this._set$P("cacheForFilters",!1);else if(this._$P.hasFilter)this._set$P("cacheForFilters",!0);else{if(e){var i=e;i&&i.ctx&&(Pool.recover("RenderContext",i.ctx),i.ctx.canvas.size(0,0),i.ctx=null),Pool.recover("cacheCanvas",e)}this._$P.cacheCanvas=null,this._renderType&=-17,this.conchModel&&this.conchModel.cacheAs(0)}this.repaint()}}),__getset(0,i,"zOrder",function(){return this._zOrder},function(t){this._zOrder!=t&&(this._zOrder=t,this.conchModel&&this.conchModel.setZOrder&&this.conchModel.setZOrder(t),this._parent&&(t&&this._parent._set$P("hasZorder",!0),Laya.timer.callLater(this._parent,this.updateZOrder)))}),__getset(0,i,"rotation",function(){return this._style._tf.rotate},function(t){var e=this.getStyle();if(e._tf.rotate!==t){e.setRotate(t),this._tfChanged=!0,this.conchModel&&this.conchModel.rotate(t),this._renderType|=4;var i=this._parent;i&&0===i._repaint&&(i._repaint=1,i.parentRepaint())}}),__getset(0,i,"width",function(){return this.autoSize?this.getSelfBounds().width:this._width},function(t){this._width!==t&&(this._width=t,this.conchModel&&this.conchModel.size(t,this._height),this.repaint())}),__getset(0,i,"x",function(){return this._x},function(t){if(this._x!==t){if(this.destroyed)return;this._x=t,this.conchModel&&this.conchModel.pos(t,this._y);var e=this._parent;e&&0===e._repaint&&(e._repaint=1,e.parentRepaint()),this._$P.maskParent&&0===this._$P.maskParent._repaint&&(this._$P.maskParent._repaint=1,this._$P.maskParent.parentRepaint())}}),__getset(0,i,"globalScaleY",function(){for(var t=1,e=this;e&&e!==Laya.stage;)t*=e.scaleY,e=e.parent;return t}),__getset(0,i,"hitArea",function(){return this._$P.hitArea},function(t){this._set$P("hitArea",t)}),__getset(0,i,"staticCache",function(){return this._$P.staticCache},function(t){this._set$P("staticCache",t),t||this.reCache()}),__getset(0,i,"texture",function(){return this._texture},function(t){this._texture!=t&&(this._texture=t,this.graphics.cleanByTexture(t,0,0))}),__getset(0,i,"y",function(){return this._y},function(t){if(this._y!==t){if(this.destroyed)return;this._y=t,this.conchModel&&this.conchModel.pos(this._x,t);var e=this._parent;e&&0===e._repaint&&(e._repaint=1,e.parentRepaint()),this._$P.maskParent&&0===this._$P.maskParent._repaint&&(this._$P.maskParent._repaint=1,this._$P.maskParent.parentRepaint())}}),__getset(0,i,"height",function(){return this.autoSize?this.getSelfBounds().height:this._height},function(t){this._height!==t&&(this._height=t,this.conchModel&&this.conchModel.size(this._width,t),this.repaint())}),__getset(0,i,"blendMode",function(){return this._style.blendMode},function(t){this.getStyle().blendMode=t,this.conchModel&&this.conchModel.blendMode(t),t&&"source-over"!=t?this._renderType|=8:this._renderType&=-9,this.parentRepaint()}),__getset(0,i,"scaleX",function(){return this._style._tf.scaleX},function(t){var e=this.getStyle();if(e._tf.scaleX!==t){e.setScaleX(t),this._tfChanged=!0,this.conchModel&&this.conchModel.scale(t,e._tf.scaleY),this._renderType|=4;var i=this._parent;i&&0===i._repaint&&(i._repaint=1,i.parentRepaint())}}),__getset(0,i,"scaleY",function(){return this._style._tf.scaleY},function(t){var e=this.getStyle();if(e._tf.scaleY!==t){e.setScaleY(t),this._tfChanged=!0,this.conchModel&&this.conchModel.scale(e._tf.scaleX,t),this._renderType|=4;var i=this._parent;i&&0===i._repaint&&(i._repaint=1,i.parentRepaint())}}),__getset(0,i,"stage",function(){return Laya.stage}),__getset(0,i,"skewX",function(){return this._style._tf.skewX},function(t){var e=this.getStyle();if(e._tf.skewX!==t){e.setSkewX(t),this._tfChanged=!0,this.conchModel&&this.conchModel.skew(t,e._tf.skewY),this._renderType|=4;var i=this._parent;i&&0===i._repaint&&(i._repaint=1,i.parentRepaint())}}),__getset(0,i,"scrollRect",function(){return this._style.scrollRect},function(t){this.getStyle().scrollRect=t,this.repaint(),t?(this._renderType|=128,this.conchModel&&this.conchModel.scrollRect(t.x,t.y,t.width,t.height)):(this._renderType&=-129,this.conchModel&&(e.RUNTIMEVERION<"0.9.1"?this.conchModel.removeType(64):this.conchModel.removeType(128)))}),__getset(0,i,"skewY",function(){return this._style._tf.skewY},function(t){var e=this.getStyle();if(e._tf.skewY!==t){e.setSkewY(t),this._tfChanged=!0,this.conchModel&&this.conchModel.skew(e._tf.skewX,t),this._renderType|=4;var i=this._parent;i&&0===i._repaint&&(i._repaint=1,i.parentRepaint())}}),__getset(0,i,"transform",function(){return this._tfChanged?this._adjustTransform():this._transform},function(t){this._tfChanged=!1,this._transform=t,t&&(this._x=t.tx,this._y=t.ty,t.tx=t.ty=0,this.conchModel&&this.conchModel.transform(t.a,t.b,t.c,t.d,this._x,this._y)),t?this._renderType|=4:(this._renderType&=-5,this.conchModel&&this.conchModel.removeType(4)),this.parentRepaint()}),__getset(0,i,"pivotX",function(){return this._style._tf.translateX},function(t){this.getStyle().setTranslateX(t),this.conchModel&&this.conchModel.pivot(t,this._style._tf.translateY),this.repaint()}),__getset(0,i,"pivotY",function(){return this._style._tf.translateY},function(t){this.getStyle().setTranslateY(t),this.conchModel&&this.conchModel.pivot(this._style._tf.translateX,t),this.repaint()}),__getset(0,i,"alpha",function(){return this._style.alpha},function(t){this._style&&this._style.alpha!==t&&(t=t<0?0:t>1?1:t,this.getStyle().alpha=t,this.conchModel&&this.conchModel.alpha(t),1!==t?this._renderType|=2:this._renderType&=-3,this.parentRepaint())}),__getset(0,i,"visible",function(){return this._style.visible},function(t){this._style&&this._style.visible!==t&&(this.getStyle().visible=t,this.conchModel&&this.conchModel.visible(t),this.parentRepaint())}),__getset(0,i,"graphics",function(){return this._graphics||(this.graphics=RunDriver.createGraphics())},function(t){this._graphics&&(this._graphics._sp=null),this._graphics=t,t?(this._renderType&=-2,this._renderType|=512,t._sp=this,this.conchModel&&this.conchModel.graphics(this._graphics)):(this._renderType&=-513,this._renderType&=-2,this.conchModel&&(e.RUNTIMEVERION<"0.9.1"?this.conchModel.removeType(256):this.conchModel.removeType(512))),this.repaint()}),__getset(0,i,"filters",function(){return this._$P.filters},function(t){t&&0===t.length&&(t=null),this._$P.filters!=t&&(this._set$P("filters",t?t.slice():null),Render.isConchApp&&(this.conchModel&&(e.RUNTIMEVERION<"0.9.1"?this.conchModel.removeType(16):this.conchModel.removeType(32)),this._$P.filters&&1==this._$P.filters.length&&this._$P.filters[0].callNative(this)),Render.isWebGL&&(t&&t.length?this._renderType|=32:this._renderType&=-33),t&&t.length>0?(this._getBit(1)||this._setUpNoticeType(1),Render.isWebGL&&1==t.length&&t[0]instanceof laya.filters.ColorFilter||("bitmap"!=this.cacheAs&&(Render.isConchNode||(this.cacheAs="bitmap"),this._set$P("cacheForFilters",!0)),this._set$P("hasFilter",!0))):(this._set$P("hasFilter",!1),this._$P.cacheForFilters&&"bitmap"==this.cacheAs&&(this.cacheAs="none")),this.repaint())}),__getset(0,i,"parent",t.prototype._$get_parent,function(e){t.prototype._$set_parent.call(this,e),e&&this._getBit(2)&&this._$2__onDisplay()}),__getset(0,i,"mask",function(){return this._$P._mask},function(t){t&&this.mask&&this.mask._$P.maskParent||(t?(this.cacheAs="bitmap",this._set$P("_mask",t),t._set$P("maskParent",this)):(this.cacheAs="none",this.mask&&this.mask._set$P("maskParent",null),this._set$P("_mask",t)),this.conchModel&&this.conchModel.mask(t?t.conchModel:null),this._renderType|=64,this.parentRepaint())}),__getset(0,i,"mouseEnabled",function(){return this._mouseEnableState>1},function(t){this._mouseEnableState=t?2:1}),__getset(0,i,"globalScaleX",function(){for(var t=1,e=this;e&&e!==Laya.stage;)t*=e.scaleX,e=e.parent;return t}),__getset(0,i,"mouseX",function(){return this.getMousePoint().x}),__getset(0,i,"mouseY",function(){return this.getMousePoint().y}),e.fromImage=function(t){return(new e).loadImage(t)},e.CustomList=[],__static(e,["RUNTIMEVERION",function(){return this.RUNTIMEVERION=window.conch?conchConfig.getRuntimeVersion().substr(conchConfig.getRuntimeVersion().lastIndexOf("-")+1):""}]),e}(Node),AudioSoundChannel=function(t){function e(t){this._audio=null,this._onEnd=null,this._resumePlay=null,e.__super.call(this),this._onEnd=Utils.bind(this.__onEnd,this),this._resumePlay=Utils.bind(this.__resumePlay,this),t.addEventListener("ended",this._onEnd),this._audio=t}__class(e,"laya.media.h5audio.AudioSoundChannel",t);var i=e.prototype;return i.__onEnd=function(){if(1==this.loops)return this.completeHandler&&(Laya.timer.once(10,this,this.__runComplete,[this.completeHandler],!1),this.completeHandler=null),this.stop(),void this.event("complete");this.loops>0&&this.loops--,this.play()},i.__resumePlay=function(){this._audio&&this._audio.removeEventListener("canplay",this._resumePlay);try{this._audio.currentTime=this.startTime,Browser.container.appendChild(this._audio),this._audio.play()}catch(t){this.event("error")}},i.play=function(){this.isStopped=!1;try{this._audio.playbackRate=SoundManager.playbackRate,this._audio.currentTime=this.startTime}catch(t){return void this._audio.addEventListener("canplay",this._resumePlay)}SoundManager.addChannel(this),Browser.container.appendChild(this._audio),"play"in this._audio&&this._audio.play()},i.stop=function(){this.isStopped=!0,SoundManager.removeChannel(this),this.completeHandler=null,this._audio&&("pause"in this._audio&&Render.isConchApp&&this._audio.stop(),this._audio.pause(),this._audio.removeEventListener("ended",this._onEnd),this._audio.removeEventListener("canplay",this._resumePlay),Browser.onIE||this._audio!=AudioSound._musicAudio&&Pool.recover("audio:"+this.url,this._audio),Browser.removeElement(this._audio),this._audio=null)},i.pause=function(){this.isStopped=!0,SoundManager.removeChannel(this),"pause"in this._audio&&this._audio.pause()},i.resume=function(){this._audio&&(this.isStopped=!1,SoundManager.addChannel(this),"play"in this._audio&&this._audio.play())},__getset(0,i,"position",function(){return this._audio?this._audio.currentTime:0}),__getset(0,i,"duration",function(){return this._audio?this._audio.duration:0}),__getset(0,i,"volume",function(){return this._audio?this._audio.volume:1},function(t){this._audio&&(this._audio.volume=t)}),e}(SoundChannel),WebAudioSoundChannel=function(t){function e(){this.audioBuffer=null,this.gain=null,this.bufferSource=null,this._currentTime=0,this._volume=1,this._startTime=0,this._pauseTime=0,this._onPlayEnd=null,this.context=WebAudioSound.ctx,e.__super.call(this),this._onPlayEnd=Utils.bind(this.__onPlayEnd,this),this.context.createGain?this.gain=this.context.createGain():this.gain=this.context.createGainNode()}__class(e,"laya.media.webaudio.WebAudioSoundChannel",t);var i=e.prototype;return i.play=function(){if(SoundManager.addChannel(this),this.isStopped=!1,this._clearBufferSource(),this.audioBuffer){var t=this.context,e=this.gain,i=t.createBufferSource();this.bufferSource=i,i.buffer=this.audioBuffer,i.connect(e),e&&e.disconnect(),e.connect(t.destination),i.onended=this._onPlayEnd,this.startTime>=this.duration&&(this.startTime=0),this._startTime=Browser.now(),this.gain.gain.value=this._volume,0==this.loops&&(i.loop=!0),i.playbackRate.value=SoundManager.playbackRate,i.start(0,this.startTime),this._currentTime=0}},i.__onPlayEnd=function(){if(1==this.loops)return this.completeHandler&&(Laya.timer.once(10,this,this.__runComplete,[this.completeHandler],!1),this.completeHandler=null),this.stop(),void this.event("complete");this.loops>0&&this.loops--,this.play()},i._clearBufferSource=function(){if(this.bufferSource){var t=this.bufferSource;t.stop?t.stop(0):t.noteOff(0),t.disconnect(0),t.onended=null,e._tryCleanFailed||this._tryClearBuffer(t),this.bufferSource=null}},i._tryClearBuffer=function(t){if(!Browser.onIOS)return void(e._tryCleanFailed=!0);try{t.buffer=WebAudioSound._miniBuffer}catch(t){e._tryCleanFailed=!0}},i.stop=function(){this._clearBufferSource(),this.audioBuffer=null,this.gain&&this.gain.disconnect(),this.isStopped=!0,SoundManager.removeChannel(this),this.completeHandler=null,SoundManager.autoReleaseSound&&Laya.timer.once(5e3,null,SoundManager.disposeSoundIfNotUsed,[this.url],!1)},i.pause=function(){this.isStopped||(this._pauseTime=this.position),this._clearBufferSource(),this.gain&&this.gain.disconnect(),this.isStopped=!0,SoundManager.removeChannel(this),SoundManager.autoReleaseSound&&Laya.timer.once(5e3,null,SoundManager.disposeSoundIfNotUsed,[this.url],!1)},i.resume=function(){this.startTime=this._pauseTime,this.play()},__getset(0,i,"position",function(){return this.bufferSource?(Browser.now()-this._startTime)/1e3+this.startTime:0}),__getset(0,i,"duration",function(){return this.audioBuffer?this.audioBuffer.duration:0}),__getset(0,i,"volume",function(){return this._volume},function(t){this.isStopped||(this._volume=t,this.gain.gain.value=t)}),e._tryCleanFailed=!1,e}(SoundChannel),Bitmap=function(t){function e(){this.useNum=0,e.__super.call(this),this._w=0,this._h=0}__class(e,"laya.resource.Bitmap",t);var i=e.prototype;return i.dispose=function(){this.disposed||(this._resourceManager.removeResource(this),t.prototype.dispose.call(this))},__getset(0,i,"width",function(){return this._w}),__getset(0,i,"height",function(){return this._h}),__getset(0,i,"source",function(){return this._source}),e}(Resource),AnimationPlayerBase=function(t){function e(){this.loop=!1,this.wrapMode=0,this._index=0,this._count=0,this._isPlaying=!1,this._labels=null,this._isReverse=!1,this._frameRateChanged=!1,this._controlNode=null,this._actionName=null,e.__super.call(this),this._interval=Config.animationInterval,this._setUpNoticeType(1)}__class(e,"laya.display.AnimationPlayerBase",t);var i=e.prototype;return i.play=function(t,e,i){void 0===t&&(t=0),void 0===e&&(e=!0),void 0===i&&(i=""),this._isPlaying=!0,this.index="string"==typeof t?this._getFrameByLabel(t):t,this.loop=e,this._actionName=i,this._isReverse=1==this.wrapMode,this.interval>0&&this.timerLoop(this.interval,this,this._frameLoop,null,!0,!0)},i._getFrameByLabel=function(t){var e=0;for(e=0;e<this._count;e++)if(this._labels[e]&&this._labels[e].indexOf(t)>=0)return e;return 0},i._frameLoop=function(){if(this._isReverse){if(--this._index<0){if(!this.loop)return this._index=0,this.stop(),void this.event("complete");2==this.wrapMode?(this._index=this._count>0?1:0,this._isReverse=!1):this._index=this._count-1,this.event("complete")}}else if(++this._index>=this._count){if(!this.loop)return this._index--,this.stop(),void this.event("complete");2==this.wrapMode?(this._index=this._count-2>=0?this._count-2:0,this._isReverse=!0):this._index=0,this.event("complete")}this.index=this._index},i._setControlNode=function(t){this._controlNode&&(this._controlNode.off("display",this,this._checkResumePlaying),this._controlNode.off("undisplay",this,this._checkResumePlaying)),this._controlNode=t,t&&t!=this&&(t.on("display",this,this._checkResumePlaying),t.on("undisplay",this,this._checkResumePlaying))},i._setDisplay=function(e){t.prototype._setDisplay.call(this,e),this._checkResumePlaying()},i._checkResumePlaying=function(){this._isPlaying&&(this._controlNode.displayedInStage?this.play(this._index,this.loop,this._actionName):this.clearTimer(this,this._frameLoop))},i.stop=function(){this._isPlaying=!1,this.clearTimer(this,this._frameLoop)},i.addLabel=function(t,e){this._labels||(this._labels={}),this._labels[e]||(this._labels[e]=[]),this._labels[e].push(t)},i.removeLabel=function(t){if(t){if(this._labels)for(var e in this._labels)this._removeLabelFromLabelList(this._labels[e],t)}else this._labels=null},i._removeLabelFromLabelList=function(t,e){if(t)for(var i=t.length-1;i>=0;i--)t[i]==e&&t.splice(i,1)},i.gotoAndStop=function(t){this.index="string"==typeof t?this._getFrameByLabel(t):t,this.stop()},i._displayToIndex=function(t){},i.clear=function(){this.stop(),this._labels=null},__getset(0,i,"interval",function(){return this._interval},function(t){this._interval!=t&&(this._frameRateChanged=!0,this._interval=t,this._isPlaying&&t>0&&this.timerLoop(t,this,this._frameLoop,null,!0,!0))}),__getset(0,i,"isPlaying",function(){return this._isPlaying}),__getset(0,i,"index",function(){return this._index},function(t){if(this._index=t,this._displayToIndex(t),this._labels&&this._labels[t])for(var e=this._labels[t],i=0,n=e.length;i<n;i++)this.event("label",e[i])}),__getset(0,i,"count",function(){return this._count}),e.WRAP_POSITIVE=0,e.WRAP_REVERSE=1,e.WRAP_PINGPONG=2,e}(Sprite),Text=function(t){
function e(){this._clipPoint=null,this._currBitmapFont=null,this._text=null,this._isChanged=!1,this._textWidth=0,this._textHeight=0,this._lines=[],this._lineWidths=[],this._startX=NaN,this._startY=NaN,this._lastVisibleLineIndex=-1,this._words=null,this._charSize={},this.underline=!1,this._underlineColor=null,e.__super.call(this),this.overflow=e.VISIBLE,this._style=new CSSStyle(this),this._style.wordWrap=!1}__class(e,"laya.display.Text",t);var i=e.prototype;return i.destroy=function(e){void 0===e&&(e=!0),t.prototype.destroy.call(this,e),this._lines=null,this._words&&(this._words.length=0,this._words=null)},i._getBoundPointsM=function(t){void 0===t&&(t=!1);var e=Rectangle.TEMP;return e.setTo(0,0,this.width,this.height),e._getBoundPoints()},i.getGraphicBounds=function(t){void 0===t&&(t=!1);var e=Rectangle.TEMP;return e.setTo(0,0,this.width,this.height),e},i._getCSSStyle=function(){return this._style},i.lang=function(t,i,n,s,r,a,o,h,l,c,u){if(t=e.langPacks&&e.langPacks[t]?e.langPacks[t]:t,arguments.length<2)this._text=t;else{for(var _=0,d=arguments.length;_<d;_++)t=t.replace("{"+_+"}",arguments[_+1]);this._text=t}},i.renderText=function(t,e){var i=this.graphics;i.clear(!0);var n=(this.italic?"italic ":"")+(this.bold?"bold ":"")+this.fontSize+"px "+(Browser.onIPhone?laya.display.Text._fontFamilyMap[this.font]||this.font:this.font);Browser.context.font=n;var s=this.padding,r=s[3],a="left",o=this._lines,h=this.leading+this._charSize.height,l=this._currBitmapFont;l&&(h=this.leading+l.getMaxHeight());var c=s[0];if(!l&&this._width>0&&this._textWidth<=this._width&&("right"==this.align?(a="right",r=this._width-s[1]):"center"==this.align&&(a="center",r=.5*this._width+s[3]-s[1])),this._height>0){var u=this._textHeight>this._height?"top":this.valign;"middle"===u?c=.5*(this._height-e*h)+s[0]-s[2]:"bottom"===u&&(c=this._height-e*h-s[2])}var _=this._style;if(l&&l.autoScaleSize)var d=l.fontSize/this.fontSize;if(this._clipPoint)if(i.save(),l&&l.autoScaleSize){var f=0,p=0;f=this._width?this._width-s[3]-s[1]:this._textWidth,p=this._height?this._height-s[0]-s[2]:this._textHeight,f*=d,p*=d,i.clipRect(s[3],s[0],f,p)}else i.clipRect(s[3],s[0],this._width?this._width-s[3]-s[1]:this._textWidth,this._height?this._height-s[0]-s[2]:this._textHeight);var g=_.password;"prompt"in this&&this.prompt==this._text&&(g=!1);for(var m=0,v=0,y=Math.min(this._lines.length,e+t)||1,w=t;w<y;w++){var x,T=o[w];if(g){var b=T.length;T="";for(var C=b;C>0;C--)T+="●"}if(m=r-(this._clipPoint?this._clipPoint.x:0),v=c+h*w-(this._clipPoint?this._clipPoint.y:0),this.underline&&this.drawUnderline(a,m,v,w),l){var M=this.width;l.autoScaleSize&&(M=this.width*d),l.drawText(T,this,m,v,this.align,M)}else Render.isWebGL?(this._words||(this._words=[]),x=this._words.length>w-t?this._words[w-t]:new WordText,x.setText(T)):x=T,_.stroke?i.fillBorderText(x,m,v,n,this.color,_.strokeColor,_.stroke,a):i.fillText(x,m,v,n,this.color,a)}if(l&&l.autoScaleSize){var S=1/d;this.scale(S,S)}this._clipPoint&&i.restore(),this._startX=r,this._startY=c},i.drawUnderline=function(t,e,i,n){var s=this._lineWidths[n];switch(t){case"center":e-=s/2;break;case"right":e-=s;break;case"left":}i+=this._charSize.height,this._graphics.drawLine(e,i,e+s,i,this.underlineColor||this.color,1)},i.typeset=function(){if(this._isChanged=!1,!this._text)return this._clipPoint=null,this._textWidth=this._textHeight=0,void this.graphics.clear(!0);Browser.context.font=this._getCSSStyle().font,this._lines.length=0,this._lineWidths.length=0,this.parseLines(this._text),this.evalTextSize(),this.checkEnabledViewportOrNot()?this._clipPoint||(this._clipPoint=new Point(0,0)):this._clipPoint=null;var t=this._lines.length;if(this.overflow!=e.VISIBLE){var i=this.overflow==e.HIDDEN?Math.floor:Math.ceil;t=Math.min(t,i((this.height-this.padding[0]-this.padding[2])/(this.leading+this._charSize.height)))}var n=this.scrollY/(this._charSize.height+this.leading)|0;this.renderText(n,t),this.repaint()},i.evalTextSize=function(){var t=NaN,e=NaN;t=Math.max.apply(this,this._lineWidths),e=this._currBitmapFont?this._lines.length*(this._currBitmapFont.getMaxHeight()+this.leading)+this.padding[0]+this.padding[2]:this._lines.length*(this._charSize.height+this.leading)+this.padding[0]+this.padding[2],t==this._textWidth&&e==this._textHeight||(this._textWidth=t,this._textHeight=e,this._width&&this._height||this.conchModel&&this.conchModel.size(this._width||this._textWidth,this._height||this._textHeight))},i.checkEnabledViewportOrNot=function(){return this.overflow==e.SCROLL&&(this._width>0&&this._textWidth>this._width||this._height>0&&this._textHeight>this._height)},i.changeText=function(t){this._text!==t&&(this.lang(t+""),this._graphics&&this._graphics.replaceText(this._text)||this.typeset())},i.parseLines=function(t){var i=this.wordWrap||this.overflow==e.HIDDEN;if(i)var n=this.getWordWrapWidth();if(this._currBitmapFont)this._charSize.width=this._currBitmapFont.getMaxWidth(),this._charSize.height=this._currBitmapFont.getMaxHeight();else{var s=Browser.context.measureText(e._testWord);this._charSize.width=s.width,this._charSize.height=s.height||this.fontSize}for(var r=t.replace(/\r\n/g,"\n").split("\n"),a=0,o=r.length;a<o;a++){var h=r[a];i?this.parseLine(h,n):(this._lineWidths.push(this.getTextWidth(h)),this._lines.push(h))}},i.parseLine=function(t,i){var n,s=(Browser.context,this._lines),r=0,a=NaN,o=NaN,h=0;if((a=this.getTextWidth(t))<=i)return s.push(t),void this._lineWidths.push(a);a=this._charSize.width,r=Math.floor(i/a),0==r&&(r=1),a=this.getTextWidth(t.substring(0,r)),o=a;for(var l=r,c=t.length;l<c;l++)if(a=this.getTextWidth(t.charAt(l)),(o+=a)>i)if(this.wordWrap){var u=t.substring(h,l);if(u.charCodeAt(u.length-1)<255&&(n=/(?:\w|-)+$/.exec(u))&&(l=n.index+h,0==n.index?l+=u.length:u=t.substring(h,l)),s.push(u),this._lineWidths.push(o-a),h=l,!(l+r<c)){s.push(t.substring(h,c)),this._lineWidths.push(this.getTextWidth(s[s.length-1])),h=-1;break}l+=r,a=this.getTextWidth(t.substring(h,l)),o=a,l--}else if(this.overflow==e.HIDDEN)return s.push(t.substring(0,l)),void this._lineWidths.push(this.getTextWidth(s[s.length-1]));this.wordWrap&&h!=-1&&(s.push(t.substring(h,c)),this._lineWidths.push(this.getTextWidth(s[s.length-1])))},i.getTextWidth=function(t){return this._currBitmapFont?this._currBitmapFont.getTextWidth(t):Browser.context.measureText(t).width},i.getWordWrapWidth=function(){var t=this.padding,e=NaN;return e=this._currBitmapFont&&this._currBitmapFont.autoScaleSize?this._width*(this._currBitmapFont.fontSize/this.fontSize):this._width,e<=0&&(e=this.wordWrap?100:Browser.width),e<=0&&(e=100),e-t[3]-t[1]},i.getCharPoint=function(t,e){this._isChanged&&Laya.timer.runCallLater(this,this.typeset);for(var i=0,n=this._lines,s=0,r=0,a=n.length;r<a;r++){if(i+=n[r].length,t<i){var o=r;break}s=i}var h=(this.italic?"italic ":"")+(this.bold?"bold ":"")+this.fontSize+"px "+this.font;Browser.context.font=h;var l=this.getTextWidth(this._text.substring(s,t));return(e||new Point).setTo(this._startX+l-(this._clipPoint?this._clipPoint.x:0),this._startY+o*(this._charSize.height+this.leading)-(this._clipPoint?this._clipPoint.y:0))},__getset(0,i,"width",function(){return this._width?this._width:this.textWidth+this.padding[1]+this.padding[3]},function(e){e!=this._width&&(t.prototype._$set_width.call(this,e),this.isChanged=!0)}),__getset(0,i,"textWidth",function(){return this._isChanged&&Laya.timer.runCallLater(this,this.typeset),this._textWidth}),__getset(0,i,"height",function(){return this._height?this._height:this.textHeight+this.padding[0]+this.padding[2]},function(e){e!=this._height&&(t.prototype._$set_height.call(this,e),this.isChanged=!0)}),__getset(0,i,"textHeight",function(){return this._isChanged&&Laya.timer.runCallLater(this,this.typeset),this._textHeight}),__getset(0,i,"padding",function(){return this._getCSSStyle().padding},function(t){this._getCSSStyle().padding=t,this.isChanged=!0}),__getset(0,i,"bold",function(){return this._getCSSStyle().bold},function(t){this._getCSSStyle().bold=t,this.isChanged=!0}),__getset(0,i,"text",function(){return this._text||""},function(t){this._text!==t&&(this.lang(t+""),this.isChanged=!0,this.event("change"))}),__getset(0,i,"color",function(){return this._getCSSStyle().color},function(t){this._getCSSStyle().color!=t&&(this._getCSSStyle().color=t,!this._isChanged&&this._graphics?this._graphics.replaceTextColor(this.color):this.isChanged=!0)}),__getset(0,i,"font",function(){return this._getCSSStyle().fontFamily},function(t){this._currBitmapFont&&(this._currBitmapFont=null,this.scale(1,1)),e._bitmapFonts&&e._bitmapFonts[t]&&(this._currBitmapFont=e._bitmapFonts[t]),this._getCSSStyle().fontFamily=t,this.isChanged=!0}),__getset(0,i,"fontSize",function(){return this._getCSSStyle().fontSize},function(t){this._getCSSStyle().fontSize=t,this.isChanged=!0}),__getset(0,i,"italic",function(){return this._getCSSStyle().italic},function(t){this._getCSSStyle().italic=t,this.isChanged=!0}),__getset(0,i,"align",function(){return this._getCSSStyle().align},function(t){this._getCSSStyle().align=t,this.isChanged=!0}),__getset(0,i,"valign",function(){return this._getCSSStyle().valign},function(t){this._getCSSStyle().valign=t,this.isChanged=!0}),__getset(0,i,"wordWrap",function(){return this._getCSSStyle().wordWrap},function(t){this._getCSSStyle().wordWrap=t,this.isChanged=!0}),__getset(0,i,"leading",function(){return this._getCSSStyle().leading},function(t){this._getCSSStyle().leading=t,this.isChanged=!0}),__getset(0,i,"bgColor",function(){return this._getCSSStyle().backgroundColor},function(t){this._getCSSStyle().backgroundColor=t,this.isChanged=!0}),__getset(0,i,"borderColor",function(){return this._getCSSStyle().borderColor},function(t){this._getCSSStyle().borderColor=t,this.isChanged=!0}),__getset(0,i,"stroke",function(){return this._getCSSStyle().stroke},function(t){this._getCSSStyle().stroke=t,this.isChanged=!0}),__getset(0,i,"strokeColor",function(){return this._getCSSStyle().strokeColor},function(t){this._getCSSStyle().strokeColor=t,this.isChanged=!0}),__getset(0,i,"isChanged",null,function(t){this._isChanged!==t&&(this._isChanged=t,t&&Laya.timer.callLater(this,this.typeset))}),__getset(0,i,"scrollX",function(){return this._clipPoint?this._clipPoint.x:0},function(t){if(!(this.overflow!=e.SCROLL||this.textWidth<this._width)&&this._clipPoint){t=t<this.padding[3]?this.padding[3]:t;var i=this._textWidth-this._width;t=t>i?i:t;var n=this._height/(this._charSize.height+this.leading)|1;this._clipPoint.x=t,this.renderText(this._lastVisibleLineIndex,n)}}),__getset(0,i,"scrollY",function(){return this._clipPoint?this._clipPoint.y:0},function(t){if(!(this.overflow!=e.SCROLL||this.textHeight<this._height)&&this._clipPoint){t=t<this.padding[0]?this.padding[0]:t;var i=this._textHeight-this._height;t=t>i?i:t;var n=t/(this._charSize.height+this.leading)|0;this._lastVisibleLineIndex=n;var s=1+(this._height/(this._charSize.height+this.leading)|0);this._clipPoint.y=t,this.renderText(n,s)}}),__getset(0,i,"maxScrollX",function(){return this.textWidth<this._width?0:this._textWidth-this._width}),__getset(0,i,"maxScrollY",function(){return this.textHeight<this._height?0:this._textHeight-this._height}),__getset(0,i,"lines",function(){return this._isChanged&&this.typeset(),this._lines}),__getset(0,i,"underlineColor",function(){return this._underlineColor},function(t){this._underlineColor=t,this._isChanged=!0,this.typeset()}),e.registerBitmapFont=function(t,i){e._bitmapFonts||(e._bitmapFonts={}),e._bitmapFonts[t]=i},e.unregisterBitmapFont=function(t,i){if(void 0===i&&(i=!0),e._bitmapFonts&&e._bitmapFonts[t]){var n=e._bitmapFonts[t];i&&n.destroy(),delete e._bitmapFonts[t]}},e.supportFont=function(t){Browser.context.font="10px sans-serif";var e=Browser.context.measureText("abcji").width;Browser.context.font="10px "+t;var i=Browser.context.measureText("abcji").width;return console.log(e,i),e!=i},e._testWord="游",e.langPacks=null,e.VISIBLE="visible",e.SCROLL="scroll",e.HIDDEN="hidden",e.CharacterCache=!0,e._bitmapFonts=null,__static(e,["_fontFamilyMap",function(){return this._fontFamilyMap={"报隶":"报隶-简","黑体":"黑体-简","楷体":"楷体-简","兰亭黑":"兰亭黑-简","隶变":"隶变-简","凌慧体":"凌慧体-简","翩翩体":"翩翩体-简","苹方":"苹方-简","手札体":"手札体-简","宋体":"宋体-简","娃娃体":"娃娃体-简","魏碑":"魏碑-简","行楷":"行楷-简","雅痞":"雅痞-简","圆体":"圆体-简"}}]),e}(Sprite),Stage=function(t){function e(){function t(){"hidden"==Browser.document[r]?(i._isVisibility=!1,s._isInputting()&&(Input.inputElement.target.focus=!1)):i._isVisibility=!0,s.event("visibilitychange")}this.focus=null,this.frameRate="fast",this.designWidth=0,this.designHeight=0,this.canvasRotation=!1,this.canvasDegree=0,this.renderingEnabled=!0,this.screenAdaptationEnabled=!0,this._screenMode="none",this._scaleMode="noscale",this._alignV="top",this._alignH="left",this._bgColor="black",this._mouseMoveTime=0,this._renderCount=0,this._safariOffsetY=0,this._frameStartTime=NaN,this._isFocused=!1,this._isVisibility=!1,this._scenes=null,this._wgColor=null,e.__super.call(this),this.offset=new Point,this._canvasTransform=new Matrix,this._previousOrientation=Browser.window.orientation;var i=this;this.transform=Matrix.create(),this._scenes=[],this.mouseEnabled=!0,this.hitTestPrior=!0,this.autoSize=!1,this._displayedInStage=!0,this._isFocused=!0,this._isVisibility=!0;var n=Browser.window,s=this;n.addEventListener("focus",function(){i._isFocused=!0,s.event("focus"),s.event("focuschange")}),n.addEventListener("blur",function(){i._isFocused=!1,s.event("blur"),s.event("focuschange"),s._isInputting()&&(Input.inputElement.target.focus=!1)});var r="visibilityState",a="visibilitychange",o=n.document;void 0!==o.hidden?(a="visibilitychange",r="visibilityState"):void 0!==o.mozHidden?(a="mozvisibilitychange",r="mozVisibilityState"):void 0!==o.msHidden?(a="msvisibilitychange",r="msVisibilityState"):void 0!==o.webkitHidden&&(a="webkitvisibilitychange",r="webkitVisibilityState"),n.document.addEventListener(a,t),n.addEventListener("resize",function(){var t=Browser.window.orientation;null!=t&&t!=i._previousOrientation&&s._isInputting()&&(Input.inputElement.target.focus=!1),i._previousOrientation=t,s._isInputting()||(Browser.onSafari&&(s._safariOffsetY=(Browser.window.__innerHeight||Browser.document.body.clientHeight||Browser.document.documentElement.clientHeight)-Browser.window.innerHeight),s._resetCanvas())}),n.addEventListener("orientationchange",function(t){s._resetCanvas()}),this.on("mousemove",this,this._onmouseMove),Browser.onMobile&&this.on("mousedown",this,this._onmouseMove)}__class(e,"laya.display.Stage",t);var i=e.prototype;return i._isInputting=function(){return Browser.onMobile&&Input.isInputting},i._changeCanvasSize=function(){this.setScreenSize(Browser.clientWidth*Browser.pixelRatio,Browser.clientHeight*Browser.pixelRatio)},i._resetCanvas=function(){if(this.screenAdaptationEnabled){var t=Render._mainCanvas;t.source.style;Laya.timer.once(100,this,this._changeCanvasSize)}},i.setScreenSize=function(t,e){var i=!1;if("none"!==this._screenMode){if(i=(t/e<1?"vertical":"horizontal")!==this._screenMode){var n=e;e=t,t=n}}this.canvasRotation=i;var s=Render._mainCanvas,r=s.source.style,a=this._canvasTransform.identity(),o=this._scaleMode,h=t/this.designWidth,l=e/this.designHeight,c=this.designWidth,u=this.designHeight,_=t,d=e,f=Browser.pixelRatio;switch(this._width=this.designWidth,this._height=this.designHeight,o){case"noscale":h=l=1,_=this.designWidth,d=this.designHeight;break;case"showall":h=l=Math.min(h,l),c=_=Math.round(this.designWidth*h),u=d=Math.round(this.designHeight*l);break;case"noborder":h=l=Math.max(h,l),_=Math.round(this.designWidth*h),d=Math.round(this.designHeight*l);break;case"full":h=l=1,this._width=c=t,this._height=u=e;break;case"fixedwidth":l=h,this._height=u=Math.round(e/h);break;case"fixedheight":h=l,this._width=c=Math.round(t/l);break;case"fixedauto":t/e<this.designWidth/this.designHeight?(l=h,this._height=u=Math.round(e/h)):(h=l,this._width=c=Math.round(t/l))}h*=this.scaleX,l*=this.scaleY,1===h&&1===l?this.transform.identity():(this.transform.a=this._formatData(h/(_/c)),this.transform.d=this._formatData(l/(d/u)),this.conchModel&&this.conchModel.scale(this.transform.a,this.transform.d)),s.size(c,u),RunDriver.changeWebGLSize(c,u),a.scale(_/c/f,d/u/f),"left"===this._alignH?this.offset.x=0:"right"===this._alignH?this.offset.x=t-_:this.offset.x=.5*(t-_)/f,"top"===this._alignV?this.offset.y=0:"bottom"===this._alignV?this.offset.y=e-d:this.offset.y=.5*(e-d)/f,this.offset.x=Math.round(this.offset.x),this.offset.y=Math.round(this.offset.y),a.translate(this.offset.x,this.offset.y),this._safariOffsetY&&a.translate(0,this._safariOffsetY),this.canvasDegree=0,i&&("horizontal"===this._screenMode?(a.rotate(Math.PI/2),a.translate(e/f,0),this.canvasDegree=90):(a.rotate(-Math.PI/2),a.translate(0,t/f),this.canvasDegree=-90)),a.a=this._formatData(a.a),a.d=this._formatData(a.d),a.tx=this._formatData(a.tx),a.ty=this._formatData(a.ty),r.transformOrigin=r.webkitTransformOrigin=r.msTransformOrigin=r.mozTransformOrigin=r.oTransformOrigin="0px 0px 0px",r.transform=r.webkitTransform=r.msTransform=r.mozTransform=r.oTransform="matrix("+a.toString()+")",this._safariOffsetY&&a.translate(0,-this._safariOffsetY),a.translate(parseInt(r.left)||0,parseInt(r.top)||0),this.visible=!0,this._repaint=1,this.event("resize")},i._formatData=function(t){return Math.abs(t)<1e-6?0:Math.abs(1-t)<.001?t>0?1:-1:t},i.getMousePoint=function(){return Point.TEMP.setTo(this.mouseX,this.mouseY)},i.repaint=function(){this._repaint=1},i.parentRepaint=function(){},i._loop=function(){return this.render(Render.context,0,0),!0},i._onmouseMove=function(t){this._mouseMoveTime=Browser.now()},i.getTimeFromFrameStart=function(){return Browser.now()-this._frameStartTime},i.render=function(e,i,n){if("sleep"===this.frameRate){var s=Browser.now();if(!(s-this._frameStartTime>=1e3))return;this._frameStartTime=s}if(this._renderCount++,Render.isFlash&&this.repaint(),!this._style.visible)return void(this._renderCount%5==0&&(Stat.loopCount++,MouseManager.instance.runEvent(),Laya.timer._update()));this._frameStartTime=Browser.now();var r="mouse"===this.frameRate?this._frameStartTime-this._mouseMoveTime<2e3?"fast":"slow":this.frameRate,a="slow"!==r,o=this._renderCount%2==0;if(Stat.renderSlow=!a,a||o){Stat.loopCount++,MouseManager.instance.runEvent(),Laya.timer._update();var h,l=0,c=0;if(Render.isConchNode)for(l=0,c=this._scenes.length;l<c;l++)(h=this._scenes[l])&&h._updateSceneConch();else for(l=0,c=this._scenes.length;l<c;l++)(h=this._scenes[l])&&h._updateScene();if(Render.isConchNode){var u=Sprite.CustomList;for(l=0,c=u.length;l<c;l++){var _=u[l];_.customRender(_.customContext,0,0)}return}Render.isWebGL&&this.renderingEnabled&&(e.clear(),t.prototype.render.call(this,e,i,n))}Render.isConchNode||!this.renderingEnabled||!a&&o||(Render.isWebGL?(RunDriver.clear(this._bgColor),RunDriver.beginFlush(),e.flush(),RunDriver.endFinish(),VectorGraphManager.instance&&VectorGraphManager.getInstance().endDispose()):(RunDriver.clear(this._bgColor),t.prototype.render.call(this,e,i,n)))},i._requestFullscreen=function(){var t=Browser.document.documentElement;t.requestFullscreen?t.requestFullscreen():t.mozRequestFullScreen?t.mozRequestFullScreen():t.webkitRequestFullscreen?t.webkitRequestFullscreen():t.msRequestFullscreen&&t.msRequestFullscreen()},i._fullScreenChanged=function(){Laya.stage.event("fullscreenchange")},i.exitFullscreen=function(){var t=Browser.document;t.exitFullscreen?t.exitFullscreen():t.mozCancelFullScreen?t.mozCancelFullScreen():t.webkitExitFullscreen&&t.webkitExitFullscreen()},__getset(0,i,"clientScaleY",function(){return this._transform?this._transform.getScaleY():1}),__getset(0,i,"width",t.prototype._$get_width,function(e){this.designWidth=e,t.prototype._$set_width.call(this,e),Laya.timer.callLater(this,this._changeCanvasSize)}),__getset(0,i,"isFocused",function(){return this._isFocused}),__getset(0,i,"alignH",function(){return this._alignH},function(t){this._alignH=t,Laya.timer.callLater(this,this._changeCanvasSize)}),__getset(0,i,"height",t.prototype._$get_height,function(e){this.designHeight=e,t.prototype._$set_height.call(this,e),Laya.timer.callLater(this,this._changeCanvasSize)}),__getset(0,i,"transform",function(){return this._tfChanged&&this._adjustTransform(),this._transform=this._transform||Matrix.create()},t.prototype._$set_transform),__getset(0,i,"isVisibility",function(){return this._isVisibility}),__getset(0,i,"desginWidth",function(){return console.debug("desginWidth已经弃用，请使用designWidth代替"),this.designWidth}),__getset(0,i,"clientScaleX",function(){return this._transform?this._transform.getScaleX():1}),__getset(0,i,"desginHeight",function(){return console.debug("desginHeight已经弃用，请使用designHeight代替"),this.designHeight}),__getset(0,i,"scaleMode",function(){return this._scaleMode},function(t){this._scaleMode=t,Laya.timer.callLater(this,this._changeCanvasSize)}),__getset(0,i,"alignV",function(){return this._alignV},function(t){this._alignV=t,Laya.timer.callLater(this,this._changeCanvasSize)}),__getset(0,i,"bgColor",function(){return this._bgColor},function(t){this._bgColor=t,this.conchModel&&this.conchModel.bgColor(t),Render.isWebGL&&(this._wgColor=t&&"black"!==t&&"#000000"!==t?Color.create(t)._color:null),Render.canvas.style.background=t?t:"none"}),__getset(0,i,"mouseX",function(){return Math.round(MouseManager.instance.mouseX/this.clientScaleX)}),__getset(0,i,"mouseY",function(){return Math.round(MouseManager.instance.mouseY/this.clientScaleY)}),__getset(0,i,"screenMode",function(){return this._screenMode},function(t){this._screenMode=t}),__getset(0,i,"visible",t.prototype._$get_visible,function(e){if(this.visible!==e){t.prototype._$set_visible.call(this,e);Render._mainCanvas.source.style.visibility=e?"visible":"hidden"}}),__getset(0,i,"fullScreenEnabled",null,function(t){var e=Browser.document,i=Render.canvas;t?(i.addEventListener("mousedown",this._requestFullscreen),i.addEventListener("touchstart",this._requestFullscreen),e.addEventListener("fullscreenchange",this._fullScreenChanged),e.addEventListener("mozfullscreenchange",this._fullScreenChanged),e.addEventListener("webkitfullscreenchange",this._fullScreenChanged),e.addEventListener("msfullscreenchange",this._fullScreenChanged)):(i.removeEventListener("mousedown",this._requestFullscreen),i.removeEventListener("touchstart",this._requestFullscreen),e.removeEventListener("fullscreenchange",this._fullScreenChanged),e.removeEventListener("mozfullscreenchange",this._fullScreenChanged),e.removeEventListener("webkitfullscreenchange",this._fullScreenChanged),e.removeEventListener("msfullscreenchange",this._fullScreenChanged))}),e.SCALE_NOSCALE="noscale",e.SCALE_EXACTFIT="exactfit",e.SCALE_SHOWALL="showall",e.SCALE_NOBORDER="noborder",e.SCALE_FULL="full",e.SCALE_FIXED_WIDTH="fixedwidth",e.SCALE_FIXED_HEIGHT="fixedheight",e.SCALE_FIXED_AUTO="fixedauto",e.ALIGN_LEFT="left",e.ALIGN_RIGHT="right",e.ALIGN_CENTER="center",e.ALIGN_TOP="top",e.ALIGN_MIDDLE="middle",e.ALIGN_BOTTOM="bottom",e.SCREEN_NONE="none",e.SCREEN_HORIZONTAL="horizontal",e.SCREEN_VERTICAL="vertical",e.FRAME_FAST="fast",e.FRAME_SLOW="slow",e.FRAME_MOUSE="mouse",e.FRAME_SLEEP="sleep",e}(Sprite),SoundNode=function(t){function e(){this.url=null,this._channel=null,this._tar=null,this._playEvents=null,this._stopEvents=null,e.__super.call(this),this.visible=!1,this.on("added",this,this._onParentChange),this.on("removed",this,this._onParentChange)}__class(e,"laya.media.SoundNode",t);var i=e.prototype;return i._onParentChange=function(){this.target=this.parent},i.play=function(t,e){void 0===t&&(t=1),isNaN(t)&&(t=1),this.url&&(this.stop(),this._channel=SoundManager.playSound(this.url,t,e))},i.stop=function(){this._channel&&!this._channel.isStopped&&this._channel.stop(),this._channel=null},i._setPlayAction=function(t,e,i,n){void 0===n&&(n=!0),this[i]&&t&&(n?t.on(e,this,this[i]):t.off(e,this,this[i]))},i._setPlayActions=function(t,e,i,n){if(void 0===n&&(n=!0),t&&e){var s=e.split(","),r=0,a=0;for(a=s.length,r=0;r<a;r++)this._setPlayAction(t,s[r],i,n)}},__getset(0,i,"playEvent",null,function(t){this._playEvents=t,t&&this._tar&&this._setPlayActions(this._tar,t,"play")}),__getset(0,i,"target",null,function(t){this._tar&&(this._setPlayActions(this._tar,this._playEvents,"play",!1),this._setPlayActions(this._tar,this._stopEvents,"stop",!1)),this._tar=t,this._tar&&(this._setPlayActions(this._tar,this._playEvents,"play",!0),this._setPlayActions(this._tar,this._stopEvents,"stop",!0))}),__getset(0,i,"stopEvent",null,function(t){this._stopEvents=t,t&&this._tar&&this._setPlayActions(this._tar,t,"stop")}),e}(Sprite),FileBitmap=function(t){function e(){this._src=null,this._onload=null,this._onerror=null,e.__super.call(this)}__class(e,"laya.resource.FileBitmap",t);var i=e.prototype;return __getset(0,i,"src",function(){return this._src},function(t){this._src=t}),__getset(0,i,"onload",null,function(t){}),__getset(0,i,"onerror",null,function(t){}),e}(Bitmap),HTMLCanvas=function(t){function e(t){this._is2D=!1,e.__super.call(this);var i=this;if(this._source=this,"2D"===t||"AUTO"===t&&!Render.isWebGL){this._is2D=!0,this._source=Browser.createElement("canvas");var n=this;n.getContext=function(t,e){if(i._ctx)return i._ctx;var s=i._ctx=i._source.getContext(t,e);return s&&(s._canvas=n,Render.isFlash||(s.size=function(t,e){})),s}}}__class(e,"laya.resource.HTMLCanvas",t);var i=e.prototype;return i.clear=function(){this._ctx&&this._ctx.clear()},i.destroy=function(){this._ctx&&this._ctx.destroy(),this._ctx=null,this.dispose()},i.release=function(){},i._setContext=function(t){this._ctx=t},i.getContext=function(t,i){return this._ctx?this._ctx:this._ctx=e._createContext(this)},i.getMemSize=function(){return 0},i.size=function(t,e){this._w==t&&this._h==e||(this._w=t,this._h=e,this.memorySize=this._w*this._h*4,this._ctx&&this._ctx.size(t,e),this._source&&(this._source.height=e,this._source.width=t))},i.getCanvas=function(){return this._source},__getset(0,i,"context",function(){return this._ctx}),__getset(0,i,"asBitmap",null,function(t){}),e.create=function(t){return new e(t)},e.TYPE2D="2D",e.TYPE3D="3D",e.TYPEAUTO="AUTO",e._createContext=null,e}(Bitmap),HTMLSubImage=function(t){function e(t,i,n,s,r,a,o,h){throw e.__super.call(this),new Error("不允许new！")}return __class(e,"laya.resource.HTMLSubImage",t),e.create=function(t,i,n,s,r,a,o,h){return void 0===h&&(h=!1),new e(t,i,n,s,r,a,o,h)},e}(Bitmap),Animation=function(t){function e(){this._frames=null,this._url=null,e.__super.call(this),this._setControlNode(this)}__class(e,"laya.display.Animation",t);var i=e.prototype;return i.destroy=function(t){void 0===t&&(t=!0),this.stop(),laya.display.Sprite.prototype.destroy.call(this,t),this._frames=null,this._labels=null},i.play=function(t,e,i){void 0===t&&(t=0),void 0===e&&(e=!0),void 0===i&&(i=""),i&&this._setFramesFromCache(i,!0),this._isPlaying=!0,this.index="string"==typeof t?this._getFrameByLabel(t):t,this.loop=e,this._actionName=i,this._isReverse=1==this.wrapMode,this._frames&&this.interval>0&&this.timerLoop(this.interval,this,this._frameLoop,null,!0,!0)},i._setFramesFromCache=function(t,i){if(void 0===i&&(i=!1),this._url&&(t=this._url+"#"+t),t&&e.framesMap[t]){var n;return n=e.framesMap[t],n instanceof Array?(this._frames=e.framesMap[t],this._count=this._frames.length):(n.nodeRoot&&(e.framesMap[t]=this._parseGraphicAnimationByData(n),n=e.framesMap[t]),this._frames=n.frames,this._count=this._frames.length,this._frameRateChanged||(this._interval=n.interval),this._labels=this._copyLabels(n.labels)),!0}return i&&console.log("ani not found:",t),!1},i._copyLabels=function(t){if(!t)return null;var e;e={};var i;for(i in t)e[i]=Utils.copyArray([],t[i]);return e},i._frameLoop=function(){this._style.visible&&this._style.alpha>.01&&t.prototype._frameLoop.call(this)},i._displayToIndex=function(t){this._frames&&(this.graphics=this._frames[t])},i.clear=function(){this.stop(),this.graphics=null,this._frames=null,this._labels=null},i.loadImages=function(t,i){return void 0===i&&(i=""),this._url="",this._setFramesFromCache(i)||(this.frames=e.framesMap[i]?e.framesMap[i]:e.createFrames(t,i)),this},i.loadAtlas=function(t,i,n){function s(s){t===s&&(r.frames=e.framesMap[n]?e.framesMap[n]:e.createFrames(t,n),i&&i.run())}void 0===n&&(n=""),this._url="";var r=this;return r._setFramesFromCache(n)||(Loader.getAtlas(t)?s(t):Laya.loader.load(t,Handler.create(null,s,[t]),null,"atlas")),this},i.loadAnimation=function(t,e,i){this._url=t;var n=this;return this._actionName||(this._actionName=""),n._setFramesFromCache("")?(n._setFramesFromCache(this._actionName,!0),e&&e.run()):!i||Loader.getAtlas(i)?this._loadAnimationData(t,e,i):Laya.loader.load(i,Handler.create(this,this._loadAnimationData,[t,e,i]),null,"atlas"),this},i._loadAnimationData=function(t,i,n){function s(n){if(Loader.getRes(n)&&t===n){var s;if(e.framesMap[t+"#"])a._setFramesFromCache(r._actionName,!0),r.index=0,r._checkResumePlaying();else{var o=a._parseGraphicAnimation(Loader.getRes(t));if(!o)return;var h,l=o.animationList,c=0,u=l.length;for(c=0;c<u;c++)s=l[c],e.framesMap[t+"#"+s.name]=s,h||(h=s);h&&(e.framesMap[t+"#"]=h,a._setFramesFromCache(r._actionName,!0),r.index=0),r._checkResumePlaying()}i&&i.run()}}var r=this;if(n&&!Loader.getAtlas(n))return void console.warn("atlas load fail:"+n);var a=this;Loader.getRes(t)?s(t):Laya.loader.load(t,Handler.create(null,s,[t]),null,"json"),Loader.clearRes(t)},i._parseGraphicAnimation=function(t){return GraphicAnimation.parseAnimationData(t)},i._parseGraphicAnimationByData=function(t){return GraphicAnimation.parseAnimationByData(t)},__getset(0,i,"frames",function(){return this._frames},function(t){this._frames=t,t&&(this._count=t.length,this._isPlaying?this.play(this._index,this.loop,this._actionName):this.index=this._index)}),__getset(0,i,"autoPlay",null,function(t){t?this.play():this.stop()}),__getset(0,i,"source",null,function(t){t.indexOf(".ani")>-1?this.loadAnimation(t):t.indexOf(".json")>-1||t.indexOf("als")>-1||t.indexOf("atlas")>-1?this.loadAtlas(t):this.loadImages(t.split(","))}),__getset(0,i,"autoAnimation",null,function(t){this.play(0,!0,t)}),e.createFrames=function(t,i){var n;if("string"==typeof t){var s=Loader.getAtlas(t);if(s&&s.length){n=[];for(var r=0,a=s.length;r<a;r++){var o=new Graphics;o.drawTexture(Loader.getRes(s[r]),0,0),n.push(o)}}}else if(t instanceof Array)for(n=[],r=0,a=t.length;r<a;r++)o=new Graphics,o.loadImage(t[r],0,0),n.push(o);return i&&(e.framesMap[i]=n),n},e.clearCache=function(t){var i,n=e.framesMap,s=t+"#";for(i in n)i!==t&&0!=i.indexOf(s)||delete e.framesMap[i]},e.framesMap={},e}(AnimationPlayerBase),FrameAnimation=function(t){function e(){this._targetDic=null,this._animationData=null,this._animationNewFrames=null,e.__super.call(this),null==e._sortIndexFun&&(e._sortIndexFun=MathUtil.sortByKey("index",!1,!0))}__class(e,"laya.display.FrameAnimation",t);var i=e.prototype;return i._setUp=function(t,e){this._labels=null,this._animationNewFrames=null,this._targetDic=t,this._animationData=e,this.interval=1e3/e.frameRate,e.parsed?(this._count=e.count,this._labels=e.labels,this._animationNewFrames=e.animationNewFrames):(this._animationNewFrames=[],this._calculateDatas()),e.parsed=!0,e.labels=this._labels,e.count=this._count,e.animationNewFrames=this._animationNewFrames},i.clear=function(){t.prototype.clear.call(this),this._targetDic=null,this._animationData=null},i._displayToIndex=function(t){if(this._animationData){t<0&&(t=0),t>this._count&&(t=this._count);var e=this._animationData.nodes,i=0,n=e.length;for(i=0;i<n;i++)this._displayNodeToFrame(e[i],t)}},i._displayNodeToFrame=function(t,e,i){i||(i=this._targetDic);var n=i[t.target];if(n){var s,r,a,o=t.frames,h=t.keys,l=0,c=h.length;for(l=0;l<c;l++)s=h[l],r=o[s],a=r.length>e?r[e]:r[r.length-1],n[s]=a}},i._calculateDatas=function(){if(this._animationData){var t,e=this._animationData.nodes,i=0,n=e.length;for(this._count=0,i=0;i<n;i++)t=e[i],this._calculateNodeKeyFrames(t);this._count+=1}},i._calculateNodeKeyFrames=function(t){var i,n,s=t.keyframes,r=t.target;t.frames||(t.frames={}),t.keys?t.keys.length=0:t.keys=[],t.initValues||(t.initValues={})
;for(i in s)n=s[i],t.frames[i]||(t.frames[i]=[]),this._targetDic&&this._targetDic[r]&&(t.initValues[i]=this._targetDic[r][i]),n.sort(e._sortIndexFun),t.keys.push(i),this._calculateNodePropFrames(n,t.frames[i],i,r)},i.resetToInitState=function(){if(this._targetDic&&this._animationData){var t,e,i=this._animationData.nodes,n=0,s=i.length;for(n=0;n<s;n++)if(t=i[n],e=t.initValues){var r=this._targetDic[t.target];if(r){var a;for(a in e)r[a]=e[a]}}}},i._calculateNodePropFrames=function(t,e,i,n){var s=0,r=t.length-1;for(e.length=t[r].index+1,s=0;s<r;s++)this._dealKeyFrame(t[s]),this._calculateFrameValues(t[s],t[s+1],e);0==r&&(e[0]=t[0].value,this._animationNewFrames&&(this._animationNewFrames[t[0].index]=!0)),this._dealKeyFrame(t[s])},i._dealKeyFrame=function(t){t.label&&""!=t.label&&this.addLabel(t.label,t.index)},i._calculateFrameValues=function(t,e,i){var n,s=0,r=t.index,a=e.index,o=t.value,h=e.value-t.value,l=a-r;if(a>this._count&&(this._count=a),t.tween)for(n=Ease[t.tweenMethod],null==n&&(n=Ease.linearNone),s=r;s<a;s++)i[s]=n(s-r,o,h,l),this._animationNewFrames&&(this._animationNewFrames[s]=!0);else for(s=r;s<a;s++)i[s]=o;this._animationNewFrames&&(this._animationNewFrames[t.index]=!0,this._animationNewFrames[e.index]=!0),i[e.index]=e.value},e._sortIndexFun=null,e}(AnimationPlayerBase),Input=function(t){function e(){this._focus=!1,this._multiline=!1,this._editable=!0,this._restrictPattern=null,this._type="text",this._prompt="",this._promptColor="#A9A9A9",this._originColor="#000000",this._content="",e.__super.call(this),this._maxChars=1e5,this._width=100,this._height=20,this.multiline=!1,this.overflow=Text.SCROLL,this.on("mousedown",this,this._onMouseDown),this.on("undisplay",this,this._onUnDisplay)}__class(e,"laya.display.Input",t);var i=e.prototype;return i.setSelection=function(t,e){laya.display.Input.inputElement.selectionStart=t,laya.display.Input.inputElement.selectionEnd=e},i._onUnDisplay=function(t){this.focus=!1},i._onMouseDown=function(t){this.focus=!0},i.render=function(t,e,i){laya.display.Sprite.prototype.render.call(this,t,e,i)},i._syncInputTransform=function(){var t=this.nativeInput,i=Utils.getTransformRelativeToWindow(this,this.padding[3],this.padding[0]),n=this._width-this.padding[1]-this.padding[3],s=this._height-this.padding[0]-this.padding[2];Render.isConchApp?(t.setScale(i.scaleX,i.scaleY),t.setSize(n,s),t.setPos(i.x,i.y)):(e.inputContainer.style.transform=e.inputContainer.style.webkitTransform="scale("+i.scaleX+","+i.scaleY+") rotate("+Laya.stage.canvasDegree+"deg)",t.style.width=n+"px",t.style.height=s+"px",e.inputContainer.style.left=i.x+"px",e.inputContainer.style.top=i.y+"px")},i.select=function(){this.nativeInput.select()},i._setInputMethod=function(){e.input.parentElement&&e.inputContainer.removeChild(e.input),e.area.parentElement&&e.inputContainer.removeChild(e.area),e.inputElement=this._multiline?e.area:e.input,e.inputContainer.appendChild(e.inputElement)},i._focusIn=function(){laya.display.Input.isInputting=!0;var t=this.nativeInput;this._focus=!0;var e=t.style;e.whiteSpace=this.wordWrap?"pre-wrap":"nowrap",this._setPromptColor(),t.readOnly=!this._editable,Render.isConchApp&&t.setForbidEdit(!this._editable),t.maxLength=this._maxChars;this.padding;t.type=this._type,t.value=this._content,t.placeholder=this._prompt,Laya.stage.off("keydown",this,this._onKeyDown),Laya.stage.on("keydown",this,this._onKeyDown),Laya.stage.focus=this,this.event("focus"),Browser.onPC&&t.focus();this._text;this._text=null,this.typeset(),t.setColor(this._originColor),t.setFontSize(this.fontSize),t.setFontFace(Browser.onIPhone?Text._fontFamilyMap[this.font]||this.font:this.font),Render.isConchApp&&t.setMultiAble&&t.setMultiAble(this._multiline),e.lineHeight=this.leading+this.fontSize+"px",e.fontStyle=this.italic?"italic":"normal",e.fontWeight=this.bold?"bold":"normal",e.textAlign=this.align,e.padding="0 0",this._syncInputTransform(),!Render.isConchApp&&Browser.onPC&&Laya.timer.frameLoop(1,this,this._syncInputTransform)},i._setPromptColor=function(){e.promptStyleDOM=Browser.getElementById("promptStyle"),e.promptStyleDOM||(e.promptStyleDOM=Browser.createElement("style"),e.promptStyleDOM.setAttribute("id","promptStyle"),Browser.document.head.appendChild(e.promptStyleDOM)),e.promptStyleDOM.innerText="input::-webkit-input-placeholder, textarea::-webkit-input-placeholder {color:"+this._promptColor+"}input:-moz-placeholder, textarea:-moz-placeholder {color:"+this._promptColor+"}input::-moz-placeholder, textarea::-moz-placeholder {color:"+this._promptColor+"}input:-ms-input-placeholder, textarea:-ms-input-placeholder {color:"+this._promptColor+"}"},i._focusOut=function(){laya.display.Input.isInputting=!1,this._focus=!1,this._text=null,this._content=this.nativeInput.value,this._content?(t.prototype._$set_text.call(this,this._content),t.prototype._$set_color.call(this,this._originColor)):(t.prototype._$set_text.call(this,this._prompt),t.prototype._$set_color.call(this,this._promptColor)),Laya.stage.off("keydown",this,this._onKeyDown),Laya.stage.focus=null,this.event("blur"),Render.isConchApp&&this.nativeInput.blur(),Browser.onPC&&Laya.timer.clear(this,this._syncInputTransform)},i._onKeyDown=function(t){13===t.keyCode&&(Browser.onMobile&&!this._multiline&&(this.focus=!1),this.event("enter"))},i.changeText=function(e){this._content=e,this._focus?(this.nativeInput.value=e||"",this.event("change")):t.prototype.changeText.call(this,e)},__getset(0,i,"color",t.prototype._$get_color,function(e){this._focus&&this.nativeInput.setColor(e),t.prototype._$set_color.call(this,this._content?e:this._promptColor),this._originColor=e}),__getset(0,i,"inputElementYAdjuster",function(){return console.warn("deprecated: 由于即使设置了该值，在各平台和浏览器之间也不一定一致，inputElementYAdjuster已弃用。"),0},function(t){console.warn("deprecated: 由于即使设置了该值，在各平台和浏览器之间也不一定一致，inputElementYAdjuster已弃用。")}),__getset(0,i,"multiline",function(){return this._multiline},function(t){this._multiline=t,this.valign=t?"top":"middle"}),__getset(0,i,"maxChars",function(){return this._maxChars},function(t){t<=0&&(t=1e5),this._maxChars=t}),__getset(0,i,"text",function(){return this._focus?this.nativeInput.value:this._content||""},function(e){t.prototype._$set_color.call(this,this._originColor),e+="",this._focus?(this.nativeInput.value=e||"",this.event("change")):(this._multiline||(e=e.replace(/\r?\n/g,"")),this._content=e,e?t.prototype._$set_text.call(this,e):(t.prototype._$set_text.call(this,this._prompt),t.prototype._$set_color.call(this,this.promptColor)))}),__getset(0,i,"nativeInput",function(){return this._multiline?e.area:e.input}),__getset(0,i,"prompt",function(){return this._prompt},function(e){!this._text&&e&&t.prototype._$set_color.call(this,this._promptColor),this.promptColor=this._promptColor,this._text?t.prototype._$set_text.call(this,this._text==this._prompt?e:this._text):t.prototype._$set_text.call(this,e),this._prompt=Text.langPacks&&Text.langPacks[e]?Text.langPacks[e]:e}),__getset(0,i,"focus",function(){return this._focus},function(t){var i=this.nativeInput;this._focus!==t&&(t?(i.target?i.target._focusOut():this._setInputMethod(),i.target=this,this._focusIn()):(i.target=null,this._focusOut(),i.blur(),Render.isConchApp?i.setPos(-1e4,-1e4):e.inputContainer.contains(i)&&e.inputContainer.removeChild(i)))}),__getset(0,i,"restrict",function(){return this._restrictPattern?this._restrictPattern.source:""},function(t){t?(t="[^"+t+"]",t.indexOf("^^")>-1&&(t=t.replace("^^","")),this._restrictPattern=new RegExp(t,"g")):this._restrictPattern=null}),__getset(0,i,"editable",function(){return this._editable},function(t){this._editable=t,Render.isConchApp&&e.input.setForbidEdit(!t)}),__getset(0,i,"promptColor",function(){return this._promptColor},function(e){this._promptColor=e,this._content||t.prototype._$set_color.call(this,e)}),__getset(0,i,"type",function(){return this._type},function(t){this._getCSSStyle().password="password"==t,this._type=t}),__getset(0,i,"inputElementXAdjuster",function(){return console.warn("deprecated: 由于即使设置了该值，在各平台和浏览器之间也不一定一致，inputElementXAdjuster已弃用。"),0},function(t){console.warn("deprecated: 由于即使设置了该值，在各平台和浏览器之间也不一定一致，inputElementXAdjuster已弃用。")}),__getset(0,i,"asPassword",function(){return this._getCSSStyle().password},function(t){this._getCSSStyle().password=t,this._type="password",console.warn('deprecated: 使用type="password"替代设置asPassword, asPassword将在下次重大更新时删去'),this.isChanged=!0}),e.__init__=function(){e._createInputElement(),Browser.onMobile&&Render.canvas.addEventListener(e.IOS_IFRAME?"click":"touchend",e._popupInputMethod)},e._popupInputMethod=function(t){if(laya.display.Input.isInputting){laya.display.Input.inputElement.focus()}},e._createInputElement=function(){e._initInput(e.area=Browser.createElement("textarea")),e._initInput(e.input=Browser.createElement("input")),e.inputContainer=Browser.createElement("div"),e.inputContainer.style.position="absolute",e.inputContainer.style.zIndex=1e5,Browser.container.appendChild(e.inputContainer),e.inputContainer.setPos=function(t,i){e.inputContainer.style.left=t+"px",e.inputContainer.style.top=i+"px"}},e._initInput=function(t){var i=t.style;i.cssText="position:absolute;overflow:hidden;resize:none;transform-origin:0 0;-webkit-transform-origin:0 0;-moz-transform-origin:0 0;-o-transform-origin:0 0;",i.resize="none",i.backgroundColor="transparent",i.border="none",i.outline="none",i.zIndex=1,t.addEventListener("input",e._processInputting),t.addEventListener("mousemove",e._stopEvent),t.addEventListener("mousedown",e._stopEvent),t.addEventListener("touchmove",e._stopEvent),t.setFontFace=function(e){t.style.fontFamily=e},Render.isConchApp||(t.setColor=function(e){t.style.color=e},t.setFontSize=function(e){t.style.fontSize=e+"px"})},e._processInputting=function(t){var e=laya.display.Input.inputElement.target;if(e){var i=laya.display.Input.inputElement.value;e._restrictPattern&&(i=i.replace(/\u2006|\x27/g,""),e._restrictPattern.test(i)&&(i=i.replace(e._restrictPattern,""),laya.display.Input.inputElement.value=i)),e._text=i,e.event("input")}},e._stopEvent=function(t){"touchmove"==t.type&&t.preventDefault(),t.stopPropagation&&t.stopPropagation()},e.TYPE_TEXT="text",e.TYPE_PASSWORD="password",e.TYPE_EMAIL="email",e.TYPE_URL="url",e.TYPE_NUMBER="number",e.TYPE_RANGE="range",e.TYPE_DATE="date",e.TYPE_MONTH="month",e.TYPE_WEEK="week",e.TYPE_TIME="time",e.TYPE_DATE_TIME="datetime",e.TYPE_DATE_TIME_LOCAL="datetime-local",e.TYPE_SEARCH="search",e.input=null,e.area=null,e.inputElement=null,e.inputContainer=null,e.confirmButton=null,e.promptStyleDOM=null,e.inputHeight=45,e.isInputting=!1,e.stageMatrix=null,__static(e,["IOS_IFRAME",function(){return this.IOS_IFRAME=Browser.onIOS&&Browser.window.top!=Browser.window.self}]),e}(Text),HTMLImage=function(t){function e(t,i){this._recreateLock=!1,this._needReleaseAgain=!1,e.__super.call(this),this._init_(t,i)}__class(e,"laya.resource.HTMLImage",t);var i=e.prototype;return i._init_=function(t,e){this._src=t,this._source=new Browser.window.Image,e&&(e.onload&&(this.onload=e.onload),e.onerror&&(this.onerror=e.onerror),e.onCreate&&e.onCreate(this)),0!=t.indexOf("data:image")&&(this._source.crossOrigin=""),t&&(this._source.src=t)},i.recreateResource=function(){var t=this;if(""===this._src)throw new Error("src no null！");if(this._needReleaseAgain=!1,this._source){if(this._recreateLock)return;this.startCreate(),this.memorySize=this._w*this._h*4,this._recreateLock=!1,this.completeCreate()}else{this._recreateLock=!0,this.startCreate();var e=this;this._source=new Browser.window.Image,this._source.crossOrigin="",this._source.onload=function(){if(e._needReleaseAgain)return e._needReleaseAgain=!1,e._source.onload=null,void(e._source=null);e._source.onload=null,e.memorySize=t._w*t._h*4,e._recreateLock=!1,e.completeCreate()},this._source.src=this._src}},i.detoryResource=function(){this._recreateLock&&(this._needReleaseAgain=!0),this._source&&(this._source=null,this.memorySize=0)},i.onresize=function(){this._w=this._source.width,this._h=this._source.height},__getset(0,i,"onload",null,function(t){var e=this;this._onload=t,this._source&&(this._source.onload=null!=this._onload?function(){e.onresize(),e._onload()}:null)}),__getset(0,i,"onerror",null,function(t){var e=this;this._onerror=t,this._source&&(this._source.onerror=null!=this._onerror?function(){e._onerror()}:null)}),e.create=function(t,i){return new e(t,i)},e}(FileBitmap),EffectAnimation=function(t){function e(){this._target=null,this._playEvents=null,this._initData={},this._aniKeys=null,this._effectClass=null,e.__super.call(this)}__class(e,"laya.display.EffectAnimation",t);var i=e.prototype;return i._onOtherBegin=function(t){t!=this&&this.stop()},i.addEvent=function(){this._target&&this._playEvents&&(this._setControlNode(this._target),this._target.on(this._playEvents,this,this._onPlayAction))},i._onPlayAction=function(){this._target&&(this._target.event("effectanimationbegin",[this]),this._recordInitData(),this.play(0,!1))},i._recordInitData=function(){if(this._aniKeys){var t=0,e=0;e=this._aniKeys.length;var i;for(t=0;t<e;t++)i=this._aniKeys[t],this._initData[i]=this._target[i]}},i._displayToIndex=function(t){if(this._animationData){t<0&&(t=0),t>this._count&&(t=this._count);var e=this._animationData.nodes,i=0,n=e.length;for(n=n>1?1:n,i=0;i<n;i++)this._displayNodeToFrame(e[i],t)}},i._displayNodeToFrame=function(t,e,i){if(this._target){var n;n=this._target;var s,r,a,o,h=t.frames,l=t.keys,c=0,u=l.length;o=t.secondFrames;var _,d,f,p,g=0;for(c=0;c<u;c++)s=l[c],r=h[s],g=o[s],g==-1?a=this._initData[s]:e<g?(d=t.keyframes[s],f=d[0],f.tween?(_=Ease[f.tweenMethod],null==_&&(_=Ease.linearNone),p=d[1],a=_(e,this._initData[s],p.value-this._initData[s],p.index)):a=this._initData[s]):a=r.length>e?r[e]:r[r.length-1],n[s]=a}},i._calculateNodeKeyFrames=function(e){t.prototype._calculateNodeKeyFrames.call(this,e);var i,n,s,r=e.keyframes;e.target;s={},e.secondFrames=s;for(i in r)n=r[i],n.length<=1?s[i]=-1:s[i]=n[1].index},__getset(0,i,"target",function(){return this._target},function(t){this._target&&this._target.off("effectanimationbegin",this,this._onOtherBegin),this._target=t,this._target&&this._target.on("effectanimationbegin",this,this._onOtherBegin),this.addEvent()}),__getset(0,i,"playEvent",null,function(t){this._playEvents=t,t&&this.addEvent()}),__getset(0,i,"effectData",null,function(t){if(t){var e;e=t.animations,e&&e[0]&&(this._setUp({},e[0]),e[0].nodes&&e[0].nodes[0]&&(this._aniKeys=e[0].nodes[0].keys))}}),__getset(0,i,"effectClass",null,function(t){if(this._effectClass=ClassUtils.getClass(t),this._effectClass){var e;if(e=this._effectClass.uiView){var i;i=e.animations,i&&i[0]&&(this._setUp({},i[0]),i[0].nodes&&i[0].nodes[0]&&(this._aniKeys=i[0].nodes[0].keys))}}}),e.EffectAnimationBegin="effectanimationbegin",e}(FrameAnimation),GraphicAnimation=function(t){function e(){this.animationList=null,this.animationDic=null,this._nodeList=null,this._nodeDefaultProps=null,this._gList=null,this._nodeIDAniDic={},this._rootNode=null,this._nodeGDic=null,e.__super.call(this)}var i;__class(e,"laya.utils.GraphicAnimation",t);var n=e.prototype;return n._parseNodeList=function(t){this._nodeList||(this._nodeList=[]),this._nodeDefaultProps[t.compId]=t.props,t.compId&&this._nodeList.push(t.compId);var e=t.child;if(e){var i=0,n=e.length;for(i=0;i<n;i++)this._parseNodeList(e[i])}},n._calGraphicData=function(t){this._setUp(null,t),this._createGraphicData()},n._createGraphicData=function(){var t=[],e=0,i=this.count,n=this._animationNewFrames;n||(n=[]);var s;for(e=0;e<i;e++)!n[e]&&s||(s=this._createFrameGraphic(e)),t.push(s);this._gList=t},n._createFrameGraphic=function(t){var i=new Graphics;return e._rootMatrix||(e._rootMatrix=new Matrix),this._updateNodeGraphic(this._rootNode,t,e._rootMatrix,i),i},n._updateNodeGraphic=function(t,e,i,n,s){void 0===s&&(s=1);var r;r=this._nodeGDic[t.compId]=this._getNodeGraphicData(t.compId,e,this._nodeGDic[t.compId]);var a=r.alpha*s;if(!(a<.01)){r.resultTransform||(r.resultTransform=Matrix.create());var o;o=r.resultTransform,Matrix.mul(r.transform,i,o);var h;r.skin&&(h=this._getTextureByUrl(r.skin))&&(o._checkTransform()?(n.drawTexture(h,0,0,r.width,r.height,o,a),r.resultTransform=null):n.drawTexture(h,o.tx,o.ty,r.width,r.height,null,a));var l;if(l=t.child){var c=0,u=0;for(u=l.length,c=0;c<u;c++)this._updateNodeGraphic(l[c],e,o,n,a)}}},n._updateNoChilds=function(t,e){if(t.skin){var i=this._getTextureByUrl(t.skin);if(i){var n=t.transform;n._checkTransform();var s=!1;s=!n.bTransform,s?e.drawTexture(i,n.tx,n.ty,t.width,t.height,null,t.alpha):e.drawTexture(i,0,0,t.width,t.height,n.clone(),t.alpha)}}},n._updateNodeGraphic2=function(t,e,i){var n;if(n=this._nodeGDic[t.compId]=this._getNodeGraphicData(t.compId,e,this._nodeGDic[t.compId]),!t.child)return void this._updateNoChilds(n,i);var s=n.transform;s._checkTransform();var r=!1;r=!s.bTransform;var a=!1;a=r&&(0!=s.tx||0!=s.ty);var o=!1;o=s.bTransform||1!=n.alpha,o&&i.save(),1!=n.alpha&&i.alpha(n.alpha),r?a&&i.translate(s.tx,s.ty):i.transform(s.clone());var h;h=t.child;var l;if(n.skin&&(l=this._getTextureByUrl(n.skin))&&i.drawTexture(l,0,0,n.width,n.height),h){var c=0,u=0;for(u=h.length,c=0;c<u;c++)this._updateNodeGraphic2(h[c],e,i)}o?i.restore():r?a&&i.translate(-s.tx,-s.ty):i.transform(s.clone().invert())},n._calculateNodeKeyFrames=function(e){t.prototype._calculateNodeKeyFrames.call(this,e),this._nodeIDAniDic[e.target]=e},n.getNodeDataByID=function(t){return this._nodeIDAniDic[t]},n._getParams=function(t,i,n,s){var r=e._temParam;r.length=i.length;var a=0,o=i.length;for(a=0;a<o;a++)r[a]=this._getObjVar(t,i[a][0],n,i[a][1],s);return r},n._getObjVar=function(t,e,i,n,s){if(t.hasOwnProperty(e)){var r=t[e];return i>=r.length&&(i=r.length-1),t[e][i]}return s.hasOwnProperty(e)?s[e]:n},n._getNodeGraphicData=function(t,n,s){s||(s=i.create()),s.transform?s.transform.identity():s.transform=Matrix.create();var r=this.getNodeDataByID(t);if(!r)return s;var a=r.frames,o=this._getParams(a,e._drawTextureCmd,n,this._nodeDefaultProps[t]),h=o[0],l=NaN,c=NaN,u=o[5],_=o[6],d=o[13],f=o[14],p=o[7],g=o[8],m=o[9],v=o[11],y=o[12];l=o[3],c=o[4];var w;s.skin=h,s.width=l,s.height=c,h&&(w=this._getTextureByUrl(h),w?(l||(l=w.sourceWidth),c||(c=w.sourceHeight)):console.warn("lost skin:",h,",you may load pics first")),s.alpha=o[10];var x;x=s.transform,0!=d&&(u=d*l),0!=f&&(_=f*c),0==u&&0==_||x.translate(-u,-_);var T=null;if(m||1!==p||1!==g||v||y){T=e._tempMt,T.identity(),T.bTransform=!0;var b=.0174532922222222*(m-v),C=.0174532922222222*(m+y),M=Math.cos(C),S=Math.sin(C),L=Math.sin(b),R=Math.cos(b);T.a=p*M,T.b=p*S,T.c=-g*L,T.d=g*R,T.tx=T.ty=0}return T&&(x=Matrix.mul(x,T,x)),x.translate(o[1],o[2]),s},n._getTextureByUrl=function(t){return Loader.getRes(t)},n.setAniData=function(t,i){if(t.animations){this._nodeDefaultProps={},this._nodeGDic={},this._nodeList&&(this._nodeList.length=0),this._rootNode=t,this._parseNodeList(t);var n,s={},r=[],a=t.animations,o=0,h=a.length;for(o=0;o<h;o++)if(n=a[o],this._labels=null,(!i||i==n.name)&&n){try{this._calGraphicData(n)}catch(t){console.warn("parse animation fail:"+n.name+",empty animation created"),this._gList=[]}var l={};l.interval=1e3/n.frameRate,l.frames=this._gList,l.labels=this._labels,l.name=n.name,r.push(l),s[n.name]=l}this.animationList=r,this.animationDic=s}e._temParam.length=0},n.parseByData=function(t){var e,i;e=t.nodeRoot,i=t.aniO,delete t.nodeRoot,delete t.aniO,this._nodeDefaultProps={},this._nodeGDic={},this._nodeList&&(this._nodeList.length=0),this._rootNode=e,this._parseNodeList(e),this._labels=null;try{this._calGraphicData(i)}catch(t){console.warn("parse animation fail:"+i.name+",empty animation created"),this._gList=[]}var n=t;return n.interval=1e3/i.frameRate,n.frames=this._gList,n.labels=this._labels,n.name=i.name,n},n.setUpAniData=function(t){if(t.animations){var e,i={},n=[],s=t.animations,r=0,a=s.length;for(r=0;r<a;r++)if(e=s[r]){var o={};o.name=e.name,o.aniO=e,o.nodeRoot=t,n.push(o),i[e.name]=o}this.animationList=n,this.animationDic=i}},n._clear=function(){if(this.animationList=null,this.animationDic=null,this._gList=null,this._nodeGDic){var t,e;for(t in this._nodeGDic)(e=this._nodeGDic[t])&&e.recover()}this._nodeGDic=null},e.parseAnimationByData=function(t){e._I||(e._I=new e);var i;return i=e._I.parseByData(t),e._I._clear(),i},e.parseAnimationData=function(t){e._I||(e._I=new e),e._I.setUpAniData(t);var i;return i={},i.animationList=e._I.animationList,i.animationDic=e._I.animationDic,e._I._clear(),i},e._temParam=[],e._I=null,e._rootMatrix=null,__static(e,["_drawTextureCmd",function(){return this._drawTextureCmd=[["skin",null],["x",0],["y",0],["width",0],["height",0],["pivotX",0],["pivotY",0],["scaleX",1],["scaleY",1],["rotation",0],["alpha",1],["skewX",0],["skewY",0],["anchorX",0],["anchorY",0]]},"_tempMt",function(){return this._tempMt=new Matrix}]),e.__init$=function(){i=function(){function t(){this.skin=null,this.transform=null,this.resultTransform=null,this.width=NaN,this.height=NaN,this.alpha=1}return __class(t,""),t.prototype.recover=function(){this.skin=null,this.width=0,this.height=0,this.alpha=1,this.transform&&(this.transform.destroy(),this.transform=null),this.resultTransform&&(this.resultTransform.destroy(),this.resultTransform=null),Pool.recover("GraphicNode",this)},t.create=function(){return Pool.getItemByClass("GraphicNode",t)},t}()},e}(FrameAnimation);Laya.__init([EventDispatcher,LoaderManager,Render,Browser,Timer,LocalStorage,TimeLine,GraphicAnimation])}(window,document,Laya),function(t,e,i){var n=(i.un,i.uns,i.static,i.class);i.getset,i.__newvec;new(function(){function t(){}return n(t,"LayaMain"),t}())}(0,0,Laya);!function(t,e,i){var r=(i.un,i.uns,i.static),a=i.class,s=i.getset,n=i.__newvec,h=laya.maths.Arith,l=laya.maths.Bezier,o=laya.resource.Bitmap,u=laya.utils.Browser,_=laya.utils.Color,c=(laya.filters.ColorFilter,i.Config),f=laya.resource.Context,d=(laya.events.Event,laya.filters.Filter),m=laya.display.Graphics,p=laya.resource.HTMLCanvas,g=(laya.utils.HTMLChar,laya.resource.HTMLImage),v=laya.resource.HTMLSubImage,b=(laya.utils.Handler,laya.maths.Matrix),T=laya.maths.Point,x=laya.maths.Rectangle,y=laya.renders.Render,A=(laya.renders.RenderContext,laya.renders.RenderSprite),E=laya.resource.Resource,S=laya.resource.ResourceManager,w=laya.utils.RunDriver,R=laya.display.Sprite,I=laya.utils.Stat,C=laya.utils.StringKey,M=(laya.display.css.Style,laya.system.System),L=laya.display.Text,P=laya.resource.Texture,F=(laya.net.URL,laya.utils.Utils),D=laya.utils.VectorGraphManager;laya.utils.WordText;i.interface("laya.webgl.shapes.IShape"),i.interface("laya.webgl.submit.ISubmit"),i.interface("laya.webgl.text.ICharSegment"),i.interface("laya.webgl.canvas.save.ISaveData"),i.interface("laya.webgl.resource.IMergeAtlasBitmap"),i.interface("laya.filters.IFilterActionGL","laya.filters.IFilterAction");var B=function(){function t(){}a(t,"laya.filters.webgl.FilterActionGL");var e=t.prototype;return i.imps(e,{"laya.filters.IFilterActionGL":!0}),e.setValue=function(t){},e.setValueMix=function(t){},e.apply3d=function(t,e,i,r,a){return null},e.apply=function(t){return null},s(0,e,"typeMix",function(){return 0}),t}(),N=function(){function t(){}return a(t,"laya.webgl.shader.ShaderValue"),t}(),O=function(){function t(t,e,r){this._atlasID=0,this._width=0,this._height=0,this._texCount=0,this._rowInfo=null,this._cells=null,this._failSize=new i,void 0===t&&(t=0),void 0===e&&(e=0),void 0===r&&(r=0),this._cells=null,this._rowInfo=null,this._init(t,e),this._atlasID=r}var e,i;a(t,"laya.webgl.atlas.AtlasGrid");var r=t.prototype;return r.getAltasID=function(){return this._atlasID},r.setAltasID=function(t){t>=0&&(this._atlasID=t)},r.addTex=function(t,e,i){var r=this._get(e,i);return 0==r.ret?r:(this._fill(r.x,r.y,e,i,t),this._texCount++,r)},r._release=function(){null!=this._cells&&(this._cells.length=0,this._cells=null),this._rowInfo&&(this._rowInfo.length=0,this._rowInfo=null)},r._init=function(t,i){if(this._width=t,this._height=i,this._release(),0==this._width)return!1;this._cells=new Uint8Array(this._width*this._height*3),this._rowInfo=n(this._height);for(var r=0;r<this._height;r++)this._rowInfo[r]=new e;return this._clear(),!0},r._get=function(t,e){var i=new U;if(t>=this._failSize.width&&e>=this._failSize.height)return i;for(var r=-1,a=-1,s=this._width,n=this._height,h=this._cells,l=0;l<n;l++)if(!(this._rowInfo[l].spaceCount<t))for(var o=0;o<s;){var u=3*(l*s+o);if(0!=h[u]||h[u+1]<t||h[u+2]<e)o+=h[u+1];else{r=o,a=l;for(var _=0;_<t;_++)if(h[3*_+u+2]<e){r=-1;break}if(!(r<0))return i.ret=!0,i.x=r,i.y=a,i;o+=h[u+1]}}return i},r._fill=function(t,e,i,r,a){var s=this._width,n=this._height;this._check(t+i<=s&&e+r<=n);for(var h=e;h<r+e;++h){this._check(this._rowInfo[h].spaceCount>=i),this._rowInfo[h].spaceCount-=i;for(var l=0;l<i;l++){var o=3*(t+h*s+l);this._check(0==this._cells[o]),this._cells[o]=a,this._cells[o+1]=i,this._cells[o+2]=r}}if(t>0)for(h=0;h<r;++h){var u=0;for(l=t-1;l>=0&&0==this._cells[3*((e+h)*s+l)];--l,++u);for(l=u;l>0;--l)this._cells[3*((e+h)*s+t-l)+1]=l,this._check(l>0)}if(e>0)for(l=t;l<t+i;++l){for(u=0,h=e-1;h>=0&&0==this._cells[3*(l+h*s)];--h,u++);for(h=u;h>0;--h)this._cells[3*(l+(e-h)*s)+2]=h,this._check(h>0)}},r._check=function(t){0==t&&console.log("xtexMerger 错误啦")},r._clear=function(){this._texCount=0;for(var t=0;t<this._height;t++)this._rowInfo[t].spaceCount=this._width;for(var e=0;e<this._height;e++)for(var i=0;i<this._width;i++){var r=3*(e*this._width+i);this._cells[r]=0,this._cells[r+1]=this._width-i,this._cells[r+2]=this._width-e}this._failSize.width=this._width+1,this._failSize.height=this._height+1},t.__init$=function(){e=function(){function t(){this.spaceCount=0}return a(t,""),t}(),i=function(){function t(){this.width=0,this.height=0}return a(t,""),t}()},t}(),V=function(){function t(t,e,i,r){this._currentAtlasCount=0,this._maxAtlaserCount=0,this._width=0,this._height=0,this._gridSize=0,this._gridNumX=0,this._gridNumY=0,this._init=!1,this._curAtlasIndex=0,this._setAtlasParam=!1,this._atlaserArray=null,this._needGC=!1,this._setAtlasParam=!0,this._width=t,this._height=e,this._gridSize=i,this._maxAtlaserCount=r,this._gridNumX=t/i,this._gridNumY=e/i,this._curAtlasIndex=0,this._atlaserArray=[]}a(t,"laya.webgl.atlas.AtlasResourceManager");var e=t.prototype;return e.setAtlasParam=function(e,i,r,a){if(1==this._setAtlasParam)return t._sid_=0,this._width=e,this._height=i,this._gridSize=r,this._maxAtlaserCount=a,this._gridNumX=e/r,this._gridNumY=i/r,this._curAtlasIndex=0,this.freeAll(),!0;throw console.log("设置大图合集参数错误，只能在开始页面设置各种参数"),-1},e.pushData=function(e){this._setAtlasParam=!1;for(var i=Math.ceil((e.bitmap.width+2)/this._gridSize),r=Math.ceil((e.bitmap.height+2)/this._gridSize),a=!1,s=0;s<2;s++){for(var n=this._maxAtlaserCount,h=0;h<n;h++){var l=(this._curAtlasIndex+h)%n;this._atlaserArray.length-1>=l||this._atlaserArray.push(new xt(this._gridNumX,this._gridNumY,this._width,this._height,t._sid_++));var o=this._atlaserArray[l],u=e.bitmap,_=o.inAtlasWebGLImagesKey.indexOf(u),c=0,f=0;if(_!=-1){var d=o.InAtlasWebGLImagesOffsetValue[_];c=d[0],f=d[1],o.addToAtlas(e,c,f),a=!0,this._curAtlasIndex=l;break}var m=o.addTex(1,i,r);if(m.ret){c=m.x*this._gridSize+1,f=m.y*this._gridSize+1,u.lock=!0,o.addToAtlasTexture(u,c,f),o.addToAtlas(e,c,f),a=!0,this._curAtlasIndex=l;break}}if(a)break;this._atlaserArray.push(new xt(this._gridNumX,this._gridNumY,this._width,this._height,t._sid_++)),this._needGC=!0,this.garbageCollection(),this._curAtlasIndex=this._atlaserArray.length-1}return a||console.log(">>>AtlasManager pushData error"),a},e.addToAtlas=function(t){laya.webgl.atlas.AtlasResourceManager.instance.pushData(t)},e.garbageCollection=function(){if(this._needGC===!0){for(var t=this._atlaserArray.length-this._maxAtlaserCount,e=0;e<t;e++)this._atlaserArray[e].dispose();this._atlaserArray.splice(0,t),this._needGC=!1}return!0},e.freeAll=function(){for(var t=0,e=this._atlaserArray.length;t<e;t++)this._atlaserArray[t].dispose();this._atlaserArray.length=0,this._curAtlasIndex=0},e.getAtlaserCount=function(){return this._atlaserArray.length},e.getAtlaserByIndex=function(t){return this._atlaserArray[t]},s(1,t,"instance",function(){return t._Instance||(t._Instance=new t(laya.webgl.atlas.AtlasResourceManager.atlasTextureWidth,laya.webgl.atlas.AtlasResourceManager.atlasTextureHeight,16,laya.webgl.atlas.AtlasResourceManager.maxTextureCount)),t._Instance}),s(1,t,"enabled",function(){return t._enabled}),s(1,t,"atlasLimitWidth",function(){return t._atlasLimitWidth},function(e){t._atlasLimitWidth=e}),s(1,t,"atlasLimitHeight",function(){return t._atlasLimitHeight},function(e){t._atlasLimitHeight=e}),t._enable=function(){t._enabled=!0,c.atlasEnable=!0},t._disable=function(){t._enabled=!1,c.atlasEnable=!1},t.__init__=function(){t.atlasTextureWidth=2048,t.atlasTextureHeight=2048,t.maxTextureCount=6,t.atlasLimitWidth=512,t.atlasLimitHeight=512},t._enabled=!1,t._atlasLimitWidth=0,t._atlasLimitHeight=0,t.gridSize=16,t.atlasTextureWidth=0,t.atlasTextureHeight=0,t.maxTextureCount=0,t._atlasRestore=0,t.BOARDER_TYPE_NO=0,t.BOARDER_TYPE_RIGHT=1,t.BOARDER_TYPE_LEFT=2,t.BOARDER_TYPE_BOTTOM=4,t.BOARDER_TYPE_TOP=8,t.BOARDER_TYPE_ALL=15,t._sid_=0,t._Instance=null,t}(),U=function(){function t(){this.x=0,this.y=0,this.ret=!1,this.ret=!1,this.x=0,this.y=0}return a(t,"laya.webgl.atlas.MergeFillInfo"),t}(),H=function(){function t(){}return a(t,"laya.webgl.canvas.BlendMode"),t._init_=function(e){t.fns=[t.BlendNormal,t.BlendAdd,t.BlendMultiply,t.BlendScreen,t.BlendOverlay,t.BlendLight,t.BlendMask,t.BlendDestinationOut],t.targetFns=[t.BlendNormalTarget,t.BlendAddTarget,t.BlendMultiplyTarget,t.BlendScreenTarget,t.BlendOverlayTarget,t.BlendLightTarget,t.BlendMask,t.BlendDestinationOut]},t.BlendNormal=function(t){t.blendFuncSeparate(770,771,1,1)},t.BlendAdd=function(t){t.blendFunc(770,772)},t.BlendMultiply=function(t){t.blendFunc(774,771)},t.BlendScreen=function(t){t.blendFunc(770,1)},t.BlendOverlay=function(t){t.blendFunc(1,769)},t.BlendLight=function(t){t.blendFunc(770,1)},t.BlendNormalTarget=function(t){t.blendFuncSeparate(770,771,1,771)},t.BlendAddTarget=function(t){t.blendFunc(770,772)},t.BlendMultiplyTarget=function(t){t.blendFunc(774,771)},t.BlendScreenTarget=function(t){t.blendFunc(770,1)},t.BlendOverlayTarget=function(t){t.blendFunc(1,769)},t.BlendLightTarget=function(t){t.blendFunc(770,1)},t.BlendMask=function(t){t.blendFunc(0,770)},t.BlendDestinationOut=function(t){t.blendFunc(0,0)},t.activeBlendFunction=null,t.NAMES=["normal","add","multiply","screen","overlay","light","mask","destination-out"],t.TOINT={normal:0,add:1,multiply:2,screen:3,lighter:1,overlay:4,light:5,mask:6,"destination-out":7},t.NORMAL="normal",t.ADD="add",t.MULTIPLY="multiply",t.SCREEN="screen",t.LIGHT="light",t.OVERLAY="overlay",t.DESTINATIONOUT="destination-out",t.fns=[],t.targetFns=[],t}(),k=function(){function t(t){this._color=_.create("black"),this.setValue(t)}a(t,"laya.webgl.canvas.DrawStyle");var e=t.prototype;return e.setValue=function(t){if(t){if("string"==typeof t)return void(this._color=_.create(t));if(t instanceof laya.utils.Color)return void(this._color=t)}},e.reset=function(){this._color=_.create("black")},e.equal=function(t){return"string"==typeof t?this._color.strColor===t:t instanceof laya.utils.Color&&this._color.numColor===t.numColor},e.toColorStr=function(){return this._color.strColor},t.create=function(e){if(e){var i;if("string"==typeof e?i=_.create(e):e instanceof laya.utils.Color&&(i=e),i)return i._drawStyle||(i._drawStyle=new t(e))}return null},r(t,["DEFAULT",function(){return this.DEFAULT=new t("#000000")}]),t}(),G=function(){function t(){this._x=0,this._y=0,this.dirty=!1,this.offset=0,this.count=0,this.geoStart=0,this.tempArray=[],this.closePath=!1,this.geomatrys=[];dt.mainContext;this.ib=Xt.create(35048),this.vb=Yt.create(5)}a(t,"laya.webgl.canvas.Path");var e=t.prototype;return e.addPoint=function(t,e){this.tempArray.push(t,e)},e.getEndPointX=function(){return this.tempArray[this.tempArray.length-2]},e.getEndPointY=function(){return this.tempArray[this.tempArray.length-1]},e.polygon=function(t,e,i,r,a,s){var n;return this.geomatrys.push(this._curGeomatry=n=new St(t,e,i,r,a,s)),r||(n.fill=!1),void 0==s&&(n.borderWidth=0),n},e.setGeomtry=function(t){this.geomatrys.push(this._curGeomatry=t)},e.drawLine=function(t,e,i,r,a){var s;return this.closePath?this.geomatrys.push(this._curGeomatry=s=new Et(t,e,i,r,a)):this.geomatrys.push(this._curGeomatry=s=new At(t,e,i,r,a)),s.fill=!1,s},e.update=function(){var t=this.ib.byteLength,e=this.geomatrys.length;this.offset=t;for(var i=this.geoStart;i<e;i++)this.geomatrys[i].getData(this.ib,this.vb,this.vb.byteLength/20);this.geoStart=e,this.count=(this.ib.byteLength-t)/ut.BYTES_PIDX},e.reset=function(){this.vb.clear(),this.ib.clear(),this.offset=this.count=this.geoStart=0,this.geomatrys.length=0},e.recover=function(){this._curGeomatry=null,this.vb.destory(),this.vb=null,this.ib.destory(),this.ib=null},t}(),z=function(){function t(){}a(t,"laya.webgl.canvas.save.SaveBase");var e=t.prototype;return i.imps(e,{"laya.webgl.canvas.save.ISaveData":!0}),e.isSaveMark=function(){return!1},e.restore=function(e){this._dataObj[this._valueName]=this._value,t._cache[t._cache._length++]=this,this._newSubmit&&(e._curSubmit=tt.RENDERBASE,e._renderKey=0)},t._createArray=function(){var t=[];return t._length=0,t},t._init=function(){var e=t._namemap={};return e[1]="ALPHA",e[2]="fillStyle",e[8]="font",e[256]="lineWidth",e[512]="strokeStyle",e[8192]="_mergeID",e[1024]=e[2048]=e[4096]=[],e[16384]="textBaseline",e[32768]="textAlign",e[65536]="_nBlendType",e[524288]="shader",e[1048576]="filters",e},t.save=function(e,i,r,a){if((e._saveMark._saveuse&i)!==i){e._saveMark._saveuse|=i;var s=t._cache,n=s._length>0?s[--s._length]:new t;n._value=r[n._valueName=t._namemap[i]],n._dataObj=r,n._newSubmit=a;var h=e._save;h[h._length++]=n}},t._cache=laya.webgl.canvas.save.SaveBase._createArray(),t._namemap=t._init(),t}(),W=function(){function t(){this._clipRect=new x}a(t,"laya.webgl.canvas.save.SaveClipRect");var e=t.prototype;return i.imps(e,{"laya.webgl.canvas.save.ISaveData":!0}),e.isSaveMark=function(){return!1},e.restore=function(e){e._clipRect=this._clipSaveRect,t._cache[t._cache._length++]=this,this._submitScissor.submitLength=e._submits._length-this._submitScissor.submitIndex,e._curSubmit=tt.RENDERBASE,e._renderKey=0},t.save=function(e,i){if(131072!=(131072&e._saveMark._saveuse)){e._saveMark._saveuse|=131072;var r=t._cache,a=r._length>0?r[--r._length]:new t;a._clipSaveRect=e._clipRect,e._clipRect=a._clipRect.copyFrom(e._clipRect),a._submitScissor=i;var s=e._save;s[s._length++]=a}},t._cache=z._createArray(),t}(),X=function(){function t(){this._saveuse=0}a(t,"laya.webgl.canvas.save.SaveMark");var e=t.prototype;return i.imps(e,{"laya.webgl.canvas.save.ISaveData":!0}),e.isSaveMark=function(){return!0},e.restore=function(e){e._saveMark=this._preSaveMark,t._no[t._no._length++]=this},t.Create=function(e){var i=t._no,r=i._length>0?i[--i._length]:new t;return r._saveuse=0,r._preSaveMark=e._saveMark,e._saveMark=r,r},t._no=z._createArray(),t}(),Y=function(){function t(){this._matrix=new b}a(t,"laya.webgl.canvas.save.SaveTransform");var e=t.prototype;return i.imps(e,{"laya.webgl.canvas.save.ISaveData":!0}),e.isSaveMark=function(){return!1},e.restore=function(e){e._curMat=this._savematrix,t._no[t._no._length++]=this},t.save=function(e){var i=e._saveMark;if(2048!=(2048&i._saveuse)){i._saveuse|=2048;var r=t._no,a=r._length>0?r[--r._length]:new t;a._savematrix=e._curMat,e._curMat=e._curMat.copyTo(a._matrix);var s=e._save;s[s._length++]=a}},t._no=z._createArray(),t}(),K=function(){function t(){}a(t,"laya.webgl.canvas.save.SaveTranslate");var e=t.prototype;return i.imps(e,{"laya.webgl.canvas.save.ISaveData":!0}),e.isSaveMark=function(){return!1},e.restore=function(e){e._curMat;e._x=this._x,e._y=this._y,t._no[t._no._length++]=this},t.save=function(e){var i=t._no,r=i._length>0?i[--i._length]:new t;r._x=e._x,r._y=e._y;var a=e._save;a[a._length++]=r},t._no=z._createArray(),t}(),Q=function(){function t(){this.target=null,this.repaint=!1,this._width=NaN,this._height=NaN,this._sp=null,this._clipRect=new x}a(t,"laya.webgl.resource.RenderTargetMAX");var e=t.prototype;return e.setSP=function(t){this._sp=t},e.size=function(t,e){var r=this;if(this._width===t&&this._height===e)return void this.target.size(t,e);this.repaint=!0,this._width=t,this._height=e,this.target?this.target.size(t,e):this.target=Ct.create(t,e),this.target.hasListener("recovered")||this.target.on("recovered",this,function(t){i.timer.callLater(r._sp,r._sp.repaint)})},e._flushToTarget=function(t,e){if(!e._destroy){var i=ct.worldScissorTest,r=ct.worldClipRect;ct.worldClipRect=this._clipRect,this._clipRect.x=this._clipRect.y=0,this._clipRect.width=this._width,this._clipRect.height=this._height,ct.worldScissorTest=!1,dt.mainContext.disable(3089);var a=ct.worldAlpha,s=ct.worldMatrix4,n=ct.worldMatrix,h=ct.worldFilters,l=ct.worldShaderDefines;if(ct.worldMatrix=b.EMPTY,ct.restoreTempArray(),ct.worldMatrix4=ct.TEMPMAT4_ARRAY,ct.worldAlpha=1,ct.worldFilters=null,ct.worldShaderDefines=null,It.activeShader=null,e.start(),c.showCanvasMark?e.clear(0,1,0,.3):e.clear(0,0,0,0),t.flush(),e.end(),It.activeShader=null,ct.worldAlpha=a,ct.worldMatrix4=s,ct.worldMatrix=n,ct.worldFilters=h,ct.worldShaderDefines=l,ct.worldScissorTest=i,i){var o=ct.height-r.y-r.height;dt.mainContext.scissor(r.x,o,r.width,r.height),dt.mainContext.enable(3089)}ct.worldClipRect=r}},e.flush=function(t){this.repaint&&(this._flushToTarget(t,this.target),this.repaint=!1)},e.drawTo=function(t,e,i,r,a){t.drawTexture(this.target.getTexture(),e,i,r,a,0,0)},e.destroy=function(){this.target&&(this.target.destroy(),this.target=null,this._sp=null)},t}(),j=function(){function t(){this.ALPHA=1,this.shaderType=0,this.defines=new yt}return a(t,"laya.webgl.shader.d2.Shader2D"),t.__init__=function(){kt.addInclude("parts/ColorFilter_ps_uniform.glsl","uniform vec4 colorAlpha;\nuniform mat4 colorMat;"),kt.addInclude("parts/ColorFilter_ps_logic.glsl","gl_FragColor = gl_FragColor * colorMat + colorAlpha/255.0;"),kt.addInclude("parts/GlowFilter_ps_uniform.glsl","uniform vec4 u_color;\nuniform float u_strength;\nuniform float u_blurX;\nuniform float u_blurY;\nuniform float u_offsetX;\nuniform float u_offsetY;\nuniform float u_textW;\nuniform float u_textH;"),kt.addInclude("parts/GlowFilter_ps_logic.glsl","const float c_IterationTime = 10.0;\nfloat floatIterationTotalTime = c_IterationTime * c_IterationTime;\nvec4 vec4Color = vec4(0.0,0.0,0.0,0.0);\nvec2 vec2FilterDir = vec2(-(u_offsetX)/u_textW,-(u_offsetY)/u_textH);\nvec2 vec2FilterOff = vec2(u_blurX/u_textW/c_IterationTime * 2.0,u_blurY/u_textH/c_IterationTime * 2.0);\nfloat maxNum = u_blurX * u_blurY;\nvec2 vec2Off = vec2(0.0,0.0);\nfloat floatOff = c_IterationTime/2.0;\nfor(float i = 0.0;i<=c_IterationTime; ++i){\n\tfor(float j = 0.0;j<=c_IterationTime; ++j){\n\t\tvec2Off = vec2(vec2FilterOff.x * (i - floatOff),vec2FilterOff.y * (j - floatOff));\n\t\tvec4Color += texture2D(texture, v_texcoord + vec2FilterDir + vec2Off)/floatIterationTotalTime;\n\t}\n}\ngl_FragColor = vec4(u_color.rgb,vec4Color.a * u_strength);"),kt.addInclude("parts/BlurFilter_ps_logic.glsl","gl_FragColor =   blur();\ngl_FragColor.w*=alpha;"),kt.addInclude("parts/BlurFilter_ps_uniform.glsl","uniform float strength;\nuniform vec2 blurInfo;\n\n#define PI 3.141593\n\nfloat sigma=strength/3.0;//3σ以外影响很小。即当σ=1的时候，半径为3\nfloat sig2 = sigma*sigma;\nfloat _2sig2 = 2.0*sig2;\n//return 1.0/(2*PI*sig2)*exp(-(x*x+y*y)/_2sig2)\nfloat gauss1 = 1.0/(2.0*PI*sig2);\n\nfloat getGaussian(float x, float y){\n    return gauss1*exp(-(x*x+y*y)/_2sig2);\n}\n\nvec4 blur(){\n    const float blurw = 9.0;\n    vec4 vec4Color = vec4(0.0,0.0,0.0,0.0);\n    vec2 halfsz=vec2(blurw,blurw)/2.0/blurInfo;    \n    vec2 startpos=v_texcoord-halfsz;\n    vec2 ctexcoord = startpos;\n    vec2 step = 1.0/blurInfo;  //每个像素      \n    \n    for(float y = 0.0;y<=blurw; ++y){\n        ctexcoord.x=startpos.x;\n        for(float x = 0.0;x<=blurw; ++x){\n            //TODO 纹理坐标的固定偏移应该在vs中处理\n            vec4Color += texture2D(texture, ctexcoord)*getGaussian(x-blurw/2.0,y-blurw/2.0);\n            ctexcoord.x+=step.x;\n        }\n        ctexcoord.y+=step.y;\n    }\n    return vec4Color;\n}"),kt.addInclude("parts/ColorAdd_ps_uniform.glsl","uniform vec4 colorAdd;\n"),kt.addInclude("parts/ColorAdd_ps_logic.glsl","gl_FragColor = vec4(colorAdd.rgb,colorAdd.a*gl_FragColor.a);");var t,e;t="attribute vec4 position;\nattribute vec2 texcoord;\nuniform vec2 size;\n\n#ifdef WORLDMAT\nuniform mat4 mmat;\n#endif\nvarying vec2 v_texcoord;\nvoid main() {\n  #ifdef WORLDMAT\n  vec4 pos=mmat*position;\n  gl_Position =vec4((pos.x/size.x-0.5)*2.0,(0.5-pos.y/size.y)*2.0,pos.z,1.0);\n  #else\n  gl_Position =vec4((position.x/size.x-0.5)*2.0,(0.5-position.y/size.y)*2.0,position.z,1.0);\n  #endif\n  \n  v_texcoord = texcoord;\n}",e='precision mediump float;\n//precision highp float;\nvarying vec2 v_texcoord;\nuniform sampler2D texture;\nuniform float alpha;\n#include?BLUR_FILTER  "parts/BlurFilter_ps_uniform.glsl";\n#include?COLOR_FILTER "parts/ColorFilter_ps_uniform.glsl";\n#include?GLOW_FILTER "parts/GlowFilter_ps_uniform.glsl";\n#include?COLOR_ADD "parts/ColorAdd_ps_uniform.glsl";\n\nvoid main() {\n   vec4 color= texture2D(texture, v_texcoord);\n   color.a*=alpha;\n   gl_FragColor=color;\n   #include?COLOR_ADD "parts/ColorAdd_ps_logic.glsl";   \n   #include?BLUR_FILTER  "parts/BlurFilter_ps_logic.glsl";\n   #include?COLOR_FILTER "parts/ColorFilter_ps_logic.glsl";\n   #include?GLOW_FILTER "parts/GlowFilter_ps_logic.glsl";\n}',kt.preCompile2D(0,1,t,e,null),t="attribute vec4 position;\nuniform vec2 size;\nuniform mat4 mmat;\nvoid main() {\n  vec4 pos=mmat*position;\n  gl_Position =vec4((pos.x/size.x-0.5)*2.0,(0.5-pos.y/size.y)*2.0,pos.z,1.0);\n}",e='precision mediump float;\nuniform vec4 color;\nuniform float alpha;\n#include?COLOR_FILTER "parts/ColorFilter_ps_uniform.glsl";\nvoid main() {\n\tvec4 a = vec4(color.r, color.g, color.b, color.a);\n\ta.w = alpha;\n\tgl_FragColor = a;\n\t#include?COLOR_FILTER "parts/ColorFilter_ps_logic.glsl";\n}',kt.preCompile2D(0,2,t,e,null),t="attribute vec4 position;\nattribute vec3 a_color;\nuniform mat4 mmat;\nuniform mat4 u_mmat2;\nuniform vec2 u_pos;\nuniform vec2 size;\nvarying vec3 color;\nvoid main(){\n  vec4 tPos = vec4(position.x + u_pos.x,position.y + u_pos.y,position.z,position.w);\n  vec4 pos=mmat*u_mmat2*tPos;\n  gl_Position =vec4((pos.x/size.x-0.5)*2.0,(0.5-pos.y/size.y)*2.0,pos.z,1.0);\n  color=a_color;\n}",e="precision mediump float;\n//precision mediump float;\nvarying vec3 color;\nuniform float alpha;\nvoid main(){\n\t//vec4 a=vec4(color.r, color.g, color.b, 1);\n\t//a.a*=alpha;\n    gl_FragColor=vec4(color.r, color.g, color.b, alpha);\n}",kt.preCompile2D(0,4,t,e,null),t="attribute vec4 position;\nattribute vec2 texcoord;\nuniform vec2 size;\n\n#ifdef WORLDMAT\nuniform mat4 mmat;\n#endif\nvarying vec2 v_texcoord;\nvoid main() {\n  #ifdef WORLDMAT\n  vec4 pos=mmat*position;\n  gl_Position =vec4((pos.x/size.x-0.5)*2.0,(0.5-pos.y/size.y)*2.0,pos.z,1.0);\n  #else\n  gl_Position =vec4((position.x/size.x-0.5)*2.0,(0.5-position.y/size.y)*2.0,position.z,1.0);\n  #endif\n  \n  v_texcoord = texcoord;\n}",e='#ifdef FSHIGHPRECISION\nprecision highp float;\n#else\nprecision mediump float;\n#endif\n//precision highp float;\nvarying vec2 v_texcoord;\nuniform sampler2D texture;\nuniform float alpha;\nuniform vec4 u_TexRange;\nuniform vec2 u_offset;\n#include?BLUR_FILTER  "parts/BlurFilter_ps_uniform.glsl";\n#include?COLOR_FILTER "parts/ColorFilter_ps_uniform.glsl";\n#include?GLOW_FILTER "parts/GlowFilter_ps_uniform.glsl";\n#include?COLOR_ADD "parts/ColorAdd_ps_uniform.glsl";\n\nvoid main() {\n   vec2 newTexCoord;\n   newTexCoord.x = mod(u_offset.x + v_texcoord.x,u_TexRange.y) + u_TexRange.x;\n   newTexCoord.y = mod(u_offset.y + v_texcoord.y,u_TexRange.w) + u_TexRange.z;\n   vec4 color= texture2D(texture, newTexCoord);\n   color.a*=alpha;\n   gl_FragColor=color;\n   #include?COLOR_ADD "parts/ColorAdd_ps_logic.glsl";   \n   #include?BLUR_FILTER  "parts/BlurFilter_ps_logic.glsl";\n   #include?COLOR_FILTER "parts/ColorFilter_ps_logic.glsl";\n   #include?GLOW_FILTER "parts/GlowFilter_ps_logic.glsl";\n}',kt.preCompile2D(0,256,t,e,null),t="attribute vec2 position;\nattribute vec2 texcoord;\nattribute vec4 color;\nuniform vec2 size;\nuniform float offsetX;\nuniform float offsetY;\nuniform mat4 mmat;\nuniform mat4 u_mmat2;\nvarying vec2 v_texcoord;\nvarying vec4 v_color;\nvoid main() {\n  vec4 pos=mmat*u_mmat2*vec4(offsetX+position.x,offsetY+position.y,0,1 );\n  gl_Position = vec4((pos.x/size.x-0.5)*2.0,(0.5-pos.y/size.y)*2.0,pos.z,1.0);\n  v_color = color;\n  v_texcoord = texcoord;  \n}",e="precision mediump float;\nvarying vec2 v_texcoord;\nvarying vec4 v_color;\nuniform sampler2D texture;\nuniform float alpha;\nvoid main() {\n\tvec4 t_color = texture2D(texture, v_texcoord);\n\tgl_FragColor = t_color.rgba * v_color;\n\tgl_FragColor.a = gl_FragColor.a * alpha;\n}",kt.preCompile2D(0,512,t,e,null)},t}(),q=function(){function t(t,e,i){this._value=0,this._name2int=t,this._int2name=e,this._int2nameMap=i}a(t,"laya.webgl.shader.ShaderDefines");var e=t.prototype;return e.add=function(t){return"string"==typeof t&&(t=this._name2int[t]),this._value|=t,this._value},e.addInt=function(t){return this._value|=t,this._value},e.remove=function(t){return"string"==typeof t&&(t=this._name2int[t]),this._value&=~t,this._value},e.isDefine=function(t){return(this._value&t)===t},e.getValue=function(){return this._value},e.setValue=function(t){this._value=t},e.toNameDic=function(){var e=this._int2nameMap[this._value];return e?e:t._toText(this._value,this._int2name,this._int2nameMap)},t._reg=function(t,e,i,r){i[t]=e,r[e]=t},t._toText=function(t,e,i){var r=i[t];if(r)return r;for(var a={},s=1,n=0;n<32&&!((s=1<<n)>t);n++)if(t&s){var h=e[s];h&&(a[h]="")}return i[t]=a,a},t._toInt=function(t,e){for(var i=t.split("."),r=0,a=0,s=i.length;a<s;a++){var n=e[i[a]];if(!n)throw new Error("Defines to int err:"+t+"/"+i[a]);r|=n}return r},t}(),Z=function(){function t(){this.mVBBuffer=null,this.mIBBuffer=null,this.mVBData=null,this.mIBData=null,this.mEleNum=0,this.mTexture=null,this.transform=null,this._vs=null,this._ps=null,this._indexStart=-1,this._verticles=null,this._uvs=null,this._tempMat16=ct.getMatrArray()}a(t,"laya.webgl.shader.d2.skinAnishader.SkinMesh");var e=t.prototype;return e.init=function(e,i,r){if(i)this._vs=i;else{this._vs=[];var a=e.width,s=e.height;this._vs.push(0,0,0,0,1,1,1,1),this._vs.push(a,0,1,0,1,1,1,1),this._vs.push(a,s,1,1,1,1,1,1),this._vs.push(0,s,0,1,1,1,1,1)}r?this._ps=r:(t._defaultPS||(t._defaultPS=[],t._defaultPS.push(0,1,3,3,1,2)),this._ps=t._defaultPS),this.mVBData=new Float32Array(this._vs),this.mIBData=new Uint16Array(this._ps.length),this.mIBData.start=-1,this.mEleNum=this._ps.length,this.mTexture=e},e.init2=function(t,e,i,r,a){this.transform&&(this.transform=null),i?this._ps=i:(this._ps=[],this._ps.push(0,1,3,3,1,2)),this._verticles=r,this._uvs=a,this.mEleNum=this._ps.length,this.mTexture=t,(y.isConchNode||y.isConchApp)&&(this._initMyData(),this.mVBData=new Float32Array(this._vs))},e._initMyData=function(){var e=0,i=0,r=this._verticles.length,a=4*r;this._vs=t._tempVS;var s=!1;if(y.isConchNode||y.isConchApp?(this._vs.length=a,s=!0):this._vs.length<a&&(this._vs.length=a,s=!0),t._tVSLen=a,s)for(;e<a;)this._vs[e]=this._verticles[i],this._vs[e+1]=this._verticles[i+1],this._vs[e+2]=this._uvs[i],this._vs[e+3]=this._uvs[i+1],this._vs[e+4]=1,this._vs[e+5]=1,this._vs[e+6]=1,this._vs[e+7]=1,e+=8,i+=2;else for(;e<a;)this._vs[e]=this._verticles[i],this._vs[e+1]=this._verticles[i+1],this._vs[e+2]=this._uvs[i],this._vs[e+3]=this._uvs[i+1],e+=8,i+=2},e.getData2=function(e,i,r){this.mVBBuffer=e,this.mIBBuffer=i,this._initMyData(),e.appendEx2(this._vs,Float32Array,t._tVSLen,4),this._indexStart=i.byteLength;var a;a=t._tempIB,a.length<this._ps.length&&(a.length=this._ps.length);for(var s=0,n=this._ps.length;s<n;s++)a[s]=this._ps[s]+r;i.appendEx2(a,Uint16Array,this._ps.length,2)},e.getData=function(t,e,i){if(this.mVBBuffer=t,this.mIBBuffer=e,t.append(this.mVBData),this._indexStart=e.byteLength,this.mIBData.start!=i){for(var r=0,a=this._ps.length;r<a;r++)this.mIBData[r]=this._ps[r]+i;this.mIBData.start=i}e.append(this.mIBData)},e.render=function(t,e,i){if(y.isWebGL&&this.mTexture){t._renderKey=0,t._shader2D.glTexture=null,$.getInstance().addSkinMesh(this);var r=tt.createShape(t,this.mIBBuffer,this.mVBBuffer,this.mEleNum,this._indexStart,vt.create(512,0));this.transform||(this.transform=b.EMPTY),this.transform.translate(e,i),b.mul16(this.transform,t._curMat,this._tempMat16),this.transform.translate(-e,-i);var a=r.shaderValue;a.textureHost=this.mTexture,a.offsetX=0,a.offsetY=0,a.u_mmat2=this._tempMat16,a.ALPHA=t._shader2D.ALPHA,t._submits[t._submits._length++]=r}else y.isConchApp&&this.mTexture&&(this.transform||(this.transform=b.EMPTY),t.setSkinMesh&&t.setSkinMesh(e,i,this._ps,this.mVBData,this.mEleNum,0,this.mTexture,this.transform))},t._tempVS=[],t._tempIB=[],t._defaultPS=null,t._tVSLen=0,t}(),$=function(){function t(){this.ib=null,this.vb=null;dt.mainContext;this.ib=Xt.create(35048),this.vb=Yt.create(8)}a(t,"laya.webgl.shader.d2.skinAnishader.SkinMeshBuffer");var e=t.prototype;return e.addSkinMesh=function(t){t.getData2(this.vb,this.ib,this.vb.byteLength/32)},e.reset=function(){this.vb.clear(),this.ib.clear()},t.getInstance=function(){return t.instance=t.instance||new t},t.instance=null,t}(),J=function(){function t(t,e,i,r,a,s,n,h,l){this.r0=0,this.fill=!0,this.r1=Math.PI/2,void 0===l&&(l=0),this.x=t,this.y=e,this.width=i,this.height=r,this.edges=a,this.color=s,this.borderWidth=n,this.borderColor=h}a(t,"laya.webgl.shapes.BasePoly");var e=t.prototype;return i.imps(e,{"laya.webgl.shapes.IShape":!0}),e.getData=function(t,e,i){},e.rebuild=function(t){},e.setMatrix=function(t){},e.needUpdate=function(t){return!0},e.sector=function(t,e,i){var r=this.x,a=this.y,s=this.edges,n=(this.r1-this.r0)/s,h=this.width,l=this.height,o=this.color,u=(o>>16&255)/255,_=(o>>8&255)/255,c=(255&o)/255;t.push(r,a,u,_,c);for(var f=0;f<s+1;f++)t.push(r+Math.sin(n*f+this.r0)*h,a+Math.cos(n*f+this.r0)*l),t.push(u,_,c);for(f=0;f<s;f++)e.push(i,i+f+1,i+f+2)},e.createLine2=function(t,e,i,r,a,s){var n,h,l,o,u,_,c,f,d,m,p,g,v,b,T,x,y,A,E,S,w=t.concat(),R=a,I=this.borderColor,C=(I>>16&255)/255,M=(I>>8&255)/255,L=(255&I)/255,P=w.length/2,F=r,D=i/2;l=w[0],o=w[1],u=w[2],_=w[3],d=-(o-_),m=l-u,S=Math.sqrt(d*d+m*m),d=d/S*D,m=m/S*D,R.push(l-d+this.x,o-m+this.y,C,M,L,l+d+this.x,o+m+this.y,C,M,L);for(var B=1;B<P-1;B++)l=w[2*(B-1)],o=w[2*(B-1)+1],u=w[2*B],_=w[2*B+1],c=w[2*(B+1)],f=w[2*(B+1)+1],d=-(o-_),m=l-u,S=Math.sqrt(d*d+m*m),d=d/S*D,m=m/S*D,p=-(_-f),g=u-c,S=Math.sqrt(p*p+g*g),p=p/S*D,g=g/S*D,v=-m+o-(-m+_),b=-d+u-(-d+l),T=(-d+l)*(-m+_)-(-d+u)*(-m+o),x=-g+f-(-g+_),y=-p+u-(-p+c),A=(-p+c)*(-g+_)-(-p+u)*(-g+f),E=v*y-x*b,Math.abs(E)<.1?(E+=10.1,R.push(u-d+this.x,_-m+this.y,C,M,L,u+d+this.x,_+m+this.y,C,M,L)):(n=(b*A-y*T)/E,h=(x*T-v*A)/E,(n-u)*(n-u)+(h-_)+(h-_),R.push(n+this.x,h+this.y,C,M,L,u-(n-u)+this.x,_-(h-_)+this.y,C,M,L));l=w[w.length-4],o=w[w.length-3],u=w[w.length-2],_=w[w.length-1],d=-(o-_),m=l-u,S=Math.sqrt(d*d+m*m),d=d/S*D,m=m/S*D,R.push(u-d+this.x,_-m+this.y,C,M,L,u+d+this.x,_+m+this.y,C,M,L);var N=s;for(B=1;B<N;B++)e.push(F+2*(B-1),F+2*(B-1)+1,F+2*B+1,F+2*B+1,F+2*B,F+2*(B-1));return R},e.createLine=function(t,e,i,r){var a=t.concat(),s=t,n=this.borderColor,h=(n>>16&255)/255,l=(n>>8&255)/255,o=(255&n)/255;a.splice(0,5);var u,_,c,f,d,m,p,g,v,b,T,x,y,A,E,S,w,R,I,C,M=a.length/5,L=r,P=i/2;c=a[0],f=a[1],d=a[5],m=a[6],v=-(f-m),b=c-d,C=Math.sqrt(v*v+b*b),v=v/C*P,b=b/C*P,s.push(c-v,f-b,h,l,o,c+v,f+b,h,l,o);for(var F=1;F<M-1;F++)c=a[5*(F-1)],f=a[5*(F-1)+1],d=a[5*F],m=a[5*F+1],p=a[5*(F+1)],g=a[5*(F+1)+1],v=-(f-m),b=c-d,C=Math.sqrt(v*v+b*b),v=v/C*P,b=b/C*P,T=-(m-g),x=d-p,C=Math.sqrt(T*T+x*x),T=T/C*P,x=x/C*P,y=-b+f-(-b+m),A=-v+d-(-v+c),E=(-v+c)*(-b+m)-(-v+d)*(-b+f),S=-x+g-(-x+m),w=-T+d-(-T+p),R=(-T+p)*(-x+m)-(-T+d)*(-x+g),I=y*w-S*A,Math.abs(I)<.1?(I+=10.1,s.push(d-v,m-b,h,l,o,d+v,m+b,h,l,o)):(u=(A*R-w*E)/I,_=(S*E-y*R)/I,(u-d)*(u-d)+(_-m)+(_-m),s.push(u,_,h,l,o,d-(u-d),m-(_-m),h,l,o));c=a[a.length-10],f=a[a.length-9],d=a[a.length-5],m=a[a.length-4],v=-(f-m),b=c-d,C=Math.sqrt(v*v+b*b),v=v/C*P,b=b/C*P,s.push(d-v,m-b,h,l,o,d+v,m+b,h,l,o);var D=this.edges+1;for(F=1;F<D;F++)e.push(L+2*(F-1),L+2*(F-1)+1,L+2*F+1,L+2*F+1,L+2*F,L+2*(F-1));return s},e.createLoopLine=function(t,e,i,r,a,s){var n=t.concat(),h=a?a:t,l=this.borderColor,o=(l>>16&255)/255,u=(l>>8&255)/255,_=(255&l)/255;n.splice(0,5);var c=[n[0],n[1]],f=[n[n.length-5],n[n.length-4]],d=f[0]+.5*(c[0]-f[0]),m=f[1]+.5*(c[1]-f[1]);n.unshift(d,m,0,0,0),n.push(d,m,0,0,0);var p,g,v,b,T,x,y,A,E,S,w,R,I,C,M,L,P,F,D,B,N=n.length/5,O=r,V=i/2;v=n[0],b=n[1],T=n[5],x=n[6],E=-(b-x),S=v-T,B=Math.sqrt(E*E+S*S),E=E/B*V,S=S/B*V,h.push(v-E,b-S,o,u,_,v+E,b+S,o,u,_);for(var U=1;U<N-1;U++)v=n[5*(U-1)],b=n[5*(U-1)+1],T=n[5*U],x=n[5*U+1],y=n[5*(U+1)],A=n[5*(U+1)+1],E=-(b-x),S=v-T,B=Math.sqrt(E*E+S*S),E=E/B*V,S=S/B*V,w=-(x-A),R=T-y,B=Math.sqrt(w*w+R*R),w=w/B*V,R=R/B*V,I=-S+b-(-S+x),C=-E+T-(-E+v),M=(-E+v)*(-S+x)-(-E+T)*(-S+b),L=-R+A-(-R+x),P=-w+T-(-w+y),F=(-w+y)*(-R+x)-(-w+T)*(-R+A),D=I*P-L*C,Math.abs(D)<.1?(D+=10.1,h.push(T-E,x-S,o,u,_,T+E,x+S,o,u,_)):(p=(C*F-P*M)/D,g=(L*M-I*F)/D,(p-T)*(p-T)+(g-x)+(g-x),h.push(p,g,o,u,_,T-(p-T),x-(g-x),o,u,_));s&&(e=s);var H=this.edges+1;for(U=1;U<H;U++)e.push(O+2*(U-1),O+2*(U-1)+1,O+2*U+1,O+2*U+1,O+2*U,O+2*(U-1));return e.push(O+2*(U-1),O+2*(U-1)+1,O+1,O+1,O,O+2*(U-1)),h},t}(),tt=(function(){function t(t,e,i,r,a,s,n){this.lineWidth=t,
this.lineColor=e,this.lineAlpha=i,this.fillColor=r,this.fillAlpha=a,this.shape=n,this.fill=s}a(t,"laya.webgl.shapes.GeometryData");var e=t.prototype;e.clone=function(){return new t(this.lineWidth,this.lineColor,this.lineAlpha,this.fillColor,this.fillAlpha,this.fill,this.shape)},e.getIndexData=function(){return null},e.getVertexData=function(){return null},e.destroy=function(){this.shape=null},t}(),function(){function t(t){if(t instanceof Float32Array)this.points=t;else if(t instanceof Array){t.length;this.points=new Float32Array(t)}}a(t,"laya.webgl.shapes.Vertex");var e=t.prototype;i.imps(e,{"laya.webgl.shapes.IShape":!0}),e.getData=function(t,e,i){},e.needUpdate=function(t){return!1},e.rebuild=function(t){},e.setMatrix=function(t){},t}(),function(){function t(t){void 0===t&&(t=1e4),this._renderType=t}a(t,"laya.webgl.submit.Submit");var e=t.prototype;return i.imps(e,{"laya.webgl.submit.ISubmit":!0}),e.releaseRender=function(){var e=t._cache;e[e._length++]=this,this.shaderValue.release(),this._vb=null},e.getRenderType=function(){return this._renderType},e.renderSubmit=function(){if(0===this._numEle)return 1;var t=this.shaderValue.textureHost;if(t){var e=t.source;if(!t.bitmap||!e)return 1;this.shaderValue.texture=e}this._vb.bind_upload(this._ib);var i=dt.mainContext;return this.shaderValue.upload(),H.activeBlendFunction!==this._blendFn&&(i.enable(3042),this._blendFn(i),H.activeBlendFunction=this._blendFn),I.drawCall++,I.trianglesFaces+=this._numEle/3,i.drawElements(4,this._numEle,5123,this._startIdx),1},t.__init__=function(){var e=t.RENDERBASE=new t(-1);e.shaderValue=new vt(0,0),e.shaderValue.ALPHA=-1234},t.create=function(e,i,r,a,s){var n=t._cache._length?t._cache[--t._cache._length]:new t;null==r&&(r=n._selfVb||(n._selfVb=Yt.create(-1)),r.clear(),a=0),n._ib=i,n._vb=r,n._startIdx=a*ut.BYTES_PIDX,n._numEle=0;var h=e._nBlendType;n._blendFn=e._targets?H.targetFns[h]:H.fns[h],n.shaderValue=s,n.shaderValue.setValue(e._shader2D);var l=e._shader2D.filters;return l&&n.shaderValue.setFilters(l),n},t.createShape=function(e,i,r,a,s,n){var h=t._cache._length?t._cache[--t._cache._length]:new t;h._ib=i,h._vb=r,h._numEle=a,h._startIdx=s,h.shaderValue=n,h.shaderValue.setValue(e._shader2D);var l=e._nBlendType;return h._blendFn=e._targets?H.targetFns[l]:H.fns[l],h},t.TYPE_2D=1e4,t.TYPE_CANVAS=10003,t.TYPE_CMDSETRT=10004,t.TYPE_CUSTOM=10005,t.TYPE_BLURRT=10006,t.TYPE_CMDDESTORYPRERT=10007,t.TYPE_DISABLESTENCIL=10008,t.TYPE_OTHERIBVB=10009,t.TYPE_PRIMITIVE=10010,t.TYPE_RT=10011,t.TYPE_BLUR_RT=10012,t.TYPE_TARGET=10013,t.TYPE_CHANGE_VALUE=10014,t.TYPE_SHAPE=10015,t.TYPE_TEXTURE=10016,t.TYPE_FILLTEXTURE=10017,t.RENDERBASE=null,t._cache=(t._cache=[],t._cache._length=0,t._cache),t}()),et=function(){function t(){this.fun=null,this.args=null}a(t,"laya.webgl.submit.SubmitCMD");var e=t.prototype;return i.imps(e,{"laya.webgl.submit.ISubmit":!0}),e.renderSubmit=function(){return this.fun.apply(null,this.args),1},e.getRenderType=function(){return 0},e.releaseRender=function(){var e=t._cache;e[e._length++]=this},t.create=function(e,i){var r=t._cache._length?t._cache[--t._cache._length]:new t;return r.fun=i,r.args=e,r},t._cache=(t._cache=[],t._cache._length=0,t._cache),t}(),it=function(){function t(){this.variables={}}a(t,"laya.webgl.submit.SubmitCMDScope");var e=t.prototype;return e.getValue=function(t){return this.variables[t]},e.addValue=function(t,e){return this.variables[t]=e},e.setValue=function(t,e){return this.variables.hasOwnProperty(t)?this.variables[t]=e:null},e.clear=function(){for(var t in this.variables)delete this.variables[t]},e.recycle=function(){this.clear(),t.POOL.push(this)},t.create=function(){var e=t.POOL.pop();return e||(e=new t),e},t.POOL=[],t}(),rt=function(){function t(){this.offset=0,this.startIndex=0,this._mat=b.create()}a(t,"laya.webgl.submit.SubmitOtherIBVB");var e=t.prototype;return i.imps(e,{"laya.webgl.submit.ISubmit":!0}),e.releaseRender=function(){var e=t._cache;e[e._length++]=this},e.getRenderType=function(){return 10009},e.renderSubmit=function(){var e=this._shaderValue.textureHost;if(e){var i=e.source;if(!e.bitmap||!i)return 1;this._shaderValue.texture=i}this._vb.bind_upload(this._ib);var r=ct.worldMatrix4,a=b.TEMP;b.mulPre(this._mat,r[0],r[1],r[4],r[5],r[12],r[13],a);var s=ct.worldMatrix4=t.tempMatrix4;s[0]=a.a,s[1]=a.b,s[4]=a.c,s[5]=a.d,s[12]=a.tx,s[13]=a.ty,this._shader._offset=this.offset,this._shaderValue.refresh(),this._shader.upload(this._shaderValue),this._shader._offset=0;var n=dt.mainContext;return H.activeBlendFunction!==this._blendFn&&(n.enable(3042),this._blendFn(n),H.activeBlendFunction=this._blendFn),I.drawCall++,I.trianglesFaces+=this._numEle/3,n.drawElements(4,this._numEle,5123,this.startIndex),ct.worldMatrix4=r,It.activeShader=null,1},t.create=function(e,i,r,a,s,n,h,l,o){void 0===o&&(o=0);var u=t._cache._length?t._cache[--t._cache._length]:new t;u._ib=r,u._vb=i,u._numEle=a,u._shader=s,u._shaderValue=n;var _=e._nBlendType;switch(u._blendFn=e._targets?H.targetFns[_]:H.fns[_],o){case 0:u.offset=0,u.startIndex=l/(ut.BYTES_PE*i.vertexStride)*1.5,u.startIndex*=ut.BYTES_PIDX;break;case 1:u.startIndex=h,u.offset=l}return u},t._cache=(t._cache=[],t._cache._length=0,t._cache),t.tempMatrix4=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1],t}(),at=function(){function t(){this.submitIndex=0,this.submitLength=0,this.context=null,this.clipRect=new x,this.screenRect=new x}a(t,"laya.webgl.submit.SubmitScissor");var e=t.prototype;return i.imps(e,{"laya.webgl.submit.ISubmit":!0}),e._scissor=function(t,e,i,r){var a=ct.worldMatrix4,s=a[0],n=a[5],h=a[12],l=a[13];if(t=t*s+h,e=e*n+l,i*=s,r*=n,i<1||r<1)return!1;var o=t+i,u=e+r;t<0&&(t=0,i=o-t),e<0&&(e=0,r=u-e);var _=ct.worldClipRect;if(t=Math.max(t,_.x),e=Math.max(e,_.y),i=Math.min(o,_.right)-t,r=Math.min(u,_.bottom)-e,i<1||r<1)return!1;var c=ct.worldScissorTest;return this.screenRect.copyFrom(_),_.x=t,_.y=e,_.width=i,_.height=r,ct.worldScissorTest=!0,e=ct.height-e-r,dt.mainContext.scissor(t,e,i,r),dt.mainContext.enable(3089),this.context.submitElement(this.submitIndex,this.submitIndex+this.submitLength),c?(e=ct.height-this.screenRect.y-this.screenRect.height,dt.mainContext.scissor(this.screenRect.x,e,this.screenRect.width,this.screenRect.height),dt.mainContext.enable(3089)):(dt.mainContext.disable(3089),ct.worldScissorTest=!1),_.copyFrom(this.screenRect),!0},e._scissorWithTagart=function(t,e,i,r){if(i<1||r<1)return!1;var a=t+i,s=e+r;t<0&&(t=0,i=a-t),e<0&&(e=0,r=s-e);var n=ct.worldClipRect;if(t=Math.max(t,n.x),e=Math.max(e,n.y),i=Math.min(a,n.right)-t,r=Math.min(s,n.bottom)-e,i<1||r<1)return!1;var h=ct.worldScissorTest;return this.screenRect.copyFrom(n),ct.worldScissorTest=!0,n.x=t,n.y=e,n.width=i,n.height=r,e=ct.height-e-r,dt.mainContext.scissor(t,e,i,r),dt.mainContext.enable(3089),this.context.submitElement(this.submitIndex,this.submitIndex+this.submitLength),h?(e=ct.height-this.screenRect.y-this.screenRect.height,dt.mainContext.scissor(this.screenRect.x,e,this.screenRect.width,this.screenRect.height),dt.mainContext.enable(3089)):(dt.mainContext.disable(3089),ct.worldScissorTest=!1),n.copyFrom(this.screenRect),!0},e.renderSubmit=function(){return this.submitLength=Math.min(this.context._submits._length-1,this.submitLength),this.submitLength<1||this.clipRect.width<1||this.clipRect.height<1?this.submitLength+1:(this.context._targets?this._scissorWithTagart(this.clipRect.x,this.clipRect.y,this.clipRect.width,this.clipRect.height):this._scissor(this.clipRect.x,this.clipRect.y,this.clipRect.width,this.clipRect.height),this.submitLength+1)},e.getRenderType=function(){return 0},e.releaseRender=function(){var e=t._cache;e[e._length++]=this,this.context=null},t.create=function(e){var i=t._cache._length?t._cache[--t._cache._length]:new t;return i.context=e,i},t._cache=(t._cache=[],t._cache._length=0,t._cache),t}(),st=function(){function t(){this.step=0,this.blendMode=null,this.level=0}a(t,"laya.webgl.submit.SubmitStencil");var e=t.prototype;return i.imps(e,{"laya.webgl.submit.ISubmit":!0}),e.renderSubmit=function(){switch(this.step){case 1:this.do1();break;case 2:this.do2();break;case 3:this.do3();break;case 4:this.do4();break;case 5:this.do5();break;case 6:this.do6()}return 1},e.getRenderType=function(){return 0},e.releaseRender=function(){var e=t._cache;e[e._length++]=this},e.do1=function(){var t=dt.mainContext;t.enable(2960),t.clear(1024),t.colorMask(!1,!1,!1,!1),t.stencilFunc(514,this.level,255),t.stencilOp(7680,7680,7682)},e.do2=function(){var t=dt.mainContext;t.stencilFunc(514,this.level+1,255),t.colorMask(!0,!0,!0,!0),t.stencilOp(7680,7680,7680)},e.do3=function(){var t=dt.mainContext;t.colorMask(!0,!0,!0,!0),t.stencilOp(7680,7680,7680),t.clear(1024),t.disable(2960)},e.do4=function(){var t=dt.mainContext;t.enable(2960),t.clear(1024),t.colorMask(!1,!1,!1,!1),t.stencilFunc(519,this.level,255),t.stencilOp(7680,7680,5386)},e.do5=function(){var t=dt.mainContext;t.stencilFunc(514,255,255),t.colorMask(!0,!0,!0,!0),t.stencilOp(7680,7680,7680)},e.do6=function(){var t=dt.mainContext;H.targetFns[H.TOINT[this.blendMode]](t)},t.create=function(e){var i=t._cache._length?t._cache[--t._cache._length]:new t;return i.step=e,i},t._cache=(t._cache=[],t._cache._length=0,t._cache),t}(),nt=function(){function t(){this._renderType=0,this._vb=null,this._ib=null,this._startIdx=0,this._numEle=0,this.shaderValue=null,this.blendType=0,this.proName=null,this.scope=null}a(t,"laya.webgl.submit.SubmitTarget");var e=t.prototype;return i.imps(e,{"laya.webgl.submit.ISubmit":!0}),e.renderSubmit=function(){this._vb.bind_upload(this._ib);var t=this.scope.getValue(this.proName);return t&&(this.shaderValue.texture=t.source,this.shaderValue.strength&&!this.shaderValue.blurInfo&&(this.shaderValue.blurInfo=[t.width,t.height]),this.shaderValue.upload(),this.blend(),I.drawCall++,I.trianglesFaces+=this._numEle/3,dt.mainContext.drawElements(4,this._numEle,5123,this._startIdx)),1},e.blend=function(){if(H.activeBlendFunction!==H.fns[this.blendType]){var t=dt.mainContext;t.enable(3042),H.fns[this.blendType](t),H.activeBlendFunction=H.fns[this.blendType]}},e.getRenderType=function(){return 0},e.releaseRender=function(){var e=t._cache;e[e._length++]=this},t.create=function(e,i,r,a,s,n){var h=t._cache._length?t._cache[--t._cache._length]:new t;return h._ib=i,h._vb=r,h.proName=n,h._startIdx=a*ut.BYTES_PIDX,h._numEle=0,h.blendType=e._nBlendType,h.shaderValue=s,h.shaderValue.setValue(e._shader2D),h},t._cache=(t._cache=[],t._cache._length=0,t._cache),t}(),ht=function(){function t(){this._sourceStr=null}a(t,"laya.webgl.text.CharSegment");var e=t.prototype;return i.imps(e,{"laya.webgl.text.ICharSegment":!0}),e.textToSpit=function(t){this._sourceStr=t},e.getChar=function(t){return this._sourceStr.charAt(t)},e.getCharCode=function(t){return this._sourceStr.charCodeAt(t)},e.length=function(){return this._sourceStr.length},t}(),lt=function(){function t(){}var e;return a(t,"laya.webgl.text.DrawText"),t.__init__=function(){t._charsTemp=new Array,t._drawValue=new e,t._charSeg=new ht},t.customCharSeg=function(e){t._charSeg=e},t.getChar=function(e,i,r){var a=Vt.createOneChar(e,r);return i!=-1&&(t._charsCache[i]=a),a},t._drawSlow=function(e,i,r,a,s,n,h,l,o,u,_,c,f,d){var m,p,g=t._drawValue.value(n,l,o,u,f,d),v=0,b=0,T=t._charsTemp,x=0,y=NaN;if(a)for(T.length=a.length,v=0,b=a.length;v<b;v++)p=a[v],y=p.charNum+g.txtID,T[v]=m=t._charsCache[y]||t.getChar(p.char,y,g),m.active();else{var A=r instanceof laya.utils.WordText?r.toString():r;if(L.CharacterCache){t._charSeg.textToSpit(A);var E=t._charSeg.length();for(T.length=E,v=0,b=E;v<b;v++)y=t._charSeg.getCharCode(v)+g.txtID,T[v]=m=t._charsCache[y]||t.getChar(t._charSeg.getChar(v),y,g),m.active(),x+=m.cw}else m=t.getChar(A,-1,g),m.active(),x+=m.cw,T[0]=m}var S=0;null!==h&&"left"!==h&&(S=-("center"==h?x/2:x));var w,R,I=NaN,C=0;if(a)for(v=0,b=T.length;v<b;v++)m=T[v],m.isSpace||(p=a[v],I=m.borderSize,w=m.texture,i._drawText(w,_+S+p.x*f-I,c+p.y*d-I,w.width,w.height,s,0,0,0,0));else{for(v=0,b=T.length;v<b;v++)m=T[v],m.isSpace||(I=m.borderSize,w=m.texture,i._drawText(w,_+S-I,c-I,w.width,w.height,s,0,0,0,0),e&&(R=e[C++],R||(R=e[C-1]=[]),R[0]=w,R[1]=S-I,R[2]=-I)),S+=m.cw;e&&(e.length=C)}},t._drawFast=function(t,e,i,r,a){for(var s,n,h=0,l=t.length;h<l;h++)n=t[h],s=n[0],s.active(),e._drawText(s,r+n[1],a+n[2],s.width,s.height,i,0,0,0,0)},t.drawText=function(e,r,a,s,n,h,l,o,u,_,f){if(!(r&&0===r.length||a&&0===a.length)){var d=s.a,m=s.d;(0!==s.b||0!==s.c)&&(d=m=1);var p=1!==d||1!==m;if(p&&i.stage.transform){var g=i.stage.transform;p=g.a===d&&g.d===m}else p=!1;if(p?(s=s.copyTo(gt._tmpMatrix),s.scale(1/d,1/m),s._checkTransform(),_*=d,f*=m):d=m=1,a)t._drawSlow(null,e,r,a,s,n,h,l,o,u,_,f,d,m);else{if(null===r.toUpperCase){var v=d+1e5*m,b=r;return void(b.changed||b.id!==v?(b.id=v,b.changed=!1,t._drawSlow(b.save,e,r,a,s,n,h,l,o,u,_,f,d,m)):t._drawFast(b.save,e,s,_,f))}var T=r+n.toString()+l+o+u+d+m+h,x=t._textsCache[T];L.CharacterCache?x?t._drawFast(x,e,s,_,f):(t._textsCache.__length||(t._textsCache.__length=0),t._textsCache.__length>c.WebGLTextCacheCount&&(t._textsCache={},t._textsCache.__length=0,t._curPoolIndex=0),t._textCachesPool[t._curPoolIndex]?(x=t._textsCache[T]=t._textCachesPool[t._curPoolIndex],x.length=0):t._textCachesPool[t._curPoolIndex]=x=t._textsCache[T]=[],t._textsCache.__length++,t._curPoolIndex++,t._drawSlow(x,e,r,a,s,n,h,l,o,u,_,f,d,m)):t._drawSlow(x,e,r,a,s,n,h,l,o,u,_,f,d,m)}}},t._charsTemp=null,t._textCachesPool=[],t._curPoolIndex=0,t._charsCache={},t._textsCache={},t._drawValue=null,t.d=[],t._charSeg=null,t.__init$=function(){e=function(){function t(){}return a(t,""),t.prototype.value=function(e,i,r,a,s,n){this.font=e,this.fillColor=i,this.borderColor=r,this.lineWidth=a,this.scaleX=s,this.scaleY=n;var h=e.toString()+s+n+a+i+r;return this.txtID=t._keymap[h],this.txtID||(this.txtID=1e-7*++t._keymapCount,t._keymap[h]=this.txtID),this},t.clear=function(){t._keymap={},t._keymapCount=1},t._keymap={},t._keymapCount=1,t}()},t}(),ot=function(){function t(e){this._index=0,this._size=14,this._italic=-2,t._cache2=t._cache2||[],this.setFont(e||"14px Arial")}a(t,"laya.webgl.text.FontInContext");var e=t.prototype;return e.setFont=function(e){var i=t._cache2[e];if(i)this._words=i[0],this._size=i[1];else{this._words=e.split(" ");for(var r=0,a=this._words.length;r<a;r++)if(this._words[r].indexOf("px")>0){this._index=r;break}this._size=parseInt(this._words[this._index]),t._cache2[e]=[this._words,this._size]}this._text=null,this._italic=-2},e.getItalic=function(){return this._italic===-2&&(this._italic=this.hasType("italic")),this._italic},e.hasType=function(t){for(var e=0,i=this._words.length;e<i;e++)if(this._words[e]===t)return e;return-1},e.removeType=function(t){for(var e=0,i=this._words.length;e<i;e++)if(this._words[e]===t){this._words.splice(e,1),this._index>e&&this._index--;break}this._text=null,this._italic=-2},e.copyTo=function(t){return t._text=this._text,t._size=this._size,t._index=this._index,t._words=this._words.slice(),t._italic=-2,t},e.toString=function(){return this._text?this._text:this._text=this._words.join(" ")},s(0,e,"size",function(){return this._size},function(t){this._size=t,this._words[this._index]=t+"px",this._text=null}),t.create=function(e){var i=t._cache[e];return i?i:i=t._cache[e]=new t(e)},t.EMPTY=new t,t._cache={},t._cache2=null,t}(),ut=function(){function t(){}return a(t,"laya.webgl.utils.CONST3D2D"),t.defaultMatrix4=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1],t.defaultMinusYMatrix4=[1,0,0,0,0,-1,0,0,0,0,1,0,0,0,0,1],t.uniformMatrix3=[1,0,0,0,0,1,0,0,0,0,1,0],t._TMPARRAY=[],t._OFFSETX=0,t._OFFSETY=0,r(t,["BYTES_PE",function(){return this.BYTES_PE=Float32Array.BYTES_PER_ELEMENT},"BYTES_PIDX",function(){return this.BYTES_PIDX=Uint16Array.BYTES_PER_ELEMENT}]),t}(),_t=function(){function t(){}return a(t,"laya.webgl.utils.GlUtils"),t.make2DProjection=function(t,e,i){return[2/t,0,0,0,0,-2/e,0,0,0,0,2/i,0,-1,1,0,1]},t.fillIBQuadrangle=function(t,e){if(e>65535/4)throw Error("IBQuadrangle count:"+e+" must<:"+Math.floor(65535/4));e=Math.floor(e),t._resizeBuffer(6*(e+1)*2,!1),t.byteLength=t.bufferLength;for(var i=t.getUint16Array(),r=0,a=0;a<e;a++)i[r++]=4*a,i[r++]=4*a+2,i[r++]=4*a+1,i[r++]=4*a,i[r++]=4*a+3,i[r++]=4*a+2;return t.setNeedUpload(),!0},t.expandIBQuadrangle=function(e,i){e.bufferLength>=6*i*2||t.fillIBQuadrangle(e,i)},t.mathCeilPowerOfTwo=function(t){return t--,t|=t>>1,t|=t>>2,t|=t>>4,t|=t>>8,t|=t>>16,++t},t.fillQuadrangleImgVb=function(t,e,i,r,a,s,n,h){"use strict";var l=16+(t._byteLength>>2);t.byteLength=l<<2;var o=t.getFloat32Array();l-=16,o[l+2]=a[0],o[l+3]=a[1],o[l+6]=a[2],o[l+7]=a[3],o[l+10]=a[4],o[l+11]=a[5],o[l+14]=a[6],o[l+15]=a[7];var u=s.a,_=s.b,c=s.c,f=s.d;if(1!==u||0!==_||0!==c||1!==f){s.bTransform=!0;var d=s.tx+n,m=s.ty+h;o[l]=(r[0]+e)*u+(r[1]+i)*c+d,o[l+1]=(r[0]+e)*_+(r[1]+i)*f+m,o[l+4]=(r[2]+e)*u+(r[3]+i)*c+d,o[l+5]=(r[2]+e)*_+(r[3]+i)*f+m,o[l+8]=(r[4]+e)*u+(r[5]+i)*c+d,o[l+9]=(r[4]+e)*_+(r[5]+i)*f+m,o[l+12]=(r[6]+e)*u+(r[7]+i)*c+d,o[l+13]=(r[6]+e)*_+(r[7]+i)*f+m}else s.bTransform=!1,e+=s.tx+n,i+=s.ty+h,o[l]=e+r[0],o[l+1]=i+r[1],o[l+4]=e+r[2],o[l+5]=i+r[3],o[l+8]=e+r[4],o[l+9]=i+r[5],o[l+12]=e+r[6],o[l+13]=i+r[7];return t._upload=!0,!0},t.fillTranglesVB=function(t,e,i,r,a,s,n){"use strict";var h=(t._byteLength>>2)+r.length;t.byteLength=h<<2;var l=t.getFloat32Array();h-=r.length;for(var o=r.length,u=a.a,_=a.b,c=a.c,f=a.d,d=0;d<o;d+=4)if(l[h+d+2]=r[d+2],l[h+d+3]=r[d+3],1!==u||0!==_||0!==c||1!==f){a.bTransform=!0;var m=a.tx+s,p=a.ty+n;l[h+d]=(r[d]+e)*u+(r[d+1]+i)*c+m,l[h+d+1]=(r[d]+e)*_+(r[d+1]+i)*f+p}else a.bTransform=!1,e+=a.tx+s,i+=a.ty+n,l[h+d]=e+r[d],l[h+d+1]=i+r[d+1];return t._upload=!0,!0},t.copyPreImgVb=function(t,e,i){var r=t._byteLength>>2;t.byteLength=r+16<<2;for(var a=t.getFloat32Array(),s=0,n=r-16;s<4;s++)a[r]=a[n]+e,++r,++n,a[r]=a[n]+i,++r,++n,a[r]=a[n],++r,++n,a[r]=a[n],++r,++n;t._upload=!0},t.fillRectImgVb=function(t,e,i,r,a,s,n,h,l,o,u,_,c){void 0===c&&(c=!1);var f,d,m,p,g,v,b,T,x,y,A,E,S,w,R,I,C=1,M=h.a,L=h.b,P=h.c,F=h.d,D=e.width<99999999;if(1!==M||0!==L||0!==P||1!==F?(h.bTransform=!0,0===L&&0===P&&(C=23,x=a+i,y=s+r,A=h.tx+l,E=h.ty+o,f=M*i+A,m=M*x+A,d=F*r+E,p=F*y+E)):(C=23,h.bTransform=!1,f=i+h.tx+l,m=f+a,d=r+h.ty+o,p=d+s),D&&(g=e.x,v=e.y,b=e.width+g,T=e.height+v),1!==C&&(Math.min(f,m)>=b||Math.min(d,p)>=T||Math.max(m,f)<=g||Math.max(p,d)<=v))return!1;var B=t._byteLength>>2;t.byteLength=B+16<<2;var N=t.getFloat32Array();switch(N[B+2]=n[0],N[B+3]=n[1],N[B+6]=n[2],N[B+7]=n[3],N[B+10]=n[4],N[B+11]=n[5],N[B+14]=n[6],N[B+15]=n[7],C){case 1:A=h.tx+l,E=h.ty+o,x=a+i,y=s+r;var O=i,V=r,U=M*O,H=P*V,k=F*V,G=L*O,z=M*x,W=P*y,X=F*y,Y=L*x;c?(S=U+H+A,R=Math.round(S)-S,w=k+G+E,I=Math.round(w)-w,N[B]=S+R,N[B+1]=w+I,N[B+4]=z+H+A+R,N[B+5]=k+Y+E+I,N[B+8]=z+W+A+R,N[B+9]=X+Y+E+I,N[B+12]=U+W+A+R,N[B+13]=X+G+E+I):(N[B]=U+H+A,N[B+1]=k+G+E,N[B+4]=z+H+A,N[B+5]=k+Y+E,N[B+8]=z+W+A,N[B+9]=X+Y+E,N[B+12]=U+W+A,N[B+13]=X+G+E);break;case 23:c?(S=f+u,R=Math.round(S)-S,w=d,I=Math.round(w)-w,N[B]=S+R,N[B+1]=w+I,N[B+4]=m+u+R,N[B+5]=d+I,N[B+8]=m+R,N[B+9]=p+I,N[B+12]=f+R,N[B+13]=p+I):(N[B]=f+u,N[B+1]=d,N[B+4]=m+u,N[B+5]=d,N[B+8]=m,N[B+9]=p,N[B+12]=f,N[B+13]=p)}return t._upload=!0,!0},t.fillLineVb=function(e,i,r,a,s,n,h,l){"use strict";var o=.5*h,u=t._fillLineArray,_=-(a-n),c=r-s,f=Math.sqrt(_*_+c*c);_/=f,c/=f,_*=o,c*=o,u[0]=r-_,u[1]=a-c,u[4]=r+_,u[5]=a+c,u[8]=s+_,u[9]=n+c,u[12]=s-_,u[13]=n-c,l&&l.transformPointArray(u,u);var d=16+(e._byteLength>>2);return e.byteLength=d<<2,e.insertData(u,d-16),!0},t._fillLineArray=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],t}(),ct=(function(){function t(){}a(t,"laya.webgl.utils.MatirxArray"),t.ArrayMul=function(e,i,r){if(!e)return void t.copyArray(i,r);if(!i)return void t.copyArray(e,r);for(var a=NaN,s=NaN,n=NaN,h=NaN,l=0;l<4;l++)a=e[l],s=e[l+4],n=e[l+8],h=e[l+12],r[l]=a*i[0]+s*i[1]+n*i[2]+h*i[3],r[l+4]=a*i[4]+s*i[5]+n*i[6]+h*i[7],r[l+8]=a*i[8]+s*i[9]+n*i[10]+h*i[11],r[l+12]=a*i[12]+s*i[13]+n*i[14]+h*i[15]},t.copyArray=function(t,e){if(t&&e)for(var i=0;i<t.length;i++)e[i]=t[i]},t}(),function(){function t(){}return a(t,"laya.webgl.utils.RenderState2D"),t.getMatrArray=function(){return[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1]},t.mat2MatArray=function(t,e){var i=t,r=e;return r[0]=i.a,r[1]=i.b,r[4]=i.c,r[5]=i.d,r[12]=i.tx,r[13]=i.ty,e},t.restoreTempArray=function(){t.TEMPMAT4_ARRAY[0]=1,t.TEMPMAT4_ARRAY[1]=0,t.TEMPMAT4_ARRAY[4]=0,t.TEMPMAT4_ARRAY[5]=1,t.TEMPMAT4_ARRAY[12]=0,t.TEMPMAT4_ARRAY[13]=0},t.clear=function(){t.worldScissorTest=!1,t.worldShaderDefines=null,t.worldFilters=null,t.worldAlpha=1,t.worldClipRect.x=t.worldClipRect.y=0,t.worldClipRect.width=t.width,t.worldClipRect.height=t.height,t.curRenderTarget=null},t._MAXSIZE=99999999,t.EMPTYMAT4_ARRAY=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1],t.TEMPMAT4_ARRAY=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1],t.worldMatrix4=t.TEMPMAT4_ARRAY,t.worldAlpha=1,t.worldScissorTest=!1,t.worldFilters=null,t.worldShaderDefines=null,t.curRenderTarget=null,t.width=0,t.height=0,r(t,["worldMatrix",function(){return this.worldMatrix=new b},"worldClipRect",function(){return this.worldClipRect=new x(0,0,99999999,99999999)}]),t}()),ft=function(){function t(t,i,r,a,s){function n(t){for(var e=t.split(" "),i=[],r=0;r<e.length;r++)e[r].length>0&&i.push(e[r]);return i}function h(t){var i,r,a=0,h=0,l=0,o=new e(0,null,null,null),u=o,_=t.split("\n");for(a=0,h=_.length;a<h;a++){var c=_[a];if(c.indexOf("#ifdef")>=0)i=n(c),u=new e(1,i[1],"",u);else if(c.indexOf("#else")>=0)r=u.condition,u=new e(2,null,"",u.parent),u.condition=r;else if(c.indexOf("#endif")>=0)u=u.parent;else if(c.indexOf("#include")>=0){i=n(c);var f=i[1],d=f.charAt(0);'"'!==d&&"'"!==d||(f=f.substr(1,f.length-2),(l=f.lastIndexOf(d))>0&&(f=f.substr(0,l))),l=i[0].indexOf("?");var m=l>0?i[0].substr(l+1):i[0];new e(1,m,s[f],u)}else u.childs.length>0&&0===u.childs[u.childs.length-1].type?u.childs[u.childs.length-1].text+="\n"+c:new e(0,null,c,u)}return o}this._VSTXT=i,this._PSTXT=r,this._VS=h(i),this._PS=h(r),this._nameMap=a}var e;return a(t,"laya.webgl.utils.ShaderCompile"),t.prototype.createShader=function(t,e,i){var r={},a="";if(t)for(var s in t)a+="#define "+s+"\n",r[s]=!0;var n=this._VS.toscript(r,[]),h=this._PS.toscript(r,[]);return(i||kt.create)(a+n.join("\n"),a+h.join("\n"),e,this._nameMap)},t.IFDEF_NO=0,t.IFDEF_YES=1,t.IFDEF_ELSE=2,t.__init$=function(){e=function(){function t(t,e,i,r){if(this.childs=new Array,this.type=t,this.text=i,this.parent=r,r&&r.childs.push(this),e){for(var a="",s=!1,n=!1,h=0,l=e.length;h<l;h++){var o=e.charAt(h);n="!&|() \t".indexOf(o)<0,s!=n&&(n&&(a+="this."),s=n),a+=o}this.condition=w.createShaderCondition(a)}}return a(t,""),t.prototype.toscript=function(t,e){if(0===this.type&&this.text&&e.push(this.text),this.childs.length<1&&!this.text)return e;if(0!==this.type){var i=!!this.condition.call(t);if(2===this.type&&(i=!i),!i)return e;this.text&&e.push(this.text)}return this.childs.length>0&&this.childs.forEach(function(i,r,a){i.toscript(t,e)}),e},t}()},t}(),dt=function(){function t(){}return a(t,"laya.webgl.WebGL"),t._uint8ArraySlice=function(){for(var t=this,e=t.length,i=new Uint8Array(t.length),r=0;r<e;r++)i[r]=t[r];return i},t._float32ArraySlice=function(){for(var t=this,e=t.length,i=new Float32Array(t.length),r=0;r<e;r++)i[r]=t[r];return i},t._uint16ArraySlice=function(t){var e,i=arguments,r=this,a=0,s=0;if(0===i.length)for(a=r.length,e=new Uint16Array(a),s=0;s<a;s++)e[s]=r[s];else if(2===i.length){var n=i[0],h=i[1];if(h>n)for(a=h-n,e=new Uint16Array(a),s=n;s<h;s++)e[s-n]=r[s];else e=new Uint16Array(0)}return e},t.expandContext=function(){var t=f.prototype,e=CanvasRenderingContext2D.prototype;e.fillTrangles=t.fillTrangles,Gt.__int__(null),e.setIBVB=function(t,e,i,r,a,s,n,h,l,o){void 0===l&&(l=0),void 0===o&&(o=0),null===i&&(this._ib=this._ib||Xt.QuadrangleIB,i=this._ib,_t.expandIBQuadrangle(i,r.byteLength/64+8)),this._setIBVB(t,e,i,r,a,s,n,h,l,o)},e.fillTrangles=function(t,e,i,r,a){this._curMat=this._curMat||b.create(),this._vb=this._vb||Yt.create(),this._ib||(this._ib=Xt.create(),_t.fillIBQuadrangle(this._ib,n/4));var s=this._vb,n=r.length>>4;_t.fillTranglesVB(s,e,i,r,a||this._curMat,0,0),_t.expandIBQuadrangle(this._ib,s.byteLength/64+8);var h=new vt(1,0);h.textureHost=t;var l=new Wt("attribute vec2 position; attribute vec2 texcoord; uniform vec2 size; uniform mat4 mmat; varying vec2 v_texcoord; void main() { vec4 p=vec4(position.xy,0.0,1.0);vec4 pos=mmat*p; gl_Position =vec4((pos.x/size.x-0.5)*2.0,(0.5-pos.y/size.y)*2.0,pos.z,1.0); v_texcoord = texcoord; }","precision mediump float; varying vec2 v_texcoord; uniform sampler2D texture; void main() {vec4 color= texture2D(texture, v_texcoord); color.a*=1.0; gl_FragColor= color;}");s._vertType=3,this._setIBVB(e,i,this._ib,s,6*n,a,l,h,0,0)}},t.enable=function(){if(u.__init__(),y.isConchApp&&!y.isConchWebGL)return w.skinAniSprite=function(){return new Z},t.expandContext(),!1;if(w.getWebGLContext=function(e){for(var i,r=["webgl","experimental-webgl","webkit-3d","moz-webgl"],a=0;a<r.length;a++){try{i=e.getContext(r[a],{stencil:c.isStencil,alpha:c.isAlpha,antialias:c.isAntialias,premultipliedAlpha:c.premultipliedAlpha,preserveDrawingBuffer:c.preserveDrawingBuffer})}catch(t){}if(i)return 0!==a&&(t._isExperimentalWebgl=!0),i}return null},t.mainContext=w.getWebGLContext(y._mainCanvas),null==t.mainContext)return!1;if(y.isWebGL)return!0;g.create=function(t,e){return new Kt(t,e)},v.create=function(t,e,i,r,a,s,n){return new Ht(t,e,i,r,a,s,n)},y.WebGL=t,y.isWebGL=!0,lt.__init__(),w.createRenderSprite=function(t,e){return new bt(t,e)},w.createWebGLContext2D=function(t){return new gt(t)},w.changeWebGLSize=function(t,e){laya.webgl.WebGL.onStageResize(t,e)},w.createGraphics=function(){return new pt};var e=w.createFilterAction;return w.createFilterAction=e?e:function(t){return new Tt},w.clear=function(t){ct.worldScissorTest&&laya.webgl.WebGL.mainContext.disable(3089);var e=y.context.ctx,r=0==e._submits._length||c.preserveDrawingBuffer?_.create(t)._color:i.stage._wgColor;r&&e.clearBG(r[0],r[1],r[2],r[3]),ct.clear()},w.addToAtlas=function(t,e){void 0===e&&(e=!1);var r=t.bitmap;if(!y.optimizeTextureMemory(t.url,t))return void(r.enableMerageInAtlas=!1);i.__typeof(r,"laya.webgl.resource.IMergeAtlasBitmap")&&r.allowMerageInAtlas&&r.on("recovered",t,t.addTextureToAtlas)},V._enable(),w.beginFlush=function(){for(var t=V.instance,e=t.getAtlaserCount(),i=0;i<e;i++){var r=t.getAtlaserByIndex(i).texture;r._flashCacheImageNeedFlush&&w.flashFlushImage(r)}},w.drawToCanvas=function(t,e,i,r,a,s){a-=t.x,s-=t.y;var n=new Ct(i,r,6408,5121,0,!1);n.start(),y.context.clear(),t.render(y.context,a,ct.height-r+s),y.context.flush(),n.end();var h=n.getData(0,0,n.width,n.height);n.dispose();var l=new Ot;l._canvas=u.createElement("canvas"),l.size(i,r);var o=l._canvas.getContext("2d");u.canvas.size(i,r);var _=u.context,c=_.createImageData(i,r);return c.data.set(new Uint8ClampedArray(h.buffer)),_.putImageData(c,0,0),o.save(),o.translate(0,r),o.scale(1,-1),o.drawImage(u.canvas.source,0,0),o.restore(),l},w.createFilterAction=function(t){var e;switch(t){case 32:e=new Tt}return e},w.addTextureToAtlas=function(t){t._uvID++,V._atlasRestore++,t.bitmap.enableMerageInAtlas&&V.instance.addToAtlas(t)},w.getTexturePixels=function(t,e,i,r,a){y.context.ctx.clear();var s=new R;s.graphics.drawTexture(t,-e,-i);var n=Ct.create(r,a);n.start(),n.clear(0,0,0,0),s.render(y.context,0,0),y.context.ctx.flush(),n.end();for(var h=n.getData(0,0,r,a),l=[],o=0,u=a-1;u>=0;u--)for(var _=0;_<r;_++)o=4*(u*r+_),l.push(h[o]),l.push(h[o+1]),l.push(h[o+2]),l.push(h[o+3]);return l},w.skinAniSprite=function(){return new Z},d._filterStart=function(t,e,i,r,a){var s=t.getValue("bounds"),n=Ct.create(s.width,s.height);if(n.start(),n.clear(0,0,0,0),t.addValue("src",n),t.addValue("ScissorTest",ct.worldScissorTest),ct.worldScissorTest){var h=new x;h.copyFrom(i.ctx._clipRect),t.addValue("clipRect",h),ct.worldScissorTest=!1,laya.webgl.WebGL.mainContext.disable(3089)}},d._filterEnd=function(t,e,i,r,a){var s=t.getValue("bounds");t.getValue("src").end();var n=Ct.create(s.width,s.height);n.start(),n.clear(0,0,0,0),t.addValue("out",n),e._set$P("_filterCache",n),e._set$P("_isHaveGlowFilter",t.getValue("_isHaveGlowFilter"))},d._EndTarget=function(t,e){if(t.getValue("src").recycle(),t.getValue("out").end(),t.getValue("ScissorTest")){ct.worldScissorTest=!0,laya.webgl.WebGL.mainContext.enable(3089),e.ctx.save();var i=t.getValue("clipRect");e.ctx.clipRect(i.x,i.y,i.width,i.height)}},d._useSrc=function(t){var e=t.getValue("out");e.end(),e=t.getValue("src"),e.start(),e.clear(0,0,0,0)},d._endSrc=function(t){t.getValue("src").end()},d._useOut=function(t){var e=t.getValue("src");e.end(),e=t.getValue("out"),e.start(),e.clear(0,0,0,0)},d._endOut=function(t){t.getValue("out").end()},d._recycleScope=function(t){t.recycle()},d._filter=function(t,e,i,r){var a=this._next;if(a){var s=t.filters,n=s.length;if(1==n&&32==s[0].type)return e.ctx.save(),e.ctx.setFilters([s[0]]),a._fun.call(a,t,e,i,r),void e.ctx.restore();var h,l,o=it.create(),u=T.TEMP,_=e.ctx._getTransformMatrix(),c=b.create();_.copyTo(c);var f=0,m=0,p=!1,g=t._$P._filterCache?t._$P._filterCache:null;if(!g||t._repaint){p=t._isHaveGlowFilter(),o.addValue("_isHaveGlowFilter",p),p&&(f=50,m=25),l=new x,l.copyFrom(t.getSelfBounds()),l.x+=t.x,l.y+=t.y,l.x-=t.pivotX+4,l.y-=t.pivotY+4;var v=l.x,y=l.y;if(l.width+=f+8,l.height+=f+8,u.x=l.x*c.a+l.y*c.c,u.y=l.y*c.d+l.x*c.b,l.x=u.x,l.y=u.y,u.x=l.width*c.a+l.height*c.c,u.y=l.height*c.d+l.width*c.b,l.width=u.x,l.height=u.y,l.width<=0||l.height<=0)return;g&&g.recycle(),o.addValue("bounds",l);var A=et.create([o,t,e,0,0],d._filterStart);e.addRenderObject(A),e.ctx._renderKey=0,e.ctx._shader2D.glTexture=null;var E=t.x-v+m,S=t.y-y+m;a._fun.call(a,t,e,E,S),A=et.create([o,t,e,0,0],d._filterEnd),e.addRenderObject(A);for(var w=0;w<n;w++){0!=w&&(A=et.create([o],d._useSrc),e.addRenderObject(A),h=vt.create(1,0),b.TEMP.identity(),e.ctx.drawTarget(o,0,0,l.width,l.height,b.TEMP,"out",h,null,H.TOINT.overlay),A=et.create([o],d._useOut),e.addRenderObject(A));s[w].action.apply3d(o,t,e,0,0)}A=et.create([o,e],d._EndTarget),e.addRenderObject(A)}else{if(p=!!t._$P._isHaveGlowFilter&&t._$P._isHaveGlowFilter,p&&(f=50,m=25),l=t.getBounds(),l.width<=0||l.height<=0)return;l.width+=f,l.height+=f,u.x=l.x*c.a+l.y*c.c,u.y=l.y*c.d+l.x*c.b,l.x=u.x,l.y=u.y,u.x=l.width*c.a+l.height*c.c,u.y=l.height*c.d+l.width*c.b,l.width=u.x,l.height=u.y,o.addValue("out",g)}i=i-m-t.x,r=r-m-t.y,u.setTo(i,r),c.transformPoint(u),i=u.x+l.x,r=u.y+l.y,h=vt.create(1,0),b.TEMP.identity(),e.ctx.drawTarget(o,i,r,l.width,l.height,b.TEMP,"out",h,null,H.TOINT.overlay),A=et.create([o],d._recycleScope),e.addRenderObject(A),c.destroy()}},Float32Array.prototype.slice||(Float32Array.prototype.slice=t._float32ArraySlice),Uint16Array.prototype.slice||(Uint16Array.prototype.slice=t._uint16ArraySlice),Uint8Array.prototype.slice||(Uint8Array.prototype.slice=t._uint8ArraySlice),!0},t.onStageResize=function(e,i){null!=t.mainContext&&(t.mainContext.viewport(0,0,e,i),ct.width=e,ct.height=i)},t.isExperimentalWebgl=function(){return t._isExperimentalWebgl},t.addRenderFinish=function(){(t._isExperimentalWebgl||y.isFlash)&&(w.endFinish=function(){y.context.ctx.finish()})},t.removeRenderFinish=function(){t._isExperimentalWebgl&&(w.endFinish=function(){})},t.onInvalidGLRes=function(){V.instance.freeAll(),S.releaseContentManagers(!0),t.doNodeRepaint(i.stage),t.mainContext.viewport(0,0,ct.width,ct.height),i.stage.event("devicelost")},t.doNodeRepaint=function(e){0==e.numChildren&&e.repaint();for(var i=0;i<e.numChildren;i++)t.doNodeRepaint(e.getChildAt(i))},t.init=function(e,i,r){t.mainCanvas=e,p._createContext=function(t){return new gt(t)},t._isExperimentalWebgl=t._isExperimentalWebgl&&(u.onWeiXin||u.onMQQBrowser),t.frameShaderHighPrecision=!1;var a=laya.webgl.WebGL.mainContext;try{a.getShaderPrecisionFormat(35632,36338).precision?t.frameShaderHighPrecision=!0:t.frameShaderHighPrecision=!1}catch(t){}if(a.deleteTexture1=a.deleteTexture,a.deleteTexture=function(t){t==mt.curBindTexValue&&(mt.curBindTexValue=null),a.deleteTexture1(t)},t.onStageResize(i,r),null==t.mainContext)throw new Error("webGL getContext err!");M.__init__(),
V.__init__(),yt.__init__(),tt.__init__(),gt.__init__(),vt.__init__(),j.__init__(),Gt.__int__(a),H._init_(a),y.isConchApp&&conch.setOnInvalidGLRes(t.onInvalidGLRes)},t.mainCanvas=null,t.mainContext=null,t.antialias=!0,t.frameShaderHighPrecision=!1,t._bg_null=[0,0,0,0],t._isExperimentalWebgl=!1,t}(),mt=function(){function t(){}return a(t,"laya.webgl.WebGLContext"),t.UseProgram=function(e){return t._useProgram!==e&&(dt.mainContext.useProgram(e),t._useProgram=e,!0)},t.setDepthTest=function(e,i){i!==t._depthTest&&(t._depthTest=i,i?e.enable(2929):e.disable(2929))},t.setDepthMask=function(e,i){i!==t._depthMask&&(t._depthMask=i,e.depthMask(i))},t.setDepthFunc=function(e,i){i!==t._depthFunc&&(t._depthFunc=i,e.depthFunc(i))},t.setBlend=function(e,i){i!==t._blend&&(t._blend=i,i?e.enable(3042):e.disable(3042))},t.setBlendFunc=function(e,i,r){(i!==t._sFactor||r!==t._dFactor)&&(t._sFactor=i,t._dFactor=r,e.blendFunc(i,r))},t.setCullFace=function(e,i){i!==t._cullFace&&(t._cullFace=i,i?e.enable(2884):e.disable(2884))},t.setFrontFace=function(e,i){i!==t._frontFace&&(t._frontFace=i,e.frontFace(i))},t.bindTexture=function(e,i,r){e.bindTexture(i,r),t.curBindTexTarget=i,t.curBindTexValue=r},t.DEPTH_BUFFER_BIT=256,t.STENCIL_BUFFER_BIT=1024,t.COLOR_BUFFER_BIT=16384,t.POINTS=0,t.LINES=1,t.LINE_LOOP=2,t.LINE_STRIP=3,t.TRIANGLES=4,t.TRIANGLE_STRIP=5,t.TRIANGLE_FAN=6,t.ZERO=0,t.ONE=1,t.SRC_COLOR=768,t.ONE_MINUS_SRC_COLOR=769,t.SRC_ALPHA=770,t.ONE_MINUS_SRC_ALPHA=771,t.DST_ALPHA=772,t.ONE_MINUS_DST_ALPHA=773,t.DST_COLOR=774,t.ONE_MINUS_DST_COLOR=775,t.SRC_ALPHA_SATURATE=776,t.FUNC_ADD=32774,t.BLEND_EQUATION=32777,t.BLEND_EQUATION_RGB=32777,t.BLEND_EQUATION_ALPHA=34877,t.FUNC_SUBTRACT=32778,t.FUNC_REVERSE_SUBTRACT=32779,t.BLEND_DST_RGB=32968,t.BLEND_SRC_RGB=32969,t.BLEND_DST_ALPHA=32970,t.BLEND_SRC_ALPHA=32971,t.CONSTANT_COLOR=32769,t.ONE_MINUS_CONSTANT_COLOR=32770,t.CONSTANT_ALPHA=32771,t.ONE_MINUS_CONSTANT_ALPHA=32772,t.BLEND_COLOR=32773,t.ARRAY_BUFFER=34962,t.ELEMENT_ARRAY_BUFFER=34963,t.ARRAY_BUFFER_BINDING=34964,t.ELEMENT_ARRAY_BUFFER_BINDING=34965,t.STREAM_DRAW=35040,t.STATIC_DRAW=35044,t.DYNAMIC_DRAW=35048,t.BUFFER_SIZE=34660,t.BUFFER_USAGE=34661,t.CURRENT_VERTEX_ATTRIB=34342,t.FRONT=1028,t.BACK=1029,t.CULL_FACE=2884,t.FRONT_AND_BACK=1032,t.BLEND=3042,t.DITHER=3024,t.STENCIL_TEST=2960,t.DEPTH_TEST=2929,t.SCISSOR_TEST=3089,t.POLYGON_OFFSET_FILL=32823,t.SAMPLE_ALPHA_TO_COVERAGE=32926,t.SAMPLE_COVERAGE=32928,t.NO_ERROR=0,t.INVALID_ENUM=1280,t.INVALID_VALUE=1281,t.INVALID_OPERATION=1282,t.OUT_OF_MEMORY=1285,t.CW=2304,t.CCW=2305,t.LINE_WIDTH=2849,t.ALIASED_POINT_SIZE_RANGE=33901,t.ALIASED_LINE_WIDTH_RANGE=33902,t.CULL_FACE_MODE=2885,t.FRONT_FACE=2886,t.DEPTH_RANGE=2928,t.DEPTH_WRITEMASK=2930,t.DEPTH_CLEAR_VALUE=2931,t.DEPTH_FUNC=2932,t.STENCIL_CLEAR_VALUE=2961,t.STENCIL_FUNC=2962,t.STENCIL_FAIL=2964,t.STENCIL_PASS_DEPTH_FAIL=2965,t.STENCIL_PASS_DEPTH_PASS=2966,t.STENCIL_REF=2967,t.STENCIL_VALUE_MASK=2963,t.STENCIL_WRITEMASK=2968,t.STENCIL_BACK_FUNC=34816,t.STENCIL_BACK_FAIL=34817,t.STENCIL_BACK_PASS_DEPTH_FAIL=34818,t.STENCIL_BACK_PASS_DEPTH_PASS=34819,t.STENCIL_BACK_REF=36003,t.STENCIL_BACK_VALUE_MASK=36004,t.STENCIL_BACK_WRITEMASK=36005,t.VIEWPORT=2978,t.SCISSOR_BOX=3088,t.COLOR_CLEAR_VALUE=3106,t.COLOR_WRITEMASK=3107,t.UNPACK_ALIGNMENT=3317,t.PACK_ALIGNMENT=3333,t.MAX_TEXTURE_SIZE=3379,t.MAX_VIEWPORT_DIMS=3386,t.SUBPIXEL_BITS=3408,t.RED_BITS=3410,t.GREEN_BITS=3411,t.BLUE_BITS=3412,t.ALPHA_BITS=3413,t.DEPTH_BITS=3414,t.STENCIL_BITS=3415,t.POLYGON_OFFSET_UNITS=10752,t.POLYGON_OFFSET_FACTOR=32824,t.TEXTURE_BINDING_2D=32873,t.SAMPLE_BUFFERS=32936,t.SAMPLES=32937,t.SAMPLE_COVERAGE_VALUE=32938,t.SAMPLE_COVERAGE_INVERT=32939,t.NUM_COMPRESSED_TEXTURE_FORMATS=34466,t.COMPRESSED_TEXTURE_FORMATS=34467,t.DONT_CARE=4352,t.FASTEST=4353,t.NICEST=4354,t.GENERATE_MIPMAP_HINT=33170,t.BYTE=5120,t.UNSIGNED_BYTE=5121,t.SHORT=5122,t.UNSIGNED_SHORT=5123,t.INT=5124,t.UNSIGNED_INT=5125,t.FLOAT=5126,t.DEPTH_COMPONENT=6402,t.ALPHA=6406,t.RGB=6407,t.RGBA=6408,t.LUMINANCE=6409,t.LUMINANCE_ALPHA=6410,t.UNSIGNED_SHORT_4_4_4_4=32819,t.UNSIGNED_SHORT_5_5_5_1=32820,t.UNSIGNED_SHORT_5_6_5=33635,t.FRAGMENT_SHADER=35632,t.VERTEX_SHADER=35633,t.MAX_VERTEX_ATTRIBS=34921,t.MAX_VERTEX_UNIFORM_VECTORS=36347,t.MAX_VARYING_VECTORS=36348,t.MAX_COMBINED_TEXTURE_IMAGE_UNITS=35661,t.MAX_VERTEX_TEXTURE_IMAGE_UNITS=35660,t.MAX_TEXTURE_IMAGE_UNITS=34930,t.MAX_FRAGMENT_UNIFORM_VECTORS=36349,t.SHADER_TYPE=35663,t.DELETE_STATUS=35712,t.LINK_STATUS=35714,t.VALIDATE_STATUS=35715,t.ATTACHED_SHADERS=35717,t.ACTIVE_UNIFORMS=35718,t.ACTIVE_ATTRIBUTES=35721,t.SHADING_LANGUAGE_VERSION=35724,t.CURRENT_PROGRAM=35725,t.NEVER=512,t.LESS=513,t.EQUAL=514,t.LEQUAL=515,t.GREATER=516,t.NOTEQUAL=517,t.GEQUAL=518,t.ALWAYS=519,t.KEEP=7680,t.REPLACE=7681,t.INCR=7682,t.DECR=7683,t.INVERT=5386,t.INCR_WRAP=34055,t.DECR_WRAP=34056,t.VENDOR=7936,t.RENDERER=7937,t.VERSION=7938,t.NEAREST=9728,t.LINEAR=9729,t.NEAREST_MIPMAP_NEAREST=9984,t.LINEAR_MIPMAP_NEAREST=9985,t.NEAREST_MIPMAP_LINEAR=9986,t.LINEAR_MIPMAP_LINEAR=9987,t.TEXTURE_MAG_FILTER=10240,t.TEXTURE_MIN_FILTER=10241,t.TEXTURE_WRAP_S=10242,t.TEXTURE_WRAP_T=10243,t.TEXTURE_2D=3553,t.TEXTURE=5890,t.TEXTURE_CUBE_MAP=34067,t.TEXTURE_BINDING_CUBE_MAP=34068,t.TEXTURE_CUBE_MAP_POSITIVE_X=34069,t.TEXTURE_CUBE_MAP_NEGATIVE_X=34070,t.TEXTURE_CUBE_MAP_POSITIVE_Y=34071,t.TEXTURE_CUBE_MAP_NEGATIVE_Y=34072,t.TEXTURE_CUBE_MAP_POSITIVE_Z=34073,t.TEXTURE_CUBE_MAP_NEGATIVE_Z=34074,t.MAX_CUBE_MAP_TEXTURE_SIZE=34076,t.TEXTURE0=33984,t.TEXTURE1=33985,t.TEXTURE2=33986,t.TEXTURE3=33987,t.TEXTURE4=33988,t.TEXTURE5=33989,t.TEXTURE6=33990,t.TEXTURE7=33991,t.TEXTURE8=33992,t.TEXTURE9=33993,t.TEXTURE10=33994,t.TEXTURE11=33995,t.TEXTURE12=33996,t.TEXTURE13=33997,t.TEXTURE14=33998,t.TEXTURE15=33999,t.TEXTURE16=34e3,t.TEXTURE17=34001,t.TEXTURE18=34002,t.TEXTURE19=34003,t.TEXTURE20=34004,t.TEXTURE21=34005,t.TEXTURE22=34006,t.TEXTURE23=34007,t.TEXTURE24=34008,t.TEXTURE25=34009,t.TEXTURE26=34010,t.TEXTURE27=34011,t.TEXTURE28=34012,t.TEXTURE29=34013,t.TEXTURE30=34014,t.TEXTURE31=34015,t.ACTIVE_TEXTURE=34016,t.REPEAT=10497,t.CLAMP_TO_EDGE=33071,t.MIRRORED_REPEAT=33648,t.FLOAT_VEC2=35664,t.FLOAT_VEC3=35665,t.FLOAT_VEC4=35666,t.INT_VEC2=35667,t.INT_VEC3=35668,t.INT_VEC4=35669,t.BOOL=35670,t.BOOL_VEC2=35671,t.BOOL_VEC3=35672,t.BOOL_VEC4=35673,t.FLOAT_MAT2=35674,t.FLOAT_MAT3=35675,t.FLOAT_MAT4=35676,t.SAMPLER_2D=35678,t.SAMPLER_CUBE=35680,t.VERTEX_ATTRIB_ARRAY_ENABLED=34338,t.VERTEX_ATTRIB_ARRAY_SIZE=34339,t.VERTEX_ATTRIB_ARRAY_STRIDE=34340,t.VERTEX_ATTRIB_ARRAY_TYPE=34341,t.VERTEX_ATTRIB_ARRAY_NORMALIZED=34922,t.VERTEX_ATTRIB_ARRAY_POINTER=34373,t.VERTEX_ATTRIB_ARRAY_BUFFER_BINDING=34975,t.COMPILE_STATUS=35713,t.LOW_FLOAT=36336,t.MEDIUM_FLOAT=36337,t.HIGH_FLOAT=36338,t.LOW_INT=36339,t.MEDIUM_INT=36340,t.HIGH_INT=36341,t.FRAMEBUFFER=36160,t.RENDERBUFFER=36161,t.RGBA4=32854,t.RGB5_A1=32855,t.RGB565=36194,t.DEPTH_COMPONENT16=33189,t.STENCIL_INDEX=6401,t.STENCIL_INDEX8=36168,t.DEPTH_STENCIL=34041,t.RENDERBUFFER_WIDTH=36162,t.RENDERBUFFER_HEIGHT=36163,t.RENDERBUFFER_INTERNAL_FORMAT=36164,t.RENDERBUFFER_RED_SIZE=36176,t.RENDERBUFFER_GREEN_SIZE=36177,t.RENDERBUFFER_BLUE_SIZE=36178,t.RENDERBUFFER_ALPHA_SIZE=36179,t.RENDERBUFFER_DEPTH_SIZE=36180,t.RENDERBUFFER_STENCIL_SIZE=36181,t.FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE=36048,t.FRAMEBUFFER_ATTACHMENT_OBJECT_NAME=36049,t.FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL=36050,t.FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE=36051,t.COLOR_ATTACHMENT0=36064,t.DEPTH_ATTACHMENT=36096,t.STENCIL_ATTACHMENT=36128,t.DEPTH_STENCIL_ATTACHMENT=33306,t.NONE=0,t.FRAMEBUFFER_COMPLETE=36053,t.FRAMEBUFFER_INCOMPLETE_ATTACHMENT=36054,t.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT=36055,t.FRAMEBUFFER_INCOMPLETE_DIMENSIONS=36057,t.FRAMEBUFFER_UNSUPPORTED=36061,t.FRAMEBUFFER_BINDING=36006,t.RENDERBUFFER_BINDING=36007,t.MAX_RENDERBUFFER_SIZE=34024,t.INVALID_FRAMEBUFFER_OPERATION=1286,t.UNPACK_FLIP_Y_WEBGL=37440,t.UNPACK_PREMULTIPLY_ALPHA_WEBGL=37441,t.CONTEXT_LOST_WEBGL=37442,t.UNPACK_COLORSPACE_CONVERSION_WEBGL=37443,t.BROWSER_DEFAULT_WEBGL=37444,t._useProgram=null,t._depthTest=!0,t._depthMask=!0,t._blend=!1,t._cullFace=!1,t.curBindTexTarget=null,t.curBindTexValue=null,r(t,["_depthFunc",function(){return this._depthFunc=513},"_sFactor",function(){return this._sFactor=1},"_dFactor",function(){return this._dFactor=0},"_frontFace",function(){return this._frontFace=2305}]),t}(),pt=function(t){function e(){e.__super.call(this)}a(e,"laya.webgl.display.GraphicsGL",t);var i=e.prototype;return i.setShader=function(t){this._saveToCmd(y.context._setShader,[t])},i.setIBVB=function(t,e,i,r,a,s){this._saveToCmd(y.context._setIBVB,[t,e,i,r,a,s])},i.drawParticle=function(t,e,i){var r=w.createParticleTemplate2D(i);r.x=t,r.y=e,this._saveToCmd(y.context._drawParticle,[r])},e}(m),gt=function(t){function e(t){this._x=0,this._y=0,this._id=++e._COUNT,this._path=null,this._drawCount=1,this._maxNumEle=0,this._clear=!1,this._isMain=!1,this._atlasResourceChange=0,this._submits=[],this._curSubmit=null,this._ib=null,this._vb=null,this._nBlendType=0,this._saveMark=null,this.mId=-1,this.mHaveKey=!1,this.mHaveLineKey=!1,this.mX=0,this.mY=0,e.__super.call(this),this._width=99999999,this._height=99999999,this._clipRect=e.MAXCLIPRECT,this._shader2D=new j,this.mOutPoint,this._canvas=t,this._curMat=b.create(),y.isFlash?(this._ib=Xt.create(35044),_t.fillIBQuadrangle(this._ib,16)):this._ib=Xt.QuadrangleIB,this._vb=Yt.create(-1),this._other=n.DEFAULT,this._save=[X.Create(this)],this._save.length=10,this.clear()}var n;a(e,"laya.webgl.canvas.WebGLContext2D",t);var h=e.prototype;return h.setIsMainContext=function(){this._isMain=!0},h.clearBG=function(t,e,i,r){var a=dt.mainContext;a.clearColor(t,e,i,r),a.clear(16384)},h._getSubmits=function(){return this._submits},h.destroy=function(){this.sprite=null,this._curMat&&this._curMat.destroy(),this._targets&&this._targets.destroy(),this._targets=null;for(var t=0,e=this._submits._length;t<e;t++)this._submits[t].releaseRender();this._submits.length=0,this._submits._length=0,this._curSubmit=null,this._path&&this._path.recover(),this._path=null,this._vb&&(this._vb.releaseResource(),this._vb.dispose(),this._vb.destory(),this._vb=null),this._canvas=null,this._ib&&this._ib!=Xt.QuadrangleIB&&this._ib.releaseResource()},h.clear=function(){this._vb.clear(),this._targets&&(this._targets.repaint=!0),this._other=n.DEFAULT,this._clear=!0,this._repaint=!1,this._drawCount=1,this._renderKey=0,this._other.lineWidth=this._shader2D.ALPHA=1,this._nBlendType=0,this._clipRect=e.MAXCLIPRECT,this._curSubmit=tt.RENDERBASE,this._shader2D.glTexture=null,this._shader2D.fillStyle=this._shader2D.strokeStyle=k.DEFAULT;for(var t=0,i=this._submits._length;t<i;t++)this._submits[t].releaseRender();this._submits._length=0,this._curMat.identity(),this._other.clear(),this._saveMark=this._save[0],this._save._length=1},h.size=function(t,e){if(this._width!=t||this._height!=e)if(0==t||0==e){0!=this._vb._byteLength&&(this._width=t,this._height=e,this._vb.clear(),this._vb.upload());for(var i=0,r=this._submits._length;i<r;i++)this._submits[i].releaseRender();this._submits.length=0,this._submits._length=0,this._curSubmit=null,this._path&&this._path.recover(),this._path=null,this.sprite=null,this._targets&&this._targets.destroy(),this._targets=null}else this._width=t,this._height=e,this._targets&&this._targets.size(t,e),this._canvas.memorySize-=this._canvas.memorySize},h._getTransformMatrix=function(){return this._curMat},h.translate=function(t,e){0===t&&0===e||(K.save(this),this._curMat.bTransform&&(Y.save(this),this._curMat.transformPointN(T.TEMP.setTo(t,e)),t=T.TEMP.x,e=T.TEMP.y),this._x+=t,this._y+=e)},h.save=function(){this._save[this._save._length++]=X.Create(this)},h.restore=function(){var t=this._save._length;if(!(t<1))for(var e=t-1;e>=0;e--){var i=this._save[e];if(i.restore(this),i.isSaveMark())return void(this._save._length=e)}},h._fillText=function(t,e,i,r,a,s,n,h,l){var o=this._shader2D,u=this._curSubmit.shaderValue,c=a?ot.create(a):this._other.font;if(V.enabled)o.ALPHA!==u.ALPHA&&(o.glTexture=null),lt.drawText(this,t,e,this._curMat,c,l||this._other.textAlign,s,n,h,i,r);else{var f=(this._shader2D.defines.getValue(),s?_.create(s)._color:o.colorAdd);o.ALPHA===u.ALPHA&&f===o.colorAdd&&u.colorAdd===o.colorAdd||(o.glTexture=null,o.colorAdd=f),lt.drawText(this,t,e,this._curMat,c,l||this._other.textAlign,s,n,h,i,r)}},h.fillWords=function(t,e,i,r,a){this._fillText(null,t,e,i,r,a,null,-1,null)},h.fillText=function(t,e,i,r,a,s){this._fillText(t,null,e,i,r,a,null,-1,s)},h.strokeText=function(t,e,i,r,a,s,n){this._fillText(t,null,e,i,r,null,a,s||1,n)},h.fillBorderText=function(t,e,i,r,a,s,n,h){this._fillBorderText(t,null,e,i,r,a,s,n,h)},h._fillBorderText=function(t,i,r,a,s,n,h,l,o){if(!V.enabled)return this._fillText(t,i,r,a,s,null,h,l||1,o),void this._fillText(t,i,r,a,s,n,null,-1,o);var u=this._shader2D,_=this._curSubmit.shaderValue;u.ALPHA!==_.ALPHA&&(u.glTexture=null);var c=s?(e._fontTemp.setFont(s),e._fontTemp):this._other.font;lt.drawText(this,t,i,this._curMat,c,o||this._other.textAlign,n,h,l||1,r,a)},h.fillBorderWords=function(t,e,i,r,a,s,n){this._fillBorderText(null,t,e,i,r,a,s,n,null)},h.fillRect=function(t,e,i,r,a){var s=this._vb;if(_t.fillRectImgVb(s,this._clipRect,t,e,i,r,P.DEF_UV,this._curMat,this._x,this._y,0,0)){this._renderKey=0;var n=this._shader2D.fillStyle;a&&(this._shader2D.fillStyle=k.create(a));var h=this._shader2D,l=this._curSubmit.shaderValue;if(h.fillStyle!==l.fillStyle||h.ALPHA!==l.ALPHA){h.glTexture=null;var o=this._curSubmit=tt.create(this,this._ib,s,(s._byteLength-64)/32*3,vt.create(2,0));o.shaderValue.color=h.fillStyle._color._color,o.shaderValue.ALPHA=h.ALPHA,this._submits[this._submits._length++]=o}this._curSubmit._numEle+=6,this._shader2D.fillStyle=n}},h.fillTexture=function(t,e,r,a,s,n,h,l){if(!(t.loaded&&t.bitmap&&t.source))return void(this.sprite&&i.timer.callLater(this,this._repaintSprite));var o=this._vb,u=t.bitmap.width,_=t.bitmap.height,c=t.uv,f=h.x%t.width,d=h.y%t.height;if(u!=l.w||_!=l.h){if(!l.w&&!l.h)switch(l.oy=l.ox=0,n){case"repeat":l.width=a,l.height=s;break;case"repeat-x":l.width=a,d<0?t.height+d>s?l.height=s:l.height=t.height+d:(l.oy=d,t.height+d>s?l.height=s-d:l.height=t.height);break;case"repeat-y":f<0?t.width+f>a?l.width=a:l.width=t.width+f:(l.ox=f,t.width+f>a?l.width=a-f:l.width=t.width),l.height=s;break;default:l.width=a,l.height=s}l.w=u,l.h=_,l.uv=[0,0,l.width/u,0,l.width/u,l.height/_,0,l.height/_]}if(e+=l.ox,r+=l.oy,f-=l.ox,d-=l.oy,_t.fillRectImgVb(o,this._clipRect,e,r,l.width,l.height,l.uv,this._curMat,this._x,this._y,0,0)){this._renderKey=0;var m=Rt.create(this,this._ib,o,(o._byteLength-64)/32*3,vt.create(256,0));this._submits[this._submits._length++]=m;var p=m.shaderValue;p.textureHost=t;var g=c[0]*u,v=c[1]*_,b=(c[2]-c[0])*u,T=(c[5]-c[3])*_,x=-f/u,y=-d/_;p.u_TexRange[0]=g/u,p.u_TexRange[1]=b/u,p.u_TexRange[2]=v/_,p.u_TexRange[3]=T/_,p.u_offset[0]=x,p.u_offset[1]=y,V.enabled&&!this._isMain&&m.addTexture(t,(o._byteLength>>2)-16),this._curSubmit=m,m._renderType=10017,m._numEle+=6}},h.setShader=function(t){z.save(this,524288,this._shader2D,!0),this._shader2D.shader=t},h.setFilters=function(t){z.save(this,1048576,this._shader2D,!0),this._shader2D.filters=t,this._curSubmit=tt.RENDERBASE,this._renderKey=0,this._drawCount++},h.drawTexture=function(t,e,i,r,a,s,n){this._drawTextureM(t,e,i,r,a,s,n,null,1)},h.addTextureVb=function(t,e,i){var r=this._curSubmit._vb||this._vb,a=r._byteLength>>2;r.byteLength=a+16<<2;for(var s=r.getFloat32Array(),n=0;n<16;n+=4)s[a++]=t[n]+e,s[a++]=t[n+1]+i,s[a++]=t[n+2],s[a++]=t[n+3];this._curSubmit._numEle+=6,this._maxNumEle=Math.max(this._maxNumEle,this._curSubmit._numEle),r._upload=!0},h.willDrawTexture=function(t,e){if(!(t.loaded&&t.bitmap&&t.source))return this.sprite&&i.timer.callLater(this,this._repaintSprite),0;var r=t.bitmap,a=r.id+this._shader2D.ALPHA*e+10016;if(a==this._renderKey)return a;var s=this._shader2D,n=s.ALPHA,h=this._curSubmit.shaderValue;s.ALPHA*=e,this._renderKey=a,this._drawCount++,s.glTexture=r;var l=this._vb,o=null,u=l._byteLength/32*3;return o=Rt.create(this,this._ib,l,u,vt.create(1,0)),this._submits[this._submits._length++]=o,o.shaderValue.textureHost=t,o._renderType=10016,o._preIsSameTextureShader=10016===this._curSubmit._renderType&&s.ALPHA===h.ALPHA,this._curSubmit=o,s.ALPHA=n,a},h.drawTextures=function(t,r,a,s){if(!(t.loaded&&t.bitmap&&t.source))return void(this.sprite&&i.timer.callLater(this,this._repaintSprite));var n=this._clipRect;if(this._clipRect=e.MAXCLIPRECT,!this._drawTextureM(t,r[0],r[1],t.width,t.height,a,s,null,1))return void alert("drawTextures err");if(this._clipRect=n,I.drawCall++,!(r.length<4)){for(var h=this._curSubmit._vb||this._vb,l=this._curMat.a,o=this._curMat.d,u=2,_=r.length;u<_;u+=2)_t.copyPreImgVb(h,(r[u]-r[u-2])*l,(r[u+1]-r[u-1])*o),this._curSubmit._numEle+=6;this._maxNumEle=Math.max(this._maxNumEle,this._curSubmit._numEle)}},h._drawTextureM=function(t,e,r,a,s,n,h,l,o){if(!t.loaded||!t.source)return this.sprite&&i.timer.callLater(this,this._repaintSprite),!1;var u=this._curSubmit._vb||this._vb,_=t.bitmap;e+=n,r+=h,this._drawCount++;var c=_.id+this._shader2D.ALPHA*o+10016;if(c!=this._renderKey){this._renderKey=c;var f=this._curSubmit.shaderValue,d=this._shader2D,m=d.ALPHA;d.ALPHA*=o,d.glTexture=_;var p=this._vb,g=null,v=p._byteLength/32*3;g=Rt.create(this,this._ib,p,v,vt.create(1,0)),this._submits[this._submits._length++]=g,g.shaderValue.textureHost=t,g._renderType=10016,g._preIsSameTextureShader=10016===this._curSubmit._renderType&&d.ALPHA===f.ALPHA,this._curSubmit=g,u=this._curSubmit._vb||this._vb,d.ALPHA=m}return!!_t.fillRectImgVb(u,this._clipRect,e,r,a||t.width,s||t.height,t.uv,l||this._curMat,this._x,this._y,0,0)&&(V.enabled&&!this._isMain&&this._curSubmit.addTexture(t,(u._byteLength>>2)-16),this._curSubmit._numEle+=6,this._maxNumEle=Math.max(this._maxNumEle,this._curSubmit._numEle),!0)},h._repaintSprite=function(){this.sprite.repaint()},h._drawText=function(t,e,i,r,a,s,n,h,l,o){var u=t.bitmap;this._drawCount++;var _=u.id+this._shader2D.ALPHA+10016;if(_!=this._renderKey){this._renderKey=_;var c=this._curSubmit.shaderValue,f=this._shader2D;f.glTexture=u;var d=this._vb,m=null,p=d._byteLength/32*3;m=V.enabled?Rt.create(this,this._ib,d,p,vt.create(1,0)):Rt.create(this,this._ib,d,p,zt.create()),m._preIsSameTextureShader=10016===this._curSubmit._renderType&&f.ALPHA===c.ALPHA,this._submits[this._submits._length++]=m,m.shaderValue.textureHost=t,m._renderType=10016,this._curSubmit=m}t.active();var g=this._curSubmit._vb||this._vb;_t.fillRectImgVb(g,this._clipRect,e+n,i+h,r||t.width,a||t.height,t.uv,s||this._curMat,this._x,this._y,l,o,!0)&&(V.enabled&&!this._isMain&&this._curSubmit.addTexture(t,(g._byteLength>>2)-16),this._curSubmit._numEle+=6,this._maxNumEle=Math.max(this._maxNumEle,this._curSubmit._numEle))},h.drawTextureWithTransform=function(t,i,r,a,s,n,h,l,o){if(!n)return void this._drawTextureM(t,i,r,a,s,h,l,null,o);var u=this._curMat,_=this._x,c=this._y;(0!==h||0!==l)&&(this._x=h*u.a+l*u.c,this._y=l*u.d+h*u.b),n&&u.bTransform?(b.mul(n,u,e._tmpMatrix),n=e._tmpMatrix,n._checkTransform()):(this._x+=u.tx,this._y+=u.ty),this._drawTextureM(t,i,r,a,s,0,0,n,o),this._x=_,this._y=c},h.fillQuadrangle=function(t,e,i,r,a){var s=this._curSubmit,n=this._vb,h=this._shader2D,l=s.shaderValue;if(this._renderKey=0,t.bitmap){var o=t.bitmap;h.glTexture==o&&h.ALPHA===l.ALPHA||(h.glTexture=o,s=this._curSubmit=tt.create(this,this._ib,n,n._byteLength/32*3,vt.create(1,0)),s.shaderValue.glTexture=o,this._submits[this._submits._length++]=s),_t.fillQuadrangleImgVb(n,e,i,r,t.uv,a||this._curMat,this._x,this._y)}else s.shaderValue.fillStyle&&s.shaderValue.fillStyle.equal(t)&&h.ALPHA===l.ALPHA||(h.glTexture=null,s=this._curSubmit=tt.create(this,this._ib,n,n._byteLength/32*3,vt.create(2,0)),s.shaderValue.defines.add(2),s.shaderValue.fillStyle=k.create(t),this._submits[this._submits._length++]=s),_t.fillQuadrangleImgVb(n,e,i,r,P.DEF_UV,a||this._curMat,this._x,this._y);s._numEle+=6},h.drawTexture2=function(t,i,r,a,s,n,h,l){if(0!=n){var o=this._curMat;if(this._x=t*o.a+i*o.c,this._y=i*o.d+t*o.b,s&&(o.bTransform||s.bTransform?(b.mul(s,o,e._tmpMatrix),s=e._tmpMatrix):(this._x+=s.tx+o.tx,this._y+=s.ty+o.ty,s=b.EMPTY)),1!==n||h){var u=this._shader2D.ALPHA,_=this._nBlendType;this._shader2D.ALPHA=n,h&&(this._nBlendType=H.TOINT(h)),this._drawTextureM(l[0],l[1]-r,l[2]-a,l[3],l[4],0,0,s,1),this._shader2D.ALPHA=u,this._nBlendType=_}else this._drawTextureM(l[0],l[1]-r,l[2]-a,l[3],l[4],0,0,s,1);this._x=this._y=0}},h.drawCanvas=function(t,e,i,r,a){var s=t.context;if(this._renderKey=0,s._targets)this._submits[this._submits._length++]=wt.create(s,0,null),this._curSubmit=tt.RENDERBASE,s._targets.drawTo(this,e,i,r,a);else{var n=this._submits[this._submits._length++]=wt.create(s,this._shader2D.ALPHA,this._shader2D.filters),h=r/t.width,l=a/t.height,o=n._matrix;this._curMat.copyTo(o),1!=h&&1!=l&&o.scale(h,l);var u=o.tx,_=o.ty;o.tx=o.ty=0,o.transformPoint(T.TEMP.setTo(e,i)),o.translate(T.TEMP.x+u,T.TEMP.y+_),this._curSubmit=tt.RENDERBASE}c.showCanvasMark&&(this.save(),this.lineWidth=4,this.strokeStyle=s._targets?"yellow":"green",this.strokeRect(e-1,i-1,r+2,a+2,1),this.strokeRect(e,i,r,a,1),this.restore())},h.drawTarget=function(t,e,i,r,a,s,n,h,l,o){void 0===o&&(o=-1);var u=this._vb;if(_t.fillRectImgVb(u,this._clipRect,e,i,r,a,l||P.DEF_UV,s||this._curMat,this._x,this._y,0,0)){this._renderKey=0;this._shader2D.glTexture=null;var _=(this._curSubmit.shaderValue,this._curSubmit=nt.create(this,this._ib,u,(u._byteLength-64)/32*3,h,n));_.blendType=o==-1?this._nBlendType:o,_.scope=t,this._submits[this._submits._length++]=_,this._curSubmit._numEle+=6}},h.transform=function(t,e,i,r,a,s){Y.save(this),b.mul(b.TEMP.setTo(t,e,i,r,a,s),this._curMat,this._curMat),this._curMat._checkTransform()},h.setTransformByMatrix=function(t){t.copyTo(this._curMat)},h.transformByMatrix=function(t){Y.save(this),b.mul(t,this._curMat,this._curMat),this._curMat._checkTransform()},h.rotate=function(t){Y.save(this),this._curMat.rotateEx(t)},h.scale=function(t,e){Y.save(this),this._curMat.scaleEx(t,e)},h.clipRect=function(t,e,i,r){i*=this._curMat.a,r*=this._curMat.d;var a=T.TEMP;this._curMat.transformPoint(a.setTo(t,e)),this._renderKey=0;var s=this._curSubmit=at.create(this);this._submits[this._submits._length++]=s,s.submitIndex=this._submits._length,s.submitLength=9999999,W.save(this,s);var n=this._clipRect,h=n.x,l=n.y,o=a.x+i,u=a.y+r;h<a.x&&(n.x=a.x),l<a.y&&(n.y=a.y),n.width=Math.min(o,h+n.width)-n.x,n.height=Math.min(u,l+n.height)-n.y,this._shader2D.glTexture=null,s.clipRect.copyFrom(n),this._curSubmit=tt.RENDERBASE},h.setIBVB=function(t,e,i,r,a,s,n,h,l,o,u){if(void 0===l&&(l=0),void 0===o&&(o=0),void 0===u&&(u=0),null===i){if(y.isFlash){var _=r;_._selfIB||(_._selfIB=Xt.create(35044)),_._selfIB.clear(),i=_._selfIB}else i=this._ib;_t.expandIBQuadrangle(i,r.byteLength/(4*r.vertexStride*4))}if(!h||!n)throw Error("setIBVB must input:shader shaderValues");var c=rt.create(this,r,i,a,n,h,l,o,u);s||(s=b.EMPTY),s.translate(t,e),b.mul(s,this._curMat,c._mat),s.translate(-t,-e),this._submits[this._submits._length++]=c,this._curSubmit=tt.RENDERBASE,this._renderKey=0},h.addRenderObject=function(t){this._submits[this._submits._length++]=t},h.fillTrangles=function(t,e,i,r,a){var s=this._curSubmit,n=this._vb,h=this._shader2D,l=s.shaderValue,o=r.length>>4,u=t.bitmap;this._renderKey=0,h.glTexture==u&&h.ALPHA===l.ALPHA||(s=this._curSubmit=tt.create(this,this._ib,n,n._byteLength/32*3,vt.create(1,0)),s.shaderValue.textureHost=t,this._submits[this._submits._length++]=s),_t.fillTranglesVB(n,e,i,r,a||this._curMat,this._x,this._y),s._numEle+=6*o},h.submitElement=function(t,e){var i=this._submits;for(e<0&&(e=i._length);t<e;)t+=i[t].renderSubmit()},h.finish=function(){dt.mainContext.finish()},h.flush=function(){var t=Math.max(this._vb.byteLength/64,this._maxNumEle/6)+8;if(t>this._ib.bufferLength/12&&_t.expandIBQuadrangle(this._ib,t),!this._isMain&&V.enabled&&V._atlasRestore>this._atlasResourceChange){this._atlasResourceChange=V._atlasRestore;for(var e=this._submits,i=0,r=e._length;i<r;i++){var a=e[i];10016===a.getRenderType()&&a.checkTexture()}}return this.submitElement(0,this._submits._length),this._path&&this._path.reset(),$.instance&&$.getInstance().reset(),this._curSubmit=tt.RENDERBASE,this._renderKey=0,this._submits._length},h.setPathId=function(t){if(this.mId=t,this.mId!=-1){this.mHaveKey=!1;var e=D.getInstance();e.shapeDic[this.mId]&&(this.mHaveKey=!0),this.mHaveLineKey=!1,e.shapeLineDic[this.mId]&&(this.mHaveLineKey=!0)}},h.movePath=function(t,e){var i=t,r=e;t=this._curMat.a*i+this._curMat.c*r+this._curMat.tx,e=this._curMat.b*i+this._curMat.d*r+this._curMat.ty,this.mX+=t,this.mY+=e},h.beginPath=function(){var t=this._getPath();t.tempArray.length=0,t.closePath=!1,this.mX=0,this.mY=0},h.closePath=function(){this._path.closePath=!0},h.fill=function(t){void 0===t&&(t=!1);var e=this._getPath();this.drawPoly(0,0,e.tempArray,this.fillStyle._color.numColor,0,0,t)},h.stroke=function(){var t=this._getPath();if(this.lineWidth>0){if(this.mId==-1)t.drawLine(0,0,t.tempArray,this.lineWidth,this.strokeStyle._color.numColor);else if(this.mHaveLineKey){var e=D.getInstance().shapeLineDic[this.mId];e.rebuild(t.tempArray),t.setGeomtry(e)}else D.getInstance().addLine(this.mId,t.drawLine(0,0,t.tempArray,this.lineWidth,this.strokeStyle._color.numColor));t.update();var i=[this.mX,this.mY],r=tt.createShape(this,t.ib,t.vb,t.count,t.offset,vt.create(4,0));r.shaderValue.ALPHA=this._shader2D.ALPHA,r.shaderValue.u_pos=i,r.shaderValue.u_mmat2=ct.TEMPMAT4_ARRAY,this._submits[this._submits._length++]=r}},h.line=function(t,e,i,r,a,s){var n=this._curSubmit,h=this._vb;if(_t.fillLineVb(h,this._clipRect,t,e,i,r,a,s)){this._renderKey=0;var l=this._shader2D,o=n.shaderValue;l.strokeStyle===o.strokeStyle&&l.ALPHA===o.ALPHA||(l.glTexture=null,n=this._curSubmit=tt.create(this,this._ib,h,(h._byteLength-64)/32*3,vt.create(2,0)),n.shaderValue.strokeStyle=l.strokeStyle,n.shaderValue.mainID=2,n.shaderValue.ALPHA=l.ALPHA,this._submits[this._submits._length++]=n),n._numEle+=6}},h.moveTo=function(t,e,i){void 0===i&&(i=!0);var r=this._getPath();if(i){var a=t,s=e;t=this._curMat.a*a+this._curMat.c*s,e=this._curMat.b*a+this._curMat.d*s}r.addPoint(t,e)},h.lineTo=function(t,e,i){void 0===i&&(i=!0);var r=this._getPath();if(i){var a=t,s=e;t=this._curMat.a*a+this._curMat.c*s,e=this._curMat.b*a+this._curMat.d*s}r.addPoint(t,e)},h.drawCurves=function(t,e,i){this.setPathId(-1),this.beginPath(),this.strokeStyle=i[3],this.lineWidth=i[4];var r=i[2];t+=i[0],e+=i[1],this.movePath(t,e),this.moveTo(r[0],r[1]);for(var a=2,s=r.length;a<s;)this.quadraticCurveTo(r[a++],r[a++],r[a++],r[a++]);this.stroke()},h.arcTo=function(t,e,i,r,a){if(this.mId==-1||!this.mHaveKey){var s=this._getPath(),n=s.getEndPointX(),h=s.getEndPointY(),l=NaN,o=NaN,u=NaN,_=NaN,c=NaN,f=NaN,d=NaN,m=NaN,p=NaN,g=NaN,v=!1,b=t,x=e;t=this._curMat.a*b+this._curMat.c*x,e=this._curMat.b*b+this._curMat.d*x,b=i,x=r,i=this._curMat.a*b+this._curMat.c*x,r=this._curMat.b*b+this._curMat.d*x,a=this._curMat.a*a+this._curMat.c*a,l=n-t,o=h-e,u=i-t,_=r-e,T.TEMP.setTo(l,o),T.TEMP.normalize(),l=T.TEMP.x,o=T.TEMP.y,T.TEMP.setTo(u,_),T.TEMP.normalize(),u=T.TEMP.x,_=T.TEMP.y,c=Math.acos(l*u+o*_);if((f=a/Math.tan(c/2))>1e4)return void this.lineTo(t,e);l*_-u*o<=0?(d=t+l*f+o*a,m=e+o*f-l*a,p=Math.atan2(l,-o),g=Math.atan2(-u,_),v=!1):(d=t+l*f-o*a,m=e+o*f+l*a,p=Math.atan2(-l,o),g=Math.atan2(u,-_),v=!0),this.arc(d,m,a,p,g,v,!1)}},h.arc=function(t,e,i,r,a,s,n){if(void 0===s&&(s=!1),void 0===n&&(n=!0),this.mId!=-1){var h=D.getInstance().shapeDic[this.mId];if(h&&this.mHaveKey&&!h.needUpdate(this._curMat))return;t=0,e=0}var l=0,o=0,u=0,_=0,c=0,f=0,d=0,m=0,p=0,g=0;if(o=a-r,s)if(Math.abs(o)>=2*Math.PI)o=2*-Math.PI;else for(;o>0;)o-=2*Math.PI;else if(Math.abs(o)>=2*Math.PI)o=2*Math.PI;else for(;o<0;)o+=2*Math.PI;g=i<101?Math.max(10,o*i/5):i<201?Math.max(10,o*i/20):Math.max(10,o*i/40),u=o/g/2,_=Math.abs(4/3*(1-Math.cos(u))/Math.sin(u)),s&&(_=-_);var v=this._getPath(),b=NaN,T=NaN;for(p=0;p<=g;p++)l=r+o*(p/g),c=Math.cos(l),f=Math.sin(l),d=t+c*i,m=e+f*i,n&&(b=d,T=m,d=this._curMat.a*b+this._curMat.c*T,m=this._curMat.b*b+this._curMat.d*T),d==this._path.getEndPointX()&&m==this._path.getEndPointY()||v.addPoint(d,m);c=Math.cos(a),f=Math.sin(a),d=t+c*i,m=e+f*i,n&&(b=d,T=m,d=this._curMat.a*b+this._curMat.c*T,m=this._curMat.b*b+this._curMat.d*T),d==this._path.getEndPointX()&&m==this._path.getEndPointY()||v.addPoint(d,m)},h.quadraticCurveTo=function(t,e,i,r){var a=l.I,s=i,n=r;i=this._curMat.a*s+this._curMat.c*n,r=this._curMat.b*s+this._curMat.d*n,s=t,n=e,t=this._curMat.a*s+this._curMat.c*n,e=this._curMat.b*s+this._curMat.d*n;for(var h=a.getBezierPoints([this._path.getEndPointX(),this._path.getEndPointY(),t,e,i,r],30,2),o=0,u=h.length/2;o<u;o++)this.lineTo(h[2*o],h[2*o+1],!1);this.lineTo(i,r,!1)},h.rect=function(t,e,i,r){this._other=this._other.make(),this._other.path||(this._other.path=new G),this._other.path.rect(t,e,i,r)},h.strokeRect=function(t,e,i,r,a){var s=.5*a;this.line(t-s,e,t+i+s,e,a,this._curMat),this.line(t+i,e,t+i,e+r,a,this._curMat),this.line(t,e,t,e+r,a,this._curMat),this.line(t-s,e+r,t+i+s,e+r,a,this._curMat)},h.clip=function(){},h.drawPoly=function(t,e,i,r,a,s,n){void 0===n&&(n=!1),this._renderKey=0,this._shader2D.glTexture=null;var h=this._getPath();if(this.mId==-1)h.polygon(t,e,i,r,a?a:1,s);else if(this.mHaveKey){var l=D.getInstance().shapeDic[this.mId];l.setMatrix(this._curMat),l.rebuild(h.tempArray),h.setGeomtry(l)}else{var o=h.polygon(t,e,i,r,a?a:1,s);D.getInstance().addShape(this.mId,o),o.setMatrix(this._curMat)}h.update();var u,_=[this.mX,this.mY];if(!n){var c=st.create(4);this.addRenderObject(c),u=tt.createShape(this,h.ib,h.vb,h.count,h.offset,vt.create(4,0)),u.shaderValue.ALPHA=this._shader2D.ALPHA,u.shaderValue.u_pos=_,u.shaderValue.u_mmat2=ct.EMPTYMAT4_ARRAY,this._submits[this._submits._length++]=u,c=st.create(5),this.addRenderObject(c)}if(u=tt.createShape(this,h.ib,h.vb,h.count,h.offset,vt.create(4,0)),u.shaderValue.ALPHA=this._shader2D.ALPHA,u.shaderValue.u_pos=_,u.shaderValue.u_mmat2=ct.EMPTYMAT4_ARRAY,this._submits[this._submits._length++]=u,n||(c=st.create(3),this.addRenderObject(c)),a>0){if(this.mHaveLineKey){var f=D.getInstance().shapeLineDic[this.mId];f.rebuild(h.tempArray),h.setGeomtry(f)}else D.getInstance().addShape(this.mId,h.drawLine(t,e,i,a,s));h.update(),u=tt.createShape(this,h.ib,h.vb,h.count,h.offset,vt.create(4,0)),u.shaderValue.ALPHA=this._shader2D.ALPHA,u.shaderValue.u_mmat2=ct.EMPTYMAT4_ARRAY,this._submits[this._submits._length++]=u}},h.drawParticle=function(t,e,i){i.x=t,i.y=e,this._submits[this._submits._length++]=i},h._getPath=function(){return this._path||(this._path=new G)},s(0,h,"globalCompositeOperation",function(){return H.NAMES[this._nBlendType]},function(t){var e=H.TOINT[t];null==e||this._nBlendType===e||(z.save(this,65536,this,!0),this._curSubmit=tt.RENDERBASE,this._renderKey=0,this._nBlendType=e)}),s(0,h,"strokeStyle",function(){return this._shader2D.strokeStyle},function(t){this._shader2D.strokeStyle.equal(t)||(z.save(this,512,this._shader2D,!1),this._shader2D.strokeStyle=k.create(t))}),s(0,h,"globalAlpha",function(){return this._shader2D.ALPHA},function(t){(t=Math.floor(1e3*t)/1e3)!=this._shader2D.ALPHA&&(z.save(this,1,this._shader2D,!0),this._shader2D.ALPHA=t)}),s(0,h,"asBitmap",null,function(t){if(t){if(this._targets||(this._targets=new Q),this._targets.repaint=!0,!this._width||!this._height)throw Error("asBitmap no size!");this._targets.setSP(this.sprite),this._targets.size(this._width,this._height)}else this._targets=null}),s(0,h,"fillStyle",function(){return this._shader2D.fillStyle},function(t){this._shader2D.fillStyle.equal(t)||(z.save(this,2,this._shader2D,!1),this._shader2D.fillStyle=k.create(t))}),s(0,h,"textAlign",function(){return this._other.textAlign},function(t){this._other.textAlign===t||(this._other=this._other.make(),z.save(this,32768,this._other,!1),this._other.textAlign=t)}),s(0,h,"lineWidth",function(){return this._other.lineWidth},function(t){
this._other.lineWidth===t||(this._other=this._other.make(),z.save(this,256,this._other,!1),this._other.lineWidth=t)}),s(0,h,"textBaseline",function(){return this._other.textBaseline},function(t){this._other.textBaseline===t||(this._other=this._other.make(),z.save(this,16384,this._other,!1),this._other.textBaseline=t)}),s(0,h,"font",null,function(t){t!=this._other.font.toString()&&(this._other=this._other.make(),z.save(this,8,this._other,!1),this._other.font===ot.EMPTY?this._other.font=new ot(t):this._other.font.setFont(t))}),e.__init__=function(){n.DEFAULT=new n},e._SUBMITVBSIZE=32e3,e._MAXSIZE=99999999,e._RECTVBSIZE=16,e.MAXCLIPRECT=new x(0,0,99999999,99999999),e._COUNT=0,e._tmpMatrix=new b,r(e,["_fontTemp",function(){return this._fontTemp=new ot},"_drawStyleTemp",function(){return this._drawStyleTemp=new k(null)}]),e.__init$=function(){n=function(){function t(){this.lineWidth=1,this.path=null,this.textAlign=null,this.textBaseline=null,this.font=ot.EMPTY}a(t,"");var e=t.prototype;return e.clear=function(){this.lineWidth=1,this.path&&this.path.clear(),this.textAlign=this.textBaseline=null,this.font=ot.EMPTY},e.make=function(){return this===t.DEFAULT?new t:this},t.DEFAULT=null,t}()},e}(f),vt=function(t){function e(t,i){this.size=[0,0],this.alpha=1,this.ALPHA=1,this.subID=0,this._cacheID=0,e.__super.call(this),this.defines=new yt,this.position=e._POSITION,this.mainID=t,this.subID=i,this.textureHost=null,this.texture=null,this.fillStyle=null,this.color=null,this.strokeStyle=null,this.colorAdd=null,this.glTexture=null,this.u_mmat2=null,this._cacheID=t|i,this._inClassCache=e._cache[this._cacheID],t>0&&!this._inClassCache&&(this._inClassCache=e._cache[this._cacheID]=[],this._inClassCache._length=0),this.clear()}a(e,"laya.webgl.shader.d2.value.Value2D",t);var i=e.prototype;return i.setValue=function(t){},i.refresh=function(){var t=this.size;return t[0]=ct.width,t[1]=ct.height,this.alpha=this.ALPHA*ct.worldAlpha,this.mmat=ct.worldMatrix4,this},i._ShaderWithCompile=function(){return kt.withCompile2D(0,this.mainID,this.defines.toNameDic(),this.mainID|this.defines._value,Wt.create)},i._withWorldShaderDefines=function(){var t=ct.worldShaderDefines,e=kt.sharders[this.mainID|this.defines._value|t.getValue()];if(!e){var i,r,a={};i=this.defines.toNameDic();for(r in i)a[r]="";i=t.toNameDic();for(r in i)a[r]="";e=kt.withCompile2D(0,this.mainID,a,this.mainID|this.defines._value|t.getValue(),Wt.create)}var s=ct.worldFilters;if(!s)return e;for(var n,h=s.length,l=0;l<h;l++)(n=s[l])&&n.action.setValue(this);return e},i.upload=function(){var t=ct;this.alpha=this.ALPHA*t.worldAlpha,ct.worldMatrix4!==ct.TEMPMAT4_ARRAY&&this.defines.add(128),dt.frameShaderHighPrecision&&this.defines.add(1024);var e,i=t.worldShaderDefines?this._withWorldShaderDefines():kt.sharders[this.mainID|this.defines._value]||this._ShaderWithCompile();this.size[0]=t.width,this.size[1]=t.height,this.mmat=t.worldMatrix4,It.activeShader!==i?(i._shaderValueWidth!==t.width||i._shaderValueHeight!==t.height?(i._shaderValueWidth=t.width,i._shaderValueHeight=t.height):e=i._params2dQuick2||i._make2dQuick2(),i.upload(this,e)):(i._shaderValueWidth!==t.width||i._shaderValueHeight!==t.height?(i._shaderValueWidth=t.width,i._shaderValueHeight=t.height):e=i._params2dQuick1||i._make2dQuick1(),i.upload(this,e))},i.setFilters=function(t){if(this.filters=t,t)for(var e,i=t.length,r=0;r<i;r++)(e=t[r])&&(this.defines.add(e.type),e.action.setValue(this))},i.clear=function(){this.defines.setValue(this.subID)},i.release=function(){this._inClassCache[this._inClassCache._length++]=this,this.fillStyle=null,this.strokeStyle=null,this.clear()},e._initone=function(t,i){e._typeClass[t]=i,e._cache[t]=[],e._cache[t]._length=0},e.__init__=function(){e._POSITION=[2,5126,!1,4*ut.BYTES_PE,0],e._TEXCOORD=[2,5126,!1,4*ut.BYTES_PE,2*ut.BYTES_PE],e._initone(2,Pt),e._initone(4,Bt),e._initone(256,Ft),e._initone(512,Lt),e._initone(1,Dt),e._initone(65,zt),e._initone(9,Dt)},e.create=function(t,i){var r=e._cache[t|i];return r._length?r[--r._length]:new e._typeClass[t|i](i)},e._POSITION=null,e._TEXCOORD=null,e._cache=[],e._typeClass=[],e.TEMPMAT4_ARRAY=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1],e}(N),bt=function(t){function e(t,i){e.__super.call(this,t,i)}a(e,"laya.webgl.utils.RenderSprite3D",t);var i=e.prototype;return i.onCreate=function(t){switch(t){case 8:return void(this._fun=this._blend);case 4:return void(this._fun=this._transform)}},i._mask=function(t,i,r,a){var s,n,h=this._next,l=t.mask;if(l){i.ctx.save();var o=i.ctx.globalCompositeOperation,u=new x;if(u.copyFrom(l.getBounds()),u.width=Math.round(u.width),u.height=Math.round(u.height),u.x=Math.round(u.x),u.y=Math.round(u.y),u.width>0&&u.height>0){var _=it.create();_.addValue("bounds",u),s=et.create([_,i],laya.webgl.utils.RenderSprite3D.tmpTarget),i.addRenderObject(s),l.render(i,-u.x,-u.y),s=et.create([_],laya.webgl.utils.RenderSprite3D.endTmpTarget),i.addRenderObject(s),i.ctx.save(),i.clipRect(r+u.x,a+u.y,u.width,u.height),h._fun.call(h,t,i,r,a),i.ctx.restore(),n=st.create(6),o=i.ctx.globalCompositeOperation,n.blendMode="mask",i.addRenderObject(n),b.TEMP.identity();var c=vt.create(1,0),f=P.INV_UV,d=u.width,m=u.height;(u.width<32||u.height<32)&&(f=e.tempUV,f[0]=0,f[1]=0,f[2]=u.width>=32?1:u.width/32,f[3]=0,f[4]=u.width>=32?1:u.width/32,f[5]=u.height>=32?1:u.height/32,f[6]=0,f[7]=u.height>=32?1:u.height/32,u.width=u.width>=32?u.width:32,u.height=u.height>=32?u.height:32,f[1]*=-1,f[3]*=-1,f[5]*=-1,f[7]*=-1,f[1]+=1,f[3]+=1,f[5]+=1,f[7]+=1),i.ctx.drawTarget(_,r+u.x,a+u.y,d,m,b.TEMP,"tmpTarget",c,f,6),s=et.create([_],laya.webgl.utils.RenderSprite3D.recycleTarget),i.addRenderObject(s),n=st.create(6),n.blendMode=o,i.addRenderObject(n)}i.ctx.restore()}else h._fun.call(h,t,i,r,a)},i._blend=function(t,e,i,r){var a=t._style,s=this._next;a.blendMode?(e.ctx.save(),e.ctx.globalCompositeOperation=a.blendMode,s._fun.call(s,t,e,i,r),e.ctx.restore()):s._fun.call(s,t,e,i,r)},i._transform=function(t,e,i,r){"use strict";var a=t.transform,s=this._next;if(a&&s!=A.NORENDER){var n=e.ctx;t._style;a.tx=i,a.ty=r;var h=n._getTransformMatrix(),l=h.clone();b.mul(a,h,h),h._checkTransform(),a.tx=a.ty=0,s._fun.call(s,t,e,0,0),l.copyTo(h),l.destroy()}else s._fun.call(s,t,e,i,r)},e.tmpTarget=function(t,e){var i=t.getValue("bounds"),r=Ct.create(i.width,i.height);r.start(),r.clear(0,0,0,0),t.addValue("tmpTarget",r)},e.endTmpTarget=function(t){t.getValue("tmpTarget").end()},e.recycleTarget=function(t){t.getValue("tmpTarget").recycle(),t.recycle()},r(e,["tempUV",function(){return this.tempUV=new Array(8)}]),e}(A),Tt=function(t){function e(){this.data=null,e.__super.call(this)}a(e,"laya.filters.webgl.ColorFilterActionGL",t);var r=e.prototype;return i.imps(r,{"laya.filters.IFilterActionGL":!0}),r.setValue=function(t){t.colorMat=this.data._mat,t.colorAlpha=this.data._alpha},r.apply3d=function(t,e,i,r,a){var s=t.getValue("bounds"),n=vt.create(1,0);n.setFilters([this.data]);var h=b.TEMP;h.identity(),i.ctx.drawTarget(t,0,0,s.width,s.height,h,"src",n)},e}(B),xt=function(t){function e(t,i,r,a,s){this._atlasCanvas=null,this._inAtlasTextureKey=null,this._inAtlasTextureBitmapValue=null,this._inAtlasTextureOriUVValue=null,this._InAtlasWebGLImagesKey=null,this._InAtlasWebGLImagesOffsetValue=null,e.__super.call(this,t,i,s),this._inAtlasTextureKey=[],this._inAtlasTextureBitmapValue=[],this._inAtlasTextureOriUVValue=[],this._InAtlasWebGLImagesKey=[],this._InAtlasWebGLImagesOffsetValue=[],this._atlasCanvas=new Nt,this._atlasCanvas.width=r,this._atlasCanvas.height=a,this._atlasCanvas.activeResource(),this._atlasCanvas.lock=!0}a(e,"laya.webgl.atlas.Atlaser",t);var i=e.prototype;return i.computeUVinAtlasTexture=function(t,e,i,r){var a=V.atlasTextureWidth,s=V.atlasTextureHeight,n=i/a,h=r/s,l=(i+t.bitmap.width)/a,o=(r+t.bitmap.height)/s,u=t.bitmap.width/a,_=t.bitmap.height/s;t.uv=[n+e[0]*u,h+e[1]*_,l-(1-e[2])*u,h+e[3]*_,l-(1-e[4])*u,o-(1-e[5])*_,n+e[6]*u,o-(1-e[7])*_]},i.addToAtlasTexture=function(t,e,i){t instanceof laya.webgl.resource.WebGLImage&&(this._InAtlasWebGLImagesKey.push(t),this._InAtlasWebGLImagesOffsetValue.push([e,i])),this._atlasCanvas.texSubImage2D(e,i,t.atlasSource),t.clearAtlasSource()},i.addToAtlas=function(t,e,i){var r=t.uv.slice(),a=t.bitmap;this._inAtlasTextureKey.push(t),this._inAtlasTextureOriUVValue.push(r),this._inAtlasTextureBitmapValue.push(a),this.computeUVinAtlasTexture(t,r,e,i),t.bitmap=this._atlasCanvas},i.clear=function(){for(var t=0,e=this._inAtlasTextureKey.length;t<e;t++)this._inAtlasTextureKey[t].bitmap=this._inAtlasTextureBitmapValue[t],this._inAtlasTextureKey[t].uv=this._inAtlasTextureOriUVValue[t],this._inAtlasTextureKey[t].bitmap.lock=!1,this._inAtlasTextureKey[t].bitmap.releaseResource();this._inAtlasTextureKey.length=0,this._inAtlasTextureBitmapValue.length=0,this._inAtlasTextureOriUVValue.length=0,this._InAtlasWebGLImagesKey.length=0,this._InAtlasWebGLImagesOffsetValue.length=0},i.dispose=function(){this.clear(),this._atlasCanvas.dispose()},s(0,i,"InAtlasWebGLImagesOffsetValue",function(){return this._InAtlasWebGLImagesOffsetValue}),s(0,i,"texture",function(){return this._atlasCanvas}),s(0,i,"inAtlasWebGLImagesKey",function(){return this._InAtlasWebGLImagesKey}),e}(O),yt=function(t){function e(){e.__super.call(this,e.__name2int,e.__int2name,e.__int2nameMap)}return a(e,"laya.webgl.shader.d2.ShaderDefines2D",t),e.__init__=function(){e.reg("TEXTURE2D",1),e.reg("COLOR2D",2),e.reg("PRIMITIVE",4),e.reg("GLOW_FILTER",8),e.reg("BLUR_FILTER",16),e.reg("COLOR_FILTER",32),e.reg("COLOR_ADD",64),e.reg("WORLDMAT",128),e.reg("FILLTEXTURE",256),e.reg("FSHIGHPRECISION",1024)},e.reg=function(t,i){q._reg(t,i,e.__name2int,e.__int2name)},e.toText=function(t,e,i){return q._toText(t,e,i)},e.toInt=function(t){return q._toInt(t,e.__name2int)},e.TEXTURE2D=1,e.COLOR2D=2,e.PRIMITIVE=4,e.FILTERGLOW=8,e.FILTERBLUR=16,e.FILTERCOLOR=32,e.COLORADD=64,e.WORLDMAT=128,e.FILLTEXTURE=256,e.SKINMESH=512,e.SHADERDEFINE_FSHIGHPRECISION=1024,e.__name2int={},e.__int2name=[],e.__int2nameMap=[],e}(q),At=(function(t){function e(t,i,r,a,s,n,h){e.__super.call(this,t,i,r,a,40,s,n,h)}a(e,"laya.webgl.shapes.Ellipse",t),e}(J),function(t){function e(t,i,r,a,s){this._points=[],this.rebuild(r),e.__super.call(this,t,i,0,0,0,s,a,s,0)}a(e,"laya.webgl.shapes.Line",t);var i=e.prototype;return i.rebuild=function(t){var e=t.length;e!=this._points.length&&(this.mUint16Array=new Uint16Array(6*(e/2-1)),this.mFloat32Array=new Float32Array(5*e)),this._points.length=0;for(var i=NaN,r=NaN,a=-1,s=-1,n=t.length/2,h=0;h<n;h++)i=t[2*h],r=t[2*h+1],(Math.abs(a-i)>.01||Math.abs(s-r)>.01)&&this._points.push(i,r),a=i,s=r},i.getData=function(t,e,i){var r=[],a=[];this.borderWidth>0&&this.createLine2(this._points,r,this.borderWidth,i,a,this._points.length/2),this.mUint16Array.set(r,0),this.mFloat32Array.set(a,0),t.append(this.mUint16Array),e.append(this.mFloat32Array)},e}(J)),Et=function(t){function e(t,i,r,a,s){this._points=[];for(var n=NaN,h=NaN,l=-1,o=-1,u=r.length/2-1,_=0;_<u;_++)n=r[2*_],h=r[2*_+1],(Math.abs(l-n)>.01||Math.abs(o-h)>.01)&&this._points.push(n,h),l=n,o=h;n=r[2*u],h=r[2*u+1],l=this._points[0],o=this._points[1],(Math.abs(l-n)>.01||Math.abs(o-h)>.01)&&this._points.push(n,h),e.__super.call(this,t,i,0,0,this._points.length/2,0,a,s)}a(e,"laya.webgl.shapes.LoopLine",t);var i=e.prototype;return i.getData=function(t,e,i){if(this.borderWidth>0){for(var r=this.color,a=(r>>16&255)/255,s=(r>>8&255)/255,n=(255&r)/255,h=[],l=0,o=0,u=[],_=Math.floor(this._points.length/2),c=0;c<_;c++)l=this._points[2*c],o=this._points[2*c+1],h.push(this.x+l,this.y+o,a,s,n);this.createLoopLine(h,u,this.borderWidth,i+h.length/5),t.append(new Uint16Array(u)),e.append(new Float32Array(h))}},i.createLoopLine=function(t,e,i,r,a,s){var n=(t.length,t.concat()),h=a?a:t,l=this.borderColor,o=(l>>16&255)/255,u=(l>>8&255)/255,_=(255&l)/255,c=[n[0],n[1]],f=[n[n.length-5],n[n.length-4]],d=f[0]+.5*(c[0]-f[0]),m=f[1]+.5*(c[1]-f[1]);n.unshift(d,m,0,0,0),n.push(d,m,0,0,0);var p,g,v,b,T,x,y,A,E,S,w,R,I,C,M,L,P,F,D,B,N=n.length/5,O=r,V=i/2;v=n[0],b=n[1],T=n[5],x=n[6],E=-(b-x),S=v-T,B=Math.sqrt(E*E+S*S),E=E/B*V,S=S/B*V,h.push(v-E,b-S,o,u,_,v+E,b+S,o,u,_);for(var U=1;U<N-1;U++)v=n[5*(U-1)],b=n[5*(U-1)+1],T=n[5*U],x=n[5*U+1],y=n[5*(U+1)],A=n[5*(U+1)+1],E=-(b-x),S=v-T,B=Math.sqrt(E*E+S*S),E=E/B*V,S=S/B*V,w=-(x-A),R=T-y,B=Math.sqrt(w*w+R*R),w=w/B*V,R=R/B*V,I=-S+b-(-S+x),C=-E+T-(-E+v),M=(-E+v)*(-S+x)-(-E+T)*(-S+b),L=-R+A-(-R+x),P=-w+T-(-w+y),F=(-w+y)*(-R+x)-(-w+T)*(-R+A),D=I*P-L*C,Math.abs(D)<.1?(D+=10.1,h.push(T-E,x-S,o,u,_,T+E,x+S,o,u,_)):(p=(C*F-P*M)/D,g=(L*M-I*F)/D,(p-T)*(p-T)+(g-x)+(g-x),h.push(p,g,o,u,_,T-(p-T),x-(g-x),o,u,_));s&&(e=s);var H=this.edges+1;for(U=1;U<H;U++)e.push(O+2*(U-1),O+2*(U-1)+1,O+2*U+1,O+2*U+1,O+2*U,O+2*(U-1));return e.push(O+2*(U-1),O+2*(U-1)+1,O+1,O+1,O,O+2*(U-1)),h},e}(J),St=function(t){function e(t,i,r,a,s,n){this._points=null,this._start=-1,this._repaint=!1,this._mat=b.create(),this._points=r.slice(0,r.length),e.__super.call(this,t,i,0,0,this._points.length/2,a,s,n)}a(e,"laya.webgl.shapes.Polygon",t);var i=e.prototype;return i.rebuild=function(t){this._repaint||(this._points.length=0,this._points=this._points.concat(t))},i.setMatrix=function(t){t.copyTo(this._mat)},i.needUpdate=function(t){return this._repaint=this._mat.a==t.a&&this._mat.b==t.b&&this._mat.c==t.c&&this._mat.d==t.d&&this._mat.tx==t.tx&&this._mat.ty==t.ty,!this._repaint},i.getData=function(t,e,i){var r,a=0,s=this._points,n=0;if(this.mUint16Array&&this.mFloat32Array&&this._repaint){if(this._start!=i){for(this._start=i,r=[],n=Math.floor(s.length/2),a=2;a<n;a++)r.push(i,i+a-1,i+a);this.mUint16Array=new Uint16Array(r)}}else{this._start=i,r=[];var h=[],l=this.color,o=(l>>16&255)/255,u=(l>>8&255)/255,_=(255&l)/255;for(n=Math.floor(s.length/2),a=0;a<n;a++)h.push(this.x+s[2*a],this.y+s[2*a+1],o,u,_);for(a=2;a<n;a++)r.push(i,i+a-1,i+a);this.mUint16Array=new Uint16Array(r),this.mFloat32Array=new Float32Array(h)}t.append(this.mUint16Array),e.append(this.mFloat32Array)},e}(J),wt=function(t){function e(){this._matrix=new b,this._matrix4=ut.defaultMatrix4.concat(),e.__super.call(this,1e4),this.shaderValue=new vt(0,0)}a(e,"laya.webgl.submit.SubmitCanvas",t);var i=e.prototype;return i.renderSubmit=function(){if(this._ctx_src._targets)return this._ctx_src._targets.flush(this._ctx_src),1;var t=ct.worldAlpha,e=ct.worldMatrix4,i=ct.worldMatrix,r=ct.worldFilters,a=ct.worldShaderDefines,s=this.shaderValue,n=this._matrix,h=this._matrix4,l=b.TEMP;return b.mul(n,i,l),h[0]=l.a,h[1]=l.b,h[4]=l.c,h[5]=l.d,h[12]=l.tx,h[13]=l.ty,ct.worldMatrix=l.clone(),ct.worldMatrix4=h,ct.worldAlpha=ct.worldAlpha*s.alpha,s.filters&&s.filters.length&&(ct.worldFilters=s.filters,ct.worldShaderDefines=s.defines),this._ctx_src.flush(),ct.worldAlpha=t,ct.worldMatrix4=e,ct.worldMatrix.destroy(),ct.worldMatrix=i,ct.worldFilters=r,ct.worldShaderDefines=a,1},i.releaseRender=function(){var t=e._cache;this._ctx_src=null,t[t._length++]=this},i.getRenderType=function(){return 10003},e.create=function(t,i,r){var a=e._cache._length?e._cache[--e._cache._length]:new e;a._ctx_src=t;var s=a.shaderValue;return s.alpha=i,s.defines.setValue(0),r&&r.length&&s.setFilters(r),a},e._cache=(e._cache=[],e._cache._length=0,e._cache),e}(tt),Rt=function(t){function e(t){this._preIsSameTextureShader=!1,this._isSameTexture=!0,this._texs=new Array,this._texsID=new Array,this._vbPos=new Array,void 0===t&&(t=1e4),e.__super.call(this,t)}a(e,"laya.webgl.submit.SubmitTexture",t);var i=e.prototype;return i.releaseRender=function(){var t=e._cache;t[t._length++]=this,this.shaderValue.release(),this._preIsSameTextureShader=!1,this._vb=null,this._texs.length=0,this._vbPos.length=0,this._isSameTexture=!0},i.addTexture=function(t,e){this._texsID[this._texs.length]=t._uvID,this._texs.push(t),this._vbPos.push(e)},i.checkTexture=function(){if(this._texs.length<1)return void(this._isSameTexture=!0);var t=this.shaderValue.textureHost,e=t.bitmap;if(null!==e)for(var i=this._vb.getFloat32Array(),r=0,a=this._texs.length;r<a;r++){var s=this._texs[r];s.active();var n=s.uv;if(this._texsID[r]!==s._uvID){this._texsID[r]=s._uvID;var h=this._vbPos[r];i[h+2]=n[0],i[h+3]=n[1],i[h+6]=n[2],i[h+7]=n[3],i[h+10]=n[4],i[h+11]=n[5],i[h+14]=n[6],i[h+15]=n[7],this._vb.setNeedUpload()}s.bitmap!==e&&(this._isSameTexture=!1)}},i.renderSubmit=function(){if(0===this._numEle)return e._shaderSet=!1,1;var t=this.shaderValue.textureHost;if(t){var i=t.source;if(!t.bitmap||!i)return e._shaderSet=!1,1;this.shaderValue.texture=i}this._vb.bind_upload(this._ib);var r=dt.mainContext;if(H.activeBlendFunction!==this._blendFn&&(r.enable(3042),this._blendFn(r),H.activeBlendFunction=this._blendFn),I.drawCall++,I.trianglesFaces+=this._numEle/3,this._preIsSameTextureShader&&It.activeShader&&e._shaderSet?It.activeShader.uploadTexture2D(this.shaderValue.texture):this.shaderValue.upload(),e._shaderSet=!0,this._texs.length>1&&!this._isSameTexture)for(var a=t.bitmap,s=0,n=It.activeShader,h=0,l=this._texs.length;h<l;h++){var o=this._texs[h];o.bitmap===a&&h+1!==l||(n.uploadTexture2D(o.source),r.drawElements(4,6*(h-s+1),5123,this._startIdx+6*s*ut.BYTES_PIDX),a=o.bitmap,s=h)}else r.drawElements(4,this._numEle,5123,this._startIdx);return 1},e.create=function(t,i,r,a,s){var n=e._cache._length?e._cache[--e._cache._length]:new e;null==r&&(r=n._selfVb||(n._selfVb=Yt.create(-1)),r.clear(),a=0),n._ib=i,n._vb=r,n._startIdx=a*ut.BYTES_PIDX,n._numEle=0;var h=t._nBlendType;n._blendFn=t._targets?H.targetFns[h]:H.fns[h],n.shaderValue=s,n.shaderValue.setValue(t._shader2D);var l=t._shader2D.filters;return l&&n.shaderValue.setFilters(l),n},e._cache=(e._cache=[],e._cache._length=0,e._cache),e._shaderSet=!0,e}(tt),It=function(t){function e(){e.__super.call(this)}return a(e,"laya.webgl.shader.BaseShader",t),e.activeShader=null,e.bindShader=null,e}(E),Ct=function(t){function e(t,i,r,a,s,n,h,l,o){this._type=0,this._svWidth=NaN,this._svHeight=NaN,this._preRenderTarget=null,this._alreadyResolved=!1,this._looked=!1,this._surfaceFormat=0,this._surfaceType=0,this._depthStencilFormat=0,this._mipMap=!1,this._repeat=!1,this._minFifter=0,this._magFifter=0,this._destroy=!1,void 0===r&&(r=6408),void 0===a&&(a=5121),void 0===s&&(s=34041),void 0===n&&(n=!1),void 0===h&&(h=!1),void 0===l&&(l=-1),void 0===o&&(o=-1),this._type=1,this._w=t,this._h=i,this._surfaceFormat=r,this._surfaceType=a,this._depthStencilFormat=s,this._mipMap=n,this._repeat=h,this._minFifter=l,this._magFifter=o,this._createWebGLRenderTarget(),this.bitmap.lock=!0,e.__super.call(this,this.bitmap,P.INV_UV)}a(e,"laya.webgl.resource.RenderTarget2D",t);var r=e.prototype;return i.imps(r,{"laya.resource.IDispose":!0}),r.getType=function(){return this._type},r.getTexture=function(){return this},r.size=function(t,e){this._w==t&&this._h==e||(this._w=t,this._h=e,this.release(),0!=this._w&&0!=this._h&&this._createWebGLRenderTarget())},r.release=function(){this.destroy()},r.recycle=function(){e.POOL.push(this)},r.start=function(){var t=dt.mainContext;return this._preRenderTarget=ct.curRenderTarget,ct.curRenderTarget=this,t.bindFramebuffer(36160,this.bitmap.frameBuffer),this._alreadyResolved=!1,1==this._type&&(t.viewport(0,0,this._w,this._h),this._svWidth=ct.width,this._svHeight=ct.height,ct.width=this._w,ct.height=this._h,It.activeShader=null),this},r.clear=function(t,e,i,r){void 0===t&&(t=0),void 0===e&&(e=0),void 0===i&&(i=0),void 0===r&&(r=1);var a=dt.mainContext;a.clearColor(t,e,i,r);var s=16384;switch(this._depthStencilFormat){case 33189:s|=256;break;case 36168:s|=1024;break;case 34041:s|=256,s|=1024}a.clear(s)},r.end=function(){var t=dt.mainContext;t.bindFramebuffer(36160,this._preRenderTarget?this._preRenderTarget.bitmap.frameBuffer:null),this._alreadyResolved=!0,ct.curRenderTarget=this._preRenderTarget,1==this._type?(t.viewport(0,0,this._svWidth,this._svHeight),ct.width=this._svWidth,ct.height=this._svHeight,It.activeShader=null):t.viewport(0,0,i.stage.width,i.stage.height)},r.getData=function(t,e,i,r){var a=dt.mainContext;if(a.bindFramebuffer(36160,this.bitmap.frameBuffer),!(36053===a.checkFramebufferStatus(36160)))return a.bindFramebuffer(36160,null),null;var s=new Uint8Array(this._w*this._h*4);return a.readPixels(t,e,i,r,this._surfaceFormat,this._surfaceType,s),a.bindFramebuffer(36160,null),s},r.destroy=function(e){void 0===e&&(e=!1),this._destroy||(this._loaded=!1,this.bitmap.offAll(),this.bitmap.detoryResource(),this.bitmap.dispose(),this.offAll(),this.bitmap=null,this._alreadyResolved=!1,this._destroy=!0,t.prototype.destroy.call(this))},r.dispose=function(){},r._createWebGLRenderTarget=function(){this.bitmap=new Ut(this.width,this.height,this._surfaceFormat,this._surfaceType,this._depthStencilFormat,this._mipMap,this._repeat,this._minFifter,this._magFifter),this.bitmap.activeResource(),this._alreadyResolved=!0,this._destroy=!1,this._loaded=!0,this.bitmap.on("recovered",this,function(t){this.event("recovered")})},s(0,r,"surfaceFormat",function(){return this._surfaceFormat}),s(0,r,"magFifter",function(){return this._magFifter}),s(0,r,"surfaceType",function(){return this._surfaceType}),s(0,r,"mipMap",function(){return this._mipMap}),s(0,r,"depthStencilFormat",function(){return this._depthStencilFormat}),s(0,r,"minFifter",function(){return this._minFifter}),s(0,r,"source",function(){return this._alreadyResolved?t.prototype._$get_source.call(this):null}),e.create=function(t,i,r,a,s,n,h,l,o){void 0===r&&(r=6408),void 0===a&&(a=5121),void 0===s&&(s=34041),void 0===n&&(n=!1),void 0===h&&(h=!1),void 0===l&&(l=-1),void 0===o&&(o=-1);var u=e.POOL.pop();return u||(u=new e(t,i)),u.bitmap&&u._w==t&&u._h==i&&u._surfaceFormat==r&&u._surfaceType==a&&u._depthStencilFormat==s&&u._mipMap==n&&u._repeat==h&&u._minFifter==l&&u._magFifter==o||(u._w=t,u._h=i,u._surfaceFormat=r,u._surfaceType=a,u._depthStencilFormat=s,u._mipMap=n,u._repeat=h,u._minFifter=l,u._magFifter=o,u.release(),u._createWebGLRenderTarget()),u},e.TYPE2D=1,e.TYPE3D=2,e.POOL=[],e}(P),Mt=function(t){function e(){this._glBuffer=null,this._buffer=null,this._bufferType=0,this._bufferUsage=0,this._byteLength=0,e.__super.call(this),e._gl=dt.mainContext}a(e,"laya.webgl.utils.Buffer",t);var i=e.prototype;return i._bind=function(){this.activeResource(),e._bindActive[this._bufferType]===this._glBuffer||(e._gl.bindBuffer(this._bufferType,e._bindActive[this._bufferType]=this._glBuffer),It.activeShader=null)},i.recreateResource=function(){this.startCreate(),this._glBuffer||(this._glBuffer=e._gl.createBuffer()),this.completeCreate()},i.detoryResource=function(){this._glBuffer&&(dt.mainContext.deleteBuffer(this._glBuffer),this._glBuffer=null),this.memorySize=0},i.dispose=function(){this.resourceManager.removeResource(this),t.prototype.dispose.call(this)},s(0,i,"byteLength",function(){return this._byteLength}),s(0,i,"bufferType",function(){return this._bufferType}),s(0,i,"bufferUsage",function(){return this._bufferUsage}),e._gl=null,e._bindActive={},e}(E),Lt=function(t){function e(t){this.texcoord=null,this.offsetX=300,this.offsetY=0,e.__super.call(this,512,0);var i=8*ut.BYTES_PE;this.position=[2,5126,!1,i,0],this.texcoord=[2,5126,!1,i,2*ut.BYTES_PE],this.color=[4,5126,!1,i,4*ut.BYTES_PE]}return a(e,"laya.webgl.shader.d2.skinAnishader.SkinSV",t),e}(vt),Pt=function(t){function e(t){e.__super.call(this,2,0),this.color=[]}return a(e,"laya.webgl.shader.d2.value.Color2dSV",t),e.prototype.setValue=function(t){t.fillStyle&&(this.color=t.fillStyle._color._color),t.strokeStyle&&(this.color=t.strokeStyle._color._color)},e}(vt),Ft=function(t){function e(t){this.u_colorMatrix=null,this.strength=0,this.colorMat=null,this.colorAlpha=null,this.u_TexRange=[0,1,0,1],this.u_offset=[0,0],this.texcoord=vt._TEXCOORD,e.__super.call(this,256,0)}a(e,"laya.webgl.shader.d2.value.FillTextureSV",t);var i=e.prototype;return i.setValue=function(t){this.ALPHA=t.ALPHA,t.filters&&this.setFilters(t.filters)},i.clear=function(){this.texture=null,this.shader=null,this.defines.setValue(0)},e}(vt),Dt=function(t){function e(t){this.u_colorMatrix=null,this.strength=0,this.blurInfo=null,this.colorMat=null,this.colorAlpha=null,this.texcoord=vt._TEXCOORD,void 0===t&&(t=0),e.__super.call(this,1,t)}a(e,"laya.webgl.shader.d2.value.TextureSV",t);var i=e.prototype;return i.setValue=function(t){this.ALPHA=t.ALPHA,t.filters&&this.setFilters(t.filters)},i.clear=function(){this.texture=null,this.shader=null,this.defines.setValue(0)},e}(vt),Bt=function(t){function e(t){this.a_color=null,this.u_pos=[0,0],e.__super.call(this,4,0),this.position=[2,5126,!1,5*ut.BYTES_PE,0],this.a_color=[3,5126,!1,5*ut.BYTES_PE,2*ut.BYTES_PE]}return a(e,"laya.webgl.shader.d2.value.PrimitiveSV",t),e}(vt),Nt=function(t){function e(){this._flashCacheImage=null,this._flashCacheImageNeedFlush=!1,e.__super.call(this)}a(e,"laya.webgl.atlas.AtlasWebGLCanvas",t);var i=e.prototype;return i.recreateResource=function(){this.startCreate();var t=dt.mainContext,e=this._source=t.createTexture(),i=mt.curBindTexTarget,r=mt.curBindTexValue;mt.bindTexture(t,3553,e),t.texImage2D(3553,0,6408,this._w,this._h,0,6408,5121,null),t.texParameteri(3553,10241,9729),t.texParameteri(3553,10240,9729),t.texParameteri(3553,10242,33071),t.texParameteri(3553,10243,33071),i&&r&&mt.bindTexture(t,i,r),this.memorySize=this._w*this._h*4,this.completeCreate()},i.detoryResource=function(){this._source&&(dt.mainContext.deleteTexture(this._source),this._source=null,this.memorySize=0)},i.texSubImage2D=function(t,e,i){if(y.isFlash){this._flashCacheImage||(this._flashCacheImage=g.create(""),this._flashCacheImage.image.createCanvas(this._w,this._h));var r=i.bitmapdata;t-1>=0&&this._flashCacheImage.image.copyPixels(r,0,0,r.width-1,r.height,t,e),t+1<=this._w&&this._flashCacheImage.image.copyPixels(r,0,0,r.width+1,r.height,t,e),e-1>=0&&this._flashCacheImage.image.copyPixels(r,0,0,r.width,r.height-1,t,e),e+1<=this._h&&this._flashCacheImage.image.copyPixels(r,0,0,r.width+1,r.height,t,e),this._flashCacheImage.image.copyPixels(r,0,0,r.width,r.height,t,e),this._flashCacheImageNeedFlush||(this._flashCacheImageNeedFlush=!0)}else{var a=dt.mainContext,s=mt.curBindTexTarget,n=mt.curBindTexValue;mt.bindTexture(a,3553,this._source),t-1>=0&&a.texSubImage2D(3553,0,t-1,e,6408,5121,i),t+1<=this._w&&a.texSubImage2D(3553,0,t+1,e,6408,5121,i),e-1>=0&&a.texSubImage2D(3553,0,t,e-1,6408,5121,i),e+1<=this._h&&a.texSubImage2D(3553,0,t,e+1,6408,5121,i),a.texSubImage2D(3553,0,t,e,6408,5121,i),s&&n&&mt.bindTexture(a,s,n)}},i.texSubImage2DPixel=function(t,e,i,r,a){var s=dt.mainContext,n=mt.curBindTexTarget,h=mt.curBindTexValue;mt.bindTexture(s,3553,this._source);var l=new Uint8Array(a.data);s.texSubImage2D(3553,0,t,e,i,r,6408,5121,l),n&&h&&mt.bindTexture(s,n,h)},s(0,i,"width",t.prototype._$get_width,function(t){this._w=t}),s(0,i,"height",t.prototype._$get_height,function(t){this._h=t}),e}(o),Ot=function(t){function e(){e.__super.call(this)}a(e,"laya.webgl.resource.WebGLCanvas",t);var i=e.prototype;return i.getCanvas=function(){return this._canvas},i.clear=function(){this._ctx&&this._ctx.clear()},i.destroy=function(){this._ctx&&this._ctx.destroy(),this._ctx=null},i._setContext=function(t){this._ctx=t},i.getContext=function(t,i){return this._ctx?this._ctx:this._ctx=e._createContext(this)},i.size=function(t,e){this._w==t&&this._h==e||(this._w=t,this._h=e,this._ctx&&this._ctx.size(t,e),this._canvas&&(this._canvas.height=e,this._canvas.width=t))},i.recreateResource=function(){this.startCreate(),this.createWebGlTexture(),this.completeCreate()},i.detoryResource=function(){this._source&&!this.iscpuSource&&(dt.mainContext.deleteTexture(this._source),this._source=null,this.memorySize=0)},i.createWebGlTexture=function(){var t=dt.mainContext;if(!this._canvas)throw"create GLTextur err:no data:"+this._canvas;var e=this._source=t.createTexture();this.iscpuSource=!1;var i=mt.curBindTexTarget,r=mt.curBindTexValue;mt.bindTexture(t,3553,e),t.texImage2D(3553,0,6408,6408,5121,this._canvas),t.texParameteri(3553,10240,9729),t.texParameteri(3553,10241,9729),t.texParameteri(3553,10242,33071),t.texParameteri(3553,10243,33071),this.memorySize=this._w*this._h*4,i&&r&&mt.bindTexture(t,i,r)},i.texSubImage2D=function(t,e,i){var r=dt.mainContext,a=mt.curBindTexTarget,s=mt.curBindTexValue;mt.bindTexture(r,3553,this._source),r.texSubImage2D(3553,0,e,i,6408,5121,t._source),a&&s&&mt.bindTexture(r,a,s)},s(0,i,"context",function(){return this._ctx}),s(0,i,"asBitmap",null,function(t){this._ctx&&(this._ctx.asBitmap=t)}),e._createContext=null,e}(o),Vt=function(t){function e(t,i){this.CborderSize=12,e.__super.call(this),this.char=t,this.isSpace=" "===t,this.xs=i.scaleX,this.ys=i.scaleY,this.font=i.font.toString(),this.fontSize=i.font.size,this.fillColor=i.fillColor,this.borderColor=i.borderColor,this.lineWidth=i.lineWidth;var r,a=y.isConchApp;a?(r=ConchTextCanvas,r._source=ConchTextCanvas,r._source.canvas=ConchTextCanvas):r=u.canvas.source,this.canvas=r,this._enableMerageInAtlas=!0,this._ctx=a?r:this.canvas.getContext("2d",void 0);var s=F.measureText(this.char,this.font);this.cw=s.width*this.xs,this.ch=(s.height||this.fontSize)*this.ys,this.onresize(this.cw+2*this.CborderSize,this.ch+2*this.CborderSize),this.texture=new P(this)}a(e,"laya.webgl.resource.WebGLCharImage",t);var r=e.prototype;return i.imps(r,{"laya.webgl.resource.IMergeAtlasBitmap":!0}),r.active=function(){this.texture.active()},r.recreateResource=function(){this.startCreate();var t=y.isConchApp;if(this.onresize(this.cw+2*this.CborderSize,this.ch+2*this.CborderSize),this.canvas&&(this.canvas.height=this._h,this.canvas.width=this._w),t){var e=this.fontSize;1==this.xs&&1==this.ys||(e=parseInt(e*(this.xs>this.ys?this.xs:this.ys)+""));var i="normal 100 "+e+"px Arial";this.borderColor&&(i+=" 1 "+this.borderColor),this._ctx.font=i,this._ctx.textBaseline="top",this._ctx.fillStyle=this.fillColor,this._ctx.fillText(this.char,this.CborderSize,this.CborderSize,null,null,null)}else this._ctx.save(),this._ctx.clearRect(0,0,this.cw+2*this.CborderSize,this.ch+2*this.CborderSize),this._ctx.font=this.font,this._ctx.textBaseline="top",this._ctx.translate(this.CborderSize,this.CborderSize),1==this.xs&&1==this.ys||this._ctx.scale(this.xs,this.ys),this.fillColor&&this.borderColor?(this._ctx.strokeStyle=this.borderColor,this._ctx.lineWidth=this.lineWidth,this._ctx.strokeText(this.char,0,0,null,null,0,null),this._ctx.fillStyle=this.fillColor,this._ctx.fillText(this.char,0,0,null,null,null)):this.lineWidth===-1?(this._ctx.fillStyle=this.fillColor?this.fillColor:"white",this._ctx.fillText(this.char,0,0,null,null,null)):(this._ctx.strokeStyle=this.borderColor?this.borderColor:"white",this._ctx.lineWidth=this.lineWidth,this._ctx.strokeText(this.char,0,0,null,null,0,null)),this._ctx.restore();this.borderSize=this.CborderSize,this.completeCreate()},r.onresize=function(t,e){if(this._w=t,this._h=e,!(this._w<V.atlasLimitWidth&&this._h<V.atlasLimitHeight))throw this._allowMerageInAtlas=!1,new Error("文字尺寸超出大图合集限制！");this._allowMerageInAtlas=!0},r.clearAtlasSource=function(){},s(0,r,"allowMerageInAtlas",function(){return this._allowMerageInAtlas}),s(0,r,"atlasSource",function(){return this.canvas}),s(0,r,"enableMerageInAtlas",function(){return this._enableMerageInAtlas},function(t){this._enableMerageInAtlas=t}),e.createOneChar=function(t,i){return new e(t,i)},e}(o),Ut=function(t){function e(t,i,r,a,s,n,h,l,o){void 0===r&&(r=6408),void 0===a&&(a=5121),void 0===s&&(s=34041),void 0===n&&(n=!1),void 0===h&&(h=!1),void 0===l&&(l=-1),void 0===o&&(o=1),e.__super.call(this),this._w=t,this._h=i,this._surfaceFormat=r,this._surfaceType=a,this._depthStencilFormat=s,this._mipMap=n,this._repeat=h,this._minFifter=l,this._magFifter=o}a(e,"laya.webgl.resource.WebGLRenderTarget",t);var i=e.prototype;return i.recreateResource=function(){this.startCreate();var t=dt.mainContext;this._frameBuffer||(this._frameBuffer=t.createFramebuffer()),this._source||(this._source=t.createTexture());var e=mt.curBindTexTarget,i=mt.curBindTexValue;mt.bindTexture(t,3553,this._source),t.texImage2D(3553,0,6408,this._w,this._h,0,this._surfaceFormat,this._surfaceType,null);var r=this._minFifter,a=this._magFifter,s=this._repeat?10497:33071
;if(h.isPOT(this._w,this._h)?(this._mipMap?r!==-1||(r=9987):r!==-1||(r=9729),a!==-1||(a=9729),t.texParameteri(3553,10241,r),t.texParameteri(3553,10240,a),t.texParameteri(3553,10242,s),t.texParameteri(3553,10243,s),this._mipMap&&t.generateMipmap(3553)):(r!==-1||(r=9729),a!==-1||(a=9729),t.texParameteri(3553,10241,r),t.texParameteri(3553,10240,a),t.texParameteri(3553,10242,33071),t.texParameteri(3553,10243,33071)),t.bindFramebuffer(36160,this._frameBuffer),t.framebufferTexture2D(36160,36064,3553,this._source,0),this._depthStencilFormat)switch(this._depthStencilBuffer||(this._depthStencilBuffer=t.createRenderbuffer()),t.bindRenderbuffer(36161,this._depthStencilBuffer),t.renderbufferStorage(36161,this._depthStencilFormat,this._w,this._h),this._depthStencilFormat){case 33189:t.framebufferRenderbuffer(36160,36096,36161,this._depthStencilBuffer);break;case 36168:t.framebufferRenderbuffer(36160,36128,36161,this._depthStencilBuffer);break;case 34041:t.framebufferRenderbuffer(36160,33306,36161,this._depthStencilBuffer)}t.bindFramebuffer(36160,null),e&&i&&mt.bindTexture(t,e,i),t.bindRenderbuffer(36161,null),this.memorySize=this._w*this._h*4,this.completeCreate()},i.detoryResource=function(){this._frameBuffer&&(dt.mainContext.deleteTexture(this._source),dt.mainContext.deleteFramebuffer(this._frameBuffer),dt.mainContext.deleteRenderbuffer(this._depthStencilBuffer),this._source=null,this._frameBuffer=null,this._depthStencilBuffer=null,this.memorySize=0)},s(0,i,"depthStencilBuffer",function(){return this._depthStencilBuffer}),s(0,i,"frameBuffer",function(){return this._frameBuffer}),e}(o),Ht=function(t){function e(t,i,r,a,s,n,h){this.offsetX=0,this.offsetY=0,e.__super.call(this),this.repeat=!0,this.mipmap=!1,this.minFifter=-1,this.magFifter=-1,this.atlasImage=n,this.canvas=t,this._ctx=t.getContext("2d",void 0),this._w=a,this._h=s,this.offsetX=i,this.offsetY=r,this.src=h,this._enableMerageInAtlas=!0,V.enabled&&this._w<V.atlasLimitWidth&&this._h<V.atlasLimitHeight?this._allowMerageInAtlas=!0:this._allowMerageInAtlas=!1}a(e,"laya.webgl.resource.WebGLSubImage",t);var r=e.prototype;return i.imps(r,{"laya.webgl.resource.IMergeAtlasBitmap":!0}),r.size=function(t,e){this._w=t,this._h=e,this._ctx&&this._ctx.size(t,e),this.canvas&&(this.canvas.height=e,this.canvas.width=t)},r.recreateResource=function(){this.startCreate(),this.size(this._w,this._h),this._ctx.drawImage(this.atlasImage,this.offsetX,this.offsetY,this._w,this._h,0,0,this._w,this._h),this._allowMerageInAtlas&&this._enableMerageInAtlas?this.memorySize=0:this.createWebGlTexture(),this.completeCreate()},r.createWebGlTexture=function(){var t=dt.mainContext;if(!this.canvas)throw"create GLTextur err:no data:"+this.canvas;var e=this._source=t.createTexture(),i=mt.curBindTexTarget,r=mt.curBindTexValue;mt.bindTexture(t,3553,e),t.texImage2D(3553,0,6408,6408,5121,this.canvas);var a=this.minFifter,s=this.magFifter,n=this.repeat?10497:33071;h.isPOT(this.width,this.height)?(this.mipmap?a!==-1||(a=9987):a!==-1||(a=9729),s!==-1||(s=9729),t.texParameteri(3553,10240,s),t.texParameteri(3553,10241,a),t.texParameteri(3553,10242,n),t.texParameteri(3553,10243,n),this.mipmap&&t.generateMipmap(3553)):(a!==-1||(a=9729),s!==-1||(s=9729),t.texParameteri(3553,10241,a),t.texParameteri(3553,10240,s),t.texParameteri(3553,10242,33071),t.texParameteri(3553,10243,33071)),i&&r&&mt.bindTexture(t,i,r),this.canvas=null,this.memorySize=this._w*this._h*4},r.detoryResource=function(){V.enabled&&this._allowMerageInAtlas||!this._source||(dt.mainContext.deleteTexture(this._source),this._source=null,this.memorySize=0)},r.clearAtlasSource=function(){},r.dispose=function(){this.resourceManager.removeResource(this),t.prototype.dispose.call(this)},s(0,r,"allowMerageInAtlas",function(){return this._allowMerageInAtlas}),s(0,r,"atlasSource",function(){return this.canvas}),s(0,r,"enableMerageInAtlas",function(){return this._allowMerageInAtlas},function(t){this._allowMerageInAtlas=t}),e}(o),kt=function(t){function e(t,i,r,a){if(this.customCompile=!1,this._curActTexIndex=0,this.tag={},this._program=null,this._params=null,this._paramsMap={},this._offset=0,e.__super.call(this),!t||!i)throw"Shader Error";(y.isConchApp||y.isFlash)&&(this.customCompile=!0),this._id=++e._count,this._vs=t,this._ps=i,this._nameMap=a?a:{},null!=r&&(e.sharders[r]=this)}a(e,"laya.webgl.shader.Shader",t);var i=e.prototype;return i.recreateResource=function(){this.startCreate(),this._compile(),this.completeCreate(),this.memorySize=0},i.detoryResource=function(){dt.mainContext.deleteShader(this._vshader),dt.mainContext.deleteShader(this._pshader),dt.mainContext.deleteProgram(this._program),this._vshader=this._pshader=this._program=null,this._params=null,this._paramsMap={},this.memorySize=0,this._curActTexIndex=0},i._compile=function(){if(this._vs&&this._ps&&!this._params){this._reCompile=!0,this._params=[];var t,i=[this._vs,this._ps];this.customCompile&&(t=this._preGetParams(this._vs,this._ps));var r=dt.mainContext;if(this._program=r.createProgram(),this._vshader=e._createShader(r,i[0],35633),this._pshader=e._createShader(r,i[1],35632),r.attachShader(this._program,this._vshader),r.attachShader(this._program,this._pshader),r.linkProgram(this._program),!this.customCompile&&!r.getProgramParameter(this._program,35714))throw r.getProgramInfoLog(this._program);var a,s,n=0,h=0,l=this.customCompile?t.attributes.length:r.getProgramParameter(this._program,35721);for(n=0;n<l;n++){var o=this.customCompile?t.attributes[n]:r.getActiveAttrib(this._program,n);s=r.getAttribLocation(this._program,o.name),a={vartype:"attribute",ivartype:0,attrib:o,location:s,name:o.name,type:o.type,isArray:!1,isSame:!1,preValue:null,indexOfParams:0},this._params.push(a)}var u=this.customCompile?t.uniforms.length:r.getProgramParameter(this._program,35718);for(n=0;n<u;n++){var _=this.customCompile?t.uniforms[n]:r.getActiveUniform(this._program,n);s=r.getUniformLocation(this._program,_.name),a={vartype:"uniform",ivartype:1,attrib:o,location:s,name:_.name,type:_.type,isArray:!1,isSame:!1,preValue:null,indexOfParams:0},a.name.indexOf("[0]")>0&&(a.name=a.name.substr(0,a.name.length-3),a.isArray=!0,a.location=r.getUniformLocation(this._program,a.name)),this._params.push(a)}for(n=0,h=this._params.length;n<h;n++)if(a=this._params[n],a.indexOfParams=n,a.index=1,a.value=[a.location,null],a.codename=a.name,a.name=this._nameMap[a.codename]?this._nameMap[a.codename]:a.codename,this._paramsMap[a.name]=a,a._this=this,a.uploadedValue=[],"attribute"!==a.vartype)switch(a.type){case 5124:a.fun=a.isArray?this._uniform1iv:this._uniform1i;break;case 5126:a.fun=a.isArray?this._uniform1fv:this._uniform1f;break;case 35664:a.fun=a.isArray?this._uniform_vec2v:this._uniform_vec2;break;case 35665:a.fun=a.isArray?this._uniform_vec3v:this._uniform_vec3;break;case 35666:a.fun=a.isArray?this._uniform_vec4v:this._uniform_vec4;break;case 35678:a.fun=this._uniform_sampler2D;break;case 35680:a.fun=this._uniform_samplerCube;break;case 35676:a.fun=this._uniformMatrix4fv;break;case 35670:a.fun=this._uniform1i;break;case 35674:case 35675:throw new Error("compile shader err!");default:throw new Error("compile shader err!")}else a.fun=this._attribute}},i.getUniform=function(t){return this._paramsMap[t]},i._attribute=function(t,e){var i=dt.mainContext;return i.enableVertexAttribArray(t.location),i.vertexAttribPointer(t.location,e[0],e[1],e[2],e[3],e[4]+this._offset),2},i._uniform1f=function(t,e){var i=t.uploadedValue;return i[0]!==e?(dt.mainContext.uniform1f(t.location,i[0]=e),1):0},i._uniform1fv=function(t,e){if(e.length<4){var i=t.uploadedValue;return i[0]!==e[0]||i[1]!==e[1]||i[2]!==e[2]||i[3]!==e[3]?(dt.mainContext.uniform1fv(t.location,e),i[0]=e[0],i[1]=e[1],i[2]=e[2],i[3]=e[3],1):0}return dt.mainContext.uniform1fv(t.location,e),1},i._uniform_vec2=function(t,e){var i=t.uploadedValue;return i[0]!==e[0]||i[1]!==e[1]?(dt.mainContext.uniform2f(t.location,i[0]=e[0],i[1]=e[1]),1):0},i._uniform_vec2v=function(t,e){if(e.length<2){var i=t.uploadedValue;return i[0]!==e[0]||i[1]!==e[1]||i[2]!==e[2]||i[3]!==e[3]?(dt.mainContext.uniform2fv(t.location,e),i[0]=e[0],i[1]=e[1],i[2]=e[2],i[3]=e[3],1):0}return dt.mainContext.uniform2fv(t.location,e),1},i._uniform_vec3=function(t,e){var i=t.uploadedValue;return i[0]!==e[0]||i[1]!==e[1]||i[2]!==e[2]?(dt.mainContext.uniform3f(t.location,i[0]=e[0],i[1]=e[1],i[2]=e[2]),1):0},i._uniform_vec3v=function(t,e){return dt.mainContext.uniform3fv(t.location,e),1},i._uniform_vec4=function(t,e){var i=t.uploadedValue;return i[0]!==e[0]||i[1]!==e[1]||i[2]!==e[2]||i[3]!==e[3]?(dt.mainContext.uniform4f(t.location,i[0]=e[0],i[1]=e[1],i[2]=e[2],i[3]=e[3]),1):0},i._uniform_vec4v=function(t,e){return dt.mainContext.uniform4fv(t.location,e),1},i._uniformMatrix2fv=function(t,e){return dt.mainContext.uniformMatrix2fv(t.location,!1,e),1},i._uniformMatrix3fv=function(t,e){return dt.mainContext.uniformMatrix3fv(t.location,!1,e),1},i._uniformMatrix4fv=function(t,e){return dt.mainContext.uniformMatrix4fv(t.location,!1,e),1},i._uniform1i=function(t,e){var i=t.uploadedValue;return i[0]!==e?(dt.mainContext.uniform1i(t.location,i[0]=e),1):0},i._uniform1iv=function(t,e){return dt.mainContext.uniform1iv(t.location,e),1},i._uniform_ivec2=function(t,e){var i=t.uploadedValue;return i[0]!==e[0]||i[1]!==e[1]?(dt.mainContext.uniform2i(t.location,i[0]=e[0],i[1]=e[1]),1):0},i._uniform_ivec2v=function(t,e){return dt.mainContext.uniform2iv(t.location,e),1},i._uniform_vec3i=function(t,e){var i=t.uploadedValue;return i[0]!==e[0]||i[1]!==e[1]||i[2]!==e[2]?(dt.mainContext.uniform3i(t.location,i[0]=e[0],i[1]=e[1],i[2]=e[2]),1):0},i._uniform_vec3vi=function(t,e){return dt.mainContext.uniform3iv(t.location,e),1},i._uniform_vec4i=function(t,e){var i=t.uploadedValue;return i[0]!==e[0]||i[1]!==e[1]||i[2]!==e[2]||i[3]!==e[3]?(dt.mainContext.uniform4i(t.location,i[0]=e[0],i[1]=e[1],i[2]=e[2],i[3]=e[3]),1):0},i._uniform_vec4vi=function(t,e){return dt.mainContext.uniform4iv(t.location,e),1},i._uniform_sampler2D=function(t,i){var r=dt.mainContext,a=t.uploadedValue;return null==a[0]?(a[0]=this._curActTexIndex,r.uniform1i(t.location,this._curActTexIndex),r.activeTexture(e._TEXTURES[this._curActTexIndex]),mt.bindTexture(r,3553,i),this._curActTexIndex++,1):(r.activeTexture(e._TEXTURES[a[0]]),mt.bindTexture(r,3553,i),0)},i._uniform_samplerCube=function(t,i){var r=dt.mainContext,a=t.uploadedValue;return null==a[0]?(a[0]=this._curActTexIndex,r.uniform1i(t.location,this._curActTexIndex),r.activeTexture(e._TEXTURES[this._curActTexIndex]),mt.bindTexture(r,34067,i),this._curActTexIndex++,1):(r.activeTexture(e._TEXTURES[a[0]]),mt.bindTexture(r,34067,i),0)},i._noSetValue=function(t){console.log("no....:"+t.name)},i.uploadOne=function(t,e){this.activeResource(),mt.UseProgram(this._program);var i=this._paramsMap[t];i.fun.call(this,i,e)},i.uploadTexture2D=function(t){I.shaderCall++;var e=dt.mainContext;e.activeTexture(33984),mt.bindTexture(e,3553,t)},i.upload=function(t,e){It.activeShader=this,It.bindShader=this,this.activeResource(),mt.UseProgram(this._program),this._reCompile?(e=this._params,this._reCompile=!1):e=e||this._params;for(var i,r,a=e.length,s=0,n=0;n<a;n++)i=e[n],null!==(r=t[i.name])&&(s+=i.fun.call(this,i,r));I.shaderCall+=s},i.uploadArray=function(t,e,i){It.activeShader=this,It.bindShader=this,this.activeResource(),mt.UseProgram(this._program);for(var r,a,s=(this._params,0),n=e-2;n>=0;n-=2)(a=this._paramsMap[t[n]])&&null!=(r=t[n+1])&&(i&&i[a.name]&&i[a.name].bind(),s+=a.fun.call(this,a,r));I.shaderCall+=s},i.getParams=function(){return this._params},i._preGetParams=function(t,e){var i=[t,e],r={},a=[],s=[],n={},h=[];r.attributes=a,r.uniforms=s,r.defines=n;for(var l=new RegExp("(/\\*([^*]|[\\r\\\n]|(\\*+([^*/]|[\\r\\n])))*\\*+/)|(//.*)","g"),o=new RegExp("(\".*\")|('.*')|([#\\w\\*-\\.+/()=<>{}\\\\]+)|([,;:\\\\])","g"),u=0,_=0,c=0;c<2;c++){i[c]=i[c].replace(l,"");var f,d=i[c].match(o);for(u=0,_=d.length;u<_;u++){var m=d[u];if("attribute"==m||"uniform"==m)u=this.parseOne(a,s,d,u,m,!0);else{if("#define"==m){m=d[++u],h[m]=1;continue}if("#ifdef"==m){f=d[++u];n[f]=n[f]||[];for(u++;u<_;u++)if("attribute"==(m=d[u])||"uniform"==m)u=this.parseOne(a,s,d,u,m,h[f]);else if("#else"==m)for(u++;u<_;u++)if("attribute"==(m=d[u])||"uniform"==m)u=this.parseOne(a,s,d,u,m,!h[f]);else if("#endif"==m)break}}}}return r},i.parseOne=function(t,i,r,a,s,n){var h={type:e.shaderParamsMap[r[a+1]],name:r[a+2],size:isNaN(parseInt(r[a+3]))?1:parseInt(r[a+3])};return n&&("attribute"==s?t.push(h):i.push(h)),":"==r[a+3]&&(h.type=r[a+4],a+=2),a+=2},i.dispose=function(){this.resourceManager.removeResource(this),laya.resource.Resource.prototype.dispose.call(this)},e.getShader=function(t){return e.sharders[t]},e.create=function(t,i,r,a){return new e(t,i,r,a)},e.withCompile=function(t,i,r,a){if(r&&e.sharders[r])return e.sharders[r];var s=e._preCompileShader[2e-4*t];if(!s)throw new Error("withCompile shader err!"+t);return s.createShader(i,r,a)},e.withCompile2D=function(t,i,r,a,s){if(a&&e.sharders[a])return e.sharders[a];var n=e._preCompileShader[2e-4*t+i];if(!n)throw new Error("withCompile shader err!"+t+" "+i);return n.createShader(r,a,s)},e.addInclude=function(t,i){if(!i||0===i.length)throw new Error("add shader include file err:"+t);if(e._includeFiles[t])throw new Error("add shader include file err, has add:"+t);e._includeFiles[t]=i},e.preCompile=function(t,i,r,a){var s=2e-4*t;e._preCompileShader[s]=new ft(s,i,r,a,e._includeFiles)},e.preCompile2D=function(t,i,r,a,s){var n=2e-4*t+i;e._preCompileShader[n]=new ft(n,r,a,s,e._includeFiles)},e._createShader=function(t,e,i){var r=t.createShader(i);if(t.shaderSource(r,e),t.compileShader(r),!t.getShaderParameter(r,35713))throw t.getShaderInfoLog(r);return r},e._TEXTURES=[33984,33985,33986,33987,33988,33989,33990,,33991,33992],e._includeFiles={},e._count=0,e._preCompileShader={},e.SHADERNAME2ID=2e-4,e.sharders=(e.sharders=[],e.sharders.length=32,e.sharders),r(e,["shaderParamsMap",function(){return this.shaderParamsMap={float:5126,int:5124,bool:35670,vec2:35664,vec3:35665,vec4:35666,ivec2:35667,ivec3:35668,ivec4:35669,bvec2:35671,bvec3:35672,bvec4:35673,mat2:35674,mat3:35675,mat4:35676,sampler2D:35678,samplerCube:35680}},"nameKey",function(){return this.nameKey=new C}]),e}(It),Gt=function(t){function e(){this._maxsize=0,this._upload=!0,this._uploadSize=0,e.__super.call(this),this.lock=!0}a(e,"laya.webgl.utils.Buffer2D",t);var i=e.prototype;return i._bufferData=function(){this._maxsize=Math.max(this._maxsize,this._byteLength),I.loopCount%30==0&&(this._buffer.byteLength>this._maxsize+64&&(this.memorySize=this._buffer.byteLength,this._buffer=this._buffer.slice(0,this._maxsize+64),this._checkArrayUse()),this._maxsize=this._byteLength),this._uploadSize<this._buffer.byteLength&&(this._uploadSize=this._buffer.byteLength,Mt._gl.bufferData(this._bufferType,this._uploadSize,this._bufferUsage),this.memorySize=this._uploadSize),Mt._gl.bufferSubData(this._bufferType,0,this._buffer)},i._bufferSubData=function(t,e,i){if(void 0===t&&(t=0),void 0===e&&(e=0),void 0===i&&(i=0),this._maxsize=Math.max(this._maxsize,this._byteLength),I.loopCount%30==0&&(this._buffer.byteLength>this._maxsize+64&&(this.memorySize=this._buffer.byteLength,this._buffer=this._buffer.slice(0,this._maxsize+64),this._checkArrayUse()),this._maxsize=this._byteLength),this._uploadSize<this._buffer.byteLength&&(this._uploadSize=this._buffer.byteLength,Mt._gl.bufferData(this._bufferType,this._uploadSize,this._bufferUsage),this.memorySize=this._uploadSize),e||i){var r=this._buffer.slice(e,i);Mt._gl.bufferSubData(this._bufferType,t,r)}else Mt._gl.bufferSubData(this._bufferType,t,this._buffer)},i._checkArrayUse=function(){},i._bind_upload=function(){return!!this._upload&&(this._upload=!1,this._bind(),this._bufferData(),!0)},i._bind_subUpload=function(t,e,i){return void 0===t&&(t=0),void 0===e&&(e=0),void 0===i&&(i=0),!!this._upload&&(this._upload=!1,this._bind(),this._bufferSubData(t,e,i),!0)},i._resizeBuffer=function(t,e){if(t<this._buffer.byteLength)return this;if(this.memorySize=t,e&&this._buffer&&this._buffer.byteLength>0){var i=new ArrayBuffer(t);new Uint8Array(i).set(new Uint8Array(this._buffer),0),this._buffer=i}else this._buffer=new ArrayBuffer(t);return this._checkArrayUse(),this._upload=!0,this},i.append=function(t){this._upload=!0;var e,i=0;i=t.byteLength,t instanceof Uint8Array?(this._resizeBuffer(this._byteLength+i,!0),e=new Uint8Array(this._buffer,this._byteLength)):t instanceof Uint16Array?(this._resizeBuffer(this._byteLength+i,!0),e=new Uint16Array(this._buffer,this._byteLength)):t instanceof Float32Array&&(this._resizeBuffer(this._byteLength+i,!0),e=new Float32Array(this._buffer,this._byteLength)),e.set(t,0),this._byteLength+=i,this._checkArrayUse()},i.appendEx=function(t,e){this._upload=!0;var i,r=0;r=t.byteLength,this._resizeBuffer(this._byteLength+r,!0),i=new e(this._buffer,this._byteLength),i.set(t,0),this._byteLength+=r,this._checkArrayUse()},i.appendEx2=function(t,e,i,r){void 0===r&&(r=1),this._upload=!0;var a,s=0;s=i*r,this._resizeBuffer(this._byteLength+s,!0),a=new e(this._buffer,this._byteLength);var n=0;for(n=0;n<i;n++)a[n]=t[n];this._byteLength+=s,this._checkArrayUse()},i.getBuffer=function(){return this._buffer},i.setNeedUpload=function(){this._upload=!0},i.getNeedUpload=function(){return this._upload},i.upload=function(){var t=this._bind_upload();return Mt._gl.bindBuffer(this._bufferType,null),Mt._bindActive[this._bufferType]=null,It.activeShader=null,t},i.subUpload=function(t,e,i){void 0===t&&(t=0),void 0===e&&(e=0),void 0===i&&(i=0);var r=this._bind_subUpload();return Mt._gl.bindBuffer(this._bufferType,null),Mt._bindActive[this._bufferType]=null,It.activeShader=null,r},i.detoryResource=function(){t.prototype.detoryResource.call(this),this._upload=!0,this._uploadSize=0},i.clear=function(){this._byteLength=0,this._upload=!0},s(0,i,"bufferLength",function(){return this._buffer.byteLength}),s(0,i,"byteLength",t.prototype._$get_byteLength,function(t){this._byteLength!==t&&(t<=this._buffer.byteLength||this._resizeBuffer(2*t+256,!0),this._byteLength=t)}),e.__int__=function(t){Xt.QuadrangleIB=Xt.create(35044),_t.fillIBQuadrangle(Xt.QuadrangleIB,16)},e.FLOAT32=4,e.SHORT=2,e}(Mt),zt=(function(t){function e(t){this.u_blurX=!1,this.u_color=null,this.u_offset=null,this.u_strength=NaN,this.u_texW=0,this.u_texH=0,e.__super.call(this,9)}a(e,"laya.webgl.shader.d2.value.GlowSV",t);var i=e.prototype;i.setValue=function(e){t.prototype.setValue.call(this,e)},i.clear=function(){t.prototype.clear.call(this)},e}(Dt),function(t){function e(t){e.__super.call(this,64),this.defines.add(64)}a(e,"laya.webgl.shader.d2.value.TextSV",t);var i=e.prototype;return i.release=function(){e.pool[e._length++]=this,this.clear()},i.clear=function(){t.prototype.clear.call(this)},e.create=function(){return e._length?e.pool[--e._length]:new e(null)},e.pool=[],e._length=0,e}(Dt)),Wt=function(t){function e(t,i,r,a){this._params2dQuick1=null,this._params2dQuick2=null,this._shaderValueWidth=NaN,this._shaderValueHeight=NaN,e.__super.call(this,t,i,r,a)}a(e,"laya.webgl.shader.d2.Shader2X",t);var i=e.prototype;return i.upload2dQuick1=function(t){this.upload(t,this._params2dQuick1||this._make2dQuick1())},i._make2dQuick1=function(){if(!this._params2dQuick1){this.activeResource(),this._params2dQuick1=[];for(var t,e=this._params,i=0,r=e.length;i<r;i++)t=e[i],(y.isFlash||"size"!==t.name&&"position"!==t.name&&"texcoord"!==t.name)&&this._params2dQuick1.push(t)}return this._params2dQuick1},i.detoryResource=function(){t.prototype.detoryResource.call(this),this._params2dQuick1=null,this._params2dQuick2=null},i.upload2dQuick2=function(t){this.upload(t,this._params2dQuick2||this._make2dQuick2())},i._make2dQuick2=function(){if(!this._params2dQuick2){this.activeResource(),this._params2dQuick2=[];for(var t,e=this._params,i=0,r=e.length;i<r;i++)t=e[i],(y.isFlash||"size"!==t.name)&&this._params2dQuick2.push(t)}return this._params2dQuick2},e.create=function(t,i,r,a){return new e(t,i,r,a)},e}(kt),Xt=function(t){function e(t){this._uint8Array=null,this._uint16Array=null,void 0===t&&(t=35044),e.__super.call(this),this._bufferUsage=t,this._bufferType=34963,y.isFlash||(this._buffer=new ArrayBuffer(8))}a(e,"laya.webgl.utils.IndexBuffer2D",t);var i=e.prototype;return i._checkArrayUse=function(){this._uint8Array&&(this._uint8Array=new Uint8Array(this._buffer)),this._uint16Array&&(this._uint16Array=new Uint16Array(this._buffer))},i.getUint8Array=function(){return this._uint8Array||(this._uint8Array=new Uint8Array(this._buffer))},i.getUint16Array=function(){return this._uint16Array||(this._uint16Array=new Uint16Array(this._buffer))},i.destory=function(){this._uint16Array=null,this._uint8Array=null,this._buffer=null},e.QuadrangleIB=null,e.create=function(t){return void 0===t&&(t=35044),new e(t)},e}(Gt),Yt=function(t){function e(t,i){this._floatArray32=null,this._vertexStride=0,e.__super.call(this),this._vertexStride=t,this._bufferUsage=i,this._bufferType=34962,y.isFlash||(this._buffer=new ArrayBuffer(8)),this.getFloat32Array()}a(e,"laya.webgl.utils.VertexBuffer2D",t);var i=e.prototype;return i.getFloat32Array=function(){return this._floatArray32||(this._floatArray32=new Float32Array(this._buffer))},i.bind=function(t){t&&t._bind(),this._bind()},i.insertData=function(t,e){this.getFloat32Array().set(t,e),this._upload=!0},i.bind_upload=function(t){t._bind_upload()||t._bind(),this._bind_upload()||this._bind()},i._checkArrayUse=function(){this._floatArray32&&(this._floatArray32=new Float32Array(this._buffer))},i.detoryResource=function(){t.prototype.detoryResource.call(this);for(var e=0;e<10;e++)dt.mainContext.disableVertexAttribArray(e)},i.destory=function(){this._byteLength=0,this._upload=!0,this._buffer=null,this._floatArray32=null},s(0,i,"vertexStride",function(){return this._vertexStride}),e.create=function(t,i){return void 0===i&&(i=35048),new e(t,i)},e}(Gt),Kt=function(t){function e(t,i){this._image=null,this._allowMerageInAtlas=!1,this._enableMerageInAtlas=!1,this.repeat=!1,this.mipmap=!1,this.minFifter=0,this.magFifter=0,e.__super.call(this,t,i),this.repeat=!1,this.mipmap=!1,this.minFifter=-1,this.magFifter=-1,"string"==typeof t?(this.url=t,this._src=t,this._image=new u.window.Image,i&&(i.onload&&(this.onload=i.onload),i.onerror&&(this.onerror=i.onerror),i.onCreate&&i.onCreate(this)),this._image.crossOrigin=t&&0==t.indexOf("data:")?null:"",t&&(this._image.src=t)):(this._src=i,this.url=this._src,this._image=t.source,this.onresize()),this._enableMerageInAtlas=!0}a(e,"laya.webgl.resource.WebGLImage",t);var r=e.prototype;return i.imps(r,{"laya.webgl.resource.IMergeAtlasBitmap":!0}),r._init_=function(t,e){},r._createWebGlTexture=function(){if(!this._image)throw"create GLTextur err:no data:"+this._image;var t=dt.mainContext,e=this._source=t.createTexture(),i=mt.curBindTexTarget,r=mt.curBindTexValue;mt.bindTexture(t,3553,e),t.texImage2D(3553,0,6408,6408,5121,this._image);var a=this.minFifter,s=this.magFifter,n=this.repeat?10497:33071,l=h.isPOT(this._w,this._h);l?(this.mipmap?a!==-1||(a=9987):a!==-1||(a=9729),s!==-1||(s=9729),t.texParameteri(3553,10241,a),t.texParameteri(3553,10240,s),t.texParameteri(3553,10242,n),t.texParameteri(3553,10243,n),this.mipmap&&t.generateMipmap(3553)):(a!==-1||(a=9729),s!==-1||(s=9729),t.texParameteri(3553,10241,a),t.texParameteri(3553,10240,s),t.texParameteri(3553,10242,33071),t.texParameteri(3553,10243,33071)),i&&r&&mt.bindTexture(t,i,r),this._image.onload=null,this._image=null,this.memorySize=l?this._w*this._h*4*(1+1/3):this._w*this._h*4,this._recreateLock=!1},r.recreateResource=function(){var t=this;if(null!=this._src&&""!==this._src)if(this._needReleaseAgain=!1,this._image){if(this._recreateLock)return;this.startCreate(),this._allowMerageInAtlas&&this._enableMerageInAtlas?(this.memorySize=0,this._recreateLock=!1):this._createWebGlTexture(),this.completeCreate()}else{this._recreateLock=!0,this.startCreate();var e=this;this._image=new u.window.Image,this._image.crossOrigin=0==this._src.indexOf("data:")?null:"",this._image.onload=function(){if(e._needReleaseAgain)return e._needReleaseAgain=!1,e._image.onload=null,void(e._image=null);e._allowMerageInAtlas&&e._enableMerageInAtlas?(t.memorySize=0,t._recreateLock=!1):e._createWebGlTexture(),e.completeCreate()},this._image.src=this._src}},r.detoryResource=function(){this._recreateLock&&(this._needReleaseAgain=!0),this._source&&(dt.mainContext.deleteTexture(this._source),this._source=null,this._image=null,this.memorySize=0)},r.onresize=function(){this._w=this._image.width,this._h=this._image.height,V.enabled&&this._w<V.atlasLimitWidth&&this._h<V.atlasLimitHeight?this._allowMerageInAtlas=!0:this._allowMerageInAtlas=!1},r.clearAtlasSource=function(){this._image=null},s(0,r,"image",function(){return this._image}),s(0,r,"allowMerageInAtlas",function(){return this._allowMerageInAtlas}),s(0,r,"atlasSource",function(){return this._image}),s(0,r,"enableMerageInAtlas",function(){return this._enableMerageInAtlas},function(t){this._enableMerageInAtlas=t}),s(0,r,"onload",null,function(t){var e=this;this._onload=t,this._image&&(this._image.onload=null!=this._onload?function(){e.onresize(),e._onload()}:null)}),s(0,r,"onerror",null,function(t){var e=this;this._onerror=t,this._image&&(this._image.onerror=null!=this._onerror?function(){e._onerror()}:null)}),e}(g);i.__init([lt,O,gt,ft])}(window,document,Laya);!function(t,e,i){var r=(i.un,i.uns,i.static,i.class),a=i.getset,n=(i.__newvec,laya.webgl.canvas.BlendMode),l=(laya.utils.Browser,laya.utils.Color),s=laya.filters.ColorFilterAction,o=laya.filters.webgl.ColorFilterActionGL,u=laya.filters.Filter,c=laya.filters.webgl.FilterActionGL,h=laya.maths.Matrix,d=(laya.maths.Rectangle,laya.renders.Render),f=(laya.renders.RenderContext,laya.webgl.resource.RenderTarget2D),_=laya.utils.RunDriver,g=(laya.webgl.shader.d2.ShaderDefines2D,laya.display.Sprite,laya.webgl.submit.SubmitCMD),y=laya.resource.Texture,b=laya.webgl.shader.d2.value.Value2D,p=function(){function t(){this.data=null}r(t,"laya.filters.FilterAction");var e=t.prototype;return i.imps(e,{"laya.filters.IFilterAction":!0}),e.apply=function(t){return null},t}(),w=function(){function t(){}return r(t,"laya.filters.WebGLFilter"),t.enable=function(){t.isInit||(t.isInit=!0,d.isWebGL&&(_.createFilterAction=function(t){var e;switch(t){case 32:e=new o;break;case 16:e=new v;break;case 8:e=new x}return e}))},t.isInit=!1,t.__init$=function(){_.createFilterAction=function(t){var e;switch(t){case 16:e=new p;break;case 8:e=new p;break;case 32:e=new s}return e}},t}(),v=(function(t){function e(t){this.strength=NaN,e.__super.call(this),void 0===t&&(t=4),d.isWebGL&&w.enable(),this.strength=t,this._action=_.createFilterAction(16),this._action.data=this}r(e,"laya.filters.BlurFilter",t);var i=e.prototype;i.callNative=function(t){t.conchModel&&t.conchModel.blurFilter&&t.conchModel.blurFilter(this.strength)},a(0,i,"action",function(){return this._action}),a(0,i,"type",function(){return 16}),e}(u),function(t){function e(t,i,r,a){this._color=null,e.__super.call(this),this._elements=new Float32Array(9),void 0===i&&(i=4),void 0===r&&(r=6),void 0===a&&(a=6),d.isWebGL&&w.enable(),this._color=new l(t),this.blur=Math.min(i,20),this.offX=r,this.offY=a,this._action=_.createFilterAction(8),this._action.data=this}r(e,"laya.filters.GlowFilter",t);var i=e.prototype;i.getColor=function(){return this._color._color},i.callNative=function(t){t.conchModel&&t.conchModel.glowFilter&&t.conchModel.glowFilter(this._color.strColor,this._elements[4],this._elements[5],this._elements[6])},a(0,i,"type",function(){return 8}),a(0,i,"action",function(){return this._action}),a(0,i,"offY",function(){return this._elements[6]},function(t){this._elements[6]=t}),a(0,i,"offX",function(){return this._elements[5]},function(t){this._elements[5]=t}),a(0,i,"blur",function(){return this._elements[4]},function(t){this._elements[4]=t}),e}(u),function(t){function e(){this.data=null,e.__super.call(this)}r(e,"laya.filters.webgl.BlurFilterActionGL",t);var i=e.prototype;return i.setValueMix=function(t){t.defines.add(this.data.type)},i.apply3d=function(t,e,i,r,a){var n=t.getValue("bounds"),l=b.create(1,0);l.setFilters([this.data]),h.EMPTY.identity(),i.ctx.drawTarget(t,0,0,n.width,n.height,h.EMPTY,"src",l),l.setFilters(null)},i.setValue=function(t){t.strength=this.data.strength},a(0,i,"typeMix",function(){return 16}),e}(c)),x=function(t){function e(){this.data=null,this._initKey=!1,this._textureWidth=0,this._textureHeight=0,e.__super.call(this)}r(e,"laya.filters.webgl.GlowFilterActionGL",t);var l=e.prototype;return i.imps(l,{"laya.filters.IFilterActionGL":!0}),l.setValueMix=function(t){},l.apply3d=function(t,i,r,a,l){var s=t.getValue("bounds");t.addValue("color",this.data.getColor());var o=s.width,u=s.height;this._textureWidth=o,this._textureHeight=u;var c=g.create([t,i,r,0,0],e.tmpTarget);r.ctx.addRenderObject(c);var d,f=h.TEMP;return f.identity(),d=b.create(1,0),d.setFilters([this.data]),r.ctx.drawTarget(t,0,0,this._textureWidth,this._textureHeight,f,"src",d,null,n.TOINT.overlay),c=g.create([t,i,r,0,0],e.startOut),r.ctx.addRenderObject(c),d=b.create(1,0),r.ctx.drawTarget(t,0,0,this._textureWidth,this._textureHeight,f,"tmpTarget",d,y.INV_UV,n.TOINT.overlay),d=b.create(1,0),r.ctx.drawTarget(t,0,0,this._textureWidth,this._textureHeight,f,"src",d),c=g.create([t,i,r,0,0],e.recycleTarget),r.ctx.addRenderObject(c),null},l.setSpriteWH=function(t){this._textureWidth=t.width,this._textureHeight=t.height},l.setValue=function(t){t.u_offsetX=this.data.offX,t.u_offsetY=-this.data.offY,t.u_strength=1,t.u_blurX=this.data.blur,t.u_blurY=this.data.blur,t.u_textW=this._textureWidth,t.u_textH=this._textureHeight,t.u_color=this.data.getColor()},a(0,l,"typeMix",function(){return 8}),e.tmpTarget=function(t,e,i,r,a){var n=t.getValue("bounds");t.getValue("out").end();var l=f.create(n.width,n.height);l.start();var s=t.getValue("color");s&&l.clear(s[0],s[1],s[2],0),t.addValue("tmpTarget",l)},e.startOut=function(t,e,i,r,a){t.getValue("tmpTarget").end();var n=t.getValue("out");n.start();var l=t.getValue("color");l&&n.clear(l[0],l[1],l[2],0)},e.recycleTarget=function(t,e,i,r,a){t.getValue("src");t.getValue("tmpTarget").recycle()},e}(c);i.__init([w])}(window,document,Laya);!function(t,i,e){var s=(e.un,e.uns,e.static),h=e.class,n=e.getset,o=(e.__newvec,laya.display.Animation),l=laya.utils.ClassUtils,r=laya.filters.ColorFilter,a=laya.utils.Ease,c=laya.events.Event,u=laya.display.css.Font,_=laya.display.FrameAnimation,d=laya.display.Graphics,f=laya.utils.Handler,p=laya.display.Input,g=laya.net.Loader,m=(laya.display.Node,laya.maths.Point),y=laya.maths.Rectangle,C=laya.renders.Render,v=laya.display.Sprite,b=laya.display.Text,S=laya.resource.Texture,x=laya.utils.Tween,w=laya.utils.Utils;e.interface("laya.ui.IItem"),e.interface("laya.ui.ISelect"),e.interface("laya.ui.IRender"),e.interface("laya.ui.IComponent"),e.interface("laya.ui.IBox","IComponent");var B=function(){function t(){this.enable=!1,this.top=NaN,this.bottom=NaN,this.left=NaN,this.right=NaN,this.centerX=NaN,this.centerY=NaN,this.anchorX=NaN,this.anchorY=NaN}return h(t,"laya.ui.LayoutStyle"),s(t,["EMPTY",function(){return this.EMPTY=new t}]),t}(),k=function(){function t(){}return h(t,"laya.ui.Styles"),t.labelColor="#000000",t.buttonStateNum=3,t.scrollBarMinNum=15,t.scrollBarDelayTime=500,s(t,["defaultSizeGrid",function(){return this.defaultSizeGrid=[4,4,4,4,0]},"labelPadding",function(){return this.labelPadding=[2,2,2,2]},"inputLabelPadding",function(){return this.inputLabelPadding=[1,1,1,3]},"buttonLabelColors",function(){return this.buttonLabelColors=["#32556b","#32cc6b","#ff0000","#C0C0C0"]},"comboBoxItemColors",function(){return this.comboBoxItemColors=["#5e95b6","#ffffff","#000000","#8fa4b1","#ffffff"]}]),t}(),I=function(){function t(){}return h(t,"laya.ui.UIUtils"),t.fillArray=function(t,i,e){var s=t.concat();if(i)for(var h=i.split(","),n=0,o=Math.min(s.length,h.length);n<o;n++){var l=h[n];s[n]="true"==l||"false"!=l&&l,null!=e&&(s[n]=e(l))}return s},t.toColor=function(t){return w.toHexColor(t)},t.gray=function(i,e){void 0===e&&(e=!0),e?t.addFilter(i,t.grayFilter):t.clearFilter(i,r)},t.addFilter=function(t,i){var e=t.filters||[];e.push(i),t.filters=e},t.clearFilter=function(t,i){var s=t.filters;if(null!=s&&s.length>0){for(var h=s.length-1;h>-1;h--){var n=s[h];e.__typeof(n,i)&&s.splice(h,1)}t.filters=s}},t._getReplaceStr=function(i){return t.escapeSequence[i]},t.adptString=function(i){return i.replace(/\\(\w)/g,t._getReplaceStr)},s(t,["grayFilter",function(){return this.grayFilter=new r([.3086,.6094,.082,0,0,.3086,.6094,.082,0,0,.3086,.6094,.082,0,0,0,0,0,1,0])},"escapeSequence",function(){return this.escapeSequence={"\\n":"\n","\\t":"\t"}}]),t}(),L=function(){function t(){}return h(t,"UIConfig"),t.touchScrollEnable=!0,t.mouseWheelEnable=!0,t.showButtons=!0,t.popupBgColor="#000000",t.popupBgAlpha=.5,t.closeDialogOnSide=!0,t}(),M=function(t){function i(){this.autoCacheCmd=!0,this._width=0,this._height=0,this._source=null,this._sizeGrid=null,this._isChanged=!1,this._offset=null,i.__super.call(this)}h(i,"laya.ui.AutoBitmap",t);var s=i.prototype;return s.destroy=function(){t.prototype.destroy.call(this),this._source=null,this._sizeGrid=null,this._offset=null},s._setChanged=function(){this._isChanged||(this._isChanged=!0,e.timer.callLater(this,this.changeSource))},s.changeSource=function(){i.cacheCount++>50&&i.clearCache(),this._isChanged=!1;var t=this._source;if(t&&t.bitmap){var e=this.width,s=this.height,h=this._sizeGrid,n=t.sourceWidth,o=t.sourceHeight;if(!h||n===e&&o===s)this.cleanByTexture(t,this._offset?this._offset[0]:0,this._offset?this._offset[1]:0,e,s);else{t.$_GID||(t.$_GID=w.getGID());var l=t.$_GID+"."+e+"."+s+"."+h.join(".");if(i.cmdCaches[l])return void(this.cmds=i.cmdCaches[l]);this.clear();var r=h[0],a=h[1],c=h[2],u=h[3],_=h[4],d=!1;if(u+a>e){var f=e;d=!0,e=u+a}d&&(this.save(),this.clipRect(0,0,f,s)),u&&r&&this.drawTexture(i.getTexture(t,0,0,u,r),0,0,u,r),a&&r&&this.drawTexture(i.getTexture(t,n-a,0,a,r),e-a,0,a,r),u&&c&&this.drawTexture(i.getTexture(t,0,o-c,u,c),0,s-c,u,c),a&&c&&this.drawTexture(i.getTexture(t,n-a,o-c,a,c),e-a,s-c,a,c),r&&this.drawBitmap(_,i.getTexture(t,u,0,n-u-a,r),u,0,e-u-a,r),c&&this.drawBitmap(_,i.getTexture(t,u,o-c,n-u-a,c),u,s-c,e-u-a,c),u&&this.drawBitmap(_,i.getTexture(t,0,r,u,o-r-c),0,r,u,s-r-c),a&&this.drawBitmap(_,i.getTexture(t,n-a,r,a,o-r-c),e-a,r,a,s-r-c),this.drawBitmap(_,i.getTexture(t,u,r,n-u-a,o-r-c),u,r,e-u-a,s-r-c),d&&this.restore(),this.autoCacheCmd&&!C.isConchApp&&(i.cmdCaches[l]=this.cmds)}this._repaint()}},s.drawBitmap=function(t,i,e,s,h,n){void 0===h&&(h=0),void 0===n&&(n=0),h<.1||n<.1||(!t||i.width==h&&i.height==n?this.drawTexture(i,e,s,h,n):this.fillTexture(i,e,s,h,n))},s.clear=function(i){void 0===i&&(i=!0),t.prototype.clear.call(this,!1)},n(0,s,"sizeGrid",function(){return this._sizeGrid},function(t){this._sizeGrid=t,this._setChanged()}),n(0,s,"width",function(){return this._width?this._width:this._source?this._source.sourceWidth:0},function(t){this._width!=t&&(this._width=t,this._setChanged())}),n(0,s,"height",function(){return this._height?this._height:this._source?this._source.sourceHeight:0},function(t){this._height!=t&&(this._height=t,this._setChanged())}),n(0,s,"source",function(){return this._source},function(t){t?(this._source=t,this._setChanged()):(this._source=null,this.clear())}),i.getTexture=function(t,e,s,h,n){h<=0&&(h=1),n<=0&&(n=1),t.$_GID||(t.$_GID=w.getGID());var o=t.$_GID+"."+e+"."+s+"."+h+"."+n,l=i.textureCache[o];return l||(l=i.textureCache[o]=S.createFromTexture(t,e,s,h,n)),l},i.clearCache=function(){i.cacheCount=0,i.cmdCaches={},i.textureCache={}},i.setCache=function(t,e){i.cacheCount++,i.textureCache[t]=e},i.getCache=function(t){return i.textureCache[t]},i.cmdCaches={},i.cacheCount=0,i.textureCache={},i}(d),z=(function(t){function i(){i.__super.call(this)}h(i,"laya.ui.UIEvent",t),i.SHOW_TIP="showtip",i.HIDE_TIP="hidetip",i}(c),function(t){function i(){this._comXml=null,this._dataSource=null,this._toolTip=null,this._tag=null,this._disabled=!1,this._gray=!1,this.layoutEnabled=!0,i.__super.call(this),this._layout=B.EMPTY,this.preinitialize(),this.createChildren(),this.initialize()}h(i,"laya.ui.Component",t);var s=i.prototype;return e.imps(s,{"laya.ui.IComponent":!0}),s.destroy=function(i){void 0===i&&(i=!0),t.prototype.destroy.call(this,i),this._dataSource=this._layout=null,this._tag=null,this._toolTip=null},s.preinitialize=function(){},s.createChildren=function(){},s.initialize=function(){},s.callLater=function(t,i){e.timer.callLater(this,t,i)},s.runCallLater=function(t){e.timer.runCallLater(this,t)},s.commitMeasure=function(){},s.changeSize=function(){this.event("resize")},s.getLayout=function(){return this._layout===B.EMPTY&&(this._layout=new B),this._layout},s._setLayoutEnabled=function(t){this._layout&&this._layout.enable!=t&&(this._layout.enable=t,this.on("added",this,this.onAdded),this.on("removed",this,this.onRemoved),this.parent&&this.onAdded())},s.onRemoved=function(){this.parent.off("resize",this,this.onCompResize)},s.onAdded=function(){this.parent.on("resize",this,this.onCompResize),this.resetLayoutX(),this.resetLayoutY()},s.onCompResize=function(){this._layout&&this._layout.enable&&(this.resetLayoutX(),this.resetLayoutY())},s.resetLayoutX=function(){var t=this._layout;if(isNaN(t.anchorX)||(this.pivotX=t.anchorX*this.width),this.layoutEnabled){var i=this.parent;i&&(isNaN(t.centerX)?isNaN(t.left)?isNaN(t.right)||(this.x=Math.round(i.width-this.displayWidth-t.right+this.pivotX*this.scaleX)):(this.x=Math.round(t.left+this.pivotX*this.scaleX),isNaN(t.right)||(this.width=(i._width-t.left-t.right)/(this.scaleX||.01))):this.x=Math.round(.5*(i.width-this.displayWidth)+t.centerX+this.pivotX*this.scaleX))}},s.resetLayoutY=function(){var t=this._layout;if(isNaN(t.anchorY)||(this.pivotY=t.anchorY*this.height),this.layoutEnabled){var i=this.parent;i&&(isNaN(t.centerY)?isNaN(t.top)?isNaN(t.bottom)||(this.y=Math.round(i.height-this.displayHeight-t.bottom+this.pivotY*this.scaleY)):(this.y=Math.round(t.top+this.pivotY*this.scaleY),isNaN(t.bottom)||(this.height=(i._height-t.top-t.bottom)/(this.scaleY||.01))):this.y=Math.round(.5*(i.height-this.displayHeight)+t.centerY+this.pivotY*this.scaleY))}},s.onMouseOver=function(t){e.stage.event("showtip",this._toolTip)},s.onMouseOut=function(t){e.stage.event("hidetip",this._toolTip)},n(0,s,"displayWidth",function(){return this.width*this.scaleX}),n(0,s,"width",function(){return this._width?this._width:this.measureWidth},function(t){this._width!=t&&(this._width=t,this.conchModel&&this.conchModel.size(this._width,this._height),this.callLater(this.changeSize),!this._layout.enable||isNaN(this._layout.centerX)&&isNaN(this._layout.right)&&isNaN(this._layout.anchorX)||this.resetLayoutX())}),n(0,s,"measureWidth",function(){var t=0;this.commitMeasure();for(var i=this.numChildren-1;i>-1;i--){var e=this.getChildAt(i);e.visible&&(t=Math.max(e.x+e.width*e.scaleX,t))}return t}),n(0,s,"displayHeight",function(){return this.height*this.scaleY}),n(0,s,"height",function(){return this._height?this._height:this.measureHeight},function(t){this._height!=t&&(this._height=t,this.conchModel&&this.conchModel.size(this._width,this._height),this.callLater(this.changeSize),!this._layout.enable||isNaN(this._layout.centerY)&&isNaN(this._layout.bottom)&&isNaN(this._layout.anchorY)||this.resetLayoutY())}),n(0,s,"dataSource",function(){return this._dataSource},function(t){this._dataSource=t;for(var i in this._dataSource)this.hasOwnProperty(i)&&"function"!=typeof this[i]&&(this[i]=this._dataSource[i])}),n(0,s,"scaleY",t.prototype._$get_scaleY,function(i){t.prototype._$get_scaleY.call(this)!=i&&(t.prototype._$set_scaleY.call(this,i),this.callLater(this.changeSize),this._layout.enable&&this.resetLayoutY())}),n(0,s,"measureHeight",function(){var t=0;this.commitMeasure();for(var i=this.numChildren-1;i>-1;i--){var e=this.getChildAt(i);e.visible&&(t=Math.max(e.y+e.height*e.scaleY,t))}return t}),n(0,s,"scaleX",t.prototype._$get_scaleX,function(i){t.prototype._$get_scaleX.call(this)!=i&&(t.prototype._$set_scaleX.call(this,i),this.callLater(this.changeSize),this._layout.enable&&this.resetLayoutX())}),n(0,s,"top",function(){return this._layout.top},function(t){t!=this._layout.top&&(this.getLayout().top=t,this._setLayoutEnabled(!0)),this.resetLayoutY()}),n(0,s,"bottom",function(){return this._layout.bottom},function(t){t!=this._layout.bottom&&(this.getLayout().bottom=t,this._setLayoutEnabled(!0)),this.resetLayoutY()}),n(0,s,"left",function(){return this._layout.left},function(t){t!=this._layout.left&&(this.getLayout().left=t,this._setLayoutEnabled(!0)),this.resetLayoutX()}),n(0,s,"right",function(){return this._layout.right},function(t){t!=this._layout.right&&(this.getLayout().right=t,this._setLayoutEnabled(!0)),this.resetLayoutX()}),n(0,s,"centerX",function(){return this._layout.centerX},function(t){t!=this._layout.centerX&&(this.getLayout().centerX=t,this._setLayoutEnabled(!0)),this.resetLayoutX()}),n(0,s,"centerY",function(){return this._layout.centerY},function(t){t!=this._layout.centerY&&(this.getLayout().centerY=t,this._setLayoutEnabled(!0)),this.resetLayoutY()}),n(0,s,"anchorX",function(){return this._layout.anchorX},function(t){t!=this._layout.anchorX&&(this.getLayout().anchorX=t,this._setLayoutEnabled(!0)),this.resetLayoutX()}),n(0,s,"anchorY",function(){return this._layout.anchorY},function(t){t!=this._layout.anchorY&&(this.getLayout().anchorY=t,this._setLayoutEnabled(!0)),this.resetLayoutY()}),n(0,s,"tag",function(){return this._tag},function(t){this._tag=t}),n(0,s,"toolTip",function(){return this._toolTip},function(t){this._toolTip!=t&&(this._toolTip=t,null!=t?(this.on("mouseover",this,this.onMouseOver),this.on("mouseout",this,this.onMouseOut)):(this.off("mouseover",this,this.onMouseOver),this.off("mouseout",this,this.onMouseOut)))}),n(0,s,"comXml",function(){return this._comXml},function(t){this._comXml=t}),n(0,s,"gray",function(){return this._gray},function(t){t!==this._gray&&(this._gray=t,I.gray(this,t))}),n(0,s,"disabled",function(){return this._disabled},function(t){t!==this._disabled&&(this.gray=this._disabled=t,this.mouseEnabled=!t)}),i}(v)),T=function(t){function i(){this.lockLayer=null,this.popupEffect=function(t){t.scale(1,1),x.from(t,{x:e.stage.width/2,y:e.stage.height/2,scaleX:0,scaleY:0},300,a.backOut,f.create(this,this.doOpen,[t]))},this.closeEffect=function(t,i){x.to(t,{x:e.stage.width/2,y:e.stage.height/2,scaleX:0,scaleY:0},300,a.strongOut,f.create(this,this.doClose,[t,i]))},i.__super.call(this),this.maskLayer=new v,this.popupEffectHandler=new f(this,this.popupEffect),this.closeEffectHandler=new f(this,this.closeEffect),this.mouseEnabled=this.maskLayer.mouseEnabled=!0,this.zOrder=1e3,e.stage.addChild(this),e.stage.on("resize",this,this._onResize),L.closeDialogOnSide&&this.maskLayer.on("click",this,this._closeOnSide),this._onResize(null)}h(i,"laya.ui.DialogManager",t);var s=i.prototype;return s._closeOnSide=function(){var t=this.getChildAt(this.numChildren-1);t instanceof laya.ui.Dialog&&t.close("side")},s.setLockView=function(t){this.lockLayer||(this.lockLayer=new P,this.lockLayer.mouseEnabled=!0,this.lockLayer.size(e.stage.width,e.stage.height)),this.lockLayer.removeChildren(),t&&(t.centerX=t.centerY=0,this.lockLayer.addChild(t))},s._onResize=function(t){var i=this.maskLayer.width=e.stage.width,s=this.maskLayer.height=e.stage.height;this.lockLayer&&this.lockLayer.size(i,s),this.maskLayer.graphics.clear(),this.maskLayer.graphics.drawRect(0,0,i,s,L.popupBgColor),this.maskLayer.alpha=L.popupBgAlpha;for(var h=this.numChildren-1;h>-1;h--){var n=this.getChildAt(h);n.popupCenter&&this._centerDialog(n)}},s._centerDialog=function(t){t.x=Math.round((e.stage.width-t.width>>1)+t.pivotX),t.y=Math.round((e.stage.height-t.height>>1)+t.pivotY)},s.open=function(t,i){void 0===i&&(i=!1),i&&this.removeChildren(),t.popupCenter&&this._centerDialog(t),this.addChild(t),(t.isModal||this._$P.hasZorder)&&this.timer.callLater(this,this._checkMask),null!=t.popupEffect?t.popupEffect.runWith(t):this.doOpen(t),this.event("open")},s.doOpen=function(t){t.onOpened()},s.lock=function(t){this.lockLayer&&(t?this.addChild(this.lockLayer):this.lockLayer.removeSelf())},s.close=function(t,i){null!=t.closeEffect?t.closeEffect.runWith([t,i]):this.doClose(t,i),this.event("close")},s.doClose=function(t,i){t.removeSelf(),t.isModal&&this._checkMask(),t.closeHandler&&t.closeHandler.runWith(i),t.onClosed(i)},s.closeAll=function(){this.removeChildren(),this.event("close")},s.getDialogsByGroup=function(t){for(var i=[],e=this.numChildren-1;e>-1;e--){var s=this.getChildAt(e);s.group===t&&i.push(s)}return i},s.closeByGroup=function(t){for(var i=[],e=this.numChildren-1;e>-1;e--){var s=this.getChildAt(e);s.group===t&&(s.close(),i.push(s))}return i},s._checkMask=function(){this.maskLayer.removeSelf();for(var t=this.numChildren-1;t>-1;t--){var i=this.getChildAt(t);if(i&&i.isModal)return void this.addChildAt(this.maskLayer,t)}},i}(v),P=function(t){function i(){i.__super.call(this)}h(i,"laya.ui.Box",t);var s=i.prototype;return e.imps(s,{"laya.ui.IBox":!0}),n(0,s,"dataSource",t.prototype._$get_dataSource,function(t){this._dataSource=t;for(var i in t){var e=this.getChildByName(i);e?e.dataSource=t[i]:this.hasOwnProperty(i)&&"function"!=typeof this[i]&&(this[i]=t[i])}}),i}(z),H=function(t){function i(t,e){this.toggle=!1,this._bitmap=null,this._text=null,this._strokeColors=null,this._state=0,this._selected=!1,this._skin=null,this._autoSize=!0,this._sources=null,this._clickHandler=null,this._stateChanged=!1,i.__super.call(this),this._labelColors=k.buttonLabelColors,this._stateNum=k.buttonStateNum,void 0===e&&(e=""),this.skin=t,this.label=e}h(i,"laya.ui.Button",t);var o=i.prototype;return e.imps(o,{"laya.ui.ISelect":!0}),o.destroy=function(i){void 0===i&&(i=!0),t.prototype.destroy.call(this,i),this._bitmap&&this._bitmap.destroy(),this._text&&this._text.destroy(i),this._bitmap=null,this._text=null,this._clickHandler=null,this._labelColors=this._sources=this._strokeColors=null},o.createChildren=function(){this.graphics=this._bitmap=new M},o.createText=function(){this._text||(this._text=new b,this._text.overflow=b.HIDDEN,this._text.align="center",this._text.valign="middle",this._text.width=this._width,this._text.height=this._height)},o.initialize=function(){1!==this._mouseEnableState&&(this.mouseEnabled=!0,this._setBit(2,!0)),this._createListener("mouseover",this,this.onMouse,null,!1,!1),this._createListener("mouseout",this,this.onMouse,null,!1,!1),this._createListener("mousedown",this,this.onMouse,null,!1,!1),this._createListener("mouseup",this,this.onMouse,null,!1,!1),this._createListener("click",this,this.onMouse,null,!1,!1)},o.onMouse=function(t){if(this.toggle!==!1||!this._selected)return"click"===t.type?(this.toggle&&(this.selected=!this._selected),void(this._clickHandler&&this._clickHandler.run())):void(!this._selected&&(this.state=i.stateMap[t.type]))},o.changeClips=function(){var t=g.getRes(this._skin);if(!t)return void console.log("lose skin",this._skin);var i=t.sourceWidth,e=t.sourceHeight/this._stateNum;t.$_GID||(t.$_GID=w.getGID());var s=t.$_GID+"-"+this._stateNum,h=M.getCache(s);if(h)this._sources=h;else{if(this._sources=[],1===this._stateNum)this._sources.push(t);else for(var n=0;n<this._stateNum;n++)this._sources.push(S.createFromTexture(t,0,e*n,i,e));M.setCache(s,this._sources)}this._autoSize?(this._bitmap.width=this._width||i,this._bitmap.height=this._height||e,this._text&&(this._text.width=this._bitmap.width,this._text.height=this._bitmap.height)):this._text&&(this._text.x=i)},o.changeState=function(){this._stateChanged=!1,this.runCallLater(this.changeClips);var t=this._state<this._stateNum?this._state:this._stateNum-1;this._sources&&(this._bitmap.source=this._sources[t]),this.label&&(this._text.color=this._labelColors[t],this._strokeColors&&(this._text.strokeColor=this._strokeColors[t]))},o._setStateChanged=function(){this._stateChanged||(this._stateChanged=!0,this.callLater(this.changeState))},n(0,o,"labelStrokeColor",function(){return this.createText(),this._text.strokeColor},function(t){this.createText(),this._text.strokeColor=t}),n(0,o,"measureHeight",function(){return this.runCallLater(this.changeClips),this._text?Math.max(this._bitmap.height,this._text.height):this._bitmap.height}),n(0,o,"skin",function(){return this._skin},function(t){this._skin!=t&&(this._skin=t,this.callLater(this.changeClips),this._setStateChanged())}),n(0,o,"state",function(){return this._state},function(t){this._state!=t&&(this._state=t,this._setStateChanged())}),n(0,o,"text",function(){return this.createText(),this._text}),n(0,o,"stateNum",function(){return this._stateNum},function(t){this._stateNum!=t&&(this._stateNum=t<1?1:t>3?3:t,this.callLater(this.changeClips))}),n(0,o,"strokeColors",function(){return this._strokeColors?this._strokeColors.join(","):""},function(t){this._strokeColors=I.fillArray(k.buttonLabelColors,t,String),this._setStateChanged()}),n(0,o,"labelColors",function(){return this._labelColors.join(",")},function(t){this._labelColors=I.fillArray(k.buttonLabelColors,t,String),this._setStateChanged()}),n(0,o,"measureWidth",function(){return this.runCallLater(this.changeClips),this._autoSize?this._bitmap.width:(this.runCallLater(this.changeState),this._bitmap.width+(this._text?this._text.width:0))}),n(0,o,"label",function(){return this._text?this._text.text:null},function(t){(this._text||t)&&(this.createText(),this._text.text!=t&&(t&&!this._text.parent&&this.addChild(this._text),this._text.text=(t+"").replace(/\\n/g,"\n"),this._setStateChanged()))}),n(0,o,"selected",function(){return this._selected},function(t){this._selected!=t&&(this._selected=t,this.state=this._selected?2:0,this.event("change"))}),n(0,o,"labelPadding",function(){return this.createText(),this._text.padding.join(",")},function(t){this.createText(),this._text.padding=I.fillArray(k.labelPadding,t,Number)}),n(0,o,"labelSize",function(){return this.createText(),this._text.fontSize},function(t){this.createText(),this._text.fontSize=t}),n(0,o,"labelStroke",function(){return this.createText(),this._text.stroke},function(t){this.createText(),this._text.stroke=t}),n(0,o,"labelBold",function(){return this.createText(),this._text.bold},function(t){this.createText(),this._text.bold=t}),n(0,o,"labelFont",function(){return this.createText(),this._text.font},function(t){this.createText(),this._text.font=t}),n(0,o,"labelAlign",function(){return this.createText(),this._text.align},function(t){this.createText(),this._text.align=t}),n(0,o,"clickHandler",function(){return this._clickHandler},function(t){this._clickHandler=t}),n(0,o,"sizeGrid",function(){return this._bitmap.sizeGrid?this._bitmap.sizeGrid.join(","):null},function(t){this._bitmap.sizeGrid=I.fillArray(k.defaultSizeGrid,t,Number)}),n(0,o,"width",t.prototype._$get_width,function(i){t.prototype._$set_width.call(this,i),this._autoSize&&(this._bitmap.width=i,this._text&&(this._text.width=i))}),n(0,o,"height",t.prototype._$get_height,function(i){t.prototype._$set_height.call(this,i),this._autoSize&&(this._bitmap.height=i,this._text&&(this._text.height=i))}),n(0,o,"dataSource",t.prototype._$get_dataSource,function(i){this._dataSource=i,"number"==typeof i||"string"==typeof i?this.label=i+"":t.prototype._$set_dataSource.call(this,i)}),n(0,o,"iconOffset",function(){return this._bitmap._offset?this._bitmap._offset.join(","):null},function(t){this._bitmap._offset=t?I.fillArray([1,1],t,Number):[]}),s(i,["stateMap",function(){return this.stateMap={mouseup:0,mouseover:1,mousedown:2,mouseout:0}}]),i}(z),N=function(t){function i(t,e,s){this._sources=null,this._bitmap=null,this._skin=null,this._clipX=1,this._clipY=1,this._clipWidth=0,this._clipHeight=0,this._autoPlay=!1,this._interval=50,this._complete=null,this._isPlaying=!1,this._index=0,this._clipChanged=!1,this._group=null,i.__super.call(this),void 0===e&&(e=1),void 0===s&&(s=1),this._clipX=e,this._clipY=s,this.skin=t}h(i,"laya.ui.Clip",t);var s=i.prototype;return s.destroy=function(i){void 0===i&&(i=!0),t.prototype.destroy.call(this,!0),this._bitmap&&this._bitmap.destroy(),this._bitmap=null,this._sources=null},s.dispose=function(){this.destroy(!0),e.loader.clearRes(this._skin)},s.createChildren=function(){this.graphics=this._bitmap=new M},s._onDisplay=function(t){this._isPlaying?this._displayedInStage?this.play():this.stop():this._autoPlay&&this.play()},s.changeClip=function(){if(this._clipChanged=!1,this._skin){var t=g.getRes(this._skin);t?this.loadComplete(this._skin,t):e.loader.load(this._skin,f.create(this,this.loadComplete,[this._skin]))}},s.loadComplete=function(t,i){if(t===this._skin&&i){var e=this._clipWidth||Math.ceil(i.sourceWidth/this._clipX),s=this._clipHeight||Math.ceil(i.sourceHeight/this._clipY),h=this._skin+e+s,n=M.getCache(h);if(n)this._sources=n;else{this._sources=[];for(var o=0;o<this._clipY;o++)for(var l=0;l<this._clipX;l++)this._sources.push(S.createFromTexture(i,e*l,s*o,e,s));M.setCache(h,this._sources)}this.index=this._index,this.event("loaded"),this.onCompResize()}},s.play=function(){this._isPlaying=!0,this.index=0,this._index++,e.timer.loop(this.interval,this,this._loop),this.on("display",this,this._onDisplay),this.on("undisplay",this,this._onDisplay)},s._loop=function(){this._style.visible&&this._sources&&(this.index=this._index,this._index++,this._index>=this._sources.length&&(this._index=0))},s.stop=function(){this._isPlaying=!1,e.timer.clear(this,this._loop)},s._setClipChanged=function(){this._clipChanged||(this._clipChanged=!0,this.callLater(this.changeClip))},n(0,s,"interval",function(){return this._interval},function(t){this._interval!=t&&(this._interval=t,this._isPlaying&&this.play())}),n(0,s,"skin",function(){return this._skin},function(t){this._skin!=t&&(this._skin=t,t?this._setClipChanged():this._bitmap.source=null)}),n(0,s,"sources",function(){return this._sources},function(t){this._sources=t,this.index=this._index,this.event("loaded")}),n(0,s,"clipX",function(){return this._clipX},function(t){this._clipX=t||1,this._setClipChanged()}),n(0,s,"clipY",function(){return this._clipY},function(t){this._clipY=t||1,this._setClipChanged()}),n(0,s,"total",function(){return this.runCallLater(this.changeClip),this._sources?this._sources.length:0}),n(0,s,"clipWidth",function(){return this._clipWidth},function(t){this._clipWidth=t,this._setClipChanged()}),n(0,s,"sizeGrid",function(){return this._bitmap.sizeGrid?this._bitmap.sizeGrid.join(","):null},function(t){this._bitmap.sizeGrid=I.fillArray(k.defaultSizeGrid,t,Number)}),n(0,s,"group",function(){return this._group},function(t){t&&this._skin&&g.setGroup(this._skin,t),this._group=t}),n(0,s,"clipHeight",function(){return this._clipHeight},function(t){this._clipHeight=t,this._setClipChanged()}),n(0,s,"width",t.prototype._$get_width,function(i){t.prototype._$set_width.call(this,i),this._bitmap.width=i}),n(0,s,"height",t.prototype._$get_height,function(i){t.prototype._$set_height.call(this,i),this._bitmap.height=i}),n(0,s,"measureWidth",function(){return this.runCallLater(this.changeClip),this._bitmap.width}),n(0,s,"measureHeight",function(){return this.runCallLater(this.changeClip),this._bitmap.height}),n(0,s,"index",function(){return this._index},function(t){this._index=t,this._bitmap&&this._sources&&(this._bitmap.source=this._sources[t]),this.event("change")}),n(0,s,"autoPlay",function(){return this._autoPlay},function(t){this._autoPlay!=t&&(this._autoPlay=t,t?this.play():this.stop())}),n(0,s,"isPlaying",function(){return this._isPlaying},function(t){this._isPlaying=t}),n(0,s,"dataSource",t.prototype._$get_dataSource,function(i){this._dataSource=i,"number"==typeof i&&Math.floor(i)==i||"string"==typeof i?this.index=parseInt(i):t.prototype._$set_dataSource.call(this,i)}),n(0,s,"bitmap",function(){return this._bitmap}),i}(z),Y=function(t){function i(){this.changeHandler=null,this._gridSize=11,this._bgColor="#ffffff",this._borderColor="#000000",this._inputColor="#000000",this._inputBgColor="#efefef",this._colorPanel=null,this._colorTiles=null,this._colorBlock=null,this._colorInput=null,this._colorButton=null,this._colors=[],this._selectedColor="#000000",this._panelChanged=!1,i.__super.call(this)}h(i,"laya.ui.ColorPicker",t);var s=i.prototype;return s.destroy=function(i){void 0===i&&(i=!0),t.prototype.destroy.call(this,i),this._colorPanel&&this._colorPanel.destroy(i),this._colorButton&&this._colorButton.destroy(i),this._colorPanel=null,this._colorTiles=null,this._colorBlock=null,this._colorInput=null,this._colorButton=null,this._colors=null,this.changeHandler=null},s.createChildren=function(){this.addChild(this._colorButton=new H),this._colorPanel=new P,this._colorPanel.size(230,166),this._colorPanel.addChild(this._colorTiles=new v),this._colorPanel.addChild(this._colorBlock=new v),this._colorPanel.addChild(this._colorInput=new p)},s.initialize=function(){this._colorButton.on("click",this,this.onColorButtonClick),this._colorBlock.pos(5,5),this._colorInput.pos(60,5),this._colorInput.size(60,20),this._colorInput.on("change",this,this.onColorInputChange),this._colorInput.on("keydown",this,this.onColorFieldKeyDown),this._colorTiles.pos(5,30),this._colorTiles.on("mousemove",this,this.onColorTilesMouseMove),this._colorTiles.on("click",this,this.onColorTilesClick),this._colorTiles.size(20*this._gridSize,12*this._gridSize),this._colorPanel.on("mousedown",this,this.onPanelMouseDown),this.bgColor=this._bgColor},s.onPanelMouseDown=function(t){t.stopPropagation()},s.changePanel=function(){this._panelChanged=!1;var t=this._colorPanel.graphics;t.clear(),t.drawRect(0,0,230,166,this._bgColor,this._borderColor),this.drawBlock(this._selectedColor),this._colorInput.borderColor=this._borderColor,this._colorInput.bgColor=this._inputBgColor,this._colorInput.color=this._inputColor,t=this._colorTiles.graphics,t.clear();for(var i=[0,3355443,6710886,10066329,13421772,16777215,16711680,65280,255,16776960,65535,16711935],e=0;e<12;e++)for(var s=0;s<20;s++){var h=0;h=0===s?i[e]:1===s?0:51*(((3*e+s/6)%3<<0)+3*(e/6<<0))<<16|s%6*51<<8|(e<<0)%6*51;var n=I.toColor(h);this._colors.push(n);var o=s*this._gridSize,l=e*this._gridSize;t.drawRect(o,l,this._gridSize,this._gridSize,n,"#000000")}},s.onColorButtonClick=function(t){this._colorPanel.parent?this.close():this.open()},s.open=function(){var t=this.localToGlobal(new m),i=t.x+this._colorPanel.width<=e.stage.width?t.x:e.stage.width-this._colorPanel.width,s=t.y+this._colorButton.height;s=s+this._colorPanel.height<=e.stage.height?s:t.y-this._colorPanel.height,this._colorPanel.pos(i,s),this._colorPanel.zOrder=1001,e._currentStage.addChild(this._colorPanel),e.stage.on("mousedown",this,this.removeColorBox)},s.close=function(){e.stage.off("mousedown",this,this.removeColorBox),this._colorPanel.removeSelf()},s.removeColorBox=function(t){this.close()},s.onColorFieldKeyDown=function(t){13==t.keyCode&&(this._colorInput.text?this.selectedColor=this._colorInput.text:this.selectedColor=null,this.close(),t.stopPropagation())},s.onColorInputChange=function(t){this._colorInput.text?this.drawBlock(this._colorInput.text):this.drawBlock("#FFFFFF")},s.onColorTilesClick=function(t){this.selectedColor=this.getColorByMouse(),this.close()},s.onColorTilesMouseMove=function(t){this._colorInput.focus=!1;var i=this.getColorByMouse();this._colorInput.text=i,this.drawBlock(i)},s.getColorByMouse=function(){var t=this._colorTiles.getMousePoint(),i=Math.floor(t.x/this._gridSize),e=Math.floor(t.y/this._gridSize);return this._colors[20*e+i]},s.drawBlock=function(t){var i=this._colorBlock.graphics;i.clear();var e=t?t:"#ffffff";i.drawRect(0,0,50,20,e,this._borderColor),t||i.drawLine(0,0,50,20,"#ff0000")},s.changeColor=function(){var t=this.graphics;t.clear();var i=this._selectedColor||"#000000";t.drawRect(0,0,this._colorButton.width,this._colorButton.height,i)},s._setPanelChanged=function(){this._panelChanged||(this._panelChanged=!0,this.callLater(this.changePanel))},n(0,s,"inputBgColor",function(){return this._inputBgColor},function(t){this._inputBgColor=t,this._setPanelChanged()}),n(0,s,"selectedColor",function(){return this._selectedColor},function(t){this._selectedColor!=t&&(this._selectedColor=this._colorInput.text=t,this.drawBlock(t),this.changeColor(),this.changeHandler&&this.changeHandler.runWith(this._selectedColor),this.event("change",c.EMPTY.setTo("change",this,this)))}),n(0,s,"skin",function(){return this._colorButton.skin},function(t){this._colorButton.skin=t,this.changeColor()}),n(0,s,"bgColor",function(){return this._bgColor},function(t){this._bgColor=t,this._setPanelChanged()}),n(0,s,"borderColor",function(){return this._borderColor},function(t){this._borderColor=t,this._setPanelChanged()}),n(0,s,"inputColor",function(){return this._inputColor},function(t){this._inputColor=t,this._setPanelChanged()}),i}(z),O=function(t){function i(t,e){this._visibleNum=6,this._button=null,this._list=null,this._isOpen=!1,this._itemSize=12,this._labels=[],this._selectedIndex=-1,this._selectHandler=null,this._itemHeight=NaN,this._listHeight=NaN,this._listChanged=!1,this._itemChanged=!1,this._scrollBarSkin=null,this._isCustomList=!1,this.itemRender=null,i.__super.call(this),this._itemColors=k.comboBoxItemColors,this.skin=t,this.labels=e}h(i,"laya.ui.ComboBox",t);var s=i.prototype;return s.destroy=function(i){void 0===i&&(i=!0),t.prototype.destroy.call(this,i),this._button&&this._button.destroy(i),this._list&&this._list.destroy(i),this._button=null,this._list=null,this._itemColors=null,this._labels=null,this._selectHandler=null},s.createChildren=function(){this.addChild(this._button=new H),this._button.text.align="left",this._button.labelPadding="0,0,0,5",this._button.on("mousedown",this,this.onButtonMouseDown)},s._createList=function(){this._list=new F,this._scrollBarSkin&&(this._list.vScrollBarSkin=this._scrollBarSkin),this._setListEvent(this._list)},s._setListEvent=function(t){this._list.selectEnable=!0,this._list.on("mousedown",this,this.onListDown),this._list.mouseHandler=f.create(this,this.onlistItemMouse,null,!1),this._list.scrollBar&&this._list.scrollBar.on("mousedown",this,this.onScrollBarDown)},s.onListDown=function(t){t.stopPropagation()},s.onScrollBarDown=function(t){t.stopPropagation()},s.onButtonMouseDown=function(t){
this.callLater(this.switchTo,[!this._isOpen])},s.changeList=function(){this._listChanged=!1;var t=this.width-2,i=this._itemColors[2];this._itemHeight=this._itemSize+6,this._list.itemRender=this.itemRender||{type:"Box",child:[{type:"Label",props:{name:"label",x:1,padding:"3,3,3,3",width:t,height:this._itemHeight,fontSize:this._itemSize,color:i}}]},this._list.repeatY=this._visibleNum,this._list.refresh()},s.onlistItemMouse=function(t,i){var e=t.type;if("mouseover"===e||"mouseout"===e){if(this._isCustomList)return;var s=this._list.getCell(i);if(!s)return;var h=s.getChildByName("label");h&&("mouseover"===e?(h.bgColor=this._itemColors[0],h.color=this._itemColors[1]):(h.bgColor=null,h.color=this._itemColors[2]))}else"click"===e&&(this.selectedIndex=i,this.isOpen=!1)},s.switchTo=function(t){this.isOpen=t},s.changeOpen=function(){this.isOpen=!this._isOpen},s.changeItem=function(){if(this._itemChanged=!1,this._listHeight=this._labels.length>0?Math.min(this._visibleNum,this._labels.length)*this._itemHeight:this._itemHeight,!this._isCustomList){var t=this._list.graphics;t.clear(),t.drawRect(0,0,this.width-1,this._listHeight,this._itemColors[4],this._itemColors[3])}var i=this._list.array||[];i.length=0;for(var e=0,s=this._labels.length;e<s;e++)i.push({label:this._labels[e]});this._list.height=this._listHeight,this._list.array=i},s.changeSelected=function(){this._button.label=this.selectedLabel},s.removeList=function(t){this.isOpen=!1},n(0,s,"selectedIndex",function(){return this._selectedIndex},function(t){this._selectedIndex!=t&&(this._selectedIndex=t,this._labels.length>0?this.changeSelected():this.callLater(this.changeSelected),this.event("change",[c.EMPTY.setTo("change",this,this)]),this._selectHandler&&this._selectHandler.runWith(this._selectedIndex))}),n(0,s,"measureHeight",function(){return this._button.height}),n(0,s,"skin",function(){return this._button.skin},function(t){this._button.skin!=t&&(this._button.skin=t,this._listChanged=!0)}),n(0,s,"measureWidth",function(){return this._button.width}),n(0,s,"width",t.prototype._$get_width,function(i){t.prototype._$set_width.call(this,i),this._button.width=this._width,this._itemChanged=!0,this._listChanged=!0}),n(0,s,"selectedLabel",function(){return this._selectedIndex>-1&&this._selectedIndex<this._labels.length?this._labels[this._selectedIndex]:null},function(t){this.selectedIndex=this._labels.indexOf(t)}),n(0,s,"labels",function(){return this._labels.join(",")},function(t){this._labels.length>0&&(this.selectedIndex=-1),t?this._labels=t.split(","):this._labels.length=0,this._itemChanged=!0}),n(0,s,"height",t.prototype._$get_height,function(i){t.prototype._$set_height.call(this,i),this._button.height=this._height}),n(0,s,"selectHandler",function(){return this._selectHandler},function(t){this._selectHandler=t}),n(0,s,"visibleNum",function(){return this._visibleNum},function(t){this._visibleNum=t,this._listChanged=!0}),n(0,s,"labelBold",function(){return this._button.text.bold},function(t){this._button.text.bold=t}),n(0,s,"itemColors",function(){return String(this._itemColors)},function(t){this._itemColors=I.fillArray(this._itemColors,t,String),this._listChanged=!0}),n(0,s,"itemSize",function(){return this._itemSize},function(t){this._itemSize=t,this._listChanged=!0}),n(0,s,"scrollBar",function(){return this.list.scrollBar}),n(0,s,"isOpen",function(){return this._isOpen},function(t){if(this._isOpen!=t)if(this._isOpen=t,this._button.selected=this._isOpen,this._isOpen){this._list||this._createList(),this._listChanged&&!this._isCustomList&&this.changeList(),this._itemChanged&&this.changeItem();var i=this.localToGlobal(m.TEMP.setTo(0,0)),s=i.y+this._button.height;s=s+this._listHeight<=e.stage.height?s:i.y-this._listHeight,this._list.pos(i.x,s),this._list.zOrder=1001,e._currentStage.addChild(this._list),e.stage.once("mousedown",this,this.removeList),this._list.selectedIndex=this._selectedIndex}else this._list&&this._list.removeSelf()}),n(0,s,"scrollBarSkin",function(){return this._scrollBarSkin},function(t){this._scrollBarSkin=t}),n(0,s,"sizeGrid",function(){return this._button.sizeGrid},function(t){this._button.sizeGrid=t}),n(0,s,"button",function(){return this._button}),n(0,s,"list",function(){return this._list||this._createList(),this._list},function(t){t&&(t.removeSelf(),this._isCustomList=!0,this._list=t,this._setListEvent(t),this._itemHeight=t.getCell(0).height+t.spaceY)}),n(0,s,"dataSource",t.prototype._$get_dataSource,function(i){this._dataSource=i,"number"==typeof i&&Math.floor(i)==i||"string"==typeof i?this.selectedIndex=parseInt(i):i instanceof Array?this.labels=i.join(","):t.prototype._$set_dataSource.call(this,i)}),n(0,s,"labelColors",function(){return this._button.labelColors},function(t){this._button.labelColors!=t&&(this._button.labelColors=t)}),n(0,s,"labelPadding",function(){return this._button.text.padding.join(",")},function(t){this._button.text.padding=I.fillArray(k.labelPadding,t,Number)}),n(0,s,"labelSize",function(){return this._button.text.fontSize},function(t){this._button.text.fontSize=t}),n(0,s,"labelFont",function(){return this._button.text.font},function(t){this._button.text.font=t}),n(0,s,"stateNum",function(){return this._button.stateNum},function(t){this._button.stateNum=t}),i}(z),X=function(t){function i(t){this.rollRatio=.95,this.changeHandler=null,this.scaleBar=!0,this.autoHide=!1,this.elasticDistance=0,this.elasticBackTime=500,this.upButton=null,this.downButton=null,this.slider=null,this._scrollSize=1,this._skin=null,this._thumbPercent=1,this._target=null,this._lastPoint=null,this._lastOffset=0,this._checkElastic=!1,this._isElastic=!1,this._value=NaN,this._hide=!1,this._clickOnly=!0,this._offsets=null,i.__super.call(this),this._showButtons=L.showButtons,this._touchScrollEnable=L.touchScrollEnable,this._mouseWheelEnable=L.mouseWheelEnable,this.skin=t,this.max=1}h(i,"laya.ui.ScrollBar",t);var s=i.prototype;return s.destroy=function(i){void 0===i&&(i=!0),this.stopScroll(),this.target=null,t.prototype.destroy.call(this,i),this.upButton&&this.upButton.destroy(i),this.downButton&&this.downButton.destroy(i),this.slider&&this.slider.destroy(i),this.upButton=this.downButton=null,this.slider=null,this.changeHandler=null,this._offsets=null},s.createChildren=function(){this.addChild(this.slider=new A),this.addChild(this.upButton=new H),this.addChild(this.downButton=new H)},s.initialize=function(){this.slider.showLabel=!1,this.slider.on("change",this,this.onSliderChange),this.slider.setSlider(0,0,0),this.upButton.on("mousedown",this,this.onButtonMouseDown),this.downButton.on("mousedown",this,this.onButtonMouseDown)},s.onSliderChange=function(){this.value=this.slider.value},s.onButtonMouseDown=function(t){var i=t.currentTarget===this.upButton;this.slide(i),e.timer.once(k.scrollBarDelayTime,this,this.startLoop,[i]),e.stage.once("mouseup",this,this.onStageMouseUp)},s.startLoop=function(t){e.timer.frameLoop(1,this,this.slide,[t])},s.slide=function(t){t?this.value-=this._scrollSize:this.value+=this._scrollSize},s.onStageMouseUp=function(t){e.timer.clear(this,this.startLoop),e.timer.clear(this,this.slide)},s.changeScrollBar=function(){this.upButton.visible=this._showButtons,this.downButton.visible=this._showButtons,this._showButtons&&(this.upButton.skin=this._skin.replace(".png","$up.png"),this.downButton.skin=this._skin.replace(".png","$down.png")),this.slider.isVertical?this.slider.y=this._showButtons?this.upButton.height:0:this.slider.x=this._showButtons?this.upButton.width:0,this.resetPositions()},s.changeSize=function(){t.prototype.changeSize.call(this),this.resetPositions(),this.event("change"),this.changeHandler&&this.changeHandler.runWith(this.value)},s.resetPositions=function(){this.slider.isVertical?this.slider.height=this.height-(this._showButtons?this.upButton.height+this.downButton.height:0):this.slider.width=this.width-(this._showButtons?this.upButton.width+this.downButton.width:0),this.resetButtonPosition()},s.resetButtonPosition=function(){this.slider.isVertical?this.downButton.y=this.slider.y+this.slider.height:this.downButton.x=this.slider.x+this.slider.width},s.setScroll=function(t,i,e){this.runCallLater(this.changeSize),this.slider.setSlider(t,i,e),this.slider.bar.visible=i>0,!this._hide&&this.autoHide&&(this.visible=!1)},s.onTargetMouseWheel=function(t){this.value-=t.delta*this._scrollSize,this.target=this._target},s.onTargetMouseDown=function(t){this._clickOnly=!0,this._lastOffset=0,this._checkElastic=!1,this._lastPoint||(this._lastPoint=new m),this._lastPoint.setTo(e.stage.mouseX,e.stage.mouseY),e.timer.clear(this,this.tweenMove),x.clearTween(this),e.stage.once("mouseup",this,this.onStageMouseUp2),e.stage.once("mouseout",this,this.onStageMouseUp2),e.timer.frameLoop(1,this,this.loop)},s.loop=function(){var t=e.stage.mouseY,i=e.stage.mouseX;if(this._lastOffset=this.isVertical?t-this._lastPoint.y:i-this._lastPoint.x,this._clickOnly){if(!(Math.abs(this._lastOffset*(this.isVertical?e.stage._canvasTransform.getScaleY():e.stage._canvasTransform.getScaleX()))>1))return;this._clickOnly=!1,this._offsets||(this._offsets=[]),this._offsets.length=0,this._target.mouseEnabled=!1,!this.hide&&this.autoHide&&(this.alpha=1,this.visible=!0),this.event("start")}this._offsets.push(this._lastOffset),this._lastPoint.x=i,this._lastPoint.y=t,0!==this._lastOffset&&(this._checkElastic||(this.elasticDistance>0?this._checkElastic||0==this._lastOffset||(this._lastOffset>0&&this._value<=this.min||this._lastOffset<0&&this._value>=this.max?(this._isElastic=!0,this._checkElastic=!0):this._isElastic=!1):this._checkElastic=!0),this._isElastic?this._value<=this.min?this.value-=this._lastOffset*Math.max(0,1-(this.min-this._value)/this.elasticDistance):this._value>=this.max&&(this.value-=this._lastOffset*Math.max(0,1-(this._value-this.max)/this.elasticDistance)):this.value-=this._lastOffset)},s.onStageMouseUp2=function(t){if(e.stage.off("mouseup",this,this.onStageMouseUp2),e.stage.off("mouseout",this,this.onStageMouseUp2),e.timer.clear(this,this.loop),!this._clickOnly)if(this._target.mouseEnabled=!0,this._isElastic)this._value<this.min?x.to(this,{value:this.min},this.elasticBackTime,a.sineOut,f.create(this,this.elasticOver)):this._value>this.max&&x.to(this,{value:this.max},this.elasticBackTime,a.sineOut,f.create(this,this.elasticOver));else{if(!this._offsets)return;this._offsets.length<1&&(this._offsets[0]=this.isVertical?e.stage.mouseY-this._lastPoint.y:e.stage.mouseX-this._lastPoint.x);for(var i=0,s=Math.min(this._offsets.length,3),h=0;h<s;h++)i+=this._offsets[this._offsets.length-1-h];if(this._lastOffset=i/s,(i=Math.abs(this._lastOffset))<2)return void this.event("end");i>60&&(this._lastOffset=this._lastOffset>0?60:-60);var n=Math.round(Math.abs(this.elasticDistance*(this._lastOffset/240)));e.timer.frameLoop(1,this,this.tweenMove,[n])}},s.elasticOver=function(){this._isElastic=!1,!this.hide&&this.autoHide&&x.to(this,{alpha:0},500),this.event("end")},s.tweenMove=function(t){this._lastOffset*=this.rollRatio;var i=NaN;if(t>0&&(this._lastOffset>0&&this.value<=this.min?(this._isElastic=!0,i=.5*-(this.min-t-this.value),this._lastOffset>i&&(this._lastOffset=i)):this._lastOffset<0&&this.value>=this.max&&(this._isElastic=!0,i=.5*-(this.max+t-this.value),this._lastOffset<i&&(this._lastOffset=i))),this.value-=this._lastOffset,Math.abs(this._lastOffset)<1){if(e.timer.clear(this,this.tweenMove),this._isElastic)return void(this._value<this.min?x.to(this,{value:this.min},this.elasticBackTime,a.sineOut,f.create(this,this.elasticOver)):this._value>this.max?x.to(this,{value:this.max},this.elasticBackTime,a.sineOut,f.create(this,this.elasticOver)):this.elasticOver());this.event("end"),!this.hide&&this.autoHide&&x.to(this,{alpha:0},500)}},s.stopScroll=function(){this.onStageMouseUp2(null),e.timer.clear(this,this.tweenMove),x.clearTween(this)},n(0,s,"measureHeight",function(){return this.slider.isVertical?100:this.slider.height}),n(0,s,"skin",function(){return this._skin},function(t){this._skin!=t&&(this._skin=t,this.slider.skin=this._skin,this.callLater(this.changeScrollBar))}),n(0,s,"max",function(){return this.slider.max},function(t){this.slider.max=t}),n(0,s,"showButtons",function(){return this._showButtons},function(t){this._showButtons=t,this.callLater(this.changeScrollBar)}),n(0,s,"measureWidth",function(){return this.slider.isVertical?this.slider.width:100}),n(0,s,"min",function(){return this.slider.min},function(t){this.slider.min=t}),n(0,s,"value",function(){return this._value},function(t){t!==this._value&&(this._isElastic?this._value=t:(this.slider.value=t,this._value=this.slider.value),this.event("change"),this.changeHandler&&this.changeHandler.runWith(this.value))}),n(0,s,"isVertical",function(){return this.slider.isVertical},function(t){this.slider.isVertical=t}),n(0,s,"sizeGrid",function(){return this.slider.sizeGrid},function(t){this.slider.sizeGrid=t}),n(0,s,"scrollSize",function(){return this._scrollSize},function(t){this._scrollSize=t}),n(0,s,"dataSource",t.prototype._$get_dataSource,function(i){this._dataSource=i,"number"==typeof i||"string"==typeof i?this.value=Number(i):t.prototype._$set_dataSource.call(this,i)}),n(0,s,"thumbPercent",function(){return this._thumbPercent},function(t){this.runCallLater(this.changeScrollBar),this.runCallLater(this.changeSize),t=t>=1?.99:t,this._thumbPercent=t,this.scaleBar&&(this.slider.isVertical?this.slider.bar.height=Math.max(this.slider.height*t,k.scrollBarMinNum):this.slider.bar.width=Math.max(this.slider.width*t,k.scrollBarMinNum))}),n(0,s,"target",function(){return this._target},function(t){this._target&&(this._target.off("mousewheel",this,this.onTargetMouseWheel),this._target.off("mousedown",this,this.onTargetMouseDown)),this._target=t,t&&(this._mouseWheelEnable&&this._target.on("mousewheel",this,this.onTargetMouseWheel),this._touchScrollEnable&&this._target.on("mousedown",this,this.onTargetMouseDown))}),n(0,s,"hide",function(){return this._hide},function(t){this._hide=t,this.visible=!t}),n(0,s,"touchScrollEnable",function(){return this._touchScrollEnable},function(t){this._touchScrollEnable=t,this.target=this._target}),n(0,s,"mouseWheelEnable",function(){return this._mouseWheelEnable},function(t){this._mouseWheelEnable=t}),n(0,s,"tick",function(){return this.slider.tick},function(t){this.slider.tick=t}),i}(z),A=function(t){function i(t){this.changeHandler=null,this.isVertical=!0,this.showLabel=!0,this._allowClickBack=!1,this._max=100,this._min=0,this._tick=1,this._value=0,this._skin=null,this._bg=null,this._progress=null,this._bar=null,this._tx=NaN,this._ty=NaN,this._maxMove=NaN,this._globalSacle=null,i.__super.call(this),this.skin=t}h(i,"laya.ui.Slider",t);var o=i.prototype;return o.destroy=function(i){void 0===i&&(i=!0),t.prototype.destroy.call(this,i),this._bg&&this._bg.destroy(i),this._bar&&this._bar.destroy(i),this._progress&&this._progress.destroy(i),this._bg=null,this._bar=null,this._progress=null,this.changeHandler=null},o.createChildren=function(){this.addChild(this._bg=new $),this.addChild(this._bar=new H)},o.initialize=function(){this._bar.on("mousedown",this,this.onBarMouseDown),this._bg.sizeGrid=this._bar.sizeGrid="4,4,4,4,0",this._progress&&(this._progress.sizeGrid=this._bar.sizeGrid),this.allowClickBack=!0},o.onBarMouseDown=function(t){this._globalSacle||(this._globalSacle=new m),this._globalSacle.setTo(this.globalScaleX||.01,this.globalScaleY||.01),this._maxMove=this.isVertical?this.height-this._bar.height:this.width-this._bar.width,this._tx=e.stage.mouseX,this._ty=e.stage.mouseY,e.stage.on("mousemove",this,this.mouseMove),e.stage.once("mouseup",this,this.mouseUp),e.stage.once("mouseout",this,this.mouseUp),this.showValueText()},o.showValueText=function(){if(this.showLabel){var t=laya.ui.Slider.label;this.addChild(t),t.textField.changeText(this._value+""),this.isVertical?(t.x=this._bar.x+20,t.y=.5*(this._bar.height-t.height)+this._bar.y):(t.y=this._bar.y-20,t.x=.5*(this._bar.width-t.width)+this._bar.x)}},o.hideValueText=function(){laya.ui.Slider.label&&laya.ui.Slider.label.removeSelf()},o.mouseUp=function(t){e.stage.off("mousemove",this,this.mouseMove),e.stage.off("mouseup",this,this.mouseUp),e.stage.off("mouseout",this,this.mouseUp),this.sendChangeEvent("changed"),this.hideValueText()},o.mouseMove=function(t){var i=this._value;this.isVertical?(this._bar.y+=(e.stage.mouseY-this._ty)/this._globalSacle.y,this._bar.y>this._maxMove?this._bar.y=this._maxMove:this._bar.y<0&&(this._bar.y=0),this._value=this._bar.y/this._maxMove*(this._max-this._min)+this._min,this._progress&&(this._progress.height=this._bar.y+.5*this._bar.height)):(this._bar.x+=(e.stage.mouseX-this._tx)/this._globalSacle.x,this._bar.x>this._maxMove?this._bar.x=this._maxMove:this._bar.x<0&&(this._bar.x=0),this._value=this._bar.x/this._maxMove*(this._max-this._min)+this._min,this._progress&&(this._progress.width=this._bar.x+.5*this._bar.width)),this._tx=e.stage.mouseX,this._ty=e.stage.mouseY;var s=Math.pow(10,(this._tick+"").length-1);this._value=Math.round(Math.round(this._value/this._tick)*this._tick*s)/s,this._value!=i&&this.sendChangeEvent(),this.showValueText()},o.sendChangeEvent=function(t){void 0===t&&(t="change"),this.event(t),this.changeHandler&&this.changeHandler.runWith(this._value)},o.setBarPoint=function(){this.isVertical?this._bar.x=Math.round(.5*(this._bg.width-this._bar.width)):this._bar.y=Math.round(.5*(this._bg.height-this._bar.height))},o.changeSize=function(){t.prototype.changeSize.call(this),this.isVertical?this._bg.height=this.height:this._bg.width=this.width,this.setBarPoint(),this.changeValue()},o.setSlider=function(t,i,e){this._value=-1,this._min=t,this._max=i>t?i:t,this.value=e<t?t:e>i?i:e},o.changeValue=function(){var t=Math.pow(10,(this._tick+"").length-1);this._value=Math.round(Math.round(this._value/this._tick)*this._tick*t)/t,this._value=this._value>this._max?this._max:this._value<this._min?this._min:this._value;var i=this._max-this._min;0===i&&(i=1),this.isVertical?(this._bar.y=(this._value-this._min)/i*(this.height-this._bar.height),this._progress&&(this._progress.height=this._bar.y+.5*this._bar.height)):(this._bar.x=(this._value-this._min)/i*(this.width-this._bar.width),this._progress&&(this._progress.width=this._bar.x+.5*this._bar.width))},o.onBgMouseDown=function(t){var i=this._bg.getMousePoint();this.isVertical?this.value=i.y/(this.height-this._bar.height)*(this._max-this._min)+this._min:this.value=i.x/(this.width-this._bar.width)*(this._max-this._min)+this._min},n(0,o,"measureHeight",function(){return Math.max(this._bg.height,this._bar.height)}),n(0,o,"skin",function(){return this._skin},function(t){if(this._skin!=t){this._skin=t,this._bg.skin=this._skin,this._bar.skin=this._skin.replace(".png","$bar.png");var i=this._skin.replace(".png","$progress.png");g.getRes(i)&&(this._progress||(this.addChild(this._progress=new $),this._progress.sizeGrid=this._bar.sizeGrid,this.setChildIndex(this._progress,1)),this._progress.skin=i),this.setBarPoint(),this.callLater(this.changeValue)}}),n(0,o,"allowClickBack",function(){return this._allowClickBack},function(t){this._allowClickBack!=t&&(this._allowClickBack=t,t?this._bg.on("mousedown",this,this.onBgMouseDown):this._bg.off("mousedown",this,this.onBgMouseDown))}),n(0,o,"max",function(){return this._max},function(t){this._max!=t&&(this._max=t,this.callLater(this.changeValue))}),n(0,o,"measureWidth",function(){return Math.max(this._bg.width,this._bar.width)}),n(0,o,"tick",function(){return this._tick},function(t){this._tick!=t&&(this._tick=t,this.callLater(this.changeValue))}),n(0,o,"sizeGrid",function(){return this._bg.sizeGrid},function(t){this._bg.sizeGrid=t,this._bar.sizeGrid=t,this._progress&&(this._progress.sizeGrid=this._bar.sizeGrid)}),n(0,o,"min",function(){return this._min},function(t){this._min!=t&&(this._min=t,this.callLater(this.changeValue))}),n(0,o,"value",function(){return this._value},function(t){if(this._value!=t){var i=this._value;this._value=t,this.changeValue(),this._value!=i&&this.sendChangeEvent()}}),n(0,o,"dataSource",t.prototype._$get_dataSource,function(i){this._dataSource=i,"number"==typeof i||"string"==typeof i?this.value=Number(i):t.prototype._$set_dataSource.call(this,i)}),n(0,o,"bar",function(){return this._bar}),s(i,["label",function(){return this.label=new E}]),i}(z),$=function(t){function i(t){this._bitmap=null,this._skin=null,this._group=null,i.__super.call(this),this.skin=t}h(i,"laya.ui.Image",t);var s=i.prototype;return s.destroy=function(i){void 0===i&&(i=!0),t.prototype.destroy.call(this,!0),this._bitmap&&this._bitmap.destroy(),this._bitmap=null},s.dispose=function(){this.destroy(!0),e.loader.clearRes(this._skin)},s.createChildren=function(){this.graphics=this._bitmap=new M,this._bitmap.autoCacheCmd=!1},s.setSource=function(t,i){t===this._skin&&i&&(this.source=i,this.onCompResize())},n(0,s,"source",function(){return this._bitmap.source},function(t){this._bitmap&&(this._bitmap.source=t,this.event("loaded"),this.repaint())}),n(0,s,"dataSource",t.prototype._$get_dataSource,function(i){this._dataSource=i,"string"==typeof i?this.skin=i:t.prototype._$set_dataSource.call(this,i)}),n(0,s,"measureHeight",function(){return this._bitmap.height}),n(0,s,"skin",function(){return this._skin},function(t){if(this._skin!=t)if(this._skin=t,t){var i=g.getRes(t);i?(this.source=i,this.onCompResize()):e.loader.load(this._skin,f.create(this,this.setSource,[this._skin]),null,"image",1,!0,this._group)}else this.source=null}),n(0,s,"group",function(){return this._group},function(t){t&&this._skin&&g.setGroup(this._skin,t),this._group=t}),n(0,s,"sizeGrid",function(){return this._bitmap.sizeGrid?this._bitmap.sizeGrid.join(","):null},function(t){this._bitmap.sizeGrid=I.fillArray(k.defaultSizeGrid,t,Number)}),n(0,s,"measureWidth",function(){return this._bitmap.width}),n(0,s,"width",t.prototype._$get_width,function(i){t.prototype._$set_width.call(this,i),this._bitmap.width=0==i?1e-7:i}),n(0,s,"height",t.prototype._$get_height,function(i){t.prototype._$set_height.call(this,i),this._bitmap.height=0==i?1e-7:i}),i}(z),E=function(t){function i(t){this._tf=null,i.__super.call(this),void 0===t&&(t=""),u.defaultColor=k.labelColor,this.text=t}h(i,"laya.ui.Label",t);var e=i.prototype;return e.destroy=function(i){void 0===i&&(i=!0),t.prototype.destroy.call(this,i),this._tf=null},e.createChildren=function(){this.addChild(this._tf=new b)},e.changeText=function(t){this._tf.changeText(t)},n(0,e,"padding",function(){return this._tf.padding.join(",")},function(t){this._tf.padding=I.fillArray(k.labelPadding,t,Number)}),n(0,e,"bold",function(){return this._tf.bold},function(t){this._tf.bold=t}),n(0,e,"align",function(){return this._tf.align},function(t){this._tf.align=t}),n(0,e,"text",function(){return this._tf.text},function(t){this._tf.text!=t&&(t&&(t=I.adptString(t+"")),this._tf.text=t,this.event("change"))}),n(0,e,"italic",function(){return this._tf.italic},function(t){this._tf.italic=t}),n(0,e,"wordWrap",function(){return this._tf.wordWrap},function(t){this._tf.wordWrap=t}),n(0,e,"font",function(){return this._tf.font},function(t){this._tf.font=t}),n(0,e,"dataSource",t.prototype._$get_dataSource,function(i){this._dataSource=i,"number"==typeof i||"string"==typeof i?this.text=i+"":t.prototype._$set_dataSource.call(this,i)}),n(0,e,"color",function(){return this._tf.color},function(t){this._tf.color=t}),n(0,e,"valign",function(){return this._tf.valign},function(t){this._tf.valign=t}),n(0,e,"leading",function(){return this._tf.leading},function(t){this._tf.leading=t}),n(0,e,"fontSize",function(){return this._tf.fontSize},function(t){this._tf.fontSize=t}),n(0,e,"bgColor",function(){return this._tf.bgColor},function(t){this._tf.bgColor=t}),n(0,e,"borderColor",function(){return this._tf.borderColor},function(t){this._tf.borderColor=t}),n(0,e,"stroke",function(){return this._tf.stroke},function(t){this._tf.stroke=t}),n(0,e,"strokeColor",function(){return this._tf.strokeColor},function(t){this._tf.strokeColor=t}),n(0,e,"textField",function(){return this._tf}),n(0,e,"measureWidth",function(){return this._tf.width}),n(0,e,"measureHeight",function(){return this._tf.height}),n(0,e,"width",function(){return this._width||this._tf.text?t.prototype._$get_width.call(this):0},function(i){t.prototype._$set_width.call(this,i),this._tf.width=i}),n(0,e,"height",function(){return this._height||this._tf.text?t.prototype._$get_height.call(this):0},function(i){t.prototype._$set_height.call(this,i),this._tf.height=i}),n(0,e,"overflow",function(){return this._tf.overflow},function(t){this._tf.overflow=t}),n(0,e,"underline",function(){return this._tf.underline},function(t){this._tf.underline=t}),n(0,e,"underlineColor",function(){return this._tf.underlineColor},function(t){this._tf.underlineColor=t}),i}(z),V=function(t){function i(t){this.changeHandler=null,this._bg=null,this._bar=null,this._skin=null,this._value=.5,i.__super.call(this),this.skin=t}h(i,"laya.ui.ProgressBar",t);var e=i.prototype;return e.destroy=function(i){void 0===i&&(i=!0),t.prototype.destroy.call(this,i),this._bg&&this._bg.destroy(i),this._bar&&this._bar.destroy(i),this._bg=this._bar=null,this.changeHandler=null},e.createChildren=function(){this.addChild(this._bg=new $),this.addChild(this._bar=new $),this._bar._bitmap.autoCacheCmd=!1},e.changeValue=function(){if(this.sizeGrid){var t=this.sizeGrid.split(","),i=Number(t[3]),e=Number(t[1]),s=this.width-i-e,h=s*this._value;this._bar.width=i+e+h,this._bar.visible=this._bar.width>i+e}else this._bar.width=this.width*this._value},n(0,e,"measureHeight",function(){return this._bg.height}),n(0,e,"skin",function(){return this._skin},function(t){this._skin!=t&&(this._skin=t,this._bg.skin=this._skin,this._bar.skin=this._skin.replace(".png","$bar.png"),this.callLater(this.changeValue))}),n(0,e,"measureWidth",function(){return this._bg.width}),n(0,e,"height",t.prototype._$get_height,function(i){t.prototype._$set_height.call(this,i),this._bg.height=this._height,this._bar.height=this._height}),n(0,e,"bar",function(){return this._bar}),n(0,e,"value",function(){return this._value},function(t){this._value!=t&&(t=t>1?1:t<0?0:t,this._value=t,this.callLater(this.changeValue),this.event("change"),this.changeHandler&&this.changeHandler.runWith(t))}),n(0,e,"bg",function(){return this._bg}),n(0,e,"sizeGrid",function(){return this._bg.sizeGrid},function(t){this._bg.sizeGrid=this._bar.sizeGrid=t}),n(0,e,"width",t.prototype._$get_width,function(i){t.prototype._$set_width.call(this,i),this._bg.width=this._width,this.callLater(this.changeValue)}),n(0,e,"dataSource",t.prototype._$get_dataSource,function(i){this._dataSource=i,"number"==typeof i||"string"==typeof i?this.value=Number(i):t.prototype._$set_dataSource.call(this,i)}),i}(z),D=(function(t){function i(){this._tipBox=null,this._tipText=null,this._defaultTipHandler=null,i.__super.call(this),this._tipBox=new z,this._tipBox.addChild(this._tipText=new b),this._tipText.x=this._tipText.y=5,this._tipText.color=i.tipTextColor,this._defaultTipHandler=this._showDefaultTip,e.stage.on("showtip",this,this._onStageShowTip),e.stage.on("hidetip",this,this._onStageHideTip),this.zOrder=1100}h(i,"laya.ui.TipManager",t);var s=i.prototype;s._onStageHideTip=function(t){e.timer.clear(this,this._showTip),this.closeAll(),this.removeSelf()},s._onStageShowTip=function(t){e.timer.once(i.tipDelay,this,this._showTip,[t],!0)},s._showTip=function(t){if("string"==typeof t){var i=String(t);Boolean(i)&&this._defaultTipHandler(i)}else t instanceof laya.utils.Handler?t.run():"function"==typeof t&&t.apply();e.stage.on("mousemove",this,this._onStageMouseMove),e.stage.on("mousedown",this,this._onStageMouseDown),this._onStageMouseMove(null)},s._onStageMouseDown=function(t){this.closeAll()},s._onStageMouseMove=function(t){this._showToStage(this,i.offsetX,i.offsetY)},s._showToStage=function(t,i,s){void 0===i&&(i=0),void 0===s&&(s=0);var h=t.getBounds();t.x=e.stage.mouseX+i,t.y=e.stage.mouseY+s,t.x+h.width>e.stage.width&&(t.x-=h.width+i),t.y+h.height>e.stage.height&&(t.y-=h.height+s)},s.closeAll=function(){e.timer.clear(this,this._showTip),e.stage.off("mousemove",this,this._onStageMouseMove),e.stage.off("mousedown",this,this._onStageMouseDown),this.removeChildren()},s.showDislayTip=function(t){this.addChild(t),this._showToStage(this),e._currentStage.addChild(this)},s._showDefaultTip=function(t){this._tipText.text=t;var s=this._tipBox.graphics;s.clear(),s.drawRect(0,0,this._tipText.width+10,this._tipText.height+10,i.tipBackColor),this.addChild(this._tipBox),this._showToStage(this),e._currentStage.addChild(this)},n(0,s,"defaultTipHandler",function(){return this._defaultTipHandler},function(t){this._defaultTipHandler=t}),i.offsetX=10,i.offsetY=15,i.tipTextColor="#ffffff",i.tipBackColor="#111111",i.tipDelay=200,i}(z),function(t){function i(){this._idMap=null,this._aniList=null,i.__super.call(this)}h(i,"laya.ui.View",t);var n=i.prototype;return n.createView=function(t){if(t.animations&&!this._idMap&&(this._idMap={}),i.createComp(t,this,this),t.animations){var e,s,h=[],n=t.animations,o=0,l=n.length;for(o=0;o<l;o++){switch(e=new _,s=n[o],e._setUp(this._idMap,s),this[s.name]=e,e._setControlNode(this),s.action){case 1:e.play(0,!1);break;case 2:e.play(0,!0)}h.push(e)}this._aniList=h}this._width>0&&null==t.props.hitTestPrior&&!this.mouseThrough&&(this.hitTestPrior=!0)},n.loadUI=function(t){var e=i.uiMap[t];e&&this.createView(e)},n.destroy=function(t){void 0===t&&(t=!0),this._aniList&&(this._aniList.length=0),this._idMap=null,this._aniList=null,laya.ui.Component.prototype.destroy.call(this,t)},i._regs=function(){var t;for(t in i.uiClassMap)l.regClass(t,i.uiClassMap[t])},i.createComp=function(t,s,h){if(!(s=s||i.getCompInstance(t)))return console.warn("can not create:"+t.type),null;var n=t.child;if(n)for(var o=0,r=n.length;o<r;o++){var a=n[o];if(!s.hasOwnProperty("itemRender")||"render"!=a.props.name&&"render"!==a.props.renderType)if("Graphic"==a.type)l.addGraphicsToSprite(a,s);else if(l.isDrawType(a.type))l.addGraphicToSprite(a,s,!0);else{var c=i.createComp(a,null,h);"Script"==a.type?"owner"in c?c.owner=s:"target"in c&&(c.target=s):"mask"==a.props.renderType||"mask"==a.props.name?s.mask=c:c instanceof laya.display.Sprite&&s.addChild(c)}else s.itemRender=a}var u=t.props;for(var _ in u){var d=u[_];i.setCompValue(s,_,d,h)}return e.__typeof(s,"laya.ui.IItem")&&s.initItems(),t.compId&&h&&h._idMap&&(h._idMap[t.compId]=s),s},i.setCompValue=function(t,i,e,s){"var"===i&&s?s[e]=t:t[i]="true"===e||"false"!==e&&e},i.getCompInstance=function(t){var s,h=t.props?t.props.runtime:null;return s=h?i.viewClassMap[h]||i.uiClassMap[h]||e.__classmap[h]:i.uiClassMap[t.type],t.props&&t.props.hasOwnProperty("renderType")&&"instance"==t.props.renderType?s.instance:s?new s:null},i.regComponent=function(t,e){i.uiClassMap[t]=e,l.regClass(t,e)},i.regViewRuntime=function(t,e){i.viewClassMap[t]=e},i.uiMap={},i.viewClassMap={},s(i,["uiClassMap",function(){return this.uiClassMap={ViewStack:Q,LinkButton:H,TextArea:rt,ColorPicker:Y,Box:P,Button:H,CheckBox:R,Clip:N,ComboBox:O,Component:z,HScrollBar:j,HSlider:K,Image:$,Label:E,List:F,Panel:U,ProgressBar:V,Radio:Z,RadioGroup:ot,ScrollBar:X,Slider:A,Tab:lt,TextInput:it,View:i,VScrollBar:tt,VSlider:et,Tree:J,HBox:ht,VBox:nt,Sprite:v,Animation:o,Text:b,FontClip:W}}]),i.__init$=function(){i._regs()},i}(P)),R=function(t){function i(t,e){void 0===e&&(e=""),i.__super.call(this,t,e)}h(i,"laya.ui.CheckBox",t);var e=i.prototype;return e.preinitialize=function(){laya.ui.Component.prototype.preinitialize.call(this),this.toggle=!0,this._autoSize=!1},e.initialize=function(){t.prototype.initialize.call(this),this.createText(),this._text.align="left",this._text.valign="top",this._text.width=0},n(0,e,"dataSource",t.prototype._$get_dataSource,function(i){this._dataSource=i,"boolean"==typeof i?this.selected=i:"string"==typeof i?this.selected="true"===i:t.prototype._$set_dataSource.call(this,i)}),i}(H),G=function(t){function i(){this._space=0,this._align="none",this._itemChanged=!1,i.__super.call(this)}h(i,"laya.ui.LayoutBox",t);var e=i.prototype;return e.addChild=function(t){return t.on("resize",this,this.onResize),
this._setItemChanged(),laya.display.Node.prototype.addChild.call(this,t)},e.onResize=function(t){this._setItemChanged()},e.addChildAt=function(t,i){return t.on("resize",this,this.onResize),this._setItemChanged(),laya.display.Node.prototype.addChildAt.call(this,t,i)},e.removeChild=function(t){return t.off("resize",this,this.onResize),this._setItemChanged(),laya.display.Node.prototype.removeChild.call(this,t)},e.removeChildAt=function(t){return this.getChildAt(t).off("resize",this,this.onResize),this._setItemChanged(),laya.display.Node.prototype.removeChildAt.call(this,t)},e.refresh=function(){this._setItemChanged()},e.changeItems=function(){this._itemChanged=!1},e.sortItem=function(t){t&&t.sort(function(t,i){return t.y-i.y})},e._setItemChanged=function(){this._itemChanged||(this._itemChanged=!0,this.callLater(this.changeItems))},n(0,e,"space",function(){return this._space},function(t){this._space=t,this._setItemChanged()}),n(0,e,"align",function(){return this._align},function(t){this._align=t,this._setItemChanged()}),i}(P),W=function(t){function i(t,e){this._valueArr=null,this._indexMap=null,this._sheet=null,this._direction="horizontal",this._spaceX=0,this._spaceY=0,this._align="left",this._wordsW=0,this._wordsH=0,i.__super.call(this),t&&(this.skin=t),e&&(this.sheet=e)}h(i,"laya.ui.FontClip",t);var e=i.prototype;return e.createChildren=function(){this._bitmap=new M,this.on("loaded",this,this._onClipLoaded)},e._onClipLoaded=function(){this.callLater(this.changeValue)},e.changeValue=function(){if(this._sources&&this._valueArr){this.graphics.clear(!0);var t;if(t=this._sources[0]){var i="horizontal"===this._direction;i?(this._wordsW=this._valueArr.length*(t.sourceWidth+this.spaceX),this._wordsH=t.sourceHeight):(this._wordsW=t.sourceWidth,this._wordsH=(t.sourceHeight+this.spaceY)*this._valueArr.length);var e=0;if(this._width)switch(this._align){case"center":e=.5*(this._width-this._wordsW);break;case"right":e=this._width-this._wordsW;break;default:e=0}for(var s=0,h=this._valueArr.length;s<h;s++){var n=this._indexMap[this._valueArr.charAt(s)];this.sources[n]&&(t=this.sources[n],i?this.graphics.drawTexture(t,e+s*(t.sourceWidth+this.spaceX),0,t.sourceWidth,t.sourceHeight):this.graphics.drawTexture(t,0+e,s*(t.sourceHeight+this.spaceY),t.sourceWidth,t.sourceHeight))}this._width||(this.resetLayoutX(),this.callLater(this.changeSize)),this._height||(this.resetLayoutY(),this.callLater(this.changeSize))}}},e.destroy=function(i){void 0===i&&(i=!0),this._valueArr=null,this._indexMap=null,this.graphics.clear(!0),this.removeSelf(),this.off("loaded",this,this._onClipLoaded),t.prototype.destroy.call(this,i)},n(0,e,"sheet",function(){return this._sheet},function(t){t+="",this._sheet=t;var i=t.split(" ");this._clipX=String(i[0]).length,this.clipY=i.length,this._indexMap={};for(var e=0;e<this._clipY;e++)for(var s=i[e].split(""),h=0,n=s.length;h<n;h++)this._indexMap[s[h]]=e*this._clipX+h}),n(0,e,"height",t.prototype._$get_height,function(i){t.prototype._$set_height.call(this,i),this.callLater(this.changeValue)}),n(0,e,"direction",function(){return this._direction},function(t){this._direction=t,this.callLater(this.changeValue)}),n(0,e,"value",function(){return this._valueArr?this._valueArr:""},function(t){t+="",this._valueArr=t,this.callLater(this.changeValue)}),n(0,e,"width",t.prototype._$get_width,function(i){t.prototype._$set_width.call(this,i),this.callLater(this.changeValue)}),n(0,e,"spaceX",function(){return this._spaceX},function(t){this._spaceX=t,"horizontal"===this._direction&&this.callLater(this.changeValue)}),n(0,e,"spaceY",function(){return this._spaceY},function(t){this._spaceY=t,"horizontal"!==this._direction&&this.callLater(this.changeValue)}),n(0,e,"align",function(){return this._align},function(t){this._align=t,this.callLater(this.changeValue)}),n(0,e,"measureWidth",function(){return this._wordsW}),n(0,e,"measureHeight",function(){return this._wordsH}),i}(N),F=function(t){function i(){this.selectHandler=null,this.renderHandler=null,this.mouseHandler=null,this.selectEnable=!1,this.totalPage=0,this._content=null,this._scrollBar=null,this._itemRender=null,this._repeatX=0,this._repeatY=0,this._repeatX2=0,this._repeatY2=0,this._spaceX=0,this._spaceY=0,this._array=null,this._startIndex=0,this._selectedIndex=-1,this._page=0,this._isVertical=!0,this._cellSize=20,this._cellOffset=0,this._isMoved=!1,this.cacheContent=!1,this._createdLine=0,this._cellChanged=!1,i.__super.call(this),this._cells=[],this._offset=new m}h(i,"laya.ui.List",t);var s=i.prototype;return e.imps(s,{"laya.ui.IRender":!0,"laya.ui.IItem":!0}),s.destroy=function(t){void 0===t&&(t=!0),this._content&&this._content.destroy(t),this._scrollBar&&this._scrollBar.destroy(t),laya.ui.Component.prototype.destroy.call(this,t),this._content=null,this._scrollBar=null,this._itemRender=null,this._cells=null,this._array=null,this.selectHandler=this.renderHandler=this.mouseHandler=null},s.createChildren=function(){this.addChild(this._content=new P)},s.onScrollStart=function(){this._$P.cacheAs||(this._$P.cacheAs=t.prototype._$get_cacheAs.call(this)),t.prototype._$set_cacheAs.call(this,"none"),this._scrollBar.once("end",this,this.onScrollEnd)},s.onScrollEnd=function(){t.prototype._$set_cacheAs.call(this,this._$P.cacheAs)},s._removePreScrollBar=function(){var t=this.removeChildByName("scrollBar");t&&t.destroy(!0)},s.changeCells=function(){if(this._cellChanged=!1,this._itemRender){this.scrollBar=this.getChildByName("scrollBar");var t=this._getOneCell(),i=t.width+this._spaceX||1,e=t.height+this._spaceY||1;this._width>0&&(this._repeatX2=this._isVertical?Math.round(this._width/i):Math.ceil(this._width/i)),this._height>0&&(this._repeatY2=this._isVertical?Math.ceil(this._height/e):Math.round(this._height/e));var s=this._width?this._width:i*this.repeatX-this._spaceX,h=this._height?this._height:e*this.repeatY-this._spaceY;this._cellSize=this._isVertical?e:i,this._cellOffset=this._isVertical?e*Math.max(this._repeatY2,this._repeatY)-h-this._spaceY:i*Math.max(this._repeatX2,this._repeatX)-s-this._spaceX,this._isVertical&&this._scrollBar?this._scrollBar.height=h:!this._isVertical&&this._scrollBar&&(this._scrollBar.width=s),this.setContentSize(s,h);var n=this._isVertical?this.repeatX:this.repeatY,o=(this._isVertical?this.repeatY:this.repeatX)+(this._scrollBar?1:0);this._createItems(0,n,o),this._createdLine=o,this._array&&(this.array=this._array,this.runCallLater(this.renderItems))}},s._getOneCell=function(){if(0===this._cells.length){var t=this.createItem();this._offset.setTo(t.x,t.y),this._cells.push(t)}return this._cells[0]},s._createItems=function(t,i,e){var s=this._content,h=this._getOneCell(),n=h.width+this._spaceX,o=h.height+this._spaceY;if(this.cacheContent){var l=new P;l.cacheAsBitmap=!0,l.pos((this._isVertical?0:t)*n,(this._isVertical?t:0)*o),this._content.addChild(l),this._content.optimizeScrollRect=!0,s=l}for(var r=[],a=this._cells.length-1;a>-1;a--){var c=this._cells[a];c.removeSelf(),r.push(c)}this._cells.length=0;for(var u=t;u<e;u++)for(var _=0;_<i;_++)h=r.length?r.pop():this.createItem(),h.x=(this._isVertical?_:u)*n-s.x,h.y=(this._isVertical?u:_)*o-s.y,h.name="item"+(u*i+_),s.addChild(h),this.addCell(h)},s.createItem=function(){return"function"==typeof this._itemRender?new this._itemRender:D.createComp(this._itemRender)},s.addCell=function(t){t.on("click",this,this.onCellMouse),t.on("rightclick",this,this.onCellMouse),t.on("mouseover",this,this.onCellMouse),t.on("mouseout",this,this.onCellMouse),t.on("mousedown",this,this.onCellMouse),t.on("mouseup",this,this.onCellMouse),this._cells.push(t)},s.initItems=function(){if(!this._itemRender&&null!=this.getChildByName("item0")){this.repeatX=1;var t=0;t=0;for(var i=0;i<1e4;i++){var e=this.getChildByName("item"+i);{if(!e)break;this.addCell(e),t++}}this.repeatY=t}},s.setContentSize=function(t,i){this._content.width=t,this._content.height=i,(this._scrollBar||0!=this._offset.x||0!=this._offset.y)&&(this._content.scrollRect||(this._content.scrollRect=new y),this._content.scrollRect.setTo(-this._offset.x,-this._offset.y,t,i),this._content.conchModel&&this._content.conchModel.scrollRect(-this._offset.x,-this._offset.y,t,i)),this.event("resize")},s.onCellMouse=function(t){"mousedown"===t.type&&(this._isMoved=!1);var i=t.currentTarget,e=this._startIndex+this._cells.indexOf(i);e<0||("click"===t.type||"rightclick"===t.type?this.selectEnable&&!this._isMoved?this.selectedIndex=e:this.changeCellState(i,!0,0):"mouseover"!==t.type&&"mouseout"!==t.type||this._selectedIndex===e||this.changeCellState(i,"mouseover"===t.type,0),this.mouseHandler&&this.mouseHandler.runWith([t,e]))},s.changeCellState=function(t,i,e){var s=t.getChildByName("selectBox");s&&(this.selectEnable=!0,s.visible=i,s.index=e)},s.changeSize=function(){laya.ui.Component.prototype.changeSize.call(this),this.setContentSize(this.width,this.height),this._scrollBar&&this.callLater(this.onScrollBarChange)},s.onScrollBarChange=function(t){this.runCallLater(this.changeCells);var i=this._scrollBar.value,e=this._isVertical?this.repeatX:this.repeatY,s=this._isVertical?this.repeatY:this.repeatX,h=Math.floor(i/this._cellSize);if(this.cacheContent)o=s+1,this._createdLine-h<o&&(this._createItems(this._createdLine,e,this._createdLine+o),this._createdLine+=o,this.renderItems(this._createdLine*e,0));else{var n=h*e,o=0;if(n>this._startIndex){o=n-this._startIndex;var l=!0,r=this._startIndex+e*(s+1);this._isMoved=!0}else n<this._startIndex&&(o=this._startIndex-n,l=!1,r=this._startIndex-1,this._isMoved=!0);for(var a=0;a<o;a++){if(l){var c=this._cells.shift();this._cells[this._cells.length]=c;var u=r+a}else c=this._cells.pop(),this._cells.unshift(c),u=r-a;var _=Math.floor(u/e)*this._cellSize;this._isVertical?c.y=_:c.x=_,this.renderItem(c,u)}this._startIndex=n,this.changeSelectStatus()}var d=this._content.scrollRect;this._isVertical?(d.y=i-this._offset.y,d.x=-this._offset.x):(d.y=-this._offset.y,d.x=i-this._offset.x),this._content.conchModel&&this._content.conchModel.scrollRect(d.x,d.y,d.width,d.height),this.repaint()},s.posCell=function(t,i){if(this._scrollBar){var e=this._isVertical?this.repeatX:this.repeatY,s=(this._isVertical?this.repeatY:this.repeatX,Math.floor(i/e)*this._cellSize);this._isVertical?t.y=s:t.x=s}},s.changeSelectStatus=function(){for(var t=0,i=this._cells.length;t<i;t++)this.changeCellState(this._cells[t],this._selectedIndex===this._startIndex+t,1)},s.renderItems=function(t,i){void 0===t&&(t=0),void 0===i&&(i=0);for(var e=t,s=i||this._cells.length;e<s;e++)this.renderItem(this._cells[e],this._startIndex+e);this.changeSelectStatus()},s.renderItem=function(t,i){this._array&&i>=0&&i<this._array.length?(t.visible=!0,t.dataSource=this._array[i],this.cacheContent||this.posCell(t,i),this.hasListener("render")&&this.event("render",[t,i]),this.renderHandler&&this.renderHandler.runWith([t,i])):(t.visible=!1,t.dataSource=null)},s.refresh=function(){this.startIndex=this._startIndex},s.getItem=function(t){return t>-1&&t<this._array.length?this._array[t]:null},s.changeItem=function(t,i){t>-1&&t<this._array.length&&(this._array[t]=i,t>=this._startIndex&&t<this._startIndex+this._cells.length&&this.renderItem(this.getCell(t),t))},s.setItem=function(t,i){this.changeItem(t,i)},s.addItem=function(t){this._array.push(t),this.array=this._array},s.addItemAt=function(t,i){this._array.splice(i,0,t),this.array=this._array},s.deleteItem=function(t){this._array.splice(t,1),this.array=this._array},s.getCell=function(t){return this.runCallLater(this.changeCells),t>-1&&this._cells?this._cells[(t-this._startIndex)%this._cells.length]:null},s.scrollTo=function(t){if(this._scrollBar){var i=this._isVertical?this.repeatX:this.repeatY;this._scrollBar.value=Math.floor(t/i)*this._cellSize}else this.startIndex=t},s.tweenTo=function(t,i,e){if(void 0===i&&(i=200),this._scrollBar){var s=this._isVertical?this.repeatX:this.repeatY;x.to(this._scrollBar,{value:Math.floor(t/s)*this._cellSize},i,null,e,0,!0)}else this.startIndex=t,e&&e.run()},s._setCellChanged=function(){this._cellChanged||(this._cellChanged=!0,this.callLater(this.changeCells))},s.commitMeasure=function(){this.runCallLater(this.changeCells)},n(0,s,"cacheAs",t.prototype._$get_cacheAs,function(i){t.prototype._$set_cacheAs.call(this,i),this._scrollBar&&(this._$P.cacheAs=null,"none"!==i?this._scrollBar.on("start",this,this.onScrollStart):this._scrollBar.off("start",this,this.onScrollStart))}),n(0,s,"content",function(){return this._content}),n(0,s,"height",t.prototype._$get_height,function(i){i!=this._height&&(t.prototype._$set_height.call(this,i),this._setCellChanged())}),n(0,s,"itemRender",function(){return this._itemRender},function(t){if(this._itemRender!=t){this._itemRender=t;for(var i=this._cells.length-1;i>-1;i--)this._cells[i].destroy();this._cells.length=0,this._setCellChanged()}}),n(0,s,"vScrollBarSkin",function(){return this._scrollBar?this._scrollBar.skin:null},function(t){this._removePreScrollBar();var i=new tt;i.name="scrollBar",i.right=0,t&&" "!=t&&(i.skin=t),this.scrollBar=i,this.addChild(i),this._setCellChanged()}),n(0,s,"page",function(){return this._page},function(t){this._page=t,this._array&&(this._page=t>0?t:0,this._page=this._page<this.totalPage?this._page:this.totalPage-1,this.startIndex=this._page*this.repeatX*this.repeatY)}),n(0,s,"hScrollBarSkin",function(){return this._scrollBar?this._scrollBar.skin:null},function(t){this._removePreScrollBar();var i=new j;i.name="scrollBar",i.bottom=0,t&&" "!=t&&(i.skin=t),this.scrollBar=i,this.addChild(i),this._setCellChanged()}),n(0,s,"repeatX",function(){return this._repeatX>0?this._repeatX:this._repeatX2>0?this._repeatX2:1},function(t){this._repeatX=t,this._setCellChanged()}),n(0,s,"scrollBar",function(){return this._scrollBar},function(t){this._scrollBar!=t&&(this._scrollBar=t,t&&(this._isVertical=this._scrollBar.isVertical,this.addChild(this._scrollBar),this._scrollBar.on("change",this,this.onScrollBarChange)))}),n(0,s,"width",t.prototype._$get_width,function(i){i!=this._width&&(t.prototype._$set_width.call(this,i),this._setCellChanged())}),n(0,s,"repeatY",function(){return this._repeatY>0?this._repeatY:this._repeatY2>0?this._repeatY2:1},function(t){this._repeatY=t,this._setCellChanged()}),n(0,s,"spaceX",function(){return this._spaceX},function(t){this._spaceX=t,this._setCellChanged()}),n(0,s,"spaceY",function(){return this._spaceY},function(t){this._spaceY=t,this._setCellChanged()}),n(0,s,"selectedIndex",function(){return this._selectedIndex},function(t){this._selectedIndex!=t&&(this._selectedIndex=t,this.changeSelectStatus(),this.event("change"),this.selectHandler&&this.selectHandler.runWith(t),this.startIndex=this._startIndex)}),n(0,s,"selectedItem",function(){return this._selectedIndex!=-1?this._array[this._selectedIndex]:null},function(t){this.selectedIndex=this._array.indexOf(t)}),n(0,s,"length",function(){return this._array?this._array.length:0}),n(0,s,"selection",function(){return this.getCell(this._selectedIndex)},function(t){this.selectedIndex=this._startIndex+this._cells.indexOf(t)}),n(0,s,"startIndex",function(){return this._startIndex},function(t){this._startIndex=t>0?t:0,this.callLater(this.renderItems)}),n(0,s,"array",function(){return this._array},function(t){this.runCallLater(this.changeCells),this._array=t||[];var i=this._array.length;if(this.totalPage=Math.ceil(i/(this.repeatX*this.repeatY)),this._selectedIndex=this._selectedIndex<i?this._selectedIndex:i-1,this.startIndex=this._startIndex,this._scrollBar){this._scrollBar.stopScroll();var e=this._isVertical?this.repeatX:this.repeatY,s=this._isVertical?this.repeatY:this.repeatX,h=Math.ceil(i/e);(this._cellOffset>0?this.totalPage+1:this.totalPage)>1?(this._scrollBar.scrollSize=this._cellSize,this._scrollBar.thumbPercent=s/h,this._scrollBar.setScroll(0,(h-s)*this._cellSize+this._cellOffset,this._scrollBar.value),this._scrollBar.target=this._content):(this._scrollBar.setScroll(0,0,0),this._scrollBar.target=this._content)}}),n(0,s,"dataSource",t.prototype._$get_dataSource,function(i){this._dataSource=i,"number"==typeof i&&Math.floor(i)==i||"string"==typeof i?this.selectedIndex=parseInt(i):i instanceof Array?this.array=i:t.prototype._$set_dataSource.call(this,i)}),n(0,s,"cells",function(){return this.runCallLater(this.changeCells),this._cells}),i}(P),U=function(t){function i(){this._content=null,this._vScrollBar=null,this._hScrollBar=null,this._scrollChanged=!1,i.__super.call(this),this.width=this.height=100,this._content.optimizeScrollRect=!0}h(i,"laya.ui.Panel",t);var e=i.prototype;return e.destroy=function(t){void 0===t&&(t=!0),laya.ui.Component.prototype.destroy.call(this,t),this._content&&this._content.destroy(t),this._vScrollBar&&this._vScrollBar.destroy(t),this._hScrollBar&&this._hScrollBar.destroy(t),this._vScrollBar=null,this._hScrollBar=null,this._content=null},e.destroyChildren=function(){this._content.destroyChildren()},e.createChildren=function(){laya.display.Node.prototype.addChild.call(this,this._content=new P)},e.addChild=function(t){return t.on("resize",this,this.onResize),this._setScrollChanged(),this._content.addChild(t)},e.onResize=function(){this._setScrollChanged()},e.addChildAt=function(t,i){return t.on("resize",this,this.onResize),this._setScrollChanged(),this._content.addChildAt(t,i)},e.removeChild=function(t){return t.off("resize",this,this.onResize),this._setScrollChanged(),this._content.removeChild(t)},e.removeChildAt=function(t){return this.getChildAt(t).off("resize",this,this.onResize),this._setScrollChanged(),this._content.removeChildAt(t)},e.removeChildren=function(t,i){void 0===t&&(t=0),void 0===i&&(i=2147483647);for(var e=this._content.numChildren-1;e>-1;e--)this._content.removeChildAt(e);return this._setScrollChanged(),this},e.getChildAt=function(t){return this._content.getChildAt(t)},e.getChildByName=function(t){return this._content.getChildByName(t)},e.getChildIndex=function(t){return this._content.getChildIndex(t)},e.changeScroll=function(){this._scrollChanged=!1;var t=this.contentWidth||1,i=this.contentHeight||1,e=this._vScrollBar,s=this._hScrollBar,h=e&&i>this._height,n=s&&t>this._width,o=h?this._width-e.width:this._width,l=n?this._height-s.height:this._height;e&&(e.x=this._width-e.width,e.y=0,e.height=this._height-(n?s.height:0),e.scrollSize=Math.max(.033*this._height,1),e.thumbPercent=l/i,e.setScroll(0,i-l,e.value)),s&&(s.x=0,s.y=this._height-s.height,s.width=this._width-(h?e.width:0),s.scrollSize=Math.max(.033*this._width,1),s.thumbPercent=o/t,s.setScroll(0,t-o,s.value))},e.changeSize=function(){laya.ui.Component.prototype.changeSize.call(this),this.setContentSize(this._width,this._height)},e.setContentSize=function(t,i){var e=this._content;e.width=t,e.height=i,e.scrollRect||(e.scrollRect=new y),e.scrollRect.setTo(0,0,t,i),e.conchModel&&e.conchModel.scrollRect(0,0,t,i)},e.onScrollBarChange=function(t){var i=this._content.scrollRect;if(i){var e=Math.round(t.value);t.isVertical?i.y=e:i.x=e,this._content.conchModel&&this._content.conchModel.scrollRect(i.x,i.y,i.width,i.height)}},e.scrollTo=function(t,i){void 0===t&&(t=0),void 0===i&&(i=0),this.vScrollBar&&(this.vScrollBar.value=i),this.hScrollBar&&(this.hScrollBar.value=t)},e.refresh=function(){this.changeScroll()},e.onScrollStart=function(){this._$P.cacheAs||(this._$P.cacheAs=t.prototype._$get_cacheAs.call(this)),t.prototype._$set_cacheAs.call(this,"none"),this._hScrollBar&&this._hScrollBar.once("end",this,this.onScrollEnd),this._vScrollBar&&this._vScrollBar.once("end",this,this.onScrollEnd)},e.onScrollEnd=function(){t.prototype._$set_cacheAs.call(this,this._$P.cacheAs)},e._setScrollChanged=function(){this._scrollChanged||(this._scrollChanged=!0,this.callLater(this.changeScroll))},n(0,e,"numChildren",function(){return this._content.numChildren}),n(0,e,"hScrollBarSkin",function(){return this._hScrollBar?this._hScrollBar.skin:null},function(t){null==this._hScrollBar&&(laya.display.Node.prototype.addChild.call(this,this._hScrollBar=new j),this._hScrollBar.on("change",this,this.onScrollBarChange,[this._hScrollBar]),this._hScrollBar.target=this._content,this._setScrollChanged()),this._hScrollBar.skin=t}),n(0,e,"contentWidth",function(){for(var t=0,i=this._content.numChildren-1;i>-1;i--){var e=this._content.getChildAt(i);t=Math.max(e.x+e.width*e.scaleX,t)}return t}),n(0,e,"contentHeight",function(){for(var t=0,i=this._content.numChildren-1;i>-1;i--){var e=this._content.getChildAt(i);t=Math.max(e.y+e.height*e.scaleY,t)}return t}),n(0,e,"width",t.prototype._$get_width,function(i){t.prototype._$set_width.call(this,i),this._setScrollChanged()}),n(0,e,"hScrollBar",function(){return this._hScrollBar}),n(0,e,"content",function(){return this._content}),n(0,e,"height",t.prototype._$get_height,function(i){t.prototype._$set_height.call(this,i),this._setScrollChanged()}),n(0,e,"vScrollBarSkin",function(){return this._vScrollBar?this._vScrollBar.skin:null},function(t){null==this._vScrollBar&&(laya.display.Node.prototype.addChild.call(this,this._vScrollBar=new tt),this._vScrollBar.on("change",this,this.onScrollBarChange,[this._vScrollBar]),this._vScrollBar.target=this._content,this._setScrollChanged()),this._vScrollBar.skin=t}),n(0,e,"vScrollBar",function(){return this._vScrollBar}),n(0,e,"cacheAs",t.prototype._$get_cacheAs,function(i){t.prototype._$set_cacheAs.call(this,i),this._$P.cacheAs=null,"none"!==i?(this._hScrollBar&&this._hScrollBar.on("start",this,this.onScrollStart),this._vScrollBar&&this._vScrollBar.on("start",this,this.onScrollStart)):(this._hScrollBar&&this._hScrollBar.off("start",this,this.onScrollStart),this._vScrollBar&&this._vScrollBar.off("start",this,this.onScrollStart))}),i}(P),j=function(t){function i(){i.__super.call(this)}return h(i,"laya.ui.HScrollBar",t),i.prototype.initialize=function(){t.prototype.initialize.call(this),this.slider.isVertical=!1},i}(X),q=function(t){function i(t,e){this.selectHandler=null,this._items=null,this._selectedIndex=-1,this._skin=null,this._direction="horizontal",this._space=0,this._labels=null,this._labelColors=null,this._labelFont=null,this._labelStrokeColor=null,this._strokeColors=null,this._labelStroke=NaN,this._labelSize=0,this._labelBold=!1,this._labelPadding=null,this._labelAlign=null,this._stateNum=0,this._labelChanged=!1,i.__super.call(this),this.skin=e,this.labels=t}h(i,"laya.ui.UIGroup",t);var s=i.prototype;return e.imps(s,{"laya.ui.IItem":!0}),s.preinitialize=function(){this.mouseEnabled=!0},s.destroy=function(t){void 0===t&&(t=!0),laya.ui.Component.prototype.destroy.call(this,t),this._items&&(this._items.length=0),this._items=null,this.selectHandler=null},s.addItem=function(t,i){void 0===i&&(i=!0);var e=t,s=this._items.length;if(e.name="item"+s,this.addChild(e),this.initItems(),i&&s>0){var h=this._items[s-1];"horizontal"==this._direction?e.x=h.x+h.width+this._space:e.y=h.y+h.height+this._space}else i&&(e.x=0,e.y=0);return s},s.delItem=function(t,i){void 0===i&&(i=!0);var e=this._items.indexOf(t);if(e!=-1){var s=t;this.removeChild(s);for(var h=e+1,n=this._items.length;h<n;h++){var o=this._items[h];o.name="item"+(h-1),i&&("horizontal"==this._direction?o.x-=s.width+this._space:o.y-=s.height+this._space)}if(this.initItems(),this._selectedIndex>-1){var l=0;l=this._selectedIndex<this._items.length?this._selectedIndex:this._selectedIndex-1,this._selectedIndex=-1,this.selectedIndex=l}}},s.initItems=function(){this._items||(this._items=[]),this._items.length=0;for(var t=0;t<1e4;t++){var i=this.getChildByName("item"+t);if(null==i)break;this._items.push(i),i.selected=t===this._selectedIndex,i.clickHandler=f.create(this,this.itemClick,[t],!1)}},s.itemClick=function(t){this.selectedIndex=t},s.setSelect=function(t,i){this._items&&t>-1&&t<this._items.length&&(this._items[t].selected=i)},s.createItem=function(t,i){return null},s.changeLabels=function(){if(this._labelChanged=!1,this._items)for(var t=0,i=0,e=this._items.length;i<e;i++){var s=this._items[i];this._skin&&(s.skin=this._skin),this._labelColors&&(s.labelColors=this._labelColors),this._labelSize&&(s.labelSize=this._labelSize),this._labelStroke&&(s.labelStroke=this._labelStroke),this._labelStrokeColor&&(s.labelStrokeColor=this._labelStrokeColor),this._strokeColors&&(s.strokeColors=this._strokeColors),this._labelBold&&(s.labelBold=this._labelBold),this._labelPadding&&(s.labelPadding=this._labelPadding),this._labelAlign&&(s.labelAlign=this._labelAlign),this._stateNum&&(s.stateNum=this._stateNum),this._labelFont&&(s.labelFont=this._labelFont),"horizontal"===this._direction?(s.y=0,s.x=t,t+=s.width+this._space):(s.x=0,s.y=t,t+=s.height+this._space)}this.changeSize()},s.commitMeasure=function(){this.runCallLater(this.changeLabels)},s._setLabelChanged=function(){this._labelChanged||(this._labelChanged=!0,this.callLater(this.changeLabels))},n(0,s,"labelStrokeColor",function(){return this._labelStrokeColor},function(t){this._labelStrokeColor!=t&&(this._labelStrokeColor=t,this._setLabelChanged())}),n(0,s,"skin",function(){return this._skin},function(t){this._skin!=t&&(this._skin=t,this._setLabelChanged())}),n(0,s,"selectedIndex",function(){return this._selectedIndex},function(t){this._selectedIndex!=t&&(this.setSelect(this._selectedIndex,!1),this._selectedIndex=t,this.setSelect(t,!0),this.event("change"),this.selectHandler&&this.selectHandler.runWith(this._selectedIndex))}),n(0,s,"labels",function(){return this._labels},function(t){if(this._labels!=t){if(this._labels=t,this.removeChildren(),this._setLabelChanged(),this._labels)for(var i=this._labels.split(","),e=0,s=i.length;e<s;e++){var h=this.createItem(this._skin,i[e]);h.name="item"+e,this.addChild(h)}this.initItems()}}),n(0,s,"strokeColors",function(){return this._strokeColors},function(t){this._strokeColors!=t&&(this._strokeColors=t,this._setLabelChanged())}),n(0,s,"labelColors",function(){return this._labelColors},function(t){this._labelColors!=t&&(this._labelColors=t,this._setLabelChanged())}),n(0,s,"labelStroke",function(){return this._labelStroke},function(t){this._labelStroke!=t&&(this._labelStroke=t,this._setLabelChanged())}),n(0,s,"labelSize",function(){return this._labelSize},function(t){this._labelSize!=t&&(this._labelSize=t,this._setLabelChanged())}),n(0,s,"stateNum",function(){return this._stateNum},function(t){this._stateNum!=t&&(this._stateNum=t,this._setLabelChanged())}),n(0,s,"labelBold",function(){return this._labelBold},function(t){this._labelBold!=t&&(this._labelBold=t,this._setLabelChanged())}),n(0,s,"labelFont",function(){return this._labelFont},function(t){this._labelFont!=t&&(this._labelFont=t,this._setLabelChanged())}),n(0,s,"labelPadding",function(){return this._labelPadding},function(t){this._labelPadding!=t&&(this._labelPadding=t,this._setLabelChanged())}),n(0,s,"direction",function(){return this._direction},function(t){this._direction=t,this._setLabelChanged()}),n(0,s,"space",function(){return this._space},function(t){this._space=t,this._setLabelChanged()}),n(0,s,"items",function(){return this._items}),n(0,s,"selection",function(){return this._selectedIndex>-1&&this._selectedIndex<this._items.length?this._items[this._selectedIndex]:null},function(t){this.selectedIndex=this._items.indexOf(t)}),n(0,s,"dataSource",t.prototype._$get_dataSource,function(i){this._dataSource=i,"number"==typeof i&&Math.floor(i)==i||"string"==typeof i?this.selectedIndex=parseInt(i):i instanceof Array?this.labels=i.join(","):t.prototype._$set_dataSource.call(this,i)}),i}(P),K=function(t){function i(t){i.__super.call(this,t),this.isVertical=!1}return h(i,"laya.ui.HSlider",t),i}(A),Z=function(t){function i(t,e){this._value=null,void 0===e&&(e=""),i.__super.call(this,t,e)}h(i,"laya.ui.Radio",t);var e=i.prototype;return e.destroy=function(i){void 0===i&&(i=!0),t.prototype.destroy.call(this,i),this._value=null},e.preinitialize=function(){laya.ui.Component.prototype.preinitialize.call(this),this.toggle=!1,this._autoSize=!1},e.initialize=function(){t.prototype.initialize.call(this),this.createText(),this._text.align="left",this._text.valign="top",this._text.width=0,this.on("click",this,this.onClick)},e.onClick=function(t){this.selected=!0},n(0,e,"value",function(){return null!=this._value?this._value:this.label},function(t){this._value=t}),i}(H),J=function(t){function i(){this._list=null,this._source=null,this._renderHandler=null,this._spaceLeft=10,this._spaceBottom=0,this._keepStatus=!0,i.__super.call(this),this.width=this.height=200}h(i,"laya.ui.Tree",t);var s=i.prototype;return e.imps(s,{"laya.ui.IRender":!0}),s.destroy=function(t){void 0===t&&(t=!0),laya.ui.Component.prototype.destroy.call(this,t),this._list&&this._list.destroy(t),this._list=null,this._source=null,this._renderHandler=null},s.createChildren=function(){this.addChild(this._list=new F),this._list.renderHandler=f.create(this,this.renderItem,null,!1),this._list.repeatX=1,this._list.on("change",this,this.onListChange)},s.onListChange=function(t){this.event("change")},s.getArray=function(){var t,i=[];for(var e in this._source)t=this._source[e],this.getParentOpenStatus(t)&&(t.x=this._spaceLeft*this.getDepth(t),i.push(t));return i},s.getDepth=function(t,i){return void 0===i&&(i=0),null==t.nodeParent?i:this.getDepth(t.nodeParent,i+1)},s.getParentOpenStatus=function(t){var i=t.nodeParent;return null==i||!!i.isOpen&&(null==i.nodeParent||this.getParentOpenStatus(i))},s.renderItem=function(t,i){var e=t.dataSource;if(e){t.left=e.x;var s=t.getChildByName("arrow");s&&(e.hasChild?(s.visible=!0,s.index=e.isOpen?1:0,s.tag=i,s.off("click",this,this.onArrowClick),s.on("click",this,this.onArrowClick)):s.visible=!1);var h=t.getChildByName("folder");h&&(2==h.clipY?h.index=e.isDirectory?0:1:h.index=e.isDirectory?e.isOpen?1:0:2),this._renderHandler&&this._renderHandler.runWith([t,i])}},s.onArrowClick=function(t){var i=t.currentTarget,e=i.tag;this._list.array[e].isOpen=!this._list.array[e].isOpen,this.event("open"),this._list.array=this.getArray()},s.setItemState=function(t,i){this._list.array[t]&&(this._list.array[t].isOpen=i,this._list.array=this.getArray())},s.fresh=function(){this._list.array=this.getArray(),this.repaint()},s.parseXml=function(t,i,e,s){var h,n=t.childNodes,o=n.length;if(!s){h={};var l,r=t.attributes;for(var a in r){l=r[a];var c=l.nodeName,u=l.nodeValue;h[c]="true"==u||"false"!=u&&u}h.nodeParent=e,o>0&&(h.isDirectory=!0),h.hasChild=o>0,i.push(h)}for(var _=0;_<o;_++){var d=n[_];this.parseXml(d,i,h,!1)}},s.parseOpenStatus=function(t,i){for(var e=0,s=i.length;e<s;e++){var h=i[e];if(h.isDirectory)for(var n=0,o=t.length;n<o;n++){var l=t[n];if(l.isDirectory&&this.isSameParent(l,h)&&h.label==l.label){h.isOpen=l.isOpen;break}}}},s.isSameParent=function(t,i){return null==t.nodeParent&&null==i.nodeParent||null!=t.nodeParent&&null!=i.nodeParent&&(t.nodeParent.label==i.nodeParent.label&&this.isSameParent(t.nodeParent,i.nodeParent))},s.filter=function(t){if(Boolean(t)){var i=[];this.getFilterSource(this._source,i,t),this._list.array=i}else this._list.array=this.getArray()},s.getFilterSource=function(t,i,e){e=e.toLocaleLowerCase();var s;for(var h in t)s=t[h],!s.isDirectory&&String(s.label).toLowerCase().indexOf(e)>-1&&(s.x=0,i.push(s)),s.child&&s.child.length>0&&this.getFilterSource(s.child,i,e)},n(0,s,"spaceBottom",function(){return this._list.spaceY},function(t){this._list.spaceY=t}),n(0,s,"keepStatus",function(){return this._keepStatus},function(t){this._keepStatus=t}),n(0,s,"itemRender",function(){return this._list.itemRender},function(t){this._list.itemRender=t}),n(0,s,"array",function(){return this._list.array},function(t){this._keepStatus&&this._list.array&&t&&this.parseOpenStatus(this._list.array,t),this._source=t,this._list.array=this.getArray()}),n(0,s,"mouseHandler",function(){return this._list.mouseHandler},function(t){this._list.mouseHandler=t}),n(0,s,"dataSource",t.prototype._$get_dataSource,function(i){this._dataSource=i,t.prototype._$set_dataSource.call(this,i)}),n(0,s,"source",function(){return this._source}),n(0,s,"scrollBar",function(){return this._list.scrollBar}),n(0,s,"list",function(){return this._list}),n(0,s,"scrollBarSkin",function(){return this._list.vScrollBarSkin},function(t){this._list.vScrollBarSkin=t}),
n(0,s,"renderHandler",function(){return this._renderHandler},function(t){this._renderHandler=t}),n(0,s,"selectedIndex",function(){return this._list.selectedIndex},function(t){this._list.selectedIndex=t}),n(0,s,"spaceLeft",function(){return this._spaceLeft},function(t){this._spaceLeft=t}),n(0,s,"selectedItem",function(){return this._list.selectedItem},function(t){this._list.selectedItem=t}),n(0,s,"width",t.prototype._$get_width,function(i){t.prototype._$set_width.call(this,i),this._list.width=i}),n(0,s,"height",t.prototype._$get_height,function(i){t.prototype._$set_height.call(this,i),this._list.height=i}),n(0,s,"xml",null,function(t){var i=[];this.parseXml(t.childNodes[0],i,null,!0),this.array=i}),n(0,s,"selectedPath",function(){return this._list.selectedItem?this._list.selectedItem.path:null}),i}(P),Q=function(t){function i(){this._items=null,this._selectedIndex=0,i.__super.call(this),this._setIndexHandler=f.create(this,this.setIndex,null,!1)}h(i,"laya.ui.ViewStack",t);var s=i.prototype;return e.imps(s,{"laya.ui.IItem":!0}),s.setItems=function(t){this.removeChildren();for(var i=0,e=0,s=t.length;e<s;e++){var h=t[e];h&&(h.name="item"+i,this.addChild(h),i++)}this.initItems()},s.addItem=function(t){t.name="item"+this._items.length,this.addChild(t),this.initItems()},s.initItems=function(){this._items=[];for(var t=0;t<1e4;t++){var i=this.getChildByName("item"+t);if(null==i)break;this._items.push(i),i.visible=t==this._selectedIndex}},s.setSelect=function(t,i){this._items&&t>-1&&t<this._items.length&&(this._items[t].visible=i)},s.setIndex=function(t){this.selectedIndex=t},n(0,s,"dataSource",t.prototype._$get_dataSource,function(t){if(this._dataSource=t,"number"==typeof t&&Math.floor(t)==t||"string"==typeof t)this.selectedIndex=parseInt(t);else for(var i in this._dataSource)this.hasOwnProperty(i)&&(this[i]=this._dataSource[i])}),n(0,s,"selectedIndex",function(){return this._selectedIndex},function(t){this._selectedIndex!=t&&(this.setSelect(this._selectedIndex,!1),this._selectedIndex=t,this.setSelect(this._selectedIndex,!0))}),n(0,s,"selection",function(){return this._selectedIndex>-1&&this._selectedIndex<this._items.length?this._items[this._selectedIndex]:null},function(t){this.selectedIndex=this._items.indexOf(t)}),n(0,s,"items",function(){return this._items}),n(0,s,"setIndexHandler",function(){return this._setIndexHandler},function(t){this._setIndexHandler=t}),i}(P),tt=function(t){function i(){i.__super.call(this)}return h(i,"laya.ui.VScrollBar",t),i}(X),it=function(t){function i(t){this._bg=null,this._skin=null,i.__super.call(this),void 0===t&&(t=""),this.text=t,this.skin=this.skin}h(i,"laya.ui.TextInput",t);var e=i.prototype;return e.preinitialize=function(){this.mouseEnabled=!0},e.destroy=function(i){void 0===i&&(i=!0),t.prototype.destroy.call(this,i),this._bg&&this._bg.destroy(),this._bg=null},e.createChildren=function(){this.addChild(this._tf=new p),this._tf.padding=k.inputLabelPadding,this._tf.on("input",this,this._onInput),this._tf.on("enter",this,this._onEnter),this._tf.on("blur",this,this._onBlur),this._tf.on("focus",this,this._onFocus)},e._onFocus=function(){this.event("focus",this)},e._onBlur=function(){this.event("blur",this)},e._onInput=function(){this.event("input",this)},e._onEnter=function(){this.event("enter",this)},e.initialize=function(){this.width=128,this.height=22},e.select=function(){this._tf.select()},e.setSelection=function(t,i){this._tf.setSelection(t,i)},n(0,e,"text",t.prototype._$get_text,function(t){this._tf.text!=t&&(t+="",this._tf.text=t,this.event("change"))}),n(0,e,"bg",function(){return this._bg},function(t){this.graphics=this._bg=t}),n(0,e,"inputElementYAdjuster",function(){return this._tf.inputElementYAdjuster},function(t){this._tf.inputElementYAdjuster=t}),n(0,e,"multiline",function(){return this._tf.multiline},function(t){this._tf.multiline=t}),n(0,e,"skin",function(){return this._skin},function(t){this._skin!=t&&(this._skin=t,this._bg||(this.graphics=this._bg=new M),this._bg.source=g.getRes(this._skin),this._width&&(this._bg.width=this._width),this._height&&(this._bg.height=this._height))}),n(0,e,"sizeGrid",function(){return this._bg&&this._bg.sizeGrid?this._bg.sizeGrid.join(","):null},function(t){this._bg||(this.graphics=this._bg=new M),this._bg.sizeGrid=I.fillArray(k.defaultSizeGrid,t,Number)}),n(0,e,"inputElementXAdjuster",function(){return this._tf.inputElementXAdjuster},function(t){this._tf.inputElementXAdjuster=t}),n(0,e,"width",t.prototype._$get_width,function(i){t.prototype._$set_width.call(this,i),this._bg&&(this._bg.width=i)}),n(0,e,"height",t.prototype._$get_height,function(i){t.prototype._$set_height.call(this,i),this._bg&&(this._bg.height=i)}),n(0,e,"editable",function(){return this._tf.editable},function(t){this._tf.editable=t}),n(0,e,"restrict",function(){return this._tf.restrict},function(t){this._tf.restrict=t}),n(0,e,"prompt",function(){return this._tf.prompt},function(t){this._tf.prompt=t}),n(0,e,"promptColor",function(){return this._tf.promptColor},function(t){this._tf.promptColor=t}),n(0,e,"maxChars",function(){return this._tf.maxChars},function(t){this._tf.maxChars=t}),n(0,e,"focus",function(){return this._tf.focus},function(t){this._tf.focus=t}),n(0,e,"type",function(){return this._tf.type},function(t){this._tf.type=t}),n(0,e,"asPassword",function(){return this._tf.asPassword},function(t){this._tf.asPassword=t}),i}(E),et=function(t){function i(){i.__super.call(this)}return h(i,"laya.ui.VSlider",t),i}(A),st=function(t){function i(){this.popupCenter=!0,this.closeHandler=null,this.popupEffect=null,this.closeEffect=null,this.group=null,this.isModal=!1,this._dragArea=null,i.__super.call(this)}h(i,"laya.ui.Dialog",t);var e=i.prototype;return e.initialize=function(){this.popupEffect=i.manager.popupEffectHandler,this.closeEffect=i.manager.closeEffectHandler,this._dealDragArea(),this.on("click",this,this._onClick)},e._dealDragArea=function(){var t=this.getChildByName("drag");t&&(this.dragArea=t.x+","+t.y+","+t.width+","+t.height,t.removeSelf())},e._onClick=function(t){var i=t.target;if(i)switch(i.name){case"close":case"cancel":case"sure":case"no":case"ok":case"yes":this.close(i.name)}},e.show=function(t){void 0===t&&(t=!1),this._open(!1,t)},e.popup=function(t){void 0===t&&(t=!1),this._open(!0,t)},e._open=function(t,e){i.manager.lock(!1),this.isModal=t,i.manager.open(this,e)},e.onOpened=function(){},e.close=function(t){i.manager.close(this,t)},e.onClosed=function(t){},e._onMouseDown=function(t){var i=this.getMousePoint();this._dragArea.contains(i.x,i.y)?this.startDrag():this.stopDrag()},n(0,e,"dragArea",function(){return this._dragArea?this._dragArea.toString():null},function(t){if(t){var i=I.fillArray([0,0,0,0],t,Number);this._dragArea=new y(i[0],i[1],i[2],i[3]),this.on("mousedown",this,this._onMouseDown)}else this._dragArea=null,this.off("mousedown",this,this._onMouseDown)}),n(0,e,"isPopup",function(){return null!=this.parent}),n(0,e,"zOrder",t.prototype._$get_zOrder,function(e){t.prototype._$set_zOrder.call(this,e),i.manager._checkMask()}),n(1,i,"manager",function(){return i._manager=i._manager||new T},function(t){i._manager=t}),i.setLockView=function(t){i.manager.setLockView(t)},i.lock=function(t){i.manager.lock(t)},i.closeAll=function(){i.manager.closeAll()},i.getDialogsByGroup=function(t){return i.manager.getDialogsByGroup(t)},i.closeByGroup=function(t){return i.manager.closeByGroup(t)},i.CLOSE="close",i.CANCEL="cancel",i.SURE="sure",i.NO="no",i.OK="ok",i.YES="yes",i._manager=null,i}(D),ht=function(t){function i(){i.__super.call(this)}h(i,"laya.ui.HBox",t);var e=i.prototype;return e.sortItem=function(t){t&&t.sort(function(t,i){return t.x-i.x})},e.changeItems=function(){this._itemChanged=!1;for(var t=[],i=0,e=0,s=this.numChildren;e<s;e++){var h=this.getChildAt(e);h&&h.layoutEnabled&&(t.push(h),i=this._height?this._height:Math.max(i,h.height*h.scaleY))}this.sortItem(t);var n=0;for(e=0,s=t.length;e<s;e++)h=t[e],h.x=n,n+=h.width*h.scaleX+this._space,"top"==this._align?h.y=0:"middle"==this._align?h.y=.5*(i-h.height*h.scaleY):"bottom"==this._align&&(h.y=i-h.height*h.scaleY);this.changeSize()},n(0,e,"height",t.prototype._$get_height,function(i){this._height!=i&&(t.prototype._$set_height.call(this,i),this.callLater(this.changeItems))}),i.NONE="none",i.TOP="top",i.MIDDLE="middle",i.BOTTOM="bottom",i}(G),nt=function(t){function i(){i.__super.call(this)}h(i,"laya.ui.VBox",t);var e=i.prototype;return e.changeItems=function(){this._itemChanged=!1;for(var t=[],i=0,e=0,s=this.numChildren;e<s;e++){var h=this.getChildAt(e);h&&h.layoutEnabled&&(t.push(h),i=this._width?this._width:Math.max(i,h.width*h.scaleX))}this.sortItem(t);var n=0;for(e=0,s=t.length;e<s;e++)h=t[e],h.y=n,n+=h.height*h.scaleY+this._space,"left"==this._align?h.x=0:"center"==this._align?h.x=.5*(i-h.width*h.scaleX):"right"==this._align&&(h.x=i-h.width*h.scaleX);this.changeSize()},n(0,e,"width",t.prototype._$get_width,function(i){this._width!=i&&(t.prototype._$set_width.call(this,i),this.callLater(this.changeItems))}),i.NONE="none",i.LEFT="left",i.CENTER="center",i.RIGHT="right",i}(G),ot=function(t){function i(){i.__super.call(this)}return h(i,"laya.ui.RadioGroup",t),i.prototype.createItem=function(t,i){return new Z(t,i)},i}(q),lt=function(t){function i(){i.__super.call(this)}return h(i,"laya.ui.Tab",t),i.prototype.createItem=function(t,i){return new H(t,i)},i}(q),rt=function(t){function i(t){this._vScrollBar=null,this._hScrollBar=null,void 0===t&&(t=""),i.__super.call(this,t)}h(i,"laya.ui.TextArea",t);var e=i.prototype;return e.destroy=function(i){void 0===i&&(i=!0),t.prototype.destroy.call(this,i),this._vScrollBar&&this._vScrollBar.destroy(),this._hScrollBar&&this._hScrollBar.destroy(),this._vScrollBar=null,this._hScrollBar=null},e.initialize=function(){this.width=180,this.height=150,this._tf.wordWrap=!0,this.multiline=!0},e.onVBarChanged=function(t){this._tf.scrollY!=this._vScrollBar.value&&(this._tf.scrollY=this._vScrollBar.value)},e.onHBarChanged=function(t){this._tf.scrollX!=this._hScrollBar.value&&(this._tf.scrollX=this._hScrollBar.value)},e.changeScroll=function(){var t=this._vScrollBar&&this._tf.maxScrollY>0,i=this._hScrollBar&&this._tf.maxScrollX>0,e=t?this._width-this._vScrollBar.width:this._width,s=i?this._height-this._hScrollBar.height:this._height,h=this._tf.padding||k.labelPadding;this._tf.width=e,this._tf.height=s,this._vScrollBar&&(this._vScrollBar.x=this._width-this._vScrollBar.width-h[2],this._vScrollBar.y=h[1],this._vScrollBar.height=this._height-(i?this._hScrollBar.height:0)-h[1]-h[3],this._vScrollBar.scrollSize=1,this._vScrollBar.thumbPercent=s/Math.max(this._tf.textHeight,s),this._vScrollBar.setScroll(1,this._tf.maxScrollY,this._tf.scrollY),this._vScrollBar.visible=t),this._hScrollBar&&(this._hScrollBar.x=h[0],this._hScrollBar.y=this._height-this._hScrollBar.height-h[3],this._hScrollBar.width=this._width-(t?this._vScrollBar.width:0)-h[0]-h[2],this._hScrollBar.scrollSize=Math.max(.033*e,1),this._hScrollBar.thumbPercent=e/Math.max(this._tf.textWidth,e),this._hScrollBar.setScroll(0,this.maxScrollX,this.scrollX),this._hScrollBar.visible=i)},e.scrollTo=function(t){this.commitMeasure(),this._tf.scrollY=t},n(0,e,"scrollY",function(){return this._tf.scrollY}),n(0,e,"width",t.prototype._$get_width,function(i){t.prototype._$set_width.call(this,i),this.callLater(this.changeScroll)}),n(0,e,"hScrollBar",function(){return this._hScrollBar}),n(0,e,"height",t.prototype._$get_height,function(i){t.prototype._$set_height.call(this,i),this.callLater(this.changeScroll)}),n(0,e,"maxScrollX",function(){return this._tf.maxScrollX}),n(0,e,"vScrollBarSkin",function(){return this._vScrollBar?this._vScrollBar.skin:null},function(t){null==this._vScrollBar&&(this.addChild(this._vScrollBar=new tt),this._vScrollBar.on("change",this,this.onVBarChanged),this._vScrollBar.target=this._tf,this.callLater(this.changeScroll)),this._vScrollBar.skin=t}),n(0,e,"hScrollBarSkin",function(){return this._hScrollBar?this._hScrollBar.skin:null},function(t){null==this._hScrollBar&&(this.addChild(this._hScrollBar=new j),this._hScrollBar.on("change",this,this.onHBarChanged),this._hScrollBar.mouseWheelEnable=!1,this._hScrollBar.target=this._tf,this.callLater(this.changeScroll)),this._hScrollBar.skin=t}),n(0,e,"vScrollBar",function(){return this._vScrollBar}),n(0,e,"maxScrollY",function(){return this._tf.maxScrollY}),n(0,e,"scrollX",function(){return this._tf.scrollX}),i}(it);!function(t){function i(){this._uiView=null,this.isCloseOther=!1,i.__super.call(this)}h(i,"laya.ui.AsynDialog",t);var e=i.prototype;e.createView=function(t){this._uiView=t},e._open=function(t,i){this.isModal=t,this.isCloseOther=i,st.manager.lock(!0),this._uiView?this.onCreated():this.onOpen()},e.onCreated=function(){this.createUI(),this.onOpen()},e.createUI=function(){laya.ui.View.prototype.createView.call(this,this._uiView),this._uiView=null,this._dealDragArea()},e.onOpen=function(){st.manager.open(this,this.isCloseOther),st.manager.lock(!1)},e.close=function(t){st.manager.close(this),this.onClose()},e.onClose=function(){},e.destroy=function(t){void 0===t&&(t=!0),laya.ui.View.prototype.destroy.call(this,t),this._uiView=null,this.onDestroy()},e.onDestroy=function(){},i}(st);e.__init([D])}(window,document,Laya);!function(t,e,i){var n=(i.un,i.uns,i.static,i.class),s=(i.getset,i.__newvec,function(){function t(){}return n(t,"PathFinding.core.DiagonalMovement"),t.Always=1,t.Never=2,t.IfAtMostOneObstacle=3,t.OnlyWhenNoObstacles=4,t}()),a=function(){function t(t,e,i){this.width=0,this.height=0,this.nodes=null;var n=0;"number"==typeof t?n=t:(e=t.length,n=t[0].length,i=t),this.width=n,this.height=e,this.nodes=this._buildNodes(n,e,i)}n(t,"PathFinding.core.Grid");var e=t.prototype;return e._buildNodes=function(t,e,i){var n=0,s=0,a=[];for(n=0;n<e;++n)for(a[n]=[],s=0;s<t;++s)a[n][s]=new r(s,n);if(null==i)return a;if(i.length!=e||i[0].length!=t)throw new Error("Matrix size does not fit");for(n=0;n<e;++n)for(s=0;s<t;++s)i[n][s]&&(a[n][s].walkable=!1);return a},e.getNodeAt=function(t,e){return this.nodes[e][t]},e.isWalkableAt=function(t,e){return this.isInside(t,e)&&this.nodes[e][t].walkable},e.isInside=function(t,e){return t>=0&&t<this.width&&e>=0&&e<this.height},e.setWalkableAt=function(t,e,i){this.nodes[e][t].walkable=i},e.getNeighbors=function(t,e){var i=t.x,n=t.y,a=[],o=!1,r=!1,h=!1,l=!1,u=!1,d=!1,f=!1,c=!1,p=this.nodes;if(this.isWalkableAt(i,n-1)&&(a.push(p[n-1][i]),o=!0),this.isWalkableAt(i+1,n)&&(a.push(p[n][i+1]),h=!0),this.isWalkableAt(i,n+1)&&(a.push(p[n+1][i]),u=!0),this.isWalkableAt(i-1,n)&&(a.push(p[n][i-1]),f=!0),e==s.Never)return a;if(e==s.OnlyWhenNoObstacles)r=f&&o,l=o&&h,d=h&&u,c=u&&f;else if(e==s.IfAtMostOneObstacle)r=f||o,l=o||h,d=h||u,c=u||f;else{if(e!=s.Always)throw new Error("Incorrect value of diagonalMovement");r=!0,l=!0,d=!0,c=!0}return r&&this.isWalkableAt(i-1,n-1)&&a.push(p[n-1][i-1]),l&&this.isWalkableAt(i+1,n-1)&&a.push(p[n-1][i+1]),d&&this.isWalkableAt(i+1,n+1)&&a.push(p[n+1][i+1]),c&&this.isWalkableAt(i-1,n+1)&&a.push(p[n+1][i-1]),a},e.clone=function(){var e=0,i=0,n=this.width,s=this.height,a=this.nodes,o=new t(n,s),h=[];for(e=0;e<s;++e)for(h[e]=[],i=0;i<n;++i)h[e][i]=new r(i,e,a[e][i].walkable);return o.nodes=h,o},e.reset=function(){for(var t,e=0;e<this.height;++e)for(var i=0;i<this.width;++i)t=this.nodes[e][i],t.g=0,t.f=0,t.h=0,t.by=0,t.parent=null,t.opened=null,t.closed=null,t.tested=null},t}(),o=function(){function t(){}return n(t,"PathFinding.core.Heuristic"),t.manhattan=function(t,e){return t+e},t.euclidean=function(t,e){return Math.sqrt(t*t+e*e)},t.octile=function(t,e){var i=Math.SQRT2-1;return t<e?i*t+e:i*e+t},t.chebyshev=function(t,e){return Math.max(t,e)},t}(),r=function(){function t(t,e,i){this.x=0,this.y=0,this.g=0,this.f=0,this.h=0,this.by=0,this.parent=null,this.opened=null,this.closed=null,this.tested=null,this.walkable=!1,void 0===i&&(i=!0),this.x=t,this.y=e,this.walkable=i}return n(t,"PathFinding.core.Node",null,"Node1"),t}(),h=function(){function t(){}return n(t,"PathFinding.core.Util"),t.backtrace=function(t){for(var e=[[t.x,t.y]];t.parent;)t=t.parent,e.push([t.x,t.y]);return e.reverse()},t.biBacktrace=function(e,i){var n=t.backtrace(e),s=t.backtrace(i);return n.concat(s.reverse())},t.pathLength=function(t){var e=0,i=0,n=0,s=0,a=0,o=0;for(e=1;e<t.length;++e)n=t[e-1],s=t[e],a=n[0]-s[0],o=n[1]-s[1],i+=Math.sqrt(a*a+o*o);return i},t.interpolate=function(t,e,i,n){var s=Math.abs,a=[],o=0,r=0,h=0,l=0,u=0,d=0;for(h=s(i-t),l=s(n-e),o=t<i?1:-1,r=e<n?1:-1,u=h-l;;){if(a.push([t,e]),t==i&&e==n)break;d=2*u,d>-l&&(u-=l,t+=o),d<h&&(u+=h,e+=r)}return a},t.expandPath=function(e){var i,n,s,a=[],o=e.length,r=0,h=0,l=0;if(o<2)return a;for(h=0;h<o-1;++h)for(i=e[h],n=e[h+1],s=t.interpolate(i[0],i[1],n[0],n[1]),r=s.length,l=0;l<r-1;++l)a.push(s[l]);return a.push(e[o-1]),a},t.smoothenPath=function(e,i){var n,s,a,o,r,h=i.length,l=i[0][0],u=i[0][1],d=i[h-1][0],f=i[h-1][1],c=0,p=0,g=0,b=0,m=0,v=0,A=!1;for(c=l,p=u,n=[[c,p]],m=2;m<h;++m){for(s=i[m],g=s[0],b=s[1],a=t.interpolate(c,p,g,b),A=!1,v=1;v<a.length;++v)if(o=a[v],!e.isWalkableAt(o[0],o[1])){A=!0;break}A&&(r=i[m-1],n.push(r),c=r[0],p=r[1])}return n.push([d,f]),n},t.compressPath=function(t){if(t.length<3)return t;var e=[],i=t[0][0],n=t[0][1],s=t[1][0],a=t[1][1],o=s-i,r=a-n,h=0,l=0,u=0,d=0,f=NaN,c=0;for(f=Math.sqrt(o*o+r*r),o/=f,r/=f,e.push([i,n]),c=2;c<t.length;c++)h=s,l=a,u=o,d=r,s=t[c][0],a=t[c][1],o=s-h,r=a-l,f=Math.sqrt(o*o+r*r),o/=f,r/=f,o===u&&r===d||e.push([h,l]);return e.push([s,a]),e},t}(),l=function(){function t(t){this.allowDiagonal=!1,this.dontCrossCorners=!1,this.heuristic=null,this.weight=0,this.diagonalMovement=0,t=t||{},this.allowDiagonal=t.allowDiagonal,this.dontCrossCorners=t.dontCrossCorners,this.heuristic=t.heuristic||o.manhattan,this.weight=t.weight||1,this.diagonalMovement=t.diagonalMovement,this.diagonalMovement||(this.allowDiagonal?this.dontCrossCorners?this.diagonalMovement=s.OnlyWhenNoObstacles:this.diagonalMovement=s.IfAtMostOneObstacle:this.diagonalMovement=s.Never),this.diagonalMovement===s.Never?this.heuristic=t.heuristic||o.manhattan:this.heuristic=t.heuristic||o.octile}return n(t,"PathFinding.finders.AStarFinder"),t.prototype.findPath=function(t,e,i,n,s){var a,o,r,l=new f(function(t,e){return t.f-e.f}),u=s.getNodeAt(t,e),d=s.getNodeAt(i,n),c=this.heuristic,p=this.diagonalMovement,g=this.weight,b=Math.abs,m=Math.SQRT2,v=0,A=0,k=0,W=0,M=0;for(u.g=0,u.f=0,l.push(u),u.opened=!0;!l.empty();){if(a=l.pop(),a.closed=!0,a===d)return h.backtrace(d);for(o=s.getNeighbors(a,p),v=0,A=o.length;v<A;++v)r=o[v],r.closed||(k=r.x,W=r.y,M=a.g+(k-a.x==0||W-a.y==0?1:m),(!r.opened||M<r.g)&&(r.g=M,r.h=r.h||g*c(b(k-i),b(W-n)),r.f=r.g+r.h,r.parent=a,r.opened?l.updateItem(r):(l.push(r),r.opened=!0)))}return[]},t}(),u=function(){function t(t){this.allowDiagonal=!1,this.dontCrossCorners=!1,this.diagonalMovement=0,this.heuristic=null,this.weight=0,t=t||{},this.allowDiagonal=t.allowDiagonal,this.dontCrossCorners=t.dontCrossCorners,this.diagonalMovement=t.diagonalMovement,this.heuristic=t.heuristic||o.manhattan,this.weight=t.weight||1,this.diagonalMovement||(this.allowDiagonal?this.dontCrossCorners?this.diagonalMovement=s.OnlyWhenNoObstacles:this.diagonalMovement=s.IfAtMostOneObstacle:this.diagonalMovement=s.Never),this.diagonalMovement==s.Never?this.heuristic=t.heuristic||o.manhattan:this.heuristic=t.heuristic||o.octile}return n(t,"PathFinding.finders.BiAStarFinder"),t.prototype.findPath=function(t,e,i,n,s){var a,o,r,l=function(t,e){return t.f-e.f},u=new f(l),d=new f(l),c=s.getNodeAt(t,e),p=s.getNodeAt(i,n),g=this.heuristic,b=this.diagonalMovement,m=this.weight,v=Math.abs,A=Math.SQRT2,k=0,W=0,M=0,y=0,w=0;for(c.g=0,c.f=0,u.push(c),c.opened=1,p.g=0,p.f=0,d.push(p),p.opened=2;!u.empty()&&!d.empty();){for(a=u.pop(),a.closed=!0,o=s.getNeighbors(a,b),k=0,W=o.length;k<W;++k)if(r=o[k],!r.closed){if(2===r.opened)return h.biBacktrace(a,r);M=r.x,y=r.y,w=a.g+(M-a.x==0||y-a.y==0?1:A),(!r.opened||w<r.g)&&(r.g=w,r.h=r.h||m*g(v(M-i),v(y-n)),r.f=r.g+r.h,r.parent=a,r.opened?u.updateItem(r):(u.push(r),r.opened=1))}for(a=d.pop(),a.closed=!0,o=s.getNeighbors(a,b),k=0,W=o.length;k<W;++k)if(r=o[k],!r.closed){if(1===r.opened)return h.biBacktrace(r,a);M=r.x,y=r.y,w=a.g+(M-a.x==0||y-a.y==0?1:A),(!r.opened||w<r.g)&&(r.g=w,r.h=r.h||m*g(v(M-t),v(y-e)),r.f=r.g+r.h,r.parent=a,r.opened?d.updateItem(r):(d.push(r),r.opened=2))}}return[]},t}(),d=(function(){function t(t){this.allowDiagonal=!1,this.dontCrossCorners=!1,this.heuristic=null,this.weight=0,this.diagonalMovement=0,t=t||{},this.allowDiagonal=t.allowDiagonal,this.dontCrossCorners=t.dontCrossCorners,this.diagonalMovement=t.diagonalMovement,this.diagonalMovement||(this.allowDiagonal?this.dontCrossCorners?this.diagonalMovement=s.OnlyWhenNoObstacles:this.diagonalMovement=s.IfAtMostOneObstacle:this.diagonalMovement=s.Never)}n(t,"PathFinding.finders.BiBreadthFirstFinder"),t.prototype.findPath=function(t,e,i,n,s){var a,o,r,l=s.getNodeAt(t,e),u=s.getNodeAt(i,n),d=[],f=[],c=this.diagonalMovement,p=0,g=0;for(d.push(l),l.opened=!0,l.by=0,f.push(u),u.opened=!0,u.by=1;d.length&&f.length;){for(r=d.shift(),r.closed=!0,a=s.getNeighbors(r,c),p=0,g=a.length;p<g;++p)if(o=a[p],!o.closed)if(o.opened){if(1===o.by)return h.biBacktrace(r,o)}else d.push(o),o.parent=r,o.opened=!0,o.by=0;for(r=f.shift(),r.closed=!0,a=s.getNeighbors(r,c),p=0,g=a.length;p<g;++p)if(o=a[p],!o.closed)if(o.opened){if(0===o.by)return h.biBacktrace(o,r)}else f.push(o),o.parent=r,o.opened=!0,o.by=1}return[]},t}(),function(){function t(t){this.allowDiagonal=!1,this.dontCrossCorners=!1,this.heuristic=null,this.weight=0,this.diagonalMovement=0,t=t||{},this.allowDiagonal=t.allowDiagonal,this.dontCrossCorners=t.dontCrossCorners,this.diagonalMovement=t.diagonalMovement,this.diagonalMovement||(this.allowDiagonal?this.dontCrossCorners?this.diagonalMovement=s.OnlyWhenNoObstacles:this.diagonalMovement=s.IfAtMostOneObstacle:this.diagonalMovement=s.Never)}n(t,"PathFinding.finders.BreadthFirstFinder"),t.prototype.findPath=function(t,e,i,n,s){var a,o,r,l=[],u=this.diagonalMovement,d=s.getNodeAt(t,e),f=s.getNodeAt(i,n),c=0,p=0;for(l.push(d),d.opened=!0;l.length;){if(r=l.shift(),r.closed=!0,r===f)return h.backtrace(f);for(a=s.getNeighbors(r,u),c=0,p=a.length;c<p;++c)o=a[c],o.closed||o.opened||(l.push(o),o.opened=!0,o.parent=r)}return[]},t}(),function(){function t(t){this.allowDiagonal=!1,this.dontCrossCorners=!1,this.heuristic=null,this.weight=0,this.diagonalMovement=0,this.trackRecursion=!1,this.timeLimit=NaN,t=t||{},this.allowDiagonal=t.allowDiagonal,this.dontCrossCorners=t.dontCrossCorners,this.diagonalMovement=t.diagonalMovement,this.heuristic=t.heuristic||o.manhattan,this.weight=t.weight||1,this.trackRecursion=t.trackRecursion||!1,this.timeLimit=t.timeLimit||1/0,this.diagonalMovement||(this.allowDiagonal?this.dontCrossCorners?this.diagonalMovement=s.OnlyWhenNoObstacles:this.diagonalMovement=s.IfAtMostOneObstacle:this.diagonalMovement=s.Never),this.diagonalMovement===s.Never?this.heuristic=t.heuristic||o.manhattan:this.heuristic=t.heuristic||o.octile}n(t,"PathFinding.finders.IDAStarFinder"),t.prototype.findPath=function(t,e,i,n,s){var a,o=this,r=0,h=(new Date).getTime(),l=function(t,e){return o.heuristic(Math.abs(e.x-t.x),Math.abs(e.y-t.y))}.bind(this),u=function(t,e){return t.x===e.x||t.y===e.y?1:Math.SQRT2},d=function(t,e,i,n,a){if(r++,o.timeLimit>0&&(new Date).getTime()-h>1e3*o.timeLimit)return 1/0;var f=e+l(t,c)*o.weight;if(f>i)return f;if(t==c)return n[a]=[t.x,t.y],t;var p,g=0,b=0,m=0,v=s.getNeighbors(t,o.diagonalMovement);for(m=0,g=1/0;p=v[m];++m){if(o.trackRecursion&&(p.retainCount=p.retainCount+1||1,1!=p.tested&&(p.tested=!0)),(b=d(p,e+u(t,p),i,n,a+1))instanceof PathFinding.core.Node)return n[a]=[t.x,t.y],b;o.trackRecursion&&0==--p.retainCount&&(p.tested=!1),b<g&&(g=b)}return g}.bind(this),f=s.getNodeAt(t,e),c=s.getNodeAt(i,n),p=l(f,c),g=0,b=0;for(g=0;!0;++g){if(a=[],(b=d(f,0,p,a,0))==1/0)return[];if(b instanceof PathFinding.core.Node)return a;p=b}},t}(),function(){function t(t){this.grid=null,this.openList=null,this.startNode=null,this.endNode=null,this.heuristic=null,this.trackJumpRecursion=!1,t=t||{},this.heuristic=t.heuristic||o.manhattan,this.trackJumpRecursion=t.trackJumpRecursion||!1}n(t,"PathFinding.finders.JumpPointFinderBase");var e=t.prototype;return e.findPath=function(t,e,i,n,s){var a,o=this.openList=new f(function(t,e){return t.f-e.f}),r=this.startNode=s.getNodeAt(t,e),l=this.endNode=s.getNodeAt(i,n);for(this.grid=s,r.g=0,r.f=0,o.push(r),r.opened=!0;!o.empty();){if(a=o.pop(),a.closed=!0,a==l)return h.expandPath(h.backtrace(l));this._identifySuccessors(a)}return[]},e._identifySuccessors=function(t){var e,i,n,s,a=this.grid,r=this.heuristic,h=this.openList,l=this.endNode.x,u=this.endNode.y,d=0,f=0,c=t.x,p=t.y,g=0,b=0,m=0,v=0,A=Math.abs;Math.max;for(e=this._findNeighbors(t),d=0,f=e.length;d<f;++d)if(i=e[d],n=this._jump(i[0],i[1],c,p)){if(g=n[0],b=n[1],s=a.getNodeAt(g,b),s.closed)continue;m=o.octile(A(g-c),A(b-p)),v=t.g+m,(!s.opened||v<s.g)&&(s.g=v,s.h=s.h||r(A(g-l),A(b-u)),s.f=s.g+s.h,s.parent=t,s.opened?h.updateItem(s):(h.push(s),s.opened=!0))}},e._jump=function(t,e,i,n){},e._findNeighbors=function(t){},t}()),f=(function(){function t(t){return t=t||{},t.diagonalMovement===s.Never?new m(t):t.diagonalMovement===s.Always?new p(t):t.diagonalMovement===s.OnlyWhenNoObstacles?new b(t):new g(t)}n(t,"PathFinding.finders.JumpPointFinder"),t}(),function(){function t(t){this.allowDiagonal=!1,this.dontCrossCorners=!1,this.diagonalMovement=0,this.heuristic=null,t=t||{},this.allowDiagonal=t.allowDiagonal,this.dontCrossCorners=t.dontCrossCorners,this.heuristic=t.heuristic||o.manhattan,this.diagonalMovement=t.diagonalMovement,this.diagonalMovement||(this.allowDiagonal?this.dontCrossCorners?this.diagonalMovement=s.OnlyWhenNoObstacles:this.diagonalMovement=s.IfAtMostOneObstacle:this.diagonalMovement=s.Never),this.diagonalMovement==s.Never?this.heuristic=t.heuristic||o.manhattan:this.heuristic=t.heuristic||o.octile}n(t,"PathFinding.finders.TraceFinder"),t.prototype.findPath=function(t,e,i,n,s){var a,o,r,l=new f(function(t,e){return t.f-e.f}),u=s.getNodeAt(t,e),d=s.getNodeAt(i,n),c=this.heuristic,p=(this.allowDiagonal,this.dontCrossCorners,Math.abs),g=Math.SQRT2,b=0,m=0,v=0,A=0,k=0;for(u.g=0,u.f=0,l.push(u),u.opened=!0;!l.empty();){if(a=l.pop(),a.closed=!0,a===d)return h.backtrace(d);for(o=s.getNeighbors(a,this.diagonalMovement),b=0,m=o.length;b<m;++b)r=o[b],r.closed||(v=r.x,A=r.y,k=a.g+(v-a.x==0||A-a.y==0?1:g),(!r.opened||k<r.g)&&(r.g=k*m/9,r.h=r.h||c(p(v-i),p(A-n)),r.f=r.g+r.h,r.parent=a,r.opened?l.updateItem(r):(l.push(r),r.opened=!0)))}return[]},t}(),function(){function t(t){this.cmp=null,this.nodes=null,this.heapFunction=new c,this.cmp=null!=t?t:this.heapFunction.defaultCmp,this.nodes=[]}n(t,"PathFinding.libs.Heap");var e=t.prototype;return e.push=function(t){return this.heapFunction.heappush(this.nodes,t,this.cmp)},e.pop=function(){return this.heapFunction.heappop(this.nodes,this.cmp)},e.peek=function(){return this.nodes[0]},e.contains=function(t){return this.nodes.indexOf(t)!==-1},e.replace=function(t){return this.heapFunction.heapreplace(this.nodes,t,this.cmp)},e.pushpop=function(t){return this.heapFunction.heappushpop(this.nodes,t,this.cmp)},e.heapify=function(){return this.heapFunction.heapify(this.nodes,this.cmp)},e.updateItem=function(t){return this.heapFunction.updateItem(this.nodes,t,this.cmp)},e.clear=function(){return this.nodes=[]},e.empty=function(){return 0===this.nodes.length},e.size=function(){return this.nodes.length},e.clone=function(){var e=new t;return e.nodes=this.nodes.slice(0),e},e.toArray=function(){return this.nodes.slice(0)},t}()),c=function(){function t(){this.defaultCmp=function(t,e){return t<e?-1:t>e?1:0}}n(t,"PathFinding.libs.HeapFunction");var e=t.prototype;return e.insort=function(t,e,i,n,s){var a=NaN;if(null==i&&(i=0),null==s&&(s=this.defaultCmp),i<0)throw new Error("lo must be non-negative");for(null==n&&(n=t.length);i<n;)a=Math.floor((i+n)/2),s(e,t[a])<0?n=a:i=a+1;return[].splice.apply(t,[i,i-i].concat(e)),e},e.heappush=function(t,e,i){return null==i&&(i=this.defaultCmp),t.push(e),this._siftdown(t,0,t.length-1,i)},e.heappop=function(t,e){var i,n;return null==e&&(e=this.defaultCmp),i=t.pop(),t.length?(n=t[0],t[0]=i,this._siftup(t,0,e)):n=i,n},e.heapreplace=function(t,e,i){var n;return null==i&&(i=this.defaultCmp),n=t[0],t[0]=e,this._siftup(t,0,i),n},e.heappushpop=function(t,e,i){var n;return null==i&&(i=this.defaultCmp),t.length&&i(t[0],e)<0&&(n=[t[0],e],e=n[0],t[0]=n[1],this._siftup(t,0,i)),e},e.heapify=function(t,e){var i,n,s,a,o=0,r=0,h=0,l=0;for(null==e&&(e=this.defaultCmp),n=function(){for(a=[],h=0,i=Math.floor(t.length/2);0<=i?h<i:h>i;0<=i?h++:h--)a.push(h);return a}.apply(this).reverse(),s=[],r=0,l=n.length;r<l;r++)o=n[r],s.push(this._siftup(t,o,e));return s},e.updateItem=function(t,e,i){var n=0;return null==i&&(i=this.defaultCmp),(n=t.indexOf(e))===-1?null:(this._siftdown(t,0,n,i),this._siftup(t,n,i))},e.nlargest=function(t,e,i){var n,s,a,o=0,r=0;if(null==i&&(i=this.defaultCmp),s=t.slice(0,e),!s.length)return s;for(this.heapify(s,i),a=t.slice(e),o=0,r=a.length;o<r;o++)n=a[o],this.heappushpop(s,n,i);return s.sort(i).reverse()},e.nsmallest=function(t,e,i){var n,s,a,o,r,h,l,u=0,d=0;if(null==i&&(i=this.defaultCmp),10*e<=t.length){if(a=t.slice(0,e).sort(i),!a.length)return a;for(s=a[a.length-1],r=t.slice(e),u=0,o=r.length;u<o;u++)n=r[u],i(n,s)<0&&(this.insort(a,n,0,null,i),a.pop(),s=a[a.length-1]);return a}for(this.heapify(t,i),l=[],d=0,h=Math.min(e,t.length);0<=h?d<h:d>h;0<=h?++d:--d)l.push(this.heappop(t,i));return l},e._siftdown=function(t,e,i,n){var s,a,o=0;for(null==n&&(n=this.defaultCmp),s=t[i];i>e&&(o=i-1>>1,a=t[o],n(s,a)<0);)t[i]=a,i=o;return t[i]=s},e._siftup=function(t,e,i){var n,s=0,a=0,o=0,r=0;for(null==i&&(i=this.defaultCmp),a=t.length,r=e,n=t[e],s=2*e+1;s<a;)o=s+1,o<a&&!(i(t[s],t[o])<0)&&(s=o),t[e]=t[s],e=s,s=2*e+1;return t[e]=n,this._siftdown(t,r,e,i)},t}(),p=(function(){function t(){var t={allowDiagonal:!0,dontCrossCorners:!1,heuristic:o.manhattan,weight:1},e=new l(t),i=new a(64,36),n=e.findPath(23,16,33,16,i);console.log(n.toString())}n(t,"TestPathFinding"),t}(),function(t){function e(t){e.__super.call(this,t);var i=this.heuristic;this.heuristic=function(t,e){return 1e6*i(t,e)}}n(e,"PathFinding.finders.BestFirstFinder",t),e}(l),function(t){function e(t){e.__super.call(this,t);var i=this.heuristic;this.heuristic=function(t,e){return 1e6*i(t,e)}}n(e,"PathFinding.finders.BiBestFirstFinder",t),e}(u),function(t){function e(t){e.__super.call(this,t),this.heuristic=function(t,e){return 0}}n(e,"PathFinding.finders.BiDijkstraFinder",t),e}(u),function(t){function e(t){e.__super.call(this,t),this.heuristic=function(t,e){return 0}}n(e,"PathFinding.finders.DijkstraFinder",t),e}(l),function(t){function e(t){e.__super.call(this,t)}n(e,"PathFinding.finders.JPFAlwaysMoveDiagonally",t);var i=e.prototype;return i._jump=function(t,e,i,n){var s=this.grid,a=t-i,o=e-n;if(!s.isWalkableAt(t,e))return null;if(1==this.trackJumpRecursion&&(s.getNodeAt(t,e).tested=!0),s.getNodeAt(t,e)==this.endNode)return[t,e];if(0!==a&&0!==o){if(s.isWalkableAt(t-a,e+o)&&!s.isWalkableAt(t-a,e)||s.isWalkableAt(t+a,e-o)&&!s.isWalkableAt(t,e-o))return[t,e];if(this._jump(t+a,e,t,e)||this._jump(t,e+o,t,e))return[t,e]}else if(0!==a){if(s.isWalkableAt(t+a,e+1)&&!s.isWalkableAt(t,e+1)||s.isWalkableAt(t+a,e-1)&&!s.isWalkableAt(t,e-1))return[t,e]}else if(s.isWalkableAt(t+1,e+o)&&!s.isWalkableAt(t+1,e)||s.isWalkableAt(t-1,e+o)&&!s.isWalkableAt(t-1,e))return[t,e];return this._jump(t+a,e+o,t,e)},i._findNeighbors=function(t){var e,i,n=t.parent,a=t.x,o=t.y,r=this.grid,h=0,l=0,u=0,d=0,f=[],c=0,p=0;if(n)h=n.x,l=n.y,u=(a-h)/Math.max(Math.abs(a-h),1),d=(o-l)/Math.max(Math.abs(o-l),1),0!==u&&0!==d?(r.isWalkableAt(a,o+d)&&f.push([a,o+d]),r.isWalkableAt(a+u,o)&&f.push([a+u,o]),r.isWalkableAt(a+u,o+d)&&f.push([a+u,o+d]),r.isWalkableAt(a-u,o)||f.push([a-u,o+d]),r.isWalkableAt(a,o-d)||f.push([a+u,o-d])):0===u?(r.isWalkableAt(a,o+d)&&f.push([a,o+d]),r.isWalkableAt(a+1,o)||f.push([a+1,o+d]),r.isWalkableAt(a-1,o)||f.push([a-1,o+d])):(r.isWalkableAt(a+u,o)&&f.push([a+u,o]),r.isWalkableAt(a,o+1)||f.push([a+u,o+1]),r.isWalkableAt(a,o-1)||f.push([a+u,o-1]));else for(e=r.getNeighbors(t,s.Always),c=0,p=e.length;c<p;++c)i=e[c],f.push([i.x,i.y]);return f},e}(d)),g=function(t){function e(t){e.__super.call(this,t)}n(e,"PathFinding.finders.JPFMoveDiagonallyIfAtMostOneObstacle",t);var i=e.prototype;return i._jump=function(t,e,i,n){var s=this.grid,a=t-i,o=e-n;if(!s.isWalkableAt(t,e))return null;if(this.trackJumpRecursion===!0&&(s.getNodeAt(t,e).tested=!0),s.getNodeAt(t,e)==this.endNode)return[t,e];if(0!==a&&0!==o){if(s.isWalkableAt(t-a,e+o)&&!s.isWalkableAt(t-a,e)||s.isWalkableAt(t+a,e-o)&&!s.isWalkableAt(t,e-o))return[t,e];if(this._jump(t+a,e,t,e)||this._jump(t,e+o,t,e))return[t,e]}else if(0!==a){if(s.isWalkableAt(t+a,e+1)&&!s.isWalkableAt(t,e+1)||s.isWalkableAt(t+a,e-1)&&!s.isWalkableAt(t,e-1))return[t,e]}else if(s.isWalkableAt(t+1,e+o)&&!s.isWalkableAt(t+1,e)||s.isWalkableAt(t-1,e+o)&&!s.isWalkableAt(t-1,e))return[t,e];return s.isWalkableAt(t+a,e)||s.isWalkableAt(t,e+o)?this._jump(t+a,e+o,t,e):null},i._findNeighbors=function(t){var e,i,n=t.parent,a=t.x,o=t.y,r=this.grid,h=0,l=0,u=0,d=0,f=[],c=0,p=0;if(n)h=n.x,l=n.y,u=(a-h)/Math.max(Math.abs(a-h),1),d=(o-l)/Math.max(Math.abs(o-l),1),0!==u&&0!==d?(r.isWalkableAt(a,o+d)&&f.push([a,o+d]),r.isWalkableAt(a+u,o)&&f.push([a+u,o]),(r.isWalkableAt(a,o+d)||r.isWalkableAt(a+u,o))&&f.push([a+u,o+d]),!r.isWalkableAt(a-u,o)&&r.isWalkableAt(a,o+d)&&f.push([a-u,o+d]),!r.isWalkableAt(a,o-d)&&r.isWalkableAt(a+u,o)&&f.push([a+u,o-d])):0===u?r.isWalkableAt(a,o+d)&&(f.push([a,o+d]),r.isWalkableAt(a+1,o)||f.push([a+1,o+d]),r.isWalkableAt(a-1,o)||f.push([a-1,o+d])):r.isWalkableAt(a+u,o)&&(f.push([a+u,o]),r.isWalkableAt(a,o+1)||f.push([a+u,o+1]),r.isWalkableAt(a,o-1)||f.push([a+u,o-1]));else for(e=r.getNeighbors(t,s.IfAtMostOneObstacle),c=0,p=e.length;c<p;++c)i=e[c],f.push([i.x,i.y]);return f},e}(d),b=function(t){function e(t){e.__super.call(this,t)}n(e,"PathFinding.finders.JPFMoveDiagonallyIfNoObstacles",t);var i=e.prototype;return i._jump=function(t,e,i,n){var s=this.grid,a=t-i,o=e-n;if(!s.isWalkableAt(t,e))return null;if(this.trackJumpRecursion===!0&&(s.getNodeAt(t,e).tested=!0),s.getNodeAt(t,e)===this.endNode)return[t,e];if(0!==a&&0!==o){if(this._jump(t+a,e,t,e)||this._jump(t,e+o,t,e))return[t,e]}else if(0!==a){if(s.isWalkableAt(t,e-1)&&!s.isWalkableAt(t-a,e-1)||s.isWalkableAt(t,e+1)&&!s.isWalkableAt(t-a,e+1))return[t,e]}else if(0!==o&&(s.isWalkableAt(t-1,e)&&!s.isWalkableAt(t-1,e-o)||s.isWalkableAt(t+1,e)&&!s.isWalkableAt(t+1,e-o)))return[t,e];return s.isWalkableAt(t+a,e)&&s.isWalkableAt(t,e+o)?this._jump(t+a,e+o,t,e):null},i._findNeighbors=function(t){var e,i,n=t.parent,a=t.x,o=t.y,r=this.grid,h=0,l=0,u=0,d=0,f=[],c=0,p=0;if(n)if(h=n.x,l=n.y,u=(a-h)/Math.max(Math.abs(a-h),1),d=(o-l)/Math.max(Math.abs(o-l),1),0!==u&&0!==d)r.isWalkableAt(a,o+d)&&f.push([a,o+d]),r.isWalkableAt(a+u,o)&&f.push([a+u,o]),r.isWalkableAt(a,o+d)&&r.isWalkableAt(a+u,o)&&f.push([a+u,o+d]);else{var g;if(0!==u){g=r.isWalkableAt(a+u,o);var b=r.isWalkableAt(a,o+1),m=r.isWalkableAt(a,o-1);g&&(f.push([a+u,o]),b&&f.push([a+u,o+1]),m&&f.push([a+u,o-1])),b&&f.push([a,o+1]),m&&f.push([a,o-1])}else if(0!==d){g=r.isWalkableAt(a,o+d);var v=r.isWalkableAt(a+1,o),A=r.isWalkableAt(a-1,o);g&&(f.push([a,o+d]),v&&f.push([a+1,o+d]),A&&f.push([a-1,o+d])),v&&f.push([a+1,o]),A&&f.push([a-1,o])}}else for(e=r.getNeighbors(t,s.OnlyWhenNoObstacles),c=0,p=e.length;c<p;++c)i=e[c],f.push([i.x,i.y]);return f},e}(d),m=function(t){function e(t){e.__super.call(this,t)}n(e,"PathFinding.finders.JPFNeverMoveDiagonally",t);var i=e.prototype;return i._jump=function(t,e,i,n){var s=this.grid,a=t-i,o=e-n;if(!s.isWalkableAt(t,e))return null;if(this.trackJumpRecursion===!0&&(s.getNodeAt(t,e).tested=!0),s.getNodeAt(t,e)==this.endNode)return[t,e];if(0!==a){if(s.isWalkableAt(t,e-1)&&!s.isWalkableAt(t-a,e-1)||s.isWalkableAt(t,e+1)&&!s.isWalkableAt(t-a,e+1))return[t,e]}else{if(0===o)throw new Error("Only horizontal and vertical movements are allowed");if(s.isWalkableAt(t-1,e)&&!s.isWalkableAt(t-1,e-o)||s.isWalkableAt(t+1,e)&&!s.isWalkableAt(t+1,e-o))return[t,e];if(this._jump(t+1,e,t,e)||this._jump(t-1,e,t,e))return[t,e]}return this._jump(t+a,e+o,t,e)},i._findNeighbors=function(t){var e,i,n=t.parent,a=t.x,o=t.y,r=this.grid,h=0,l=0,u=0,d=0,f=[],c=0,p=0;if(n)h=n.x,l=n.y,u=(a-h)/Math.max(Math.abs(a-h),1),d=(o-l)/Math.max(Math.abs(o-l),1),0!==u?(r.isWalkableAt(a,o-1)&&f.push([a,o-1]),r.isWalkableAt(a,o+1)&&f.push([a,o+1]),r.isWalkableAt(a+u,o)&&f.push([a+u,o])):0!==d&&(r.isWalkableAt(a-1,o)&&f.push([a-1,o]),r.isWalkableAt(a+1,o)&&f.push([a+1,o]),r.isWalkableAt(a,o+d)&&f.push([a,o+d]));else for(e=r.getNeighbors(t,s.Never),c=0,p=e.length;c<p;++c)i=e[c],f.push([i.x,i.y]);return f},e}(d)}(window,document,Laya);!function(t,i,e){var r=(e.un,e.uns,e.static,e.class),h=e.getset,a=(e.__newvec,laya.utils.Browser),s=laya.resource.HTMLCanvas,o=(laya.utils.Handler,laya.net.Loader),n=laya.maths.Point,l=laya.maths.Rectangle,_=laya.renders.Render,p=laya.renders.RenderContext,m=laya.display.Sprite,c=laya.resource.Texture,d=function(){function t(){this._jsonData=null,this._tileTexSetArr=[],this._texArray=[],this._x=0,this._y=0,this._width=0,this._height=0,this._mapW=0,this._mapH=0,this._mapTileW=0,this._mapTileH=0,this._mapSprite=null,this._layerArray=[],this._renderLayerArray=[],this._gridArray=[],this._showGridKey=!1,this._totalGridNum=0,this._gridW=0,this._gridH=0,this._gridWidth=450,this._gridHeight=450,this._jsonLoader=null,this._loader=null,this._tileSetArray=[],this._currTileSet=null,this._completeHandler=null,this._index=0,this._animationDic={},this._properties=null,this._tileProperties={},this._tileProperties2={},this._orientation="orthogonal",this._renderOrder="right-down",this._colorArray=["FF","00","33","66"],this._scale=1,this._pivotScaleX=.5,this._pivotScaleY=.5,this._centerX=0,this._centerY=0,this._viewPortX=0,this._viewPortY=0,this._viewPortWidth=0,this._viewPortHeight=0,this._enableLinear=!0,this._resPath=null,this._pathArray=null,this._limitRange=!1,this._fastDirty=!0,this.autoCache=!0,this.autoCacheType="normal",this.enableMergeLayer=!1,this.removeCoveredTile=!1,this.showGridTextureCount=!1,this.antiCrack=!0,this.cacheAllAfterInit=!1,this._rect=new l,this._paddingRect=new l,this._mapRect=new i,this._mapLogicRect=new i,this._mapLastRect=new i,this._mapSprite=new m}var i,a,n;r(t,"laya.map.TiledMap");var d=t.prototype;return d.createMap=function(t,i,e,r,h,a,s){void 0===a&&(a=!0),void 0===s&&(s=!1),this._enableLinear=a,this._limitRange=s,this._rect.x=i.x,this._rect.y=i.y,this._rect.width=i.width,this._rect.height=i.height,this._viewPortWidth=i.width/this._scale,this._viewPortHeight=i.height/this._scale,this._completeHandler=e,r?this._paddingRect.copyFrom(r):this._paddingRect.setTo(0,0,0,0),h&&(this._gridWidth=h.x,this._gridHeight=h.y);var n=t.lastIndexOf("/");n>-1?(this._resPath=t.substr(0,n),this._pathArray=this._resPath.split("/")):(this._resPath="",this._pathArray=[]),this._jsonLoader=new o,this._jsonLoader.once("complete",this,this.onJsonComplete),this._jsonLoader.load(t,"json",!1)},d.onJsonComplete=function(t){var i=this._jsonData=t;this._properties=i.properties,this._orientation=i.orientation,this._renderOrder=i.renderorder,this._mapW=i.width,this._mapH=i.height,this._mapTileW=i.tilewidth,this._mapTileH=i.tileheight,this._width=this._mapTileW*this._mapW,this._height=this._mapTileH*this._mapH,"staggered"==this._orientation&&(this._height=(.5+.5*this._mapH)*this._mapTileH),this._mapLastRect.top=this._mapLastRect.bottom=this._mapLastRect.left=this._mapLastRect.right=-1;var e,r,h=i.tilesets,s=0;for(s=0;s<h.length;s++)if(e=h[s],r=new n,r.init(e),!r.properties||!r.properties.ignore){this._tileProperties[s]=r.tileproperties,this.addTileProperties(r.tileproperties),this._tileSetArray.push(r);var l=e.tiles;if(l)for(var _ in l){var p=l[_].animation;if(p){var m=new a;this._animationDic[_]=m;for(var c=0;c<p.length;c++){var d=p[c];m.mAniIdArray.push(d.tileid),m.mDurationTimeArray.push(d.duration)}}}}if(this._tileTexSetArr.push(null),this._tileSetArray.length>0){r=this._currTileSet=this._tileSetArray.shift(),this._loader=new o,this._loader.once("complete",this,this.onTextureComplete);var u=this.mergePath(this._resPath,r.image);this._loader.load(u,"image",!1)}},d.mergePath=function(t,i){var e="",r=i.split("/"),h=0,a=0;for(a=r.length-1;a>=0;a--)".."==r[a]&&h++;if(0==h)return e=this._pathArray.length>0?t+"/"+i:i;var s=this._pathArray.length-h;for(s<0&&console.log("[error]path does not exist",this._pathArray,r,t,i),a=0;a<s;a++)0==a?e+=this._pathArray[a]:e=e+"/"+this._pathArray[a];for(a=h;a<r.length;a++)e=e+"/"+r[a];return e},d.onTextureComplete=function(t){var i=(this._jsonData,t);_.isWebGL&&!this._enableLinear&&(i.bitmap.minFifter=9728,i.bitmap.magFifter=9728,i.bitmap.enableMerageInAtlas=!1),this._texArray.push(i);for(var e=this._currTileSet,r=e.tilewidth,h=e.tileheight,a=e.imagewidth,s=e.imageheight,o=(e.firstgid,Math.floor((a-e.margin-r)/(r+e.spacing))+1),n=Math.floor((s-e.margin-h)/(h+e.spacing))+1,l=null,p=0;p<n;p++)for(var m=0;m<o;m++)l=new u,l.offX=e.titleoffsetX,l.offY=e.titleoffsetY-(h-this._mapTileH),l.texture=c.createFromTexture(i,e.margin+(r+e.spacing)*m,e.margin+(h+e.spacing)*p,r,h),this.antiCrack&&this.adptTexture(l.texture),this._tileTexSetArr.push(l),l.gid=this._tileTexSetArr.length;if(this._tileSetArray.length>0){e=this._currTileSet=this._tileSetArray.shift(),this._loader.once("complete",this,this.onTextureComplete);var d=this.mergePath(this._resPath,e.image);this._loader.load(d,"image",!1)}else this._currTileSet=null,this.initMap()},d.adptTexture=function(t){if(t){var i=t.uv[0],e=t.uv[2],r=t.uv[1],h=t.uv[7],a=1/t.bitmap.width,s=1/t.bitmap.height;t.uv[0]=t.uv[6]=i+a,t.uv[2]=t.uv[4]=e-a,t.uv[1]=t.uv[3]=r+s,t.uv[5]=t.uv[7]=h-s}},d.initMap=function(){var t=0,i=0;for(var r in this._animationDic){var h=this.getTexture(parseInt(r)+1),a=this._animationDic[r];if(a.mAniIdArray.length>0){for(h.textureArray=[],h.durationTimeArray=a.mDurationTimeArray,h.isAnimation=!0,h.animationTotalTime=0,t=0,i=h.durationTimeArray.length;t<i;t++)h.animationTotalTime+=h.durationTimeArray[t];for(t=0,i=a.mAniIdArray.length;t<i;t++){var s=this.getTexture(a.mAniIdArray[t]+1);h.textureArray.push(s)}}}for(this._gridWidth=Math.floor(this._gridWidth/this._mapTileW)*this._mapTileW,this._gridHeight=Math.floor(this._gridHeight/this._mapTileH)*this._mapTileH,this._gridWidth<this._mapTileW&&(this._gridWidth=this._mapTileW),this._gridHeight<this._mapTileH&&(this._gridHeight=this._mapTileH),this._gridW=Math.ceil(this._width/this._gridWidth),this._gridH=Math.ceil(this._height/this._gridHeight),this._totalGridNum=this._gridW*this._gridH,t=0;t<this._gridH;t++){var o=[];this._gridArray.push(o);for(var n=0;n<this._gridW;n++)o.push(null)}for(var l,_,p,m=this._jsonData.layers,c=!0,d=0;d<m.length;d++){var u=m[d];if(1==u.visible){var g=new f;g.init(u,this),this.enableMergeLayer?(l=g.getLayerProperties("layer"),c=c||!p||l!=_,c?(c=!1,g.tarLayer=g,p=g,this._mapSprite.addChild(g),this._renderLayerArray.push(g)):g.tarLayer=p,_=l):(this._mapSprite.addChild(g),this._renderLayerArray.push(g)),this._layerArray.push(g)}}this.removeCoveredTile&&this.adptTiledMapData(),this.cacheAllAfterInit&&this.cacheAllGrid(),this.moveViewPort(this._rect.x,this._rect.y),e.stage.addChild(this.mapSprite()),null!=this._completeHandler&&this._completeHandler.run()},d.addTileProperties=function(t){var i;for(i in t)this._tileProperties2[i]=t[i]},d.getTileUserData=function(t,i,e){return this._tileProperties2&&this._tileProperties2[t]&&i in this._tileProperties2[t]?this._tileProperties2[t][i]:e},d.adptTiledMapData=function(){var t=0,i=0;i=this._layerArray.length;var e,r,h={};for(t=i-1;t>=0;t--)e=this._layerArray[t],(r=e._mapData)&&(this.removeCoverd(r,h),this.collectCovers(r,h,t))},d.removeCoverd=function(t,i){var e=0,r=0;for(r=t.length,e=0;e<r;e++)i[e]&&(t[e]=0)},d.collectCovers=function(t,i,e){var r=0,h=0;h=t.length;var a=0;for(r=0;r<h;r++)(a=t[r])>0&&this.getTileUserData(a-1,"type",0)>0&&(i[r]=a)},d.getTexture=function(t){return t<this._tileTexSetArr.length?this._tileTexSetArr[t]:null},d.getMapProperties=function(t){return this._properties?this._properties[t]:null},d.getTileProperties=function(t,i,e){return this._tileProperties[t]&&this._tileProperties[t][i]?this._tileProperties[t][i][e]:null},d.getSprite=function(t,i,e){if(0<this._tileTexSetArr.length){var r=new g;r.initData(this,!0),r.size(i,e);var h=this._tileTexSetArr[t];if(null!=h&&null!=h.texture){if(h.isAnimation){var a=new y;this._index++,a.setTileTextureSet(this._index.toString(),h),r.addAniSprite(a),r.addChild(a)}else r.graphics.drawTexture(h.texture,0,0,i,e);r.drawImageNum++}return r}return null},d.setViewPortPivotByScale=function(t,i){this._pivotScaleX=t,this._pivotScaleY=i,this._fastDirty=!0},d.moveViewPort=function(t,i){if(this._x=-t,this._y=-i,this._fastDirty)this._rect.x=t,this._rect.y=i,this.updateViewPort();else{var e=NaN,r=NaN;e=t-this._rect.x,r=i-this._rect.y,this._rect.x=t,this._rect.y=i,this.updateViewPortFast(e,r)}},d.changeViewPort=function(t,i,e,r){if(t!=this._rect.x||i!=this._rect.y||e!=this._rect.width||r!=this._rect.height){if(e==this._rect.width&&r==this._rect.height)return void this.moveViewPort(t,i);this._fastDirty=!0,this._x=-t,this._y=-i,this._rect.x=t,this._rect.y=i,this._rect.width=e,this._rect.height=r,this._viewPortWidth=e/this._scale,this._viewPortHeight=r/this._scale,this.updateViewPort()}},d.changeViewPortBySize=function(t,i,e){return null==e&&(e=new l),this._centerX=this._rect.x+this._rect.width*this._pivotScaleX,this._centerY=this._rect.y+this._rect.height*this._pivotScaleY,e.x=this._centerX-t*this._pivotScaleX,e.y=this._centerY-i*this._pivotScaleY,e.width=t,e.height=i,this.changeViewPort(e.x,e.y,e.width,e.height),e},d.updateViewPortFast=function(t,i){this._centerX+=t,this._centerY+=i,this._viewPortX+=t,this._viewPortY+=i;var e=!1,r=i/this._gridHeight,h=t/this._gridWidth;this._mapLogicRect.top+=r,this._mapLogicRect.bottom+=r,this._mapLogicRect.left+=h,this._mapLogicRect.right+=h,this._mapRect.top=0|this._mapLogicRect.top,this._mapRect.bottom=0|this._mapLogicRect.bottom,this._mapRect.left=0|this._mapLogicRect.left,this._mapRect.right=0|this._mapLogicRect.right,this._mapRect.top==this._mapLastRect.top&&this._mapRect.bottom==this._mapLastRect.bottom&&this._mapRect.left==this._mapLastRect.left&&this._mapRect.right==this._mapLastRect.right||(this.clipViewPort(),this._mapLastRect.top=this._mapRect.top,this._mapLastRect.bottom=this._mapRect.bottom,this._mapLastRect.left=this._mapRect.left,this._mapLastRect.right=this._mapRect.right,e=!0),(e=e||0!=t||0!=i)&&this.updateMapLayersPos()},d.updateMapLayersPos=function(){for(var t,i=this._renderLayerArray.length,e=0;e<i;e++)t=this._renderLayerArray[e],t._gridSpriteArray.length>0&&(t.updateAloneObject(),t.pos(-this._viewPortX,-this._viewPortY))},d.updateViewPort=function(){this._fastDirty=!1;var t=this._rect.width*this._pivotScaleX,i=this._rect.height*this._pivotScaleY;this._centerX=this._rect.x+t,this._centerY=this._rect.y+i;var e=!1,r=this._viewPortX;if(this._viewPortX=this._centerX-t/this._scale,r!=this._viewPortX?e=!0:r=this._viewPortY,this._viewPortY=this._centerY-i/this._scale,e||r==this._viewPortY||(e=!0),this._limitRange){this._viewPortX+this._viewPortWidth>this._width&&(this._viewPortX=this._width-this._viewPortWidth);this._viewPortY+this._viewPortHeight>this._height&&(this._viewPortY=this._height-this._viewPortHeight),this._viewPortX<0&&(this._viewPortX=0),this._viewPortY<0&&(this._viewPortY=0)}var h=this._paddingRect;this._mapLogicRect.top=(this._viewPortY-h.y)/this._gridHeight,this._mapLogicRect.bottom=(this._viewPortY+this._viewPortHeight+h.height+h.y)/this._gridHeight,this._mapLogicRect.left=(this._viewPortX-h.x)/this._gridWidth,this._mapLogicRect.right=(this._viewPortX+this._viewPortWidth+h.width+h.x)/this._gridWidth,this._mapRect.top=0|this._mapLogicRect.top,this._mapRect.bottom=0|this._mapLogicRect.bottom,this._mapRect.left=0|this._mapLogicRect.left,this._mapRect.right=0|this._mapLogicRect.right,this._mapRect.top==this._mapLastRect.top&&this._mapRect.bottom==this._mapLastRect.bottom&&this._mapRect.left==this._mapLastRect.left&&this._mapRect.right==this._mapLastRect.right||(this.clipViewPort(),this._mapLastRect.top=this._mapRect.top,this._mapLastRect.bottom=this._mapRect.bottom,this._mapLastRect.left=this._mapRect.left,this._mapLastRect.right=this._mapRect.right,e=!0),e&&this.updateMapLayersPos()},d.clipViewPort=function(){var t=0,i=0,e=0,r=0;if(this._mapRect.left>this._mapLastRect.left){if((t=this._mapRect.left-this._mapLastRect.left)>0)for(r=this._mapLastRect.left;r<this._mapLastRect.left+t;r++)for(e=this._mapLastRect.top;e<=this._mapLastRect.bottom;e++)this.hideGrid(r,e)}else if((i=Math.min(this._mapLastRect.left,this._mapRect.right+1)-this._mapRect.left)>0)for(r=this._mapRect.left;r<this._mapRect.left+i;r++)for(e=this._mapRect.top;e<=this._mapRect.bottom;e++)this.showGrid(r,e);if(this._mapRect.right>this._mapLastRect.right){if((i=this._mapRect.right-this._mapLastRect.right)>0)for(r=Math.max(this._mapLastRect.right+1,this._mapRect.left);r<=this._mapLastRect.right+i;r++)for(e=this._mapRect.top;e<=this._mapRect.bottom;e++)this.showGrid(r,e)}else if((t=this._mapLastRect.right-this._mapRect.right)>0)for(r=this._mapRect.right+1;r<=this._mapRect.right+t;r++)for(e=this._mapLastRect.top;e<=this._mapLastRect.bottom;e++)this.hideGrid(r,e);if(this._mapRect.top>this._mapLastRect.top){if((t=this._mapRect.top-this._mapLastRect.top)>0)for(e=this._mapLastRect.top;e<this._mapLastRect.top+t;e++)for(r=this._mapLastRect.left;r<=this._mapLastRect.right;r++)this.hideGrid(r,e)}else if((i=Math.min(this._mapLastRect.top,this._mapRect.bottom+1)-this._mapRect.top)>0)for(e=this._mapRect.top;e<this._mapRect.top+i;e++)for(r=this._mapRect.left;r<=this._mapRect.right;r++)this.showGrid(r,e);if(this._mapRect.bottom>this._mapLastRect.bottom){if((i=this._mapRect.bottom-this._mapLastRect.bottom)>0)for(e=Math.max(this._mapLastRect.bottom+1,this._mapRect.top);e<=this._mapLastRect.bottom+i;e++)for(r=this._mapRect.left;r<=this._mapRect.right;r++)this.showGrid(r,e)}else if((t=this._mapLastRect.bottom-this._mapRect.bottom)>0)for(e=this._mapRect.bottom+1;e<=this._mapRect.bottom+t;e++)for(r=this._mapLastRect.left;r<=this._mapLastRect.right;r++)this.hideGrid(r,e)},d.showGrid=function(t,i){if(!(t<0||t>=this._gridW||i<0||i>=this._gridH)){var e,r=0,h=this._gridArray[i][t];if(null==h)h=this.getGridArray(t,i);else for(r=0;r<h.length&&r<this._layerArray.length;r++){var a=this._layerArray[r];a&&h[r]&&(e=h[r],0==e.visible&&e.drawImageNum>0&&e.show())}}},d.cacheAllGrid=function(){var t,i=0,e=0;for(i=0;i<this._gridW;i++)for(e=0;e<this._gridH;e++)t=this.getGridArray(i,e),this.cacheGridsArray(t)},d.cacheGridsArray=function(i){var e;t._tempContext||(t._tempContext=new p(1,1,s.create("AUTO"))),e=t._tempContext.canvas,e.context.asBitmap=!1;var r=0,h=0;h=i.length;var a;for(r=0;r<h;r++)a=i[r],e.clear(),e.size(1,1),a.render(t._tempContext,0,0),a.hide();e.clear(),e.size(1,1)},d.getGridArray=function(t,i){var e,r=0,h=0,a=this._gridArray[i][t];if(null==a){a=this._gridArray[i][t]=[];var s=0,o=0,n=0,l=0,_=this._gridWidth,p=this._gridHeight;switch(this.orientation){case"isometric":s=Math.floor(t*_),o=Math.floor(t*_+_),n=Math.floor(i*p),l=Math.floor(i*p+p);var m=0,c=0,d=0,u=0;break;case"staggered":s=Math.floor(t*_/this._mapTileW),o=Math.floor((t*_+_)/this._mapTileW),n=Math.floor(i*p/(this._mapTileH/2)),l=Math.floor((i*p+p)/(this._mapTileH/2));break;case"orthogonal":s=Math.floor(t*_/this._mapTileW),o=Math.floor((t*_+_)/this._mapTileW),n=Math.floor(i*p/this._mapTileH),l=Math.floor((i*p+p)/this._mapTileH);break;case"hexagonal":var g=2*this._mapTileH/3;s=Math.floor(t*_/this._mapTileW),o=Math.ceil((t*_+_)/this._mapTileW),n=Math.floor(i*p/g),l=Math.ceil((i*p+p)/g)}for(var f,y,v=null,w=0;w<this._layerArray.length;w++){v=this._layerArray[w],this.enableMergeLayer?(v.tarLayer!=y&&(f=null,y=v.tarLayer),f||(f=y.getDrawSprite(t,i),a.push(f)),e=f):(e=v.getDrawSprite(t,i),a.push(e));var A;switch(this._showGridKey&&(A="#",A+=this._colorArray[Math.floor(Math.random()*this._colorArray.length)],A+=this._colorArray[Math.floor(Math.random()*this._colorArray.length)],A+=this._colorArray[Math.floor(Math.random()*this._colorArray.length)]),this.orientation){case"isometric":var T=this.tileHeight/2,R=this.tileWidth/2,x=this._width/2;d=Math.floor(n/T),u=Math.floor(l/T),m=this._mapW+Math.floor((s-x)/R),c=this._mapW+Math.floor((o-x)/R);var P=(this._mapW,2*this._mapH);for(d<0&&(d=0),d>=P&&(d=P-1),u<0&&(l=0),u>=P&&(u=P-1),e.zOrder=this._totalGridNum*w+i*this._gridW+t,r=d;r<u;r++)for(h=0;h<=r;h++){var H=r-h,L=h,b=H-L+this._mapW;b>m&&b<=c&&v.drawTileTexture(e,H,L)&&e.drawImageNum++}break;case"staggered":for(e.zOrder=w*this._totalGridNum+i*this._gridW+t,r=n;r<l;r++)for(h=s;h<o;h++)v.drawTileTexture(e,h,r)&&e.drawImageNum++;break;case"orthogonal":case"hexagonal":switch(this._renderOrder){case"right-down":for(e.zOrder=w*this._totalGridNum+i*this._gridW+t,r=n;r<l;r++)for(h=s;h<o;h++)v.drawTileTexture(e,h,r)&&e.drawImageNum++;break;case"right-up":for(e.zOrder=w*this._totalGridNum+(this._gridH-1-i)*this._gridW+t,r=l-1;r>=n;r--)for(h=s;h<o;h++)v.drawTileTexture(e,h,r)&&e.drawImageNum++;break;case"left-down":for(e.zOrder=w*this._totalGridNum+i*this._gridW+(this._gridW-1-t),r=n;r<l;r++)for(h=o-1;h>=s;h--)v.drawTileTexture(e,h,r)&&e.drawImageNum++;break;case"left-up":for(e.zOrder=w*this._totalGridNum+(this._gridH-1-i)*this._gridW+(this._gridW-1-t),r=l-1;r>=n;r--)for(h=o-1;h>=s;h--)v.drawTileTexture(e,h,r)&&e.drawImageNum++}}e.isHaveAnimation||(e.autoSize=!0,this.autoCache&&(e.cacheAs=this.autoCacheType),e.autoSize=!1),this.enableMergeLayer?f&&f.drawImageNum>0&&y&&(y.addChild(f),f.visible=!1,f.show()):(e.drawImageNum>0&&(v.addChild(e),e.visible=!1,e.show()),this._showGridKey&&e.graphics.drawRect(0,0,_,p,null,A))}this.enableMergeLayer&&this.showGridTextureCount&&f&&f.graphics.fillText(f.drawImageNum+"",20,20,null,"#ff0000")}return a},d.hideGrid=function(t,i){if(!(t<0||t>=this._gridW||i<0||i>=this._gridH)){var e=this._gridArray[i][t];if(e)for(var r,h=0;h<e.length;h++)r=e[h],r.drawImageNum>0&&null!=r&&r.hide()}},d.getLayerObject=function(t,i){for(var e=null,r=0;r<this._layerArray.length&&(e=this._layerArray[r],e.layerName!=t);r++);return e?e.getObjectByName(i):null},d.destroy=function(){this._orientation="orthogonal",this._jsonData=null;var t=0;this._gridArray=[];var i;for(t=0;t<this._tileTexSetArr.length;t++)(i=this._tileTexSetArr[t])&&i.clearAll();this._tileTexSetArr=[];var e;for(t=0;t<this._texArray.length;t++)e=this._texArray[t],e.destroy();this._texArray=[],this._width=0,this._height=0,this._mapW=0,this._mapH=0,this._mapTileW=0,this._mapTileH=0,this._rect.setTo(0,0,0,0);var r;for(t=0;t<this._layerArray.length;t++)r=this._layerArray[t],r.clearAll();this._layerArray=[],this._renderLayerArray=[],this._mapSprite&&(this._mapSprite.destroy(),this._mapSprite=null),this._jsonLoader=null,this._loader=null;var h=this._animationDic;for(var a in h)delete h[a];this._properties=null,h=this._tileProperties;for(a in h)delete h[a];this._currTileSet=null,this._completeHandler=null,this._mapRect.clearAll(),this._mapLastRect.clearAll(),this._tileSetArray=[],this._gridWidth=450,this._gridHeight=450,this._gridW=0,this._gridH=0,this._x=0,this._y=0,this._index=0,this._enableLinear=!0,this._resPath=null,this._pathArray=null},d.mapSprite=function(){return this._mapSprite},d.getLayerByName=function(t){for(var i,e=0;e<this._layerArray.length;e++)if(i=this._layerArray[e],t==i.layerName)return i;return null},d.getLayerByIndex=function(t){return t<this._layerArray.length?this._layerArray[t]:null},h(0,d,"orientation",function(){return this._orientation}),h(0,d,"viewPortX",function(){return-this._viewPortX}),h(0,d,"scale",function(){return this._scale},function(t){t<=0||(this._scale=t,this._viewPortWidth=this._rect.width/t,this._viewPortHeight=this._rect.height/t,this._mapSprite.scale(this._scale,this._scale),this.updateViewPort())}),h(0,d,"tileWidth",function(){return this._mapTileW}),h(0,d,"viewPortY",function(){return-this._viewPortY}),h(0,d,"tileHeight",function(){return this._mapTileH}),h(0,d,"width",function(){return this._width}),h(0,d,"numRowsTile",function(){return this._mapH}),h(0,d,"numColumnsTile",function(){return this._mapW}),h(0,d,"height",function(){return this._height}),h(0,d,"viewPortWidth",function(){return this._viewPortWidth}),h(0,d,"viewPortHeight",function(){return this._viewPortHeight}),h(0,d,"x",function(){return this._x}),h(0,d,"y",function(){return this._y}),h(0,d,"gridWidth",function(){return this._gridWidth}),h(0,d,"gridHeight",function(){return this._gridHeight}),h(0,d,"numColumnsGrid",function(){return this._gridW}),h(0,d,"numRowsGrid",function(){return this._gridH}),h(0,d,"renderOrder",function(){return this._renderOrder}),t.ORIENTATION_ORTHOGONAL="orthogonal",t.ORIENTATION_ISOMETRIC="isometric",t.ORIENTATION_STAGGERED="staggered",t.ORIENTATION_HEXAGONAL="hexagonal",t.RENDERORDER_RIGHTDOWN="right-down",t.RENDERORDER_RIGHTUP="right-up",t.RENDERORDER_LEFTDOWN="left-down",t.RENDERORDER_LEFTUP="left-up",t._tempContext=null,t.__init$=function(){i=function(){function t(){this.left=0,this.top=0,this.right=0,this.bottom=0}return r(t,""),t.prototype.clearAll=function(){this.left=this.top=this.right=this.bottom=0},t}(),a=function(){function t(){this.mAniIdArray=[],this.mDurationTimeArray=[],this.mTileTexSetArr=[]}return r(t,""),t}(),n=function(){function t(){this.firstgid=0,this.image="",this.imageheight=0,this.imagewidth=0,this.margin=0,this.name=0,this.properties=null,this.spacing=0,this.tileheight=0,this.tilewidth=0,this.titleoffsetX=0,this.titleoffsetY=0,this.tileproperties=null}return r(t,""),t.prototype.init=function(t){this.firstgid=t.firstgid,this.image=t.image,this.imageheight=t.imageheight,this.imagewidth=t.imagewidth,this.margin=t.margin,this.name=t.name,this.properties=t.properties,this.spacing=t.spacing,this.tileheight=t.tileheight,this.tilewidth=t.tilewidth,this.tileproperties=t.tileproperties;var i=t.tileoffset;i&&(this.titleoffsetX=i.x,this.titleoffsetY=i.y)},t}()},t}(),u=function(){function t(){this.gid=-1,this.texture=null,this.offX=0,this.offY=0,this.textureArray=null,this.durationTimeArray=null,this.animationTotalTime=0,this.isAnimation=!1,this._spriteNum=0,this._aniDic=null,this._frameIndex=0,this._time=0,this._interval=0,this._preFrameTime=0}r(t,"laya.map.TileTexSet");var i=t.prototype;return i.addAniSprite=function(t,i){if(0!=this.animationTotalTime&&(null==this._aniDic&&(this._aniDic={}),0==this._spriteNum&&(e.timer.frameLoop(3,this,this.animate),this._preFrameTime=a.now(),this._frameIndex=0,this._time=0,this._interval=0),this._spriteNum++,this._aniDic[t]=i,this.textureArray&&this._frameIndex<this.textureArray.length)){var r=this.textureArray[this._frameIndex];this.drawTexture(i,r)}},i.animate=function(){if(this.textureArray&&this.textureArray.length>0&&this.durationTimeArray&&this.durationTimeArray.length>0){var t=a.now();this._interval=t-this._preFrameTime,this._preFrameTime=t,this._interval>this.animationTotalTime&&(this._interval=this._interval%this.animationTotalTime),this._time+=this._interval;for(var i=this.durationTimeArray[this._frameIndex];this._time>i;){this._time-=i,this._frameIndex++,(this._frameIndex>=this.durationTimeArray.length||this._frameIndex>=this.textureArray.length)&&(this._frameIndex=0);var e,r=this.textureArray[this._frameIndex];for(var h in this._aniDic)e=this._aniDic[h],this.drawTexture(e,r);i=this.durationTimeArray[this._frameIndex]}}},i.drawTexture=function(t,i){t.graphics.clear(),t.graphics.drawTexture(i.texture,i.offX,i.offY)},i.removeAniSprite=function(t){this._aniDic&&this._aniDic[t]&&(delete this._aniDic[t],0==--this._spriteNum&&e.timer.clear(this,this.animate))},i.showDebugInfo=function(){var t=null;return this._spriteNum>0&&(t="TileTextureSet::gid:"+this.gid.toString()+" 动画数:"+this._spriteNum.toString()),t},i.clearAll=function(){this.gid=-1,this.texture&&(this.texture.destroy(),this.texture=null),this.offX=0,this.offY=0,this.textureArray=null,this.durationTimeArray=null,this.isAnimation=!1,this._spriteNum=0,this._aniDic=null,this._frameIndex=0,this._preFrameTime=0,this._time=0,this._interval=0},t}(),g=function(t){function i(){this.relativeX=0,this.relativeY=0,this.isAloneObject=!1,this.isHaveAnimation=!1,this.aniSpriteArray=null,this.drawImageNum=0,this._map=null,i.__super.call(this)}r(i,"laya.map.GridSprite",t);var e=i.prototype;return e.initData=function(t,i){void 0===i&&(i=!1),this._map=t,this.isAloneObject=i},e._setDisplay=function(i){if(!i){var e=this._$P.cacheCanvas;e&&e.ctx&&(e.ctx.canvas.destroy(),e.ctx=null);var r=this._$P._filterCache;r&&(r.destroy(),r.recycle(),this._set$P("_filterCache",null)),this._$P._isHaveGlowFilter&&this._set$P("_isHaveGlowFilter",!1)}t.prototype._setDisplay.call(this,i)},e.addAniSprite=function(t){null==this.aniSpriteArray&&(this.aniSpriteArray=[]),this.aniSpriteArray.push(t)},e.show=function(){if(!this.visible){if(this.visible=!0,!this.isAloneObject){var t;t=this.parent,t&&t.showGridSprite(this)}if(!_.isWebGL&&this._map.autoCache&&(this.cacheAs=this._map.autoCacheType),null==this.aniSpriteArray)return;for(var i,e=0;e<this.aniSpriteArray.length;e++)i=this.aniSpriteArray[e],i.show()}},e.hide=function(){if(this.visible){if(this.visible=!1,!this.isAloneObject){var t;t=this.parent,t&&t.hideGridSprite(this)}if(!_.isWebGL&&this._map.autoCache&&(this.cacheAs="none"),null==this.aniSpriteArray)return;for(var i,e=0;e<this.aniSpriteArray.length;e++)i=this.aniSpriteArray[e],i.hide()}},e.updatePos=function(){this.isAloneObject?(this._map&&(this.x=this.relativeX,this.y=this.relativeY),this.x<0||this.x>this._map.viewPortWidth||this.y<0||this.y>this._map.viewPortHeight?this.hide():this.show()):this._map&&(this.x=this.relativeX,this.y=this.relativeY)},e.clearAll=function(){if(this._map&&(this._map=null),this.visible=!1,null!=this.aniSpriteArray){for(var t,i=0;i<this.aniSpriteArray.length;i++)t=this.aniSpriteArray[i],t.clearAll();this.destroy(),this.relativeX=0,this.relativeY=0,this.isHaveAnimation=!1,this.aniSpriteArray=null,this.drawImageNum=0}},i}(m),f=function(t){function i(){this._map=null,this._mapData=null,this._tileWidthHalf=0,this._tileHeightHalf=0,this._mapWidthHalf=0,this._mapHeightHalf=0,this._gridSpriteArray=[],this._objDic=null,this._dataDic=null,this._properties=null,this.tarLayer=null,this.layerName=null,this._showGridList=[],this._aloneObjs=[],i.__super.call(this),this._tempMapPos=new n}r(i,"laya.map.MapLayer",t);var e=i.prototype;return e.init=function(t,i){this._map=i,this._mapData=t.data;var e=(t.height,t.width,i.tileWidth),r=i.tileHeight;switch(this.layerName=t.name,this._properties=t.properties,this.alpha=t.opacity,this._tileWidthHalf=e/2,this._tileHeightHalf=r/2,this._mapWidthHalf=this._map.width/2-this._tileWidthHalf,this._mapHeightHalf=this._map.height/2,t.type){case"tilelayer":break;case"objectgroup":var h=t.objects;h.length>0&&(this._objDic={},this._dataDic={});for(var a,s=NaN,o=NaN,l=0;l<h.length;l++)if(a=h[l],this._dataDic[a.name]=a,1==a.visible){s=a.width,o=a.height;var _=i.getSprite(a.gid,s,o);if(null!=_){switch(this._map.orientation){case"isometric":this.getScreenPositionByTilePos(a.x/r,a.y/r,n.TEMP),_.pivot(s/2,o/2),_.rotation=a.rotation,_.x=_.relativeX=n.TEMP.x+this._map.viewPortX,_.y=_.relativeY=n.TEMP.y+this._map.viewPortY-o/2;break;case"staggered":_.pivot(s/2,o/2),_.rotation=a.rotation,_.x=_.relativeX=a.x+s/2,_.y=_.relativeY=a.y-o/2;break;case"orthogonal":_.pivot(s/2,o/2),_.rotation=a.rotation,_.x=_.relativeX=a.x+s/2,_.y=_.relativeY=a.y-o/2;break;case"hexagonal":_.x=_.relativeX=a.x,_.y=_.relativeY=a.y}this.addChild(_),this._gridSpriteArray.push(_),_.isAloneObject&&(this._showGridList.push(_),this._aloneObjs.push(_)),this._objDic[a.name]=_}}}},e.getObjectByName=function(t){return this._objDic?this._objDic[t]:null},e.getObjectDataByName=function(t){return this._dataDic?this._dataDic[t]:null},e.getLayerProperties=function(t){return this._properties?this._properties[t]:null},e.getTileData=function(t,i){if(i>=0&&i<this._map.numRowsTile&&t>=0&&t<this._map.numColumnsTile){var e=i*this._map.numColumnsTile+t,r=this._mapData;if(null!=r&&e<r.length)return r[e]}return 0},e.getScreenPositionByTilePos=function(t,i,e){if(e){switch(this._map.orientation){case"isometric":e.x=this._map.width/2-(i-t)*this._tileWidthHalf,e.y=(i+t)*this._tileHeightHalf;break;case"staggered":t=Math.floor(t),i=Math.floor(i),e.x=t*this._map.tileWidth+(1&i)*this._tileWidthHalf,e.y=i*this._tileHeightHalf;break;case"orthogonal":e.x=t*this._map.tileWidth,e.y=i*this._map.tileHeight;break;case"hexagonal":t=Math.floor(t),i=Math.floor(i);var r=2*this._map.tileHeight/3;e.x=(t*this._map.tileWidth+i%2*this._tileWidthHalf)%this._map.gridWidth,e.y=i*r%this._map.gridHeight}e.x=(e.x+this._map.viewPortX)*this._map.scale,e.y=(e.y+this._map.viewPortY)*this._map.scale}},e.getTileDataByScreenPos=function(t,i){var e=0;return this.getTilePositionByScreenPos(t,i,this._tempMapPos)&&(e=this.getTileData(Math.floor(this._tempMapPos.x),Math.floor(this._tempMapPos.y))),e},e.getTilePositionByScreenPos=function(t,i,e){t=t/this._map.scale-this._map.viewPortX,i=i/this._map.scale-this._map.viewPortY;var r=this._map.tileWidth,h=this._map.tileHeight,a=0,s=0;switch(this._map.orientation){case"isometric":var o=t-this._map.width/2,n=i;return a=-(o/r-n/h),s=o/r+n/h,e&&(e.x=s,e.y=a),!0;case"staggered":if(e){var l=0,_=0,p=0,m=0;l=Math.floor(t/r)*r+r/2,_=Math.floor(i/h)*h+h/2,p=(t-l)*h/2,m=(i-_)*r/2,Math.abs(p)+Math.abs(m)<=r*h/4?(s=Math.floor(t/r),a=2*Math.floor(i/h)):(t-=r/2,s=Math.floor(t/r)+1,i-=h/2,a=2*Math.floor(i/h)+1),e.x=s-(1&a),e.y=a}return!0;case"orthogonal":return s=t/r,a=i/h,e&&(e.x=s,e.y=a),!0;case"hexagonal":a=i/(2*h/3),s=(t-a%2*this._tileWidthHalf)/r,e&&(e.x=s,e.y=a)}return!1},e.getDrawSprite=function(t,i){var e=new g;return e.relativeX=t*this._map.gridWidth,e.relativeY=i*this._map.gridHeight,e.initData(this._map),e.updatePos(),this._gridSpriteArray.push(e),e},e.showGridSprite=function(t){var i=this._showGridList,e=0,r=0;r=i.length;var h,a=-1;for(e=0;e<r;e++){if((h=i[e])==t)return;h.isAloneObject||h.visible||(a=e)}a>=0?i[a]=t:i.push(t)},e.hideGridSprite=function(t){t.visible=!1},e.updateGridPos=function(){var t,i;i=this._showGridList;var e=0;e=i.length;for(var r=0;r<e;r++)t=i[r],(t._style.visible||t.isAloneObject)&&t.drawImageNum>0&&t.updatePos()},e.updateAloneObject=function(){var t,i;i=this._aloneObjs;var e=0;e=i.length;for(var r=0;r<e;r++)t=i[r],t.drawImageNum>0&&t.updatePos()},e.render=function(i,e,r){var h=this._childs;this._childs=this._showGridList,t.prototype.render.call(this,i,e,r),this._childs=h},e.drawTileTexture=function(t,i,e){if(e>=0&&e<this._map.numRowsTile&&i>=0&&i<this._map.numColumnsTile){var r=e*this._map.numColumnsTile+i,h=this._mapData;if(null!=h&&r<h.length&&0!=h[r]){var a=this._map.getTexture(h[r]);if(a){var s=0,o=0;a.texture;switch(this._map.orientation){case"staggered":s=i*this._map.tileWidth%this._map.gridWidth+(1&e)*this._tileWidthHalf,o=e*this._tileHeightHalf%this._map.gridHeight;break;case"orthogonal":s=i*this._map.tileWidth%this._map.gridWidth,o=e*this._map.tileHeight%this._map.gridHeight;break;case"isometric":s=(this._mapWidthHalf+(i-e)*this._tileWidthHalf)%this._map.gridWidth,o=(i+e)*this._tileHeightHalf%this._map.gridHeight;break;case"hexagonal":var n=2*this._map.tileHeight/3;s=(i*this._map.tileWidth+e%2*this._tileWidthHalf)%this._map.gridWidth,o=e*n%this._map.gridHeight}if(a.isAnimation){var l=new y;l.x=s,l.y=o,l.setTileTextureSet(r.toString(),a),t.addAniSprite(l),t.addChild(l),t.isHaveAnimation=!0}else t.graphics.drawTexture(a.texture,s+a.offX,o+a.offY);return!0}}}return!1},e.clearAll=function(){this._map=null,this._mapData=null,this._tileWidthHalf=0,this._tileHeightHalf=0,this._mapWidthHalf=0,this._mapHeightHalf=0,this.layerName=null;var t=0;if(this._objDic){for(var i in this._objDic)delete this._objDic[i];this._objDic=null}if(this._dataDic){for(var i in this._dataDic)delete this._dataDic[i];this._dataDic=null}var e;for(t=0;t<this._gridSpriteArray.length;t++)e=this._gridSpriteArray[t],e.clearAll();this._properties=null,this._tempMapPos=null,this.tarLayer=null},i}(m),y=function(t){function i(){this._tileTextureSet=null,this._aniName=null,i.__super.call(this)}r(i,"laya.map.TileAniSprite",t);var e=i.prototype;return e.setTileTextureSet=function(t,i){this._aniName=t,this._tileTextureSet=i,i.addAniSprite(this._aniName,this)},e.show=function(){this._tileTextureSet.addAniSprite(this._aniName,this)},e.hide=function(){this._tileTextureSet.removeAniSprite(this._aniName)},e.clearAll=function(){this._tileTextureSet.removeAniSprite(this._aniName),this.destroy(),this._tileTextureSet=null,this._aniName=null},i}(m);e.__init([d])}(window,document,Laya);!function(e,t,n){var i=(n.un,n.uns,n.static),a=n.class,o=n.getset,r=(n.__newvec,laya.resource.Bitmap),s=laya.utils.Browser,c=(laya.events.Event,laya.events.EventDispatcher),l=(laya.utils.Handler,laya.maths.Rectangle,laya.renders.Render),d=laya.display.Sprite,h=(laya.display.Stage,laya.resource.Texture),u=laya.utils.Utils,v=laya.webgl.WebGL,m=laya.webgl.WebGLContext,g=(function(){function e(){}a(e,"laya.device.geolocation.Geolocation"),e.getCurrentPosition=function(t,n){e.navigator.geolocation.getCurrentPosition(function(n){e.position.setPosition(n),t.runWith(e.position)},function(e){n.runWith(e)},{enableHighAccuracy:laya.device.geolocation.Geolocation.enableHighAccuracy,timeout:laya.device.geolocation.Geolocation.timeout,maximumAge:laya.device.geolocation.Geolocation.maximumAge})},e.watchPosition=function(t,n){return e.navigator.geolocation.watchPosition(function(n){e.position.setPosition(n),t.runWith(e.position)},function(e){n.runWith(e)},{enableHighAccuracy:e.enableHighAccuracy,timeout:e.timeout,maximumAge:e.maximumAge})},e.clearWatch=function(t){e.navigator.geolocation.clearWatch(t)},e.PERMISSION_DENIED=1,e.POSITION_UNAVAILABLE=2,e.TIMEOUT=3,e.enableHighAccuracy=!1,e.maximumAge=0,i(e,["navigator",function(){return this.navigator=s.window.navigator},"position",function(){return this.position=new g},"supported",function(){return this.supported=!!e.navigator.geolocation},"timeout",function(){return this.timeout=1e10}]),e}(),function(){function e(){this.pos=null,this.coords=null}a(e,"laya.device.geolocation.GeolocationInfo");var t=e.prototype;return t.setPosition=function(e){this.pos=e,this.coords=e.coords},o(0,t,"heading",function(){return this.coords.heading}),o(0,t,"latitude",function(){return this.coords.latitude}),o(0,t,"altitudeAccuracy",function(){return this.coords.altitudeAccuracy}),o(0,t,"longitude",function(){return this.coords.longitude}),o(0,t,"altitude",function(){return this.coords.altitude}),o(0,t,"accuracy",function(){return this.coords.accuracy}),o(0,t,"speed",function(){return this.coords.speed}),o(0,t,"timestamp",function(){return this.pos.timestamp}),e}()),f=function(){function e(){}return a(e,"laya.device.media.Media"),e.supported=function(){return!!s.window.navigator.getUserMedia},e.getMedia=function(e,t,n){s.window.navigator.getUserMedia&&s.window.navigator.getUserMedia(e,function(e){t.runWith(s.window.URL.createObjectURL(e))},function(e){n.runWith(e)})},e.__init$=function(){navigator.getUserMedia=navigator.getUserMedia||navigator.webkitGetUserMedia||navigator.mozGetUserMedia},e}(),p=function(){function e(){this.x=NaN,this.y=NaN,this.z=NaN}return a(e,"laya.device.motion.AccelerationInfo"),e}(),y=function(){function e(){this.absolute=!1,this.alpha=NaN,this.beta=NaN,this.gamma=NaN,this.compassAccuracy=NaN}return a(e,"laya.device.motion.RotationInfo"),e}(),E=function(e){function t(e){t.__super.call(this),this.onDeviceOrientationChange=this.onDeviceOrientationChange.bind(this)}a(t,"laya.device.motion.Accelerator",e);var r=t.prototype;return r.on=function(t,n,i,a){return e.prototype.on.call(this,t,n,i,a),s.window.addEventListener("devicemotion",this.onDeviceOrientationChange),this},r.off=function(t,n,i,a){return void 0===a&&(a=!1),this.hasListener(t)||s.window.removeEventListener("devicemotion",this.onDeviceOrientationChange),e.prototype.off.call(this,t,n,i,a)},r.onDeviceOrientationChange=function(e){var n=e.interval;t.acceleration.x=e.acceleration.x,t.acceleration.y=e.acceleration.y,t.acceleration.z=e.acceleration.z,t.accelerationIncludingGravity.x=e.accelerationIncludingGravity.x,t.accelerationIncludingGravity.y=e.accelerationIncludingGravity.y,t.accelerationIncludingGravity.z=e.accelerationIncludingGravity.z,t.rotationRate.alpha=e.rotationRate.gamma*-1,t.rotationRate.beta=e.rotationRate.alpha*-1,t.rotationRate.gamma=e.rotationRate.beta,s.onAndriod?(t.onChrome&&(t.rotationRate.alpha*=180/Math.PI,t.rotationRate.beta*=180/Math.PI,t.rotationRate.gamma*=180/Math.PI),t.acceleration.x*=-1,t.accelerationIncludingGravity.x*=-1):s.onIOS&&(t.acceleration.y*=-1,t.acceleration.z*=-1,t.accelerationIncludingGravity.y*=-1,t.accelerationIncludingGravity.z*=-1,n*=1e3),this.event("change",[t.acceleration,t.accelerationIncludingGravity,t.rotationRate,n])},o(1,t,"instance",function(){return t._instance=t._instance||new t(0),t._instance},laya.events.EventDispatcher._$SET_instance),t.getTransformedAcceleration=function(e){t.transformedAcceleration=t.transformedAcceleration||new p,t.transformedAcceleration.z=e.z,90==s.window.orientation?(t.transformedAcceleration.x=e.y,t.transformedAcceleration.y=-e.x):s.window.orientation==-90?(t.transformedAcceleration.x=-e.y,t.transformedAcceleration.y=e.x):s.window.orientation?180==s.window.orientation&&(t.transformedAcceleration.x=-e.x,t.transformedAcceleration.y=-e.y):(t.transformedAcceleration.x=e.x,t.transformedAcceleration.y=e.y);var i=NaN;return n.stage.canvasDegree==-90?(i=t.transformedAcceleration.x,t.transformedAcceleration.x=-t.transformedAcceleration.y,t.transformedAcceleration.y=i):90==n.stage.canvasDegree&&(i=t.transformedAcceleration.x,t.transformedAcceleration.x=t.transformedAcceleration.y,t.transformedAcceleration.y=-i),t.transformedAcceleration},t._instance=null,t.transformedAcceleration=null,i(t,["acceleration",function(){return this.acceleration=new p},"accelerationIncludingGravity",function(){return this.accelerationIncludingGravity=new p},"rotationRate",function(){return this.rotationRate=new y},"onChrome",function(){return this.onChrome=s.userAgent.indexOf("Chrome")>-1}]),t}(c),L=(function(e){function t(e){t.__super.call(this),this.onDeviceOrientationChange=this.onDeviceOrientationChange.bind(this)}a(t,"laya.device.motion.Gyroscope",e);var n=t.prototype;n.on=function(t,n,i,a){return e.prototype.on.call(this,t,n,i,a),s.window.addEventListener("deviceorientation",this.onDeviceOrientationChange),this},n.off=function(t,n,i,a){return void 0===a&&(a=!1),this.hasListener(t)||s.window.removeEventListener("deviceorientation",this.onDeviceOrientationChange),e.prototype.off.call(this,t,n,i,a)},n.onDeviceOrientationChange=function(e){t.info.alpha=e.alpha,t.info.beta=e.beta,t.info.gamma=e.gamma,e.webkitCompassHeading&&(t.info.alpha=e.webkitCompassHeading*-1,t.info.compassAccuracy=e.webkitCompassAccuracy),this.event("change",[e.absolute,t.info])},o(1,t,"instance",function(){return t._instance=t._instance||new t(0),t._instance},laya.events.EventDispatcher._$SET_instance),t._instance=null,i(t,["info",function(){return this.info=new y}]),t}(c),function(e){function t(){this.throushold=0,this.shakeInterval=0,this.callback=null,this.lastX=NaN,this.lastY=NaN,this.lastZ=NaN,this.lastMillSecond=NaN,t.__super.call(this)}a(t,"laya.device.Shake",e);var n=t.prototype;n.start=function(e,t){this.throushold=e,this.shakeInterval=t,this.lastX=this.lastY=this.lastZ=NaN,E.instance.on("change",this,this.onShake)},n.stop=function(){E.instance.off("change",this,this.onShake)},n.onShake=function(e,t,n,i){if(isNaN(this.lastX))return this.lastX=t.x,this.lastY=t.y,this.lastZ=t.z,void(this.lastMillSecond=s.now());var a=Math.abs(this.lastX-t.x),o=Math.abs(this.lastY-t.y),r=Math.abs(this.lastZ-t.z);if(this.isShaked(a,o,r)){s.now()-this.lastMillSecond>this.shakeInterval&&(this.event("change"),this.lastMillSecond=s.now())}this.lastX=t.x,this.lastY=t.y,this.lastZ=t.z},n.isShaked=function(e,t,n){return e>this.throushold&&t>this.throushold||e>this.throushold&&n>this.throushold||t>this.throushold&&n>this.throushold},o(1,t,"instance",function(){return t._instance=t._instance||new t,t._instance},laya.events.EventDispatcher._$SET_instance),t._instance=null,t}(c),function(e){function t(e,n){this.htmlVideo=null,this.videoElement=null,this.internalTexture=null,void 0===e&&(e=320),void 0===n&&(n=240),t.__super.call(this),l.isWebGL?this.htmlVideo=new T:this.htmlVideo=new w,this.videoElement=this.htmlVideo.getVideo(),this.videoElement.layaTarget=this,this.internalTexture=new h(this.htmlVideo),this.videoElement.addEventListener("abort",t.onAbort),this.videoElement.addEventListener("canplay",t.onCanplay),this.videoElement.addEventListener("canplaythrough",t.onCanplaythrough),this.videoElement.addEventListener("durationchange",t.onDurationchange),this.videoElement.addEventListener("emptied",t.onEmptied),this.videoElement.addEventListener("error",t.onError),this.videoElement.addEventListener("loadeddata",t.onLoadeddata),this.videoElement.addEventListener("loadedmetadata",t.onLoadedmetadata),this.videoElement.addEventListener("loadstart",t.onLoadstart),this.videoElement.addEventListener("pause",t.onPause),this.videoElement.addEventListener("play",t.onPlay),this.videoElement.addEventListener("playing",t.onPlaying),this.videoElement.addEventListener("progress",t.onProgress),this.videoElement.addEventListener("ratechange",t.onRatechange),this.videoElement.addEventListener("seeked",t.onSeeked),this.videoElement.addEventListener("seeking",t.onSeeking),this.videoElement.addEventListener("stalled",t.onStalled),this.videoElement.addEventListener("suspend",t.onSuspend),this.videoElement.addEventListener("timeupdate",t.onTimeupdate),this.videoElement.addEventListener("volumechange",t.onVolumechange),this.videoElement.addEventListener("waiting",t.onWaiting),this.videoElement.addEventListener("ended",this.onPlayComplete.bind(this)),this.size(e,n),s.onMobile&&(this.onDocumentClick=this.onDocumentClick.bind(this),s.document.addEventListener("touchend",this.onDocumentClick))}a(t,"laya.device.media.Video",e);var i=t.prototype;return i.onPlayComplete=function(e){n.timer.clear(this,this.renderCanvas),this.event("ended")},i.load=function(e){0==e.indexOf("blob:")?this.videoElement.src=e:this.htmlVideo.setSource(e,laya.device.media.Video.MP4)},i.play=function(){this.videoElement.play(),n.timer.frameLoop(1,this,this.renderCanvas)},i.pause=function(){this.videoElement.pause(),n.timer.clear(this,this.renderCanvas)},i.reload=function(){this.videoElement.load()},i.canPlayType=function(e){var t;switch(e){case laya.device.media.Video.MP4:t="video/mp4";break;case laya.device.media.Video.OGG:t="video/ogg";break;case laya.device.media.Video.WEBM:t="video/webm"}return this.videoElement.canPlayType(t)},i.renderCanvas=function(){0!==this.readyState&&(l.isWebGL&&this.htmlVideo.updateTexture(),this.graphics.clear(),this.graphics.drawTexture(this.internalTexture,0,0,this.width,this.height))},i.onDocumentClick=function(){this.videoElement.play(),this.videoElement.pause(),s.document.removeEventListener("touchend",this.onDocumentClick)},i.size=function(t,n){return e.prototype.size.call(this,t,n),this.videoElement.width=t/s.pixelRatio,this.paused&&this.renderCanvas(),this},i.destroy=function(n){void 0===n&&(n=!0),e.prototype.destroy.call(this,n),this.videoElement.removeEventListener("abort",t.onAbort),this.videoElement.removeEventListener("canplay",t.onCanplay),this.videoElement.removeEventListener("canplaythrough",t.onCanplaythrough),this.videoElement.removeEventListener("durationchange",t.onDurationchange),this.videoElement.removeEventListener("emptied",t.onEmptied),this.videoElement.removeEventListener("error",t.onError),this.videoElement.removeEventListener("loadeddata",t.onLoadeddata),this.videoElement.removeEventListener("loadedmetadata",t.onLoadedmetadata),this.videoElement.removeEventListener("loadstart",t.onLoadstart),this.videoElement.removeEventListener("pause",t.onPause),this.videoElement.removeEventListener("play",t.onPlay),this.videoElement.removeEventListener("playing",t.onPlaying),this.videoElement.removeEventListener("progress",t.onProgress),this.videoElement.removeEventListener("ratechange",t.onRatechange),this.videoElement.removeEventListener("seeked",t.onSeeked),this.videoElement.removeEventListener("seeking",t.onSeeking),this.videoElement.removeEventListener("stalled",t.onStalled),this.videoElement.removeEventListener("suspend",t.onSuspend),this.videoElement.removeEventListener("timeupdate",t.onTimeupdate),this.videoElement.removeEventListener("volumechange",t.onVolumechange),this.videoElement.removeEventListener("waiting",t.onWaiting),this.videoElement.removeEventListener("ended",this.onPlayComplete),this.pause(),this.videoElement=null},i.syncVideoPosition=function(){var e,t=n.stage;e=u.getGlobalPosAndScale(this);var i=t._canvasTransform.a,a=t._canvasTransform.d,o=e.x*t.clientScaleX*i+t.offset.x,r=e.y*t.clientScaleY*a+t.offset.y;this.videoElement.style.left=o+"px",this.videoElement.style.top=r+"px",this.videoElement.width=this.width/s.pixelRatio,this.videoElement.height=this.height/s.pixelRatio},o(0,i,"buffered",function(){return this.videoElement.buffered}),o(0,i,"videoWidth",function(){return this.videoElement.videoWidth}),o(0,i,"currentSrc",function(){return this.videoElement.currentSrc}),o(0,i,"currentTime",function(){return this.videoElement.currentTime},function(e){this.videoElement.currentTime=e,this.renderCanvas()}),o(0,i,"ended",function(){return this.videoElement.ended}),o(0,i,"volume",function(){return this.videoElement.volume},function(e){this.videoElement.volume=e}),o(0,i,"videoHeight",function(){return this.videoElement.videoHeight}),o(0,i,"readyState",function(){return this.videoElement.readyState}),o(0,i,"duration",function(){return this.videoElement.duration}),o(0,i,"error",function(){return this.videoElement.error}),o(0,i,"loop",function(){return this.videoElement.loop},function(e){this.videoElement.loop=e}),o(0,i,"playbackRate",function(){return this.videoElement.playbackRate},function(e){this.videoElement.playbackRate=e}),o(0,i,"muted",function(){return this.videoElement.muted},function(e){this.videoElement.muted=e}),o(0,i,"paused",function(){return this.videoElement.paused}),o(0,i,"preload",function(){return this.videoElement.preload},function(e){this.videoElement.preload=e}),o(0,i,"seekable",function(){return this.videoElement.seekable}),o(0,i,"seeking",function(){return this.videoElement.seeking}),o(0,i,"height",e.prototype._$get_height,function(t){e.prototype._$set_height.call(this,t),this.paused&&this.renderCanvas()}),o(0,i,"width",e.prototype._$get_width,function(t){this.videoElement.width=this.width/s.pixelRatio,e.prototype._$set_width.call(this,t),this.paused&&this.renderCanvas()}),t.onAbort=function(e){e.target.layaTarget.event("abort")},t.onCanplay=function(e){e.target.layaTarget.event("canplay")},t.onCanplaythrough=function(e){e.target.layaTarget.event("canplaythrough")},t.onDurationchange=function(e){e.target.layaTarget.event("durationchange")},t.onEmptied=function(e){e.target.layaTarget.event("emptied")},t.onError=function(e){e.target.layaTarget.event("error")},t.onLoadeddata=function(e){e.target.layaTarget.event("loadeddata")},t.onLoadedmetadata=function(e){e.target.layaTarget.event("loadedmetadata")},t.onLoadstart=function(e){e.target.layaTarget.event("loadstart")},t.onPause=function(e){e.target.layaTarget.event("pause")},t.onPlay=function(e){e.target.layaTarget.event("play")},t.onPlaying=function(e){e.target.layaTarget.event("playing")},t.onProgress=function(e){e.target.layaTarget.event("progress")},t.onRatechange=function(e){e.target.layaTarget.event("ratechange")},t.onSeeked=function(e){e.target.layaTarget.event("seeked")},t.onSeeking=function(e){e.target.layaTarget.event("seeking")},t.onStalled=function(e){e.target.layaTarget.event("stalled")},t.onSuspend=function(e){e.target.layaTarget.event("suspend")},t.onTimeupdate=function(e){e.target.layaTarget.event("timeupdate")},t.onVolumechange=function(e){e.target.layaTarget.event("volumechange")},t.onWaiting=function(e){e.target.layaTarget.event("waiting")},t.MP4=1,t.OGG=2,t.CAMERA=4,t.WEBM=8,t.SUPPORT_PROBABLY="probably",t.SUPPORT_MAYBY="maybe",t.SUPPORT_NO="",t}(d)),w=function(e){function t(){this.video=null,t.__super.call(this),this._w=1,this._h=1,this.createDomElement()}a(t,"laya.device.media.HtmlVideo",e);var n=t.prototype;return n.createDomElement=function(){var e=this;this._source=this.video=s.createElement("video");var t=this.video.style;t.position="absolute",t.top="0px",t.left="0px",this.video.addEventListener("loadedmetadata",function(){this._w=e.video.videoWidth,this._h=e.video.videoHeight}.bind(this))},n.setSource=function(e,t){for(;this.video.childElementCount;)this.video.firstChild.remove();t&L.MP4&&this.appendSource(e,"video/mp4"),t&L.OGG&&this.appendSource(e+".ogg","video/ogg")},n.appendSource=function(e,t){var n=s.createElement("source");n.src=e,n.type=t,this.video.appendChild(n)},n.getVideo=function(){return this.video},t.create=function(){return new t},t}(r),T=function(e){function t(){this.gl=null,this.preTarget=null,this.preTexture=null,t.__super.call(this),s.onIPhone||(this.gl=v.mainContext,this._source=this.gl.createTexture(),this.preTarget=m.curBindTexTarget,this.preTexture=m.curBindTexValue,m.bindTexture(this.gl,3553,this._source),this.gl.texParameteri(3553,10242,33071),this.gl.texParameteri(3553,10243,33071),this.gl.texParameteri(3553,10240,9729),this.gl.texParameteri(3553,10241,9729),this.preTarget&&this.preTexture&&m.bindTexture(this.gl,this.preTarget,this.preTexture))}return a(t,"laya.device.media.WebGLVideo",e),t.prototype.updateTexture=function(){s.onIPhone||(m.bindTexture(this.gl,3553,this._source),this.gl.texImage2D(3553,0,6407,6407,5121,this.video))},t}(w);n.__init([f])}(window,document,Laya);
// ++
/**
 * 该文件在运行时附加，IDE-Stand不附加 
 * Created by kds on 2017/1/16.
 */
"use strict";
//------------------------------------------------------------------------------------------------------
// 插件用的继承关系（TS编译后的继承）
//------------------------------------------------------------------------------------------------------
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
//------------------------------------------------------------------------------------------------------
// 初始化
//------------------------------------------------------------------------------------------------------
var os = {};
/**
 * 系统初始化
 * @param w 宽度
 * @param h 高度
 * @param isWebGL 是否使用WEBGL
 * @param is3D 是否启用3D模块
 */
os.init = function (w, h, isWebGL, is3D) {
    // 不输入或0的话表示全屏
    if (w == null || w == 0) w = window.innerWidth || document.body.clientWidth;
    if (h == null || h == 0) h = window.innerHeight || document.body.clientHeight;
    isWebGL = isWebGL == null ? true : isWebGL;
    is3D = is3D == null ? false : is3D;
    Browser.container = document.getElementById("layer1");
    if (is3D) {
        Laya3D.init(w, h, true);
    }
    else {
        isWebGL?Laya.init(w, h, WebGL) : Laya.init(w, h);
    }
    window.stage = Laya.stage;
    window.loader = os.loader = Laya.loader;
    window.timer = Laya.timer;
    if (!isWebGL) Config.isAlpha = true;
    os.canvas = document.getElementById("layaCanvas");
    // if (!is3D) {
    //     WorkerLoader.workerPath = "/kdsrpg/kdsrpg_core/libs/worker.js";
    //     WorkerLoader.enable = true;
    // }
    // alert(WorkerLoader)
    // 适配KS
    //for (var i in kdsrpg_staticVarInitFuncs) { kdsrpg_staticVarInitFuncs[i](); };
    //kdsrpg_staticVarInitFuncs = [];
};
// 音频默认关闭的
(function () {
    window["mozAudioContext"] = null;
    window["AudioContext"] = null;
    window["webkitAudioContext"] = null;
})();

/**
 *
 * @returns Mac/Unix/Linux/Win2000/WinXP/Win2003/WinVista/Win7/other
 */
os.detectOS = function () {
    var sUserAgent = navigator.userAgent;
    var isWin = (navigator.platform == "Win32") || (navigator.platform == "Windows");
    var isMac = (navigator.platform == "Mac68K") || (navigator.platform == "MacPPC") || (navigator.platform == "Macintosh") || (navigator.platform == "MacIntel");
    if (isMac) return "Mac";
    var isUnix = (navigator.platform == "X11") && !isWin && !isMac;
    if (isUnix) return "Unix";
    var isLinux = (String(navigator.platform).indexOf("Linux") > -1);
    if (isLinux) return "Linux";
    if (isWin) {
        var isWin2K = sUserAgent.indexOf("Windows NT 5.0") > -1 || sUserAgent.indexOf("Windows 2000") > -1;
        if (isWin2K) return "Win2000";
        var isWinXP = sUserAgent.indexOf("Windows NT 5.1") > -1 || sUserAgent.indexOf("Windows XP") > -1;
        if (isWinXP) return "WinXP";
        var isWin2003 = sUserAgent.indexOf("Windows NT 5.2") > -1 || sUserAgent.indexOf("Windows 2003") > -1;
        if (isWin2003) return "Win2003";
        var isWinVista = sUserAgent.indexOf("Windows NT 6.0") > -1 || sUserAgent.indexOf("Windows Vista") > -1;
        if (isWinVista) return "WinVista";
        var isWin7 = sUserAgent.indexOf("Windows NT 6.1") > -1 || sUserAgent.indexOf("Windows 7") > -1;
        if (isWin7) return "Win7";
    }
    return "other";
};
//------------------------------------------------------------------------------------------------------
// 鼠标样式设定
//------------------------------------------------------------------------------------------------------
os._recordCursor = "default";
os.setCursor = function (style) { os._recordCursor = document.body.style.cursor; document.body.style.cursor = style; };
os.restoreCursor = function () { document.body.style.cursor = os._recordCursor; };
// enterframe 对同一个对象注册多次，在移除的时候会按照注册的顺序移除，同样要移除多次才能移除
window.requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame;
os._enterframeMap = new Map();
os._removeframeMap = new Map();
os.add_ENTERFRAME = function(onHappen,thisPtr,args){
    var _loop;
    window.requestAnimationFrame(_loop = function(){
        var _removeArr = os._removeframeMap.get(onHappen);
        if(_removeArr){
            var idx = _removeArr.indexOf(thisPtr);
            if(idx!=-1){
                _removeArr.splice(idx,1);
                return;
            }
        }
        onHappen.apply(thisPtr,args);
        window.requestAnimationFrame(_loop); // next frame 执行本函数
    });
    var enterArr = os._enterframeMap.get(onHappen);
    if(!enterArr){
        enterArr = [];
        os._enterframeMap.set(onHappen,enterArr);
    }
    enterArr.push(thisPtr);
};
os.remove_ENTERFRAME = function(onHappen,thisPtr){
    var enterArr = os._enterframeMap.get(onHappen);
    if(!enterArr)return;
    var idx = enterArr.indexOf(thisPtr);
    if(idx==-1)return;
    enterArr.splice(idx,1);
    var removeArr = os._removeframeMap.get(onHappen);
    if(!removeArr){
        removeArr = [];
        os._removeframeMap.set(onHappen,removeArr);
    }
    removeArr.push(thisPtr);
};
//------------------------------------------------------------------------------------------------------
// top namespace
//------------------------------------------------------------------------------------------------------
for (var p in Laya) {
    if (typeof window[p] == "undefined") {
        window[p] = Laya[p];
    }
}
window.TextField = Laya.Text;
window.URLInfo = Laya.URL;
window.EngineConfig = Laya.Config;
window.EventObject = Laya.Event;
window.TreeNode = Laya.Node;
window.UIImage = Laya.Image;
window.UIEventObject = Laya.UIEvent;
window.DevGeolocation = Laya.Geolocation;

//------------------------------------------------------------------------------------------------------
// class Extends
//------------------------------------------------------------------------------------------------------
// event extends
function eventExtends(evArr, clsObj) {
    if (clsObj == null) return;
    function toUpFuncName(funcName) {
        var regx = new RegExp("[A-Z]", "g");
        var m = funcName.match(regx);
        for (var i in m)
            funcName = funcName.replace(m[i], "_" + m[i])
        return funcName.toUpperCase();;
    }
    function evPush(extStr, evUpStr, evAPI, evType) {
        clsObj.prototype[extStr + evUpStr] = function (a, b, c) {
            this[evAPI](evType, b, a, c);
        }
    }
    function evHas(evType, evUpStr) {
        clsObj.prototype["has_" + evUpStr] = function () {
            return this.hasListener(evType);
        };
    }
    function evHappen(evType, evUpStr) {
        clsObj.prototype["happen_" + evUpStr] = function (data) {
            this.event(evType, data);
        };
    }
    for (var s in evArr) {
        var evType = evArr[s];
        var evUpStr = toUpFuncName(evType);
        evPush("add_", evUpStr, "on", evType);
        evPush("remove_", evUpStr, "off", evType);
        evPush("addOnce_", evUpStr, "once", evType);
        evHas(evType, evUpStr);
        evHappen(evType, evUpStr);
    }
    clsObj.prototype.removeAllListen = function () {
        this.offAll();
    }
}
var node_events = ["added", "display", "removed", "undisplay"];
eventExtends(node_events, TreeNode);
var sprite_events = ["click", "dragend", "dragmove", "dragstart", "mousedown", "mousedown", "mousemove", "mouseout", "mouseover", "mouseup", "mousewheel", "doubleclick", "rightclick", "rightmousedown", "rightmouseup", "enterframe"];
eventExtends(sprite_events, Sprite);
var stage_events = ["blur", "focus", "focuschange", "fullscreenchange", "resize", "visibilitychange", "keydown", "keyup","keypress"];
eventExtends(stage_events, Stage);
var httpRequest_event = ["complete", "error", "progress"];
eventExtends(httpRequest_event, HttpRequest);
var Socket_event = ["close", "error", "message", "open"];
eventExtends(Socket_event, Socket);
var Animation_event = ["complete", "label"];
eventExtends(Animation_event, Animation);
// 由于layaBox的双击存在BUG，暂时还未修复，先使用这个拿去用下
Sprite.prototype.add_DOUBLECLICK = function (onHappen, thisPtr, args) {
    var clickTimes = 0;
    this.__dbclickObj = null;
    var _onClick = function (e) {
        clickTimes++;
        setTimeout(function () {
            clickTimes--;
        }, 250);
        if (clickTimes == 2) {
            e.type = "doubleClick";
            var params = args ? args.concat(e) : [e];
            onHappen.apply(thisPtr, params);
        }
    };
    if (this.__doubleClickFuncs == null) this.__doubleClickFuncs = {};
    this.__doubleClickFuncs[onHappen] = _onClick;
    this.add_CLICK(_onClick);
};
Sprite.prototype.remove_DOUBLECLICK = function (onHappen, thisPtr, args) {
    if (this.__doubleClickFuncs) {
        var _onClick = this.__doubleClickFuncs[onHappen];
        if (!_onClick) return;
        delete this.__doubleClickFuncs[onHappen];
        this.remove_CLICK(_onClick);
    }
};


var component_events = ["resize", "loaded"];
eventExtends(component_events, Component);
var label_events = ["change"];
eventExtends(label_events, Label);
var textInput_events = ["enter", "input","blur","focus"];
eventExtends(textInput_events, TextInput);
var UIGroup_events = ["change"];
eventExtends(UIGroup_events, UIGroup);
var clip_events = ["change", "loaded"];
eventExtends(clip_events, Clip);
eventExtends(label_events, Button);
eventExtends(UIGroup_events, ComboBox);
eventExtends(UIGroup_events, List);
// 获取选中的列表以及设置为选中
getset(0, List.prototype, 'selectedItemList', function () {
    var arr = [];
    for (var i in this.array) {
        var item = this.array[i];
        if (item.selected) arr.push(item);
    }
    return arr;
}, function (arr) {
    for (var i in arr) {
        var item = arr[i];
        if (this.array.indexOf(item) != -1) item.selected = true;
    }
});
// 获取未选中的的列表以及设置为未选中
getset(0, List.prototype, 'unSelectedItemList', function () {
    var arr = [];
    for (var i in this.array) {
        var item = this.array[i];
        if (!item.selected) arr.push(item);
    }
    return arr;
}, function (arr) {
    for (var i in arr) {
        var item = arr[i];
        if (this.array.indexOf(item) != -1) item.selected = false;
    }
});
// Handler
Handler.prototype.delayRun = function (delay) {
    return setTimeout(function (handler) {
        handler.run();
    }, delay, this);
};
Handler.prototype.delayRunConver = function (delay) {
    if (this.delayRunSign) {
        clearTimeout(this.delayRunSign);
    }
    this.delayRunSign = this.delayRun(delay);
};
// utils Browser
getset(0, Browser, 'onMac', function () {
    return os.detectOS() == "Mac";
});
//------------------------------------------------------------------------------------------------------
// 插件
//------------------------------------------------------------------------------------------------------
/**
 * 用于容器分割
 * -- 横向分割/纵向分割
 * -- 可贴墙（贴墙可传入两个显示对象用于图标）
 * Created by kds on 2017/1/18 0018.
 */
class PartitionBox extends Box{
    constructor() {
        super();
        this._wallThick = 2;
        this._wallThickHalf = this._wallThick*0.5;
        this._wallTouchThick = 20;
        this._wallTouchThickHalf = this._wallTouchThick*0.5;
        this._horizontalPartition = true;
        this._partitionPercent = 50;
        this._partitionValue = 50;
        this.firstMin = null;
        this.firstMax = null;
        this.secondMin = null;
        this.secondMax = null;
        // mode0=percent value  mode1=fix value
        this._isUseParcent = true;
        this._wallSprite = new UIImage("comp/progress.png");
        this._wallSprite.alpha=0;
        this._isDragingWall = false;
        this._cantDragWall = false;
        new Handler(this,this.init).delayRun(0);
    }
    init(){
        // initWall
        this._wallSprite.pivotX = this._wallSprite.pivotY = this._wallThickHalf;
        this.addChild(this._wallSprite);
        this._wallSprite.add_MOUSEDOWN(this.onWallMouseDown,this);
        this._wallSprite.add_MOUSEMOVE(function(){if(this._cantDragWall)return;this._horizontalPartition?os.setCursor("e-resize"):os.setCursor("n-resize");},this);
        this._wallSprite.add_MOUSEOUT(function(){if(this._cantDragWall)return;if(!this._isDragingWall)os.setCursor("default");},this);
        this.update();
    }
    //------------------------------------------------------------------------------------------------------
    // 状态
    //------------------------------------------------------------------------------------------------------
    set horizontalPartition(v){
        this._horizontalPartition = v;
        this.update();
    }
    set cantDragWall(v){
        this._cantDragWall = v;
        this._wallSprite.visible = !v;
    }
    set partitionPercent(v){
        this._isUseParcent = true;
        this._partitionPercent = v;
        this.update();
    }
    set partitionValue(v){
        this._isUseParcent = false;
        this._partitionValue = v;
        this.update();
    }
    //------------------------------------------------------------------------------------------------------
    // 事件
    //------------------------------------------------------------------------------------------------------
    onWallMouseDown(){
        if(this._cantDragWall)return;
        this._isDragingWall = true;
        var dragRect;
        if( this._horizontalPartition ){
            dragRect = new Rectangle(1,0,this.width-2,0);
        }
        else{
            dragRect = new Rectangle(0,1,0,this.height-2);
        }
        this.lastWallPos = [this._wallSprite.x,this._wallSprite.y];

        var wallSprite = this._wallSprite;
        var _this = this;
        var _onWindowMouseMove,_onWindowMouseUp;
        window.addEventListener("mousemove",_onWindowMouseMove=function(e){
            var clientX,clientY;
            clientX = e.offsetX;
            clientY = e.offsetY;
            var globalP = new Point(clientX,clientY);
            var p = _this.globalToLocal(globalP);
            p.x = Math.max(dragRect.x,p.x);
            p.x = Math.min(dragRect.right,p.x);
            p.y = Math.max(dragRect.y,p.y);
            p.y = Math.min(dragRect.bottom,p.y);
            // 限定范围
            wallSprite.x = p.x;
            wallSprite.y = p.y;
            _this.onWallMouseMove();
        });
        window.addEventListener("mouseup",_onWindowMouseUp=function(e){
            _this._isDragingWall = false;
            os.setCursor("default");
            window.removeEventListener("mousemove",_onWindowMouseMove);
            window.removeEventListener("mouseup",_onWindowMouseUp);
        });
    }
    onWallMouseMove(){
        var lastWallPos = [this._wallSprite.x,this._wallSprite.y];
        if(lastWallPos[0]==this.lastWallPos[0]&&lastWallPos[1]==this.lastWallPos[1])return;
        this.lastWallPos = [this._wallSprite.x,this._wallSprite.y];
        if( this._horizontalPartition ){
            if(this._isUseParcent){
                this._partitionPercent = this._wallSprite.x*100/this.width;
            }
            else{
                this._partitionValue = this._wallSprite.x;
            }
        }
        else{
            if(this._isUseParcent){
                this._partitionPercent = this._wallSprite.y*100/this.height;
            }
            else{
                this._partitionValue = this._wallSprite.y;
            }
        }
        // min - max
        if(this.firstMin && this._partitionValue<this.firstMin){
            this._partitionValue = this.firstMin;
        }
        if(this.firstMax && this._partitionValue>this.firstMax){
            this._partitionValue = this.firstMax;
        }
        if(this.secondMax && this.width - this._partitionValue>this.secondMax){
            this._partitionValue = this.width - this.secondMax;
        }
        if(this.secondMin && this.width - this._partitionValue<this.secondMin){
            this._partitionValue = this.width - this.secondMin;
        }
        this._partitionValue = this._partitionValue ;
        this.update(false);
    }
    //------------------------------------------------------------------------------------------------------
    // 更新
    //------------------------------------------------------------------------------------------------------
    set width(v){
        super.width = v;
        this.update();
    }
    get width(){
        return super.width;
    }
    set height(v){
        super.height = v;
        this.update();
    }
    get height(){
        return super.height;
    }
    update(setWallPos){
        setWallPos=setWallPos||true;
        var len = this.numChildren;
        if(len>3)throw("too many children in partitionBox!");
        if(len==0)return;
        var dynamicPos,fixPos,dynamicWH,fixWH,wallX,wallY,wallWidth,wallHeight;
        if(this._horizontalPartition){
            dynamicPos = "x";
            fixPos = "y";
            dynamicWH = "width";
            fixWH = "height";
            wallWidth = this._wallThick;
            wallHeight = this.height;
        }
        else{
            dynamicPos = "y";
            fixPos = "x";
            dynamicWH = "height";
            fixWH = "width";
            wallHeight = this._wallThick;
            wallWidth = this.width;
        }
        var _partitionPercent = len==1?100:this._partitionPercent;
        var childA = this.getChildAt(0);
        childA[dynamicPos] = 0;
        childA[fixPos] = 0;
        if(this._isUseParcent){
            childA[dynamicWH] = (this[dynamicWH] * _partitionPercent)/100 - this._wallThickHalf;
        }
        else{
            childA[dynamicWH] = this._partitionValue;
        }
        childA[fixWH] = this[fixWH];
        if(len>=2){
            var childB = this.getChildAt(1);
            childB[dynamicPos] = childA[dynamicWH] + this._wallThick;
            childB[fixPos] = 0;
            childB[dynamicWH] = this[dynamicWH] - childA[dynamicWH] - this._wallThick;
            childB[fixWH] = this[fixWH];
        }
        // -- addChildWall
        if(setWallPos){
            this._wallSprite[fixPos] = 0;
            this._wallSprite[dynamicPos] = childA[dynamicWH] + this._wallThickHalf;
            this._wallSprite.width = wallWidth;
            this._wallSprite.height = wallHeight;
            this._wallSprite.hitArea = new Rectangle(-this._wallTouchThickHalf,-this._wallTouchThickHalf,this._wallSprite.width+this._wallTouchThick,this._wallSprite.height+this._wallTouchThick);
        }
    }
}
class PartitionBoxV extends PartitionBox{
    constructor() {
        super();
        this._horizontalPartition = false;
    }
}
//------------------------------------------------------------------------------------------------------
// 追加的事件类型
//------------------------------------------------------------------------------------------------------
UIEventObject.DATA_CHANGE = "DATA_CHANGE";
var FrameSelectUtils = (function () {
    function FrameSelectUtils() {
    }
    FrameSelectUtils.init = function () {
        if (FrameSelectUtils.isInit)
            return;
        FrameSelectUtils.isInit = true;
        FrameSelectUtils.frameSelectSp = new Sprite();
        FrameSelectUtils.frameSelectSp.mouseEnabled = true;
        FrameSelectUtils.frameSelectSp.alpha = 0.5;
    };
    FrameSelectUtils.reg = function (container, hitArea, onFrameSelected) {
        FrameSelectUtils.init();
        container["__hitArea"] = hitArea;
        container["__onFrameSelected"] = onFrameSelected;
        container.on(EventObject.MOUSE_DOWN, container, FrameSelectUtils.onMouseDown);
    };
    FrameSelectUtils.onMouseDown = function (e) {
        if (!FrameSelectUtils.enabled)
            return;
        var frameSelectSp = FrameSelectUtils.frameSelectSp;
        var container = e.currentTarget;
        if (container["__hitArea"] != e.target)
            return;
        FrameSelectUtils.currentContainer = container;
        container.addChild(frameSelectSp);
        FrameSelectUtils.frameSelectSp.size(container.width, container.height);
        FrameSelectUtils.startP = new Point(container.mouseX, container.mouseY);
        stage.on(EventObject.MOUSE_MOVE, container, FrameSelectUtils.onMouseMove);
        stage.on(EventObject.MOUSE_UP, container, FrameSelectUtils.onMouseUp);
    };
    FrameSelectUtils.onMouseMove = function (e) {
        var container = FrameSelectUtils.currentContainer;
        var startP = FrameSelectUtils.startP;
        var nowP = new Point(container.mouseX, container.mouseY);
        var leftP = new Point(Math.min(nowP.x, startP.x), Math.min(nowP.y, startP.y));
        var bottomP = new Point(Math.max(nowP.x, startP.x), Math.max(nowP.y, startP.y));
        var rect = new Rectangle(leftP.x, leftP.y, bottomP.x - leftP.x, bottomP.y - leftP.y);
        var frameSelectSp = FrameSelectUtils.frameSelectSp;
        frameSelectSp.graphics.clear();
        frameSelectSp.graphics.drawRect(rect.x, rect.y, rect.width, rect.height, "#8484bd");
        container["__onFrameSelected"](rect, e);
    };
    FrameSelectUtils.onMouseUp = function (e) {
        var container = FrameSelectUtils.currentContainer;
        var frameSelectSp = FrameSelectUtils.frameSelectSp;
        container.removeChild(frameSelectSp);
        frameSelectSp.graphics.clear();
        stage.off(EventObject.MOUSE_MOVE, container, FrameSelectUtils.onMouseMove);
        stage.off(EventObject.MOUSE_UP, container, FrameSelectUtils.onMouseUp);
    };
    FrameSelectUtils.enabled = true;
    return FrameSelectUtils;
}());
var ComputeTS = (function () {
    function ComputeTS() {
    }
    ComputeTS.init = function (onFin) {
        if (onFin === void 0) { onFin = null; }
        var tsUR = new HttpRequest();
        tsUR.send("http://www.kdsrpg.com/include/getTsTok.php?pid=" + ComputeTS.projectID, "", "post");
        tsUR.add_COMPLETE(function (str) {
            if (str != "error") {
                ComputeTS.kdsrpgTSToken = JSON.parse(str).access_token;
                onFin && onFin(true);
            }
            else {
                onFin && onFin(false);
            }
        }, this);
        tsUR.add_ERROR(function () {
            onFin && onFin(false);
        }, this);
    };
    ComputeTS.play = function (content, per, speed, pit, vol) {
        if (per === void 0) { per = 0; }
        if (speed === void 0) { speed = 7; }
        if (pit === void 0) { pit = 5; }
        if (vol === void 0) { vol = 8; }
        if (!ComputeTS.kdsrpgTSToken)
            return;
        var lan = "zh";
        var ctp = "1";
        var body = "tex=" + content + "&lan=" + lan + "&tok=" + ComputeTS.kdsrpgTSToken + "&ctp=" + ctp + "&cuid=" + ComputeTS.projectID + "&spd=" + speed + "&pit=" + pit + "&vol=" + vol + "&per=" + per;
        var soundURL = "http://tsn.baidu.com/text2audio?" + body;
        SoundManager.playSound(soundURL);
    };
    ComputeTS.projectID = 1;
    return ComputeTS;
}());





var ListItemData = (function (_super) {
    __extends(ListItemData, _super);
    function ListItemData() {
        _super.call(this);
        this._selected = false;
        this._group = null;
        this._label = "";
    }
    Object.defineProperty(ListItemData.prototype, "selected", {
        get: function () { return this._selected; },
        set: function (v) {
            if (v != this._selected) {
                this._selected = v;
                this.happen_SELECTE_CHANGED();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ListItemData.prototype, "label", {
        get: function () { return this._label; },
        set: function (v) { this._label = v; },
        enumerable: true,
        configurable: true
    });
    ListItemData.prototype.add_SELECTE_CHANGED = function (onHappen, thisPtr, args) {
        if (args === void 0) { args = null; }
        this.on("SELECTE_CHANGED", thisPtr, onHappen, args);
    };
    ListItemData.prototype.remove_SELECTE_CHANGED = function (onHappen, thisPtr) {
        this.off("SELECTE_CHANGED", thisPtr, onHappen);
    };
    ListItemData.prototype.happen_SELECTE_CHANGED = function (data) {
        if (data === void 0) { data = null; }
        this.event("SELECTE_CHANGED", data);
    };
    ListItemData.prototype.has_SELECTE_CHANGED = function () {
        return this.hasListener("SELECTE_CHANGED");
    };
    return ListItemData;
}(EventDispatcher));





var ListRender = (function (_super) {
    __extends(ListRender, _super);
    function ListRender() {
        _super.call(this);
        new Handler(this, this._init).delayRun(0);
    }
    ListRender.prototype._init = function () {
        this.initEvent();
    };
    Object.defineProperty(ListRender.prototype, "mainComp", {
        get: function () {
            if (this._mainComp)
                return this._mainComp;
            if (this.parent == null) {
                return null;
            }
            this._mainComp = this.parent.parent;
            return this._mainComp;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ListRender.prototype, "dataList", {
        get: function () {
            return this.mainComp.array;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ListRender.prototype, "lastSelected", {
        get: function () {
            return this.mainComp ? this.mainComp.selectedItem : null;
        },
        set: function (v) {
            if (this.mainComp)
                this.mainComp.selectedItem = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ListRender.prototype, "dataSource", {
        get: function () {
            return this.data;
        },
        set: function (v) {
            if (this.data != v) {
                if (this.data) {
                    this.data.remove_SELECTE_CHANGED(this._onDataSelectChange, this);
                }
                this.data = v;
                if (this.data) {
                    this.data.add_SELECTE_CHANGED(this._onDataSelectChange, this);
                    this._onDataSelectChange();
                }
                this.happen_DATACHANGE();
            }
            this.updateAppearance();
        },
        enumerable: true,
        configurable: true
    });
    ListRender.prototype.addChild = function (node) {
        this[node.name] = node;
        if (node.name == "overImg" || node.name == "selectImg") {
            node.visible = false;
        }
        _super.prototype.addChild.call(this, node);
    };
    ListRender.prototype.initEvent = function () {
        this.add_MOUSEOVER(this._onMouseOver, this);
        this.add_MOUSEOUT(this._onMouseOut, this);
        this.add_CLICK(this._onMouseDown, this);
        this.add_RIGHTMOUSEDOWN(this._onMouseDown, this);
        this.add_DOUBLECLICK(this._onDBClick, this);
    };
    ListRender.prototype._onMouseOver = function () {
        this.overImg.visible = true;
    };
    ListRender.prototype._onMouseOut = function () {
        this.overImg.visible = false;
    };
    ListRender.prototype._onMouseDown = function (e) {
        var mainComp = this.mainComp;
        var dataList = this.dataList;
        if (e.type == "rightmousedown" && this.data.selected) {
            return;
        }
        if (mainComp.supportMultiSelect) {
            mainComp.isMultiSelect = e.ctrlKey || e.shiftKey;
            if (e.shiftKey) {
                if (this.lastSelected) {
                    var lastSelected = this.lastSelected;
                    var listLen = dataList.length;
                    var lastItemIdx = dataList.indexOf(lastSelected);
                    var thisItemIdx = dataList.indexOf(this.data);
                    if (lastItemIdx != -1 && thisItemIdx != -1) {
                        var formIdx, toIdx;
                        if (lastItemIdx > thisItemIdx) {
                            formIdx = thisItemIdx;
                            toIdx = lastItemIdx;
                        }
                        else {
                            formIdx = lastItemIdx;
                            toIdx = thisItemIdx;
                        }
                        for (var i = formIdx; i <= toIdx; i++) {
                            dataList[i].selected = true;
                        }
                        for (var i = 0; i < formIdx; i++) {
                            dataList[i].selected = false;
                        }
                        for (var i = toIdx + 1; i < listLen; i++) {
                            dataList[i].selected = false;
                        }
                        this.lastSelected = lastSelected;
                        return;
                    }
                }
            }
        }
        var toSelected = !this.data.selected;
        if (mainComp.mustSelectOne && !toSelected) {
            var selectCount = 0;
            var dataListLen = dataList.length;
            for (var i = 0; i < dataListLen; i++) {
                if (dataList[i].selected)
                    selectCount++;
                if (selectCount > 1)
                    break;
            }
            if (selectCount == 1) {
                return;
            }
        }
        if (!mainComp.isMultiSelect) {
            var isCancelElse = false;
            for (var i in this.dataList) {
                var elseData = this.dataList[i];
                if (elseData != this.data && elseData.selected) {
                    elseData.selected = false;
                    isCancelElse = true;
                }
            }
            this.data.selected = !isCancelElse ? toSelected : true;
        }
        else {
            this.data.selected = toSelected;
        }
        if (this.data.selected)
            this.lastSelected = this.data;
    };
    ListRender.prototype._onDBClick = function (e) {
        this.mainComp.event("itemDoubleClick", this.data);
    };
    ListRender.prototype._onDataSelectChange = function (e) {
        if (e === void 0) { e = null; }
        this.updateAppearance_selected();
        if (this.data.selected) {
            this.lastSelected = this.data;
        }
    };
    ListRender.prototype.updateAppearance_selected = function () {
        if (this.data == null) {
            console.log(this.isDDD, this.parent, this.stage);
            return;
        }
        this.selectImg.visible = this.data.selected;
    };
    ListRender.prototype.updateAppearance = function () {
        if (this.data == null)
            return;
        this.label.text = this.data.label;
        this.updateAppearance_selected();
    };
    ListRender.prototype.add_DATACHANGE = function (onHappen, thisPtr, args) {
        if (args === void 0) { args = null; }
        this.on(UIEventObject.DATA_CHANGE, thisPtr, onHappen, args);
    };
    ;
    ListRender.prototype.remove_DATACHANGE = function (onHappen, thisPtr) {
        this.off(UIEventObject.DATA_CHANGE, thisPtr, onHappen);
    };
    ;
    ListRender.prototype.happen_DATACHANGE = function (data) {
        if (data === void 0) { data = null; }
        this.event(UIEventObject.DATA_CHANGE, data);
    };
    ;
    ListRender.prototype.destroy = function () {
        _super.prototype.destroy.call(this);
        if (this.data && this.data.has_SELECTE_CHANGED()) {
            this.data.remove_SELECTE_CHANGED(this._onDataSelectChange, this);
        }
    };
    return ListRender;
}(Box));





var TreeItemData = (function (_super) {
    __extends(TreeItemData, _super);
    function TreeItemData() {
        _super.call(this);
        this._visible = false;
        this.isOpen = true;
        this.isDirectory = false;
        this._children = [];
        this._parent = null;
        this._visible = true;
    }
    Object.defineProperty(TreeItemData.prototype, "visible", {
        get: function () { return this._visible; },
        set: function (v) { this._visible = v; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TreeItemData.prototype, "parent", {
        get: function () { return this._parent; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TreeItemData.prototype, "nodeParent", {
        get: function () { return this._parent; },
        enumerable: true,
        configurable: true
    });
    TreeItemData.prototype.addChild = function (item) { this._children.push(item); item._parent = this; };
    TreeItemData.prototype.addChildAt = function (item, index) { this._children.splice(index, 0, item); item._parent = this; };
    TreeItemData.prototype.removeChild = function (item) { this._children.splice(this._children.indexOf(item), 1); item._parent = null; };
    TreeItemData.prototype.removeChildAt = function (index) { var item = this._children.splice(index, 1)[0]; item._parent = null; };
    TreeItemData.prototype.removeAll = function () { for (var i in this._children) {
        this._children[i]._parent = null;
    } ; this._children.length = 0; };
    TreeItemData.prototype.getChildAt = function (index) { return this._children[index]; };
    TreeItemData.prototype.getChildIndex = function (item) { return this._children.indexOf(item); };
    TreeItemData.prototype.getChildByName = function (name) { for (var i in this._children) {
        if (this._children[i].label == name)
            return this._children[i];
    } ; return null; };
    Object.defineProperty(TreeItemData.prototype, "numChildren", {
        get: function () { return this._children.length; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TreeItemData.prototype, "children", {
        get: function () { return this._children; },
        enumerable: true,
        configurable: true
    });
    TreeItemData.prototype.isInherit = function (data) {
        var p = this.parent;
        while (p) {
            if (p == data)
                return true;
            p = p._parent;
        }
        return false;
    };
    TreeItemData.prototype.getList = function (arr) {
        arr.push(this);
        var len = this.numChildren;
        for (var i = 0; i < len; i++) {
            this.getChildAt(i).getList(arr);
        }
    };
    Object.defineProperty(TreeItemData.prototype, "root", {
        get: function () {
            var p = this;
            while (true) {
                if (p._parent) {
                    p = p._parent;
                }
                else {
                    break;
                }
            }
            return p;
        },
        enumerable: true,
        configurable: true
    });
    TreeItemData.removeExistChild = function (list) {
        for (var i = list.length - 1; i >= 0; i--) {
            for (var s in list) {
                if (list[i].isInherit(list[s])) {
                    list.splice(i, 1);
                    break;
                }
            }
        }
    };
    return TreeItemData;
}(ListItemData));





var TreeRender = (function (_super) {
    __extends(TreeRender, _super);
    function TreeRender() {
        _super.call(this);
    }
    Object.defineProperty(TreeRender.prototype, "mainComp", {
        get: function () {
            if (this._mainComp)
                return this._mainComp;
            if (this.parent == null) {
                return null;
            }
            this._mainComp = this.parent.parent.parent;
            return this._mainComp;
        },
        enumerable: true,
        configurable: true
    });
    TreeRender.prototype.initEvent = function () {
        _super.prototype.initEvent.call(this);
        this.icon1.add_CLICK(this._onFolderClick, this);
        this.icon2.add_CLICK(this._onFolderClick, this);
        this.add_DOUBLECLICK(this._onFolderClick, this);
    };
    TreeRender.prototype.getData = function () {
        return this.data;
    };
    TreeRender.prototype._onFolderClick = function (e) {
        if (e.ctrlKey || e.shiftKey) {
            return;
        }
        if (this.data.numChildren == 0)
            return;
        var isOpen = !this.data.isOpen;
        if (!isOpen) {
            var dataList = this.dataList;
            for (var i in dataList) {
                var elseData = dataList[i];
                if (elseData.isInherit(this.data)) {
                    elseData.selected = false;
                }
            }
        }
        this.data.isOpen = isOpen;
        this.mainComp.fresh();
        e.stopPropagation();
    };
    TreeRender.prototype.updateAppearance = function () {
        _super.prototype.updateAppearance.call(this);
        if (this.data == null)
            return;
        this.updateAppearance_folderIcon();
    };
    TreeRender.prototype.updateAppearance_folderIcon = function () {
        this.icon1.index = this.data.isOpen ? 1 : 0;
        if (this.data.isDirectory) {
            if (this.data.numChildren > 0) {
                this.icon1.visible = true;
                if (this.data.isOpen) {
                    this.icon1.index = this.icon2.index = 1;
                }
                else {
                    this.icon1.index = this.icon2.index = 0;
                }
            }
            else {
                this.icon2.index = 0;
                this.icon1.visible = false;
            }
        }
        else {
            this.icon2.index = 2;
            this.icon1.visible = false;
        }
    };
    return TreeRender;
}(ListRender));





var View = laya.ui.View;
var SCUI;
(function (SCUI) {
    var ui;
    (function (ui) {
        var Hall;
        (function (Hall) {
            var hallUI = (function (_super) {
                __extends(hallUI, _super);
                function hallUI() {
                    _super.call(this);
                }
                hallUI.prototype.createChildren = function () {
                    View.regComponent("SCUI.ui.Popup.menuUI", SCUI.ui.Popup.menuUI);
                    _super.prototype.createChildren.call(this);
                    this.createView(SCUI.ui.Hall.hallUI.uiView);
                };
                hallUI.uiView = { "type": "View", "props": { "width": 1400, "height": 800 }, "child": [{ "type": "Image", "props": { "var": "bg", "top": 0, "skin": "asset/game/游戏背景.png", "right": 0, "left": 224, "bottom": 0 } }, { "type": "Box", "props": { "var": "uiBox", "top": 0, "right": 0, "mouseThrough": true, "left": 0, "bottom": 0 }, "child": [{ "type": "Image", "props": { "y": 93, "x": 398, "width": 332, "var": "vegetableGarden", "skin": "asset/game/菜园.png", "height": 245 } }, { "type": "Image", "props": { "y": 56, "x": 686, "width": 704, "var": "room", "skin": "asset/game/住房.png", "height": 288 } }, { "type": "Image", "props": { "y": 344, "x": 384, "width": 237, "var": "waterStorageTank", "skin": "asset/game/储水池.png", "height": 205 } }, { "type": "Image", "props": { "y": 292, "x": 1054, "width": 275, "var": "warehouse", "skin": "asset/game/仓库.png", "height": 214 } }, { "type": "Image", "props": { "y": 355, "x": 260, "width": 112, "var": "passageway", "skin": "asset/game/连接通道.png", "height": 178 } }, { "type": "Image", "props": { "width": 549, "top": 0, "skin": "asset/game/奖金池.png", "sizeGrid": "0,64,0,0", "left": 224, "height": 47 } }, { "type": "Image", "props": { "y": 0, "x": 851, "top": 0, "skin": "asset/game/道具统计.png", "right": 0 } }, { "type": "Box", "props": { "var": "eventBg", "top": 50, "right": 0, "bottom": 475 }, "child": [{ "type": "Image", "props": { "width": 491, "top": 0, "skin": "asset/game/black.png", "right": 0, "bottom": 0, "alpha": 0.4 } }, { "type": "TextArea", "props": { "wordWrap": false, "width": 491, "var": "show", "top": 0, "overflow": "hidden", "mouseThrough": true, "mouseEnabled": false, "left": 0, "fontSize": 15, "editable": false, "color": "#00ff14", "bottom": 0, "align": "right" } }, { "type": "Image", "props": { "y": 50, "x": 0, "width": 20, "var": "eventBackBtn", "top": 0, "skin": "asset/game/black.png", "left": 0, "bottom": 0, "alpha": 1 }, "child": [{ "type": "Label", "props": { "width": 20, "var": "eventBackText", "valign": "middle", "text": ">>", "height": 20, "fontSize": 15, "color": "#ffffff", "centerY": 0.5, "align": "center" } }] }] }, { "type": "menu", "props": { "var": "menu", "top": 0, "left": 0, "runtime": "SCUI.ui.Popup.menuUI" } }, { "type": "Image", "props": { "y": 572, "x": 441, "width": 744, "var": "wall", "skin": "asset/game/城墙.png", "height": 228 } }, { "type": "Box", "props": { "y": 537, "x": 297, "width": 1032, "var": "standGuardBox", "mouseThrough": true, "height": 118 }, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "width": 154, "visible": false, "var": "leftMan", "skin": "asset/game/左炮台.png", "height": 118 } }, { "type": "Image", "props": { "y": -2, "x": 875, "width": 155, "visible": false, "var": "rightMan", "skin": "asset/game/右炮台.png", "height": 119 } }, { "type": "Image", "props": { "y": 0, "x": 0, "width": 154, "var": "leftNull", "skin": "asset/game/左炮台空.png", "height": 118 } }, { "type": "Image", "props": { "y": -2, "x": 875, "width": 155, "var": "rightNull", "skin": "asset/game/右炮台空.png", "height": 119 } }] }, { "type": "Image", "props": { "y": -1, "width": 50, "var": "InstructionsBtn", "skin": "asset/game/窗口底板.png", "sizeGrid": "4,4,4,4", "left": 787, "height": 50 }, "child": [{ "type": "Label", "props": { "valign": "middle", "top": 0, "text": "?", "right": 0, "left": 0, "fontSize": 30, "color": "#ffffff", "bottom": 0, "align": "center" } }] }, { "type": "Image", "props": { "y": 653, "x": 680, "width": 279, "var": "monster", "skin": "asset/game/生存游戏怪物.png", "height": 181 } }, { "type": "ProgressBar", "props": { "y": 580, "width": 200, "var": "wallHP", "skin": "comp/血条.png", "sizeGrid": "4,4,4,4", "left": 700, "height": 20 }, "child": [{ "type": "Label", "props": { "y": -1, "x": 209, "width": 100, "var": "wallHpText", "text": "100", "height": 20, "fontSize": 20, "color": "#ffffff", "align": "left" } }] }, { "type": "ProgressBar", "props": { "y": 742, "width": 200, "var": "monsterHP", "skin": "comp/血条.png", "sizeGrid": "4,4,4,4", "left": 700, "height": 20 }, "child": [{ "type": "Label", "props": { "y": -1, "x": 209, "width": 100, "var": "monsterHptext", "text": "100", "height": 20, "fontSize": 20, "color": "#ffffff", "align": "left" } }] }, { "type": "Image", "props": { "y": 382, "x": 569, "width": 109, "skin": "asset/game/LV.png", "height": 49 }, "child": [{ "type": "Label", "props": { "y": -15, "x": 44, "var": "waterStorageTankLV", "valign": "middle", "text": "LV.0", "fontSize": 20, "color": "#ffffff", "bold": false, "align": "center" } }] }, { "type": "Image", "props": { "y": 361, "x": 1230, "width": 109, "skin": "asset/game/LV.png", "height": 49 }, "child": [{ "type": "Label", "props": { "y": -15, "x": 44, "var": "warehouseLV", "valign": "middle", "text": "LV.0", "fontSize": 20, "color": "#ffffff", "bold": false, "align": "center" } }] }, { "type": "Image", "props": { "y": 114, "x": 778, "width": 109, "skin": "asset/game/LV.png", "height": 49 }, "child": [{ "type": "Label", "props": { "y": -15, "x": 44, "var": "roomLV", "valign": "middle", "text": "LV.0", "fontSize": 20, "color": "#ffffff", "bold": false, "align": "center" } }] }, { "type": "Image", "props": { "y": 206, "x": 502, "width": 109, "skin": "asset/game/LV.png", "height": 49 }, "child": [{ "type": "Label", "props": { "y": -15, "x": 44, "var": "vegetableGardenLV", "valign": "middle", "text": "LV.0", "fontSize": 20, "color": "#ffffff", "bold": false, "align": "center" } }] }, { "type": "Image", "props": { "y": 555, "x": 1016, "width": 109, "skin": "asset/game/LV.png", "height": 49 }, "child": [{ "type": "Label", "props": { "y": -15, "x": 44, "var": "wallLV", "valign": "middle", "text": "LV.0", "fontSize": 20, "color": "#ffffff", "bold": false, "align": "center" } }] }] }, { "type": "Box", "props": { "width": 1145, "top": 6, "right": 20, "height": 30 }, "child": [{ "type": "Label", "props": { "width": 100, "top": 3, "text": "生存时间：", "left": 10, "height": 25, "fontSize": 20, "color": "#ffffff" } }, { "type": "Label", "props": { "width": 50, "top": 3, "text": "韭菜：", "right": 410, "height": 25, "fontSize": 20, "color": "#ffffff" } }, { "type": "Label", "props": { "width": 50, "top": 3, "text": "人口:", "right": 290, "height": 25, "fontSize": 20, "color": "#ffffff" } }, { "type": "Label", "props": { "width": 50, "top": 3, "text": "木头:", "right": 170, "height": 25, "fontSize": 20, "color": "#ffffff" } }, { "type": "Label", "props": { "width": 30, "top": 3, "text": "水:", "right": 70, "height": 25, "fontSize": 20, "color": "#ffffff" } }, { "type": "Label", "props": { "width": 70, "var": "leek", "top": 5, "right": 340, "height": 20, "fontSize": 18, "color": "#ffffff", "align": "center" } }, { "type": "Label", "props": { "width": 70, "var": "population", "top": 5, "right": 220, "height": 20, "fontSize": 18, "color": "#ffffff", "align": "center" } }, { "type": "Label", "props": { "width": 70, "var": "wood", "top": 5, "right": 100, "height": 20, "fontSize": 18, "color": "#ffffff", "align": "center" } }, { "type": "Label", "props": { "width": 70, "var": "water", "top": 5, "right": 0, "height": 20, "fontSize": 18, "color": "#ffffff", "align": "center" } }, { "type": "Label", "props": { "width": 40, "var": "myDay", "top": 5, "left": 100, "height": 20, "fontSize": 18, "color": "#ffffff", "align": "center" } }, { "type": "Label", "props": { "top": 3, "text": "明日降雨率：", "left": 310, "height": 25, "fontSize": 20, "color": "#ffffff", "align": "center" } }, { "type": "Label", "props": { "width": 40, "var": "rain", "top": 5, "left": 430, "height": 20, "fontSize": 18, "color": "#ffffff", "align": "center" } }, { "type": "Label", "props": { "y": 10, "width": 80, "top": 3, "text": "行动力：", "left": 165, "height": 25, "fontSize": 20, "color": "#ffffff" } }, { "type": "Label", "props": { "width": 40, "var": "actionPower", "top": 5, "left": 240, "height": 20, "fontSize": 18, "color": "#ffffff", "align": "center" } }] }, { "type": "Image", "props": { "var": "pass", "top": 0, "skin": "asset/game/black.png", "right": 0, "left": 0, "bottom": 0, "alpha": 0 } }, { "type": "Image", "props": { "y": 0, "x": 0, "width": 1400, "var": "warning", "skin": "asset/game/红色警戒.png", "height": 800, "alpha": 0 } }, { "type": "Box", "props": { "visible": false, "var": "loading", "top": 0, "right": 0, "left": 0, "bottom": 0 }, "child": [{ "type": "Image", "props": { "x": 0, "top": 0, "skin": "asset/game/black.png", "right": 0, "left": 0, "bottom": 0, "alpha": 0.6 } }, { "type": "Label", "props": { "y": 0, "x": 0, "valign": "middle", "top": 0, "text": "正在获取区块链数据...", "right": 0, "left": 0, "fontSize": 40, "color": "#ffffff", "bottom": 0, "align": "center" } }] }] };
                return hallUI;
            }(View));
            Hall.hallUI = hallUI;
        })(Hall = ui.Hall || (ui.Hall = {}));
    })(ui = SCUI.ui || (SCUI.ui = {}));
})(SCUI || (SCUI = {}));
var SCUI;
(function (SCUI) {
    var ui;
    (function (ui) {
        var Hall;
        (function (Hall) {
            var ProcessViewUI = (function (_super) {
                __extends(ProcessViewUI, _super);
                function ProcessViewUI() {
                    _super.call(this);
                }
                ProcessViewUI.prototype.createChildren = function () {
                    _super.prototype.createChildren.call(this);
                    this.createView(SCUI.ui.Hall.ProcessViewUI.uiView);
                };
                ProcessViewUI.uiView = { "type": "View", "props": { "width": 1400, "height": 800 }, "child": [{ "type": "Image", "props": { "top": 0, "skin": "comp/blank.png", "right": 0, "left": 0, "bottom": 0 }, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "top": 0, "skin": "comp/blank.png", "right": 0, "left": 0, "bottom": 0 } }] }, { "type": "Image", "props": { "top": 200, "skin": "asset/game/窗口底板.png", "right": 300, "left": 300, "bottom": 200 } }, { "type": "Button", "props": { "width": 240, "var": "cnBtn", "skin": "comp/按钮.png", "left": 400, "labelSize": 48, "labelColors": "#ffffff,#ff0000,#ff0000", "label": "简体中文", "height": 100, "centerY": 0 } }, { "type": "Button", "props": { "width": 240, "var": "enBtn", "skin": "comp/按钮.png", "right": 400, "labelSize": 48, "labelColors": "#ffffff,#ff0000,#ff0000", "label": "English", "height": 100, "centerY": 0 } }] };
                return ProcessViewUI;
            }(View));
            Hall.ProcessViewUI = ProcessViewUI;
        })(Hall = ui.Hall || (ui.Hall = {}));
    })(ui = SCUI.ui || (SCUI.ui = {}));
})(SCUI || (SCUI = {}));
var SCUI;
(function (SCUI) {
    var ui;
    (function (ui) {
        var Login;
        (function (Login) {
            var loginUI = (function (_super) {
                __extends(loginUI, _super);
                function loginUI() {
                    _super.call(this);
                }
                loginUI.prototype.createChildren = function () {
                    _super.prototype.createChildren.call(this);
                    this.createView(SCUI.ui.Login.loginUI.uiView);
                };
                loginUI.uiView = { "type": "View", "props": { "width": 1400, "height": 800 }, "child": [{ "type": "Image", "props": { "y": -100, "x": 0, "width": 1400, "top": -100, "skin": "asset/game/生存游戏标题.png", "left": 0, "height": 984 } }, { "type": "Button", "props": { "y": 478, "x": 552, "width": 314, "var": "loginBtn", "skin": "comp/start.png", "height": 145 } }, { "type": "TextInput", "props": { "y": 706, "width": 500, "var": "address", "skin": "comp/textinput.png", "sizeGrid": "3,3,3,3", "promptColor": "#000000", "height": 46, "fontSize": 20, "color": "#000000", "centerX": 0.5 } }, { "type": "Label", "props": { "y": 650, "x": 452, "width": 609, "text": "输入你的钱包地址用于创建你的区块链游戏账户\\n(Enter your wallet address to create blockchain game account):", "leading": 5, "height": 54, "fontSize": 20, "color": "#ffffff" } }] };
                return loginUI;
            }(View));
            Login.loginUI = loginUI;
        })(Login = ui.Login || (ui.Login = {}));
    })(ui = SCUI.ui || (SCUI.ui = {}));
})(SCUI || (SCUI = {}));
var SCUI;
(function (SCUI) {
    var ui;
    (function (ui) {
        var Popup;
        (function (Popup) {
            var airdropUI = (function (_super) {
                __extends(airdropUI, _super);
                function airdropUI() {
                    _super.call(this);
                }
                airdropUI.prototype.createChildren = function () {
                    _super.prototype.createChildren.call(this);
                    this.createView(SCUI.ui.Popup.airdropUI.uiView);
                };
                airdropUI.uiView = { "type": "View", "props": { "width": 1400, "height": 800 }, "child": [{ "type": "Box", "props": { "y": 10, "x": 10, "width": 600, "height": 324, "centerY": 0.5, "centerX": 0.5 }, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "top": 0, "skin": "asset/game/窗口底板.png", "sizeGrid": "4,4,4,4", "right": 0, "left": 0, "bottom": 0 } }, { "type": "Button", "props": { "width": 90, "var": "resources", "top": 150, "skin": "comp/按钮.png", "sizeGrid": "4,4,4,4", "right": 40, "labelSize": 20, "labelColors": "#ffffff,#ff0000,#ff0000", "labelBold": true, "label": "资源", "height": 35 } }, { "type": "Button", "props": { "width": 90, "var": "support", "top": 220, "skin": "comp/按钮.png", "sizeGrid": "4,4,4,4", "right": 40, "labelSize": 20, "labelColors": "#ffffff,#ff0000,#ff0000", "labelBold": true, "label": "支援", "height": 35 } }, { "type": "Image", "props": { "y": 15, "x": 662, "var": "closeBtn", "top": 15, "skin": "asset/game/关闭.png", "right": 15 } }, { "type": "Label", "props": { "x": 0, "top": 40, "text": "空投", "right": 0, "left": 0, "fontSize": 40, "color": "#ffffff", "bottom": 235, "bold": true, "align": "center" } }, { "type": "Label", "props": { "wordWrap": true, "width": 418, "top": 156, "text": "获得资源包(内含3份韭菜，5份水，6份木头)", "left": 30, "height": 20, "fontSize": 20, "color": "#ffffff", "align": "center" } }, { "type": "Label", "props": { "wordWrap": true, "width": 418, "top": 231, "text": "减少怪物1点生命值", "left": 30, "height": 20, "fontSize": 20, "color": "#ffffff", "align": "center" } }, { "type": "Label", "props": { "y": 10, "x": 10, "top": 90, "text": "消耗1点行动力", "right": 0, "left": 0, "fontSize": 20, "color": "#ffffff", "bottom": 210, "align": "center" } }] }] };
                return airdropUI;
            }(View));
            Popup.airdropUI = airdropUI;
        })(Popup = ui.Popup || (ui.Popup = {}));
    })(ui = SCUI.ui || (SCUI.ui = {}));
})(SCUI || (SCUI = {}));
var SCUI;
(function (SCUI) {
    var ui;
    (function (ui) {
        var Popup;
        (function (Popup) {
            var commandUI = (function (_super) {
                __extends(commandUI, _super);
                function commandUI() {
                    _super.call(this);
                }
                commandUI.prototype.createChildren = function () {
                    _super.prototype.createChildren.call(this);
                    this.createView(SCUI.ui.Popup.commandUI.uiView);
                };
                commandUI.uiView = { "type": "View", "props": { "width": 1400, "height": 800 }, "child": [{ "type": "Box", "props": { "width": 543, "height": 193, "centerY": 0.5, "centerX": 0.5 }, "child": [{ "type": "Image", "props": { "y": -304, "x": -429, "top": 0, "skin": "asset/game/窗口底板.png", "sizeGrid": "3,3,3,3", "right": 0, "left": 0, "bottom": 0 } }, { "type": "Label", "props": { "y": -284, "x": -409, "top": 20, "text": "行动", "right": 20, "left": 20, "fontSize": 30, "color": "#ffffff", "bottom": 140, "bold": true, "align": "center" } }, { "type": "Label", "props": { "wordWrap": true, "var": "free", "top": 80, "text": "该居民目前处于空闲状态，选择你要安排的工作。", "right": 0, "left": 0, "fontSize": 20, "color": "#ffffff", "bottom": 90, "bold": false, "align": "center" } }, { "type": "Label", "props": { "y": 80, "x": 0, "wordWrap": true, "var": "work", "top": 80, "text": "该居民目前处于站岗中。", "right": 0, "left": 0, "fontSize": 20, "color": "#ffffff", "bottom": 90, "bold": false, "align": "center" } }, { "type": "Button", "props": { "width": 90, "var": "dispatch", "skin": "comp/按钮.png", "sizeGrid": "4,4,4,4", "left": 120, "labelSize": 20, "labelColors": "#ffffff,#ff0000,#ff0000", "labelBold": true, "label": "派遣", "height": 35, "bottom": 30 } }, { "type": "Button", "props": { "width": 90, "var": "standguard", "skin": "comp/按钮.png", "sizeGrid": "4,4,4,4", "right": 120, "labelSize": 20, "labelColors": "#ffffff,#ff0000,#ff0000", "labelBold": true, "label": "站岗", "height": 35, "bottom": 30 } }, { "type": "Image", "props": { "y": -289, "x": 943, "var": "closeBtn", "top": 15, "skin": "asset/game/关闭.png", "right": 15 } }, { "type": "Button", "props": { "y": 10, "width": 90, "var": "withdraw", "skin": "comp/按钮.png", "sizeGrid": "4,4,4,4", "right": 225, "labelSize": 20, "labelColors": "#ffffff,#ff0000,#ff0000", "labelBold": true, "label": "撤回", "height": 35, "bottom": 30 } }] }] };
                return commandUI;
            }(View));
            Popup.commandUI = commandUI;
        })(Popup = ui.Popup || (ui.Popup = {}));
    })(ui = SCUI.ui || (SCUI.ui = {}));
})(SCUI || (SCUI = {}));
var SCUI;
(function (SCUI) {
    var ui;
    (function (ui) {
        var Popup;
        (function (Popup) {
            var emergenciesUI = (function (_super) {
                __extends(emergenciesUI, _super);
                function emergenciesUI() {
                    _super.call(this);
                }
                emergenciesUI.prototype.createChildren = function () {
                    _super.prototype.createChildren.call(this);
                    this.createView(SCUI.ui.Popup.emergenciesUI.uiView);
                };
                emergenciesUI.uiView = { "type": "View", "props": { "width": 1400, "height": 800 }, "child": [{ "type": "Box", "props": { "width": 543, "height": 242, "centerY": 0.5, "centerX": 0.5 }, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "top": 0, "skin": "asset/game/窗口底板.png", "sizeGrid": "3,3,3,3", "right": 0, "left": 0, "bottom": 0 } }, { "type": "Label", "props": { "y": 20, "x": 20, "top": 20, "text": "发起突发事件", "right": 20, "left": 20, "fontSize": 30, "color": "#ffffff", "bottom": 180, "bold": true, "align": "left" } }, { "type": "Label", "props": { "y": 120, "x": 45, "wordWrap": true, "top": 120, "text": "利好:所有玩家获得发起人1%-30%的物资,自身额外多获得10%", "right": 45, "left": 45, "fontSize": 15, "color": "#ffffff", "bottom": 105, "bold": false, "align": "center" } }, { "type": "Button", "props": { "y": 191, "x": 100, "width": 90, "var": "good", "skin": "comp/按钮.png", "sizeGrid": "4,4,4,4", "left": 100, "labelSize": 20, "labelColors": "#ffffff,#ff0000,#ff0000", "labelBold": true, "label": "利好", "height": 35, "bottom": 16 } }, { "type": "Button", "props": { "y": 191, "x": 353, "width": 90, "var": "bad", "skin": "comp/按钮.png", "sizeGrid": "4,4,4,4", "right": 100, "labelSize": 20, "labelColors": "#ffffff,#ff0000,#ff0000", "labelBold": true, "label": "利空", "height": 35, "bottom": 16 } }, { "type": "HSlider", "props": { "y": 90, "x": 80, "var": "slider", "value": 0.01, "tick": 0.01, "skin": "comp/滑条点.png", "showLabel": true, "right": 120, "min": 0.01, "max": 0.3, "left": 80, "height": 2, "allowClickBack": true } }, { "type": "Label", "props": { "y": 82, "x": 41, "width": 35, "top": 82, "text": "支付", "left": 41, "height": 16, "fontSize": 16, "color": "#ffffff" } }, { "type": "Label", "props": { "y": 82, "x": 472, "width": 35, "top": 82, "text": "QTUM", "left": 472, "height": 16, "fontSize": 16, "color": "#ffffff" } }, { "type": "Label", "props": { "y": 82, "x": 436, "width": 35, "var": "quota", "top": 82, "text": "0.01", "left": 436, "height": 16, "fontSize": 16, "color": "#ffffff" } }, { "type": "Image", "props": { "y": 15, "x": 515, "var": "closeBtn", "top": 15, "skin": "asset/game/关闭.png", "right": 15 } }, { "type": "Label", "props": { "y": 145, "x": 45, "wordWrap": true, "top": 145, "text": "利空:所有玩家损失发起人1%-30%的物资,自身额外多损失10%", "right": 45, "left": 45, "fontSize": 15, "color": "#ffffff", "bottom": 80, "bold": false, "align": "center" } }] }] };
                return emergenciesUI;
            }(View));
            Popup.emergenciesUI = emergenciesUI;
        })(Popup = ui.Popup || (ui.Popup = {}));
    })(ui = SCUI.ui || (SCUI.ui = {}));
})(SCUI || (SCUI = {}));
var SCUI;
(function (SCUI) {
    var ui;
    (function (ui) {
        var Popup;
        (function (Popup) {
            var instructionsUI = (function (_super) {
                __extends(instructionsUI, _super);
                function instructionsUI() {
                    _super.call(this);
                }
                instructionsUI.prototype.createChildren = function () {
                    _super.prototype.createChildren.call(this);
                    this.createView(SCUI.ui.Popup.instructionsUI.uiView);
                };
                instructionsUI.uiView = { "type": "View", "props": { "width": 1400, "height": 800 }, "child": [{ "type": "Box", "props": { "top": 150, "right": 200, "left": 200, "bottom": 150 }, "child": [{ "type": "Image", "props": { "top": 0, "skin": "asset/game/窗口底板.png", "right": 0, "left": 0, "bottom": 0 } }, { "type": "Image", "props": { "y": -85, "x": 1272, "var": "closeBtn", "top": 15, "skin": "asset/game/关闭.png", "right": 15 } }, { "type": "Label", "props": { "valign": "middle", "top": 50, "text": "游戏说明", "right": 0, "left": 0, "fontSize": 50, "color": "#ffffff", "align": "center" } }, { "type": "Label", "props": { "y": 130, "wordWrap": true, "width": 850, "var": "instructions1", "text": "1、怪物攻破城墙会导致游戏结束。", "right": 75, "left": 75, "height": 35, "fontSize": 30, "color": "#ffffff", "align": "left" } }, { "type": "Label", "props": { "y": 180, "wordWrap": true, "width": 850, "var": "instructions2", "text": "2、韭菜和水不满足人口需求会导致游戏结束。", "right": 75, "left": 75, "height": 35, "fontSize": 30, "color": "#ffffff", "align": "left" } }, { "type": "Label", "props": { "y": 230, "wordWrap": true, "width": 850, "var": "instructions3", "text": "3、每个人每天需要1个韭菜和水。", "right": 75, "left": 75, "height": 35, "fontSize": 30, "color": "#ffffff", "align": "left" } }, { "type": "Label", "props": { "y": 280, "wordWrap": true, "width": 850, "var": "instructions4", "text": "4、你可以升级建筑。", "right": 75, "left": 75, "height": 35, "fontSize": 30, "color": "#ffffff", "align": "left" } }, { "type": "Label", "props": { "y": 330, "wordWrap": true, "width": 850, "var": "instructions5", "text": "5、可以安排人员外出去探险。", "right": 75, "left": 75, "height": 35, "fontSize": 30, "color": "#ffffff", "align": "left" } }, { "type": "Label", "props": { "y": 380, "wordWrap": true, "width": 850, "var": "instructions6", "text": "6、可以安排人员站岗，每天每个人可以击杀怪物1点血。", "right": 75, "left": 75, "height": 35, "fontSize": 30, "color": "#ffffff", "align": "left" } }] }] };
                return instructionsUI;
            }(View));
            Popup.instructionsUI = instructionsUI;
        })(Popup = ui.Popup || (ui.Popup = {}));
    })(ui = SCUI.ui || (SCUI.ui = {}));
})(SCUI || (SCUI = {}));
var SCUI;
(function (SCUI) {
    var ui;
    (function (ui) {
        var Popup;
        (function (Popup) {
            var menuUI = (function (_super) {
                __extends(menuUI, _super);
                function menuUI() {
                    _super.call(this);
                }
                menuUI.prototype.createChildren = function () {
                    _super.prototype.createChildren.call(this);
                    this.createView(SCUI.ui.Popup.menuUI.uiView);
                };
                menuUI.uiView = { "type": "View", "props": { "width": 224, "left": 0, "height": 800 }, "child": [{ "type": "Image", "props": { "x": 0, "top": 0, "skin": "asset/game/菜单底板.png", "left": 0, "bottom": 0 } }, { "type": "Image", "props": { "top": 100, "skin": "asset/game/居民.png", "sizeGrid": "4,4,4,4", "right": 10, "left": 10, "bottom": 280 } }, { "type": "Box", "props": { "visible": false, "var": "buildingInfo", "top": 100, "right": 0, "left": 0, "bottom": 280 }, "child": [{ "type": "Label", "props": { "x": 0, "var": "buildingName", "top": 20, "right": 0, "left": 0, "height": 28, "fontSize": 28, "color": "#ffffff", "align": "center" } }, { "type": "Label", "props": { "x": 0, "var": "buildingGrade", "top": 60, "right": 0, "left": 0, "height": 20, "fontSize": 20, "color": "#00ff00", "align": "center" } }, { "type": "Label", "props": { "x": 20, "wordWrap": true, "width": 210, "var": "buildingExplain", "top": 100, "right": 20, "left": 20, "height": 106, "fontSize": 16, "color": "#ffffff", "bottom": 180, "align": "left" } }, { "type": "Label", "props": { "x": 20, "top": 250, "text": "目标建筑升级所需条件:", "right": 20, "left": 20, "height": 20, "fontSize": 18, "color": "#ff0501", "align": "left" } }, { "type": "Label", "props": { "x": 20, "var": "buildingCondition", "top": 280, "right": 20, "left": 20, "height": 20, "fontSize": 20, "color": "#ffffff", "align": "center" } }, { "type": "Button", "props": { "y": 320, "x": 68, "width": 90, "var": "plusBtn", "skin": "comp/按钮.png", "sizeGrid": "4,4,4,4", "labelSize": 20, "labelColors": "#ffffff,#ff0000,#ff0000", "labelBold": true, "label": "升级", "height": 35, "centerX": 0.5, "bottom": 65 } }, { "type": "Button", "props": { "y": 370, "x": 68, "width": 90, "visible": false, "var": "funBtn", "skin": "comp/按钮.png", "sizeGrid": "4,4,4,4", "labelSize": 20, "labelColors": "#ffffff,#ff0000,#ff0000", "labelBold": true, "height": 35, "centerX": 0.5, "bottom": 15 } }] }, { "type": "Box", "props": { "top": 530, "right": 0, "left": 0, "bottom": 0 }, "child": [{ "type": "Clip", "props": { "x": 10, "var": "C5", "top": 155, "skin": "comp/选中改.png", "sizeGrid": "2,2,2,2", "right": 10, "left": 10, "height": 45, "clipY": 2 }, "child": [{ "type": "Label", "props": { "y": -210, "x": 0, "valign": "middle", "top": 0, "text": "搜救", "right": 10, "left": 10, "fontSize": 24, "color": "#ffffff", "bottom": 0, "bold": true, "align": "left" } }] }, { "type": "Clip", "props": { "x": 10, "var": "C4", "top": 105, "skin": "comp/选中改.png", "sizeGrid": "2,2,2,2", "right": 10, "left": 10, "height": 45, "clipY": 2 }, "child": [{ "type": "Label", "props": { "y": -110, "x": 0, "valign": "middle", "top": 0, "text": "空投", "right": 10, "left": 10, "fontSize": 24, "color": "#ffffff", "bottom": 0, "bold": true, "align": "left" } }] }, { "type": "Clip", "props": { "x": 10, "var": "C3", "top": 55, "skin": "comp/选中改.png", "sizeGrid": "2,2,2,2", "right": 10, "left": 10, "height": 45, "clipY": 2 }, "child": [{ "type": "Label", "props": { "y": -50, "x": 10, "valign": "middle", "top": 0, "text": "祈祷", "right": 10, "left": 10, "fontSize": 24, "color": "#ffffff", "bottom": 0, "bold": true, "align": "left" } }] }, { "type": "Clip", "props": { "x": 10, "var": "C1", "top": 5, "skin": "comp/选中改.png", "sizeGrid": "2,2,2,2", "right": 10, "left": 10, "height": 45, "clipY": 2 }, "child": [{ "type": "Label", "props": { "valign": "middle", "top": 0, "text": "我的居民", "right": 10, "left": 10, "fontSize": 24, "color": "#ffffff", "bottom": 0, "bold": true, "align": "left" } }] }, { "type": "Clip", "props": { "x": 30, "var": "C7", "top": 205, "skin": "comp/选中改.png", "sizeGrid": "2,2,2,2", "right": 10, "left": 10, "height": 45, "clipY": 2 }, "child": [{ "type": "Label", "props": { "y": -210, "x": 0, "valign": "middle", "top": 0, "text": "进入下一天", "right": 10, "left": 10, "fontSize": 24, "color": "#ffffff", "bottom": 0, "bold": true, "align": "left" } }] }] }, { "type": "Box", "props": { "x": 10, "visible": false, "var": "monsterInfo", "top": 100, "right": 0, "left": 0, "bottom": 280 }, "child": [{ "type": "Label", "props": { "x": 0, "top": 20, "right": 0, "left": 0, "height": 28, "fontSize": 28, "color": "#ffffff", "align": "center" } }, { "type": "Label", "props": { "x": 0, "var": "monsterHP", "top": 65, "right": 0, "left": 0, "height": 20, "fontSize": 20, "color": "#00ff00", "align": "center" } }, { "type": "Label", "props": { "x": 0, "var": "monsterATK", "top": 100, "right": 0, "left": 0, "height": 20, "fontSize": 20, "color": "#ffff00", "align": "center" } }, { "type": "Label", "props": { "x": 20, "wordWrap": true, "width": 210, "var": "monsterExplain", "top": 140, "right": 20, "left": 20, "height": 106, "fontSize": 16, "color": "#ffffff", "bottom": 15, "align": "left" } }] }, { "type": "Box", "props": { "var": "rankingInfo", "top": 0, "right": 0, "left": 0, "bottom": 720 }, "child": [{ "type": "Label", "props": { "y": 7, "wordWrap": true, "width": 140, "valign": "middle", "text": "最大生存天数:", "left": 30, "height": 89, "fontSize": 20, "color": "#ff7a00" } }, { "type": "Label", "props": { "var": "maxBornTime", "top": 42, "text": "0", "right": 10, "left": 170, "fontSize": 20, "color": "#ff7a00" } }] }] };
                return menuUI;
            }(View));
            Popup.menuUI = menuUI;
        })(Popup = ui.Popup || (ui.Popup = {}));
    })(ui = SCUI.ui || (SCUI.ui = {}));
})(SCUI || (SCUI = {}));
var SCUI;
(function (SCUI) {
    var ui;
    (function (ui) {
        var Popup;
        (function (Popup) {
            var prayUI = (function (_super) {
                __extends(prayUI, _super);
                function prayUI() {
                    _super.call(this);
                }
                prayUI.prototype.createChildren = function () {
                    _super.prototype.createChildren.call(this);
                    this.createView(SCUI.ui.Popup.prayUI.uiView);
                };
                prayUI.uiView = { "type": "View", "props": { "width": 1400, "height": 800 }, "child": [{ "type": "Box", "props": { "width": 517, "height": 324, "centerY": 0.5, "centerX": 0.5 }, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "top": 0, "skin": "asset/game/窗口底板.png", "sizeGrid": "3,3,3,3", "right": 0, "left": 0, "bottom": 0 } }, { "type": "Button", "props": { "width": 90, "var": "rain", "top": 150, "skin": "comp/按钮.png", "sizeGrid": "4,4,4,4", "labelSize": 20, "labelColors": "#ffffff,#ff0000,#ff0000", "labelBold": true, "label": "降雨", "height": 35, "centerX": 0.5 } }, { "type": "Image", "props": { "y": 15, "x": 662, "var": "closeBtn", "top": 15, "skin": "asset/game/关闭.png", "right": 15 } }, { "type": "Label", "props": { "x": 0, "top": 35, "text": "祈祷", "right": 0, "left": 0, "fontSize": 40, "color": "#ffffff", "bottom": 240, "bold": true, "align": "center" } }, { "type": "Label", "props": { "x": 0, "top": 90, "text": "消耗1点行动力", "right": 0, "left": 0, "fontSize": 20, "color": "#ffffff", "bottom": 210, "align": "center" } }, { "type": "Label", "props": { "wordWrap": true, "top": 220, "text": "初始下雨几率为10%，祈祷可增加明天70%下雨几率，每一天固定增加5%下雨几率，一旦下雨，又会降低回10%。", "right": 40, "left": 40, "height": 52, "fontSize": 17, "color": "#ffffff", "bottom": 60, "align": "center" } }] }] };
                return prayUI;
            }(View));
            Popup.prayUI = prayUI;
        })(Popup = ui.Popup || (ui.Popup = {}));
    })(ui = SCUI.ui || (SCUI.ui = {}));
})(SCUI || (SCUI = {}));
var SCUI;
(function (SCUI) {
    var ui;
    (function (ui) {
        var Popup;
        (function (Popup) {
            var residentUI = (function (_super) {
                __extends(residentUI, _super);
                function residentUI() {
                    _super.call(this);
                }
                residentUI.prototype.createChildren = function () {
                    View.regComponent("ResidentRuntime", ResidentRuntime);
                    _super.prototype.createChildren.call(this);
                    this.createView(SCUI.ui.Popup.residentUI.uiView);
                };
                residentUI.uiView = { "type": "View", "props": { "width": 1400, "height": 800 }, "child": [{ "type": "Box", "props": { "width": 1071, "height": 600, "centerY": 0.5, "centerX": 0.5 }, "child": [{ "type": "Image", "props": { "top": 0, "skin": "asset/game/窗口底板.png", "right": 0, "left": 0, "bottom": 0 } }, { "type": "List", "props": { "y": 80, "x": 50, "var": "residentList", "vScrollBarSkin": "comp/拉条.png", "top": 80, "spaceY": 25, "spaceX": 25, "right": 40, "repeatX": 6, "left": 50, "bottom": 35 }, "child": [{ "type": "Box", "props": { "y": 0, "x": 0, "width": 138, "runtime": "ResidentRuntime", "renderType": "render", "height": 182 }, "child": [{ "type": "Clip", "props": { "y": 0, "x": 0, "top": 0, "skin": "asset/game/居民.png", "right": 0, "left": 0, "bottom": 0 } }, { "type": "Image", "props": { "y": 15, "x": 15, "top": 15, "skin": "asset/game/选中.png", "sizeGrid": "2,2,2,2", "right": 15, "name": "residentHead", "left": 15, "bottom": 60 } }, { "type": "Label", "props": { "x": 0, "text": "X号居民", "right": 0, "name": "residentName", "left": 0, "height": 24, "fontSize": 22, "color": "#ffffff", "bottom": 20, "bold": true, "align": "center" } }, { "type": "Label", "props": { "text": "空闲", "right": 0, "name": "residentState", "left": 2, "height": 25, "fontSize": 25, "color": "#ffffff", "bottom": 100, "bold": true, "align": "center" } }] }] }, { "type": "Label", "props": { "y": 15, "x": 20, "width": 184, "top": 15, "text": "我的居民状态", "left": 20, "height": 30, "fontSize": 30, "color": "#ffffff", "align": "left" } }, { "type": "Image", "props": { "y": 15, "x": 1043, "var": "closeBtn", "top": 15, "skin": "asset/game/关闭.png", "right": 15 } }] }] };
                return residentUI;
            }(View));
            Popup.residentUI = residentUI;
        })(Popup = ui.Popup || (ui.Popup = {}));
    })(ui = SCUI.ui || (SCUI.ui = {}));
})(SCUI || (SCUI = {}));
var SCUI;
(function (SCUI) {
    var ui;
    (function (ui) {
        var Popup;
        (function (Popup) {
            var threatUI = (function (_super) {
                __extends(threatUI, _super);
                function threatUI() {
                    _super.call(this);
                }
                threatUI.prototype.createChildren = function () {
                    _super.prototype.createChildren.call(this);
                    this.createView(SCUI.ui.Popup.threatUI.uiView);
                };
                threatUI.uiView = { "type": "View", "props": { "width": 50, "height": 50 }, "child": [{ "type": "Image", "props": { "var": "threatBtn", "top": 0, "skin": "asset/game/窗口底板.png", "sizeGrid": "4,4,4,4", "right": 0, "left": 0, "bottom": 0 }, "child": [{ "type": "Label", "props": { "valign": "middle", "top": 0, "text": "!", "right": 0, "left": 0, "fontSize": 30, "color": "#ffffff", "bottom": 0, "align": "center" } }] }] };
                return threatUI;
            }(View));
            Popup.threatUI = threatUI;
        })(Popup = ui.Popup || (ui.Popup = {}));
    })(ui = SCUI.ui || (SCUI.ui = {}));
})(SCUI || (SCUI = {}));
var SCUI;
(function (SCUI) {
    var ui;
    (function (ui) {
        var Popup;
        (function (Popup) {
            var tipsUI = (function (_super) {
                __extends(tipsUI, _super);
                function tipsUI() {
                    _super.call(this);
                }
                tipsUI.prototype.createChildren = function () {
                    _super.prototype.createChildren.call(this);
                    this.createView(SCUI.ui.Popup.tipsUI.uiView);
                };
                tipsUI.uiView = { "type": "View", "props": { "width": 1400, "height": 800 }, "child": [{ "type": "Box", "props": { "width": 543, "height": 193, "centerY": 0.5, "centerX": 0.5 }, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "top": 0, "skin": "asset/game/窗口底板.png", "sizeGrid": "3,3,3,3", "right": 0, "left": 0, "bottom": 0 } }, { "type": "Label", "props": { "y": 20, "x": 20, "top": 20, "text": "确认提示", "right": 20, "left": 20, "fontSize": 30, "color": "#ffffff", "bottom": 140, "bold": true, "align": "left" } }, { "type": "Label", "props": { "x": 45, "wordWrap": true, "var": "content", "top": 80, "right": 45, "left": 45, "fontSize": 16, "color": "#ffffff", "bottom": 60, "bold": false, "align": "left" } }, { "type": "Button", "props": { "y": 142, "x": 283, "width": 90, "var": "confirm", "skin": "comp/按钮.png", "sizeGrid": "4,4,4,4", "right": 170, "labelSize": 20, "labelColors": "#ffffff,#ff0000,#ff0000", "labelBold": true, "label": "确认", "height": 35, "bottom": 16 } }, { "type": "Button", "props": { "y": 142, "x": 413, "width": 90, "var": "cancel", "skin": "comp/按钮.png", "sizeGrid": "4,4,4,4", "right": 40, "labelSize": 20, "labelColors": "#ffffff,#ff0000,#ff0000", "labelBold": true, "label": "取消", "height": 35, "bottom": 16 } }, { "type": "Image", "props": { "y": 15, "x": 515, "var": "closeBtn", "top": 15, "skin": "asset/game/关闭.png", "right": 15 } }] }] };
                return tipsUI;
            }(View));
            Popup.tipsUI = tipsUI;
        })(Popup = ui.Popup || (ui.Popup = {}));
    })(ui = SCUI.ui || (SCUI.ui = {}));
})(SCUI || (SCUI = {}));
var SCUI;
(function (SCUI) {
    var ui;
    (function (ui) {
        var Popup;
        (function (Popup) {
            var warningUI = (function (_super) {
                __extends(warningUI, _super);
                function warningUI() {
                    _super.call(this);
                }
                warningUI.prototype.createChildren = function () {
                    _super.prototype.createChildren.call(this);
                    this.createView(SCUI.ui.Popup.warningUI.uiView);
                };
                warningUI.uiView = { "type": "View", "props": { "width": 1400, "height": 800 }, "child": [{ "type": "Box", "props": { "width": 400, "height": 250, "centerY": 0.5, "centerX": 0.5 }, "child": [{ "type": "Image", "props": { "y": -301, "x": -551, "top": 0, "skin": "asset/game/窗口底板.png", "sizeGrid": "3,3,3,3", "right": 0, "left": 0, "bottom": 0 } }, { "type": "Button", "props": { "width": 90, "var": "confirm", "skin": "comp/按钮.png", "sizeGrid": "4,4,4,4", "labelSize": 20, "labelColors": "#ffffff,#ff0000,#ff0000", "labelBold": true, "label": "确认", "height": 35, "centerX": 0.5, "bottom": 20 } }, { "type": "Label", "props": { "wordWrap": true, "var": "warn", "valign": "middle", "top": 40, "right": 40, "left": 40, "fontSize": 18, "color": "#ffffff", "bottom": 70, "align": "center" } }] }] };
                return warningUI;
            }(View));
            Popup.warningUI = warningUI;
        })(Popup = ui.Popup || (ui.Popup = {}));
    })(ui = SCUI.ui || (SCUI.ui = {}));
})(SCUI || (SCUI = {}));
var SWUI;
(function (SWUI) {
    var UIView = (function () {
        function UIView() {
        }
        UIView.UIData = [SCUI.ui.Hall.hallUI.uiView, SCUI.ui.Hall.ProcessViewUI.uiView, SCUI.ui.Login.loginUI.uiView, SCUI.ui.Popup.airdropUI.uiView, SCUI.ui.Popup.commandUI.uiView, SCUI.ui.Popup.emergenciesUI.uiView, SCUI.ui.Popup.instructionsUI.uiView, SCUI.ui.Popup.menuUI.uiView, SCUI.ui.Popup.prayUI.uiView, SCUI.ui.Popup.residentUI.uiView, SCUI.ui.Popup.threatUI.uiView, SCUI.ui.Popup.tipsUI.uiView, SCUI.ui.Popup.warningUI.uiView];
        return UIView;
    }());
    SWUI.UIView = UIView;
})(SWUI || (SWUI = {}));
var SWUI;
(function (SWUI) {
    var UIView = (function () {
        function UIView() {
        }
        UIView.UIData = [SCUI.ui.Hall.hallUI.uiView, SCUI.ui.Hall.ProcessViewUI.uiView, SCUI.ui.Login.loginUI.uiView, SCUI.ui.Popup.airdropUI.uiView, SCUI.ui.Popup.commandUI.uiView, SCUI.ui.Popup.emergenciesUI.uiView, SCUI.ui.Popup.instructionsUI.uiView, SCUI.ui.Popup.menuUI.uiView, SCUI.ui.Popup.prayUI.uiView, SCUI.ui.Popup.residentUI.uiView, SCUI.ui.Popup.threatUI.uiView, SCUI.ui.Popup.tipsUI.uiView, SCUI.ui.Popup.warningUI.uiView];
        return UIView;
    }());
    SWUI.UIView = UIView;
})(SWUI || (SWUI = {}));





var UIMenu = (function (_super) {
    __extends(UIMenu, _super);
    function UIMenu(ui) {
        _super.call(this);
        this.parentUI = ui;
        this.left = -224;
        this.bottom = 0;
        this.init();
    }
    UIMenu.prototype.init = function () {
        this.C1.add_CLICK(this.onC1, this);
        this.C1.add_MOUSEOVER(this.onMouseOver, this);
        this.C1.add_MOUSEOUT(this.onMouseOut, this);
        this.C2.add_CLICK(this.onC2, this);
        this.C2.add_MOUSEOVER(this.onMouseOver, this);
        this.C2.add_MOUSEOUT(this.onMouseOut, this);
        this.C3.add_CLICK(this.onC3, this);
        this.C3.add_MOUSEOVER(this.onMouseOver, this);
        this.C3.add_MOUSEOUT(this.onMouseOut, this);
        this.C4.add_CLICK(this.onC4, this);
        this.C4.add_MOUSEOVER(this.onMouseOver, this);
        this.C4.add_MOUSEOUT(this.onMouseOut, this);
        this.C5.add_CLICK(this.onC5, this);
        this.C5.add_MOUSEOVER(this.onMouseOver, this);
        this.C5.add_MOUSEOUT(this.onMouseOut, this);
        this.menuBack.add_CLICK(this.onClick, this);
    };
    UIMenu.prototype.onC1 = function (e) {
        this.parentUI.addResident();
    };
    UIMenu.prototype.onC2 = function (e) {
        this.parentUI.addPray();
    };
    UIMenu.prototype.onC3 = function (e) {
        this.parentUI.addAirdrop();
    };
    UIMenu.prototype.onC4 = function (e) {
        this.parentUI.addEmergencies();
    };
    UIMenu.prototype.onC5 = function (e) {
    };
    UIMenu.prototype.onMouseOver = function (e) {
        var clip = e.target;
        clip.index = 1;
    };
    UIMenu.prototype.onMouseOut = function (e) {
        var clip = e.target;
        clip.index = 0;
    };
    UIMenu.prototype.onClick = function (e) {
        if (this.left == -224) {
            this.left = 0;
        }
        else {
            this.left = -224;
        }
    };
    return UIMenu;
}(SCUI.ui.Popup.menuUI));
var LanguageManager = (function () {
    function LanguageManager() {
    }
    LanguageManager.init = function (onFun, thisArg) {
        LanguageManager.onFunInit = onFun;
        LanguageManager.thisArg = thisArg;
        var textUrl = Config.PREFIX_PATH + Config.LANGUAGE_TYPE[Config.curLanguageType] + "/defaultUI.json";
        var gameUrl = Config.PREFIX_PATH + Config.LANGUAGE_TYPE[Config.curLanguageType] + "/game.json";
        trace(textUrl);
        trace(gameUrl);
        loader.load([textUrl, gameUrl], Handler.create(LanguageManager, LanguageManager.onLoadComplete), null, Loader.TEXT);
    };
    LanguageManager.onLoadComplete = function () {
        var textStr = loader.getRes(Config.PREFIX_PATH + Config.LANGUAGE_TYPE[Config.curLanguageType] + "/defaultUI.json");
        var gameStr = loader.getRes(Config.PREFIX_PATH + Config.LANGUAGE_TYPE[Config.curLanguageType] + "/game.json");
        LanguageManager.textObj = JSON.parse(textStr);
        LanguageManager.gameObj = JSON.parse(gameStr);
        LanguageManager.replaceUIView();
    };
    LanguageManager.replaceUIView = function () {
        if (Config.curLanguageType == 0) {
            LanguageManager.onFunInit.apply(LanguageManager.thisArg);
            return;
        }
        if (!SWUI.UIView || !SWUI.UIView.UIData) {
            alert("没有解析UI");
            if (LanguageManager.onFunInit) {
                LanguageManager.onFunInit.apply(LanguageManager.thisArg);
            }
            return;
        }
        for (var i = 0; i < SWUI.UIView.UIData.length; i++) {
            LanguageManager.replaceViewData(SWUI.UIView.UIData[i]);
        }
        if (LanguageManager.onFunInit) {
            LanguageManager.onFunInit.apply(LanguageManager.thisArg);
        }
    };
    LanguageManager.replaceViewData = function (viewObj) {
        if (!viewObj.child)
            return;
        for (var i = 0; i < viewObj.child.length; i++) {
            var child = viewObj.child[i];
            if (child.type == "Button") {
                if (child.props.label && LanguageManager.textObj[child.props.label]) {
                    child.props.label = LanguageManager.textObj[child.props.label];
                }
                if (LanguageManager.picObj && LanguageManager.picObj.indexOf(child.props.skin) > -1) {
                    child.props.skin = SwitchLanguageVer.replaceFileUrl(Config.curLanguageType, child.props.skin);
                }
            }
            else if (child.type == "Label") {
                if (child.props.text && LanguageManager.textObj[child.props.text]) {
                    child.props.text = LanguageManager.textObj[child.props.text];
                }
            }
            else if (child.type == "TextInput") {
                if (child.props.prompt && LanguageManager.textObj[child.props.prompt]) {
                    child.props.prompt = LanguageManager.textObj[child.props.prompt];
                }
            }
            else if (child.type == "Clip" || child.type == "Image") {
                if (LanguageManager.picObj && LanguageManager.picObj.indexOf(child.props.skin) > -1) {
                    child.props.skin = SwitchLanguageVer.replaceFileUrl(Config.curLanguageType, child.props.skin);
                }
                if (child.child) {
                    LanguageManager.replaceViewData(child);
                }
            }
            else if (child.child) {
                LanguageManager.replaceViewData(child);
            }
        }
    };
    return LanguageManager;
}());
var LocalGameData = (function () {
    function LocalGameData() {
    }
    return LocalGameData;
}());
var Effect = (function () {
    function Effect() {
    }
    Effect.init = function (onFin) {
        loader.load(Effect.anis, onFin);
    };
    Effect.play = function (id) {
        var url = Effect.anis[id];
        var ani = new Clip(url);
        ani.clipX = 5;
        ani.clipY = 3;
        os.add_ENTERFRAME(function (ani) {
            ani.index += 1;
            if (ani.index >= ani.clipX * ani.clipY) {
                os.remove_ENTERFRAME(arguments.callee, this);
            }
        }, this, [ani]);
        return ani;
    };
    Effect.flash = function (sp) {
        var r = 1;
        var obj = {
            get a() {
                return r;
            },
            set a(v) {
                r = v;
                var redMat = [
                    v, 0, 0, 0, 0,
                    0, 1, 0, 0, 0,
                    0, 0, 1, 0, 0,
                    0, 0, 0, 1, 0,
                ];
                var redFilter = new ColorFilter(redMat);
                sp.filters = [redFilter];
            }
        };
        Tween.to(obj, { a: 5 }, 200, null, Handler.create(this, function () {
            Tween.to(obj, { a: 1 }, 200, null);
        }));
    };
    Effect.anis = [
        "asset/game/a1.png"
    ];
    return Effect;
}());





var ResidentRuntime = (function (_super) {
    __extends(ResidentRuntime, _super);
    function ResidentRuntime() {
        _super.call(this);
        ResidentRuntime.command = new UICommand();
        ResidentRuntime.lastData = new ResidentData();
        ResidentRuntime.lastData.residentIndex = -1;
        new Handler(this, this._init).delayRun(0);
    }
    ;
    ResidentRuntime.prototype._init = function () {
        this.warn = new UIWarning();
        this.initEvent();
    };
    ResidentRuntime.prototype.initEvent = function () {
        this.add_MOUSEOVER(this.onMouseOver, this);
        this.add_MOUSEOUT(this.onMouseOut, this);
        this.add_MOUSEDOWN(this.onMouseDown, this);
    };
    ResidentRuntime.prototype.onMouseOver = function (e) {
        if (this.data && !this.data.selected) {
        }
    };
    ResidentRuntime.prototype.onMouseOut = function (e) {
        if (this.data && !this.data.selected) {
        }
    };
    ResidentRuntime.prototype.onMouseDown = function (e) {
        return;
        if (!this.data)
            return;
        if (ResidentRuntime.lastData.residentIndex == this.data.residentIndex && new Date().getTime() - LogicManager.lastLockTime < 2000) {
            stage.addChild(this.warn);
            this.warn.setContent(LanguageManager.gameObj["prepareResidents"]);
            return;
        }
        ResidentRuntime.lastData = this.data;
        if (this.data.residentState == 1) {
            stage.addChild(this.warn);
            this.warn.setContent(LanguageManager.gameObj["busyResidents"]);
        }
        else if (this.data.residentState == 0) {
            ResidentRuntime.command.onOpen(this.data, 0);
        }
        else if (this.data.residentState == 2) {
            ResidentRuntime.command.onOpen(this.data, 1);
        }
        else if (this.data.residentState == 3) {
            stage.addChild(this.warn);
            this.warn.setContent(LanguageManager.gameObj["deadResidents"]);
        }
    };
    Object.defineProperty(ResidentRuntime.prototype, "mainComp", {
        get: function () {
            if (this._mainComp)
                return this._mainComp;
            if (this.parent == null) {
                return null;
            }
            this._mainComp = this.parent.parent;
            return this._mainComp;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ResidentRuntime.prototype, "dataList", {
        get: function () {
            return this.mainComp.array;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ResidentRuntime.prototype, "dataSource", {
        get: function () {
            return this.data;
        },
        set: function (v) {
            if (this.data != v) {
                if (this.data) {
                    this.data.remove_SELECTE_CHANGED(this.updateAppearance, this);
                }
                this.data = v;
                if (this.data) {
                    this.data.add_SELECTE_CHANGED(this.updateAppearance, this);
                }
                this.updateAppearance();
            }
        },
        enumerable: true,
        configurable: true
    });
    ResidentRuntime.prototype.updateAppearance = function (e) {
        if (e === void 0) { e = null; }
        if (this.data == null)
            return;
        if (this.residentName == null)
            this.residentName = this.getChildByName("residentName");
        if (this.residentState == null)
            this.residentState = this.getChildByName("residentState");
        this.residentName.text = LanguageManager.gameObj["numberResidents"];
        if (this.data.residentState == 0) {
            this.residentState.text = LanguageManager.gameObj["leisure"];
            this.residentState.color = "#00ff00";
        }
        else if (this.data.residentState == 1) {
            this.residentState.text = LanguageManager.gameObj["outing"];
            this.residentState.color = "#ffff00";
        }
        else if (this.data.residentState == 2) {
            this.residentState.text = LanguageManager.gameObj["standing"];
            this.residentState.color = "#00ffff";
        }
        else if (this.data.residentState == 3) {
            this.residentState.text = LanguageManager.gameObj["dead"];
            this.residentState.color = "#ff0000";
        }
    };
    ResidentRuntime.prototype.add_DATACHANGE = function (onHappen, thisPtr, args) {
        if (args === void 0) { args = null; }
        this.on(UIEventObject.DATA_CHANGE, thisPtr, onHappen, args);
    };
    ;
    ResidentRuntime.prototype.remove_DATACHANGE = function (onHappen, thisPtr) {
        this.off(UIEventObject.DATA_CHANGE, thisPtr, onHappen);
    };
    ;
    ResidentRuntime.prototype.happen_DATACHANGE = function (data) {
        if (data === void 0) { data = null; }
        this.event(UIEventObject.DATA_CHANGE, data);
    };
    ;
    ResidentRuntime.prototype.destroy = function () {
        _super.prototype.destroy.call(this);
        if (this.data && this.data.has_SELECTE_CHANGED()) {
            this.data.remove_SELECTE_CHANGED(this.updateAppearance, this);
        }
    };
    return ResidentRuntime;
}(Box));
var SwitchLanguageVer = (function () {
    function SwitchLanguageVer() {
    }
    SwitchLanguageVer.replaceFileUrl = function (version, url) {
        if (version == ConstLanguageType.CN_TYPE) {
            return url;
        }
        else {
            var lastIndex = url.lastIndexOf("/");
            if (lastIndex == -1) {
                return url;
            }
            var preStr = url.slice(0, lastIndex);
            var lastStr = url.slice(lastIndex, url.length);
            return preStr + "/" + ConstLanguageType.LANGUAGE_TYPE[version] + lastStr;
        }
    };
    return SwitchLanguageVer;
}());





var Resident = (function (_super) {
    __extends(Resident, _super);
    function Resident() {
        _super.call(this);
        this.skin = "asset/game/cat.png";
        this.width = this.height = 50;
        this.bullet = new UIImage("asset/game/cat.png");
        this.bullet.width = this.bullet.height = 10;
        this.addChild(this.bullet);
        this.init();
        timer.frameLoop(1, this, this.shoot);
    }
    Resident.prototype.init = function () {
        this.bullet.x = 25;
        this.bullet.y = 25;
    };
    Resident.prototype.shoot = function () {
        if (this.x > 600) {
            this.bullet.x -= (this.x - 500) / 15;
        }
        else if (this.x < 600) {
            this.bullet.x += (500 - this.x) / 15;
        }
        this.bullet.y += 10;
        if (this.bullet.y >= 180) {
            this.init();
        }
    };
    return Resident;
}(UIImage));





var Rain = (function (_super) {
    __extends(Rain, _super);
    function Rain() {
        _super.call(this);
        this.skin = "asset/game/rain.png";
        this.init();
        timer.loop(1, this, this.move);
    }
    Rain.prototype.init = function () {
        this.x = Math.random() * 1150 + 350;
        this.y = (Math.random() * 30 + 30) * -1;
        this.speed = Math.random() * 30 + 30;
        this.rotation = 15;
    };
    Rain.prototype.move = function () {
        if (!LocalGameData.isRain) {
            this.init();
            return;
        }
        this.y += this.speed;
        this.x -= 5;
        if (this.y >= 800) {
            this.init();
        }
    };
    return Rain;
}(UIImage));
var LGBlockChain = (function () {
    function LGBlockChain() {
    }
    LGBlockChain.init = function () {
        if (LGBlockChain.realBlockChain) {
            OperaBlockChain.init();
        }
        else {
            BlockChain.init();
        }
    };
    LGBlockChain.getData = function (funcName, params, onFin) {
        if (LGBlockChain.realBlockChain) {
            if (BlockChainDB[funcName]) {
                var returns = BlockChainDB[funcName].apply(BlockChainDB, params);
                setTimeout(function (onFin, returns) {
                    onFin.runWith(returns);
                }, 1000, onFin, returns);
            }
        }
        else {
            var returns = BlockChain[funcName].apply(BlockChain, params);
            setTimeout(function (onFin, returns) {
                onFin.runWith(returns);
            }, 1000, onFin, returns);
        }
    };
    LGBlockChain.setData = function (funName, params, onFin) {
        if (onFin === void 0) { onFin = null; }
        if (LGBlockChain.realBlockChain) {
            var callback = function () {
                onFin && onFin.runWith(arguments);
            };
            BlockChainDB.setBlockChain(funName, callback, params);
        }
        else {
            BlockChain[funName].apply(BlockChain, params);
            onFin && onFin.runWith(true);
        }
    };
    LGBlockChain.realBlockChain = true;
    return LGBlockChain;
}());
var Config = (function () {
    function Config() {
    }
    Config.curLanguageType = 1;
    Config.PREFIX_PATH = "asset/json/language/";
    Config.LANGUAGE_TYPE = { "0": "CN", "1": "EN" };
    return Config;
}());
var LogicManager = (function () {
    function LogicManager() {
        this.login = new UILogin(this);
        this.processImg = new UIImage("asset/game/black.png");
        this.processImg.alpha = 0;
        this.processImg.top = this.processImg.bottom = this.processImg.left = this.processImg.right = 0;
        this.addLogin();
    }
    LogicManager.prototype.addLogin = function () {
        stage.removeChildren();
        stage.addChild(this.login);
        stage.addChild(this.processImg);
    };
    LogicManager.prototype.addProcess = function () {
        if (LogicManager.isSelectedLanguage) {
            this.addHall();
        }
        else {
            this.process = new UIProcess(this);
            stage.addChild(this.process);
        }
    };
    LogicManager.prototype.addHall = function () {
        Tween.to(this.processImg, { alpha: 1 }, 1000, Ease.strongOut, Handler.create(this, function () {
            stage.removeChildren();
            this.hall = new UIHall(this);
            Tween.to(this.processImg, { alpha: 0 }, 1000, Ease.strongIn, Handler.create(this, function () {
                stage.addChild(this.hall);
            }));
        }));
    };
    LogicManager.isSelectedLanguage = false;
    LogicManager.lastLockTime = 0;
    return LogicManager;
}());





var UIThreat = (function (_super) {
    __extends(UIThreat, _super);
    function UIThreat(uibox) {
        _super.call(this);
        this.parentBox = uibox;
        this.init();
    }
    UIThreat.prototype.init = function () {
        this.warn = new UIWarning();
        this.threatBtn.add_CLICK(this.onClick, this);
    };
    UIThreat.prototype.onClick = function () {
        this.parentBox.addChild(this.warn);
    };
    UIThreat.prototype.setThreat = function (str) {
        this.warn.setContent(str);
    };
    return UIThreat;
}(SCUI.ui.Popup.threatUI));





var UIInstructions = (function (_super) {
    __extends(UIInstructions, _super);
    function UIInstructions() {
        _super.call(this);
        this.init();
    }
    UIInstructions.prototype.init = function () {
        this.labelArr = [];
        this.labelArr.push(this.instructions1, this.instructions2, this.instructions3, this.instructions4, this.instructions5, this.instructions6);
        this.adjustPos();
        this.closeBtn.add_CLICK(this.onClose, this);
    };
    UIInstructions.prototype.adjustPos = function () {
        for (var i = 1; i < this.labelArr.length; i++) {
            var curLabel = this.labelArr[i];
            if (i == 2) {
                curLabel.y = this.labelArr[i - 1].y + 70 + 10;
            }
            else {
                curLabel.y = this.labelArr[i - 1].y + this.labelArr[i - 1].measureHeight + 10;
            }
        }
    };
    UIInstructions.prototype.onClose = function (e) {
        this.parent.removeChild(this);
    };
    return UIInstructions;
}(SCUI.ui.Popup.instructionsUI));





var UIResident = (function (_super) {
    __extends(UIResident, _super);
    function UIResident(uiBox) {
        _super.call(this);
        this.parentBox = uiBox;
        this.init();
    }
    UIResident.prototype.init = function () {
        this.residentList.array = [];
        this.closeBtn.add_CLICK(this.onClose, this);
    };
    UIResident.prototype.onOpen = function () {
        this.parentBox.addChild(this);
    };
    UIResident.prototype.onClose = function (e) {
        this.parentBox.removeChild(this);
    };
    return UIResident;
}(SCUI.ui.Popup.residentUI));





var UIPray = (function (_super) {
    __extends(UIPray, _super);
    function UIPray(uiBox) {
        _super.call(this);
        this.parentBox = uiBox;
        this.init();
    }
    UIPray.prototype.init = function () {
        this.tips = new UITips(this.parentBox, 1);
        this.closeBtn.add_CLICK(this.onClose, this);
        this.rain.add_CLICK(this.onRain, this);
    };
    UIPray.prototype.onRain = function (e) {
        this.parentBox.addChild(this.tips);
        this.tips.setStyle(LanguageManager.gameObj["rain"]);
        this.tips.setContent(LanguageManager.gameObj["isPray"]);
    };
    UIPray.prototype.onOpen = function () {
        this.parentBox.addChild(this);
    };
    UIPray.prototype.onClose = function (e) {
        this.parentBox.removeChild(this);
    };
    return UIPray;
}(SCUI.ui.Popup.prayUI));





var UILogin = (function (_super) {
    __extends(UILogin, _super);
    function UILogin(manager) {
        _super.call(this);
        this.manager = manager;
        this.warn = new UIWarning();
        UILogin.instance = this;
        this.init();
    }
    UILogin.prototype.init = function () {
        SoundManager.playMusic("asset/sound/Meanwhile in another Planet.mp3");
        this.loginBtn.add_CLICK(this.onClick, this);
    };
    UILogin.prototype.addWarn = function (str) {
        this.warn.setContent(str);
        stage.addChild(this.warn);
    };
    UILogin.prototype.onClick = function (e) {
        if (LGBlockChain.realBlockChain) {
            BlockChainDB.init();
            var _this_1 = this;
            OperaBlockChain.sendTips = function (str) {
                _this_1.addWarn(str);
            };
            var address = this.address.text;
            if (address != null && address != "") {
                BlockChainDB.loginGame(address, function () {
                    _this_1.warn.removeThis();
                    _this_1.manager.addProcess();
                });
            }
            else {
                this.addWarn("无效地址！！！\nInvalid address!!!");
            }
        }
        else {
            this.manager.addProcess();
        }
    };
    UILogin.prototype.closeWarn = function () {
        this.warn.removeThis();
    };
    UILogin.closeWarnUI = function () {
        if (UILogin.instance) {
            UILogin.instance.closeWarn();
        }
    };
    return UILogin;
}(SCUI.ui.Login.loginUI));





var UICommand = (function (_super) {
    __extends(UICommand, _super);
    function UICommand() {
        _super.call(this);
        this.init();
    }
    UICommand.prototype.init = function () {
        this.warn = new UIWarning();
        this.dispatch.add_CLICK(this.onDispatch, this);
        this.standguard.add_CLICK(this.onStandguard, this);
        this.withdraw.add_CLICK(this.onWithdraw, this);
        this.closeBtn.add_CLICK(this.onClose, this);
    };
    UICommand.prototype.onDispatch = function (e) {
        if (this.nowSelectResident.residentState != 0)
            return;
        LGBlockChain.setData("dispatch", []);
        this.onClose(null);
        LogicManager.lastLockTime = new Date().getTime();
    };
    UICommand.prototype.onStandguard = function (e) {
        LGBlockChain.setData("standguarding", []);
        this.onClose(null);
        LogicManager.lastLockTime = new Date().getTime();
    };
    UICommand.prototype.onWithdraw = function (e) {
        LGBlockChain.setData("withdraw", []);
        this.onClose(null);
        LogicManager.lastLockTime = new Date().getTime();
    };
    UICommand.prototype.onOpen = function (resident, mode) {
        if (mode == 0) {
            this.dispatch.visible = true;
            this.standguard.visible = true;
            this.withdraw.visible = false;
            this.free.visible = true;
            this.work.visible = false;
        }
        else if (mode == 1) {
            this.dispatch.visible = false;
            this.standguard.visible = false;
            this.withdraw.visible = true;
            this.free.visible = false;
            this.work.visible = true;
        }
        this.nowSelectResident = resident;
        stage.addChild(this);
    };
    UICommand.prototype.onClose = function (e) {
        stage.removeChild(this);
    };
    return UICommand;
}(SCUI.ui.Popup.commandUI));





var UIHall = (function (_super) {
    __extends(UIHall, _super);
    function UIHall(manager) {
        _super.call(this);
        this.nowSeclect = -1;
        this.manager = manager;
        this.instructions = new UIInstructions();
        this.resident = new UIResident(this.uiBox);
        this.pray = new UIPray(this.uiBox);
        this.airdrop = new UIAirdrop(this.uiBox);
        this.tips = new UITips(this.uiBox, 0, this);
        this.warn = new UIWarning(this.manager);
        this.threat = new UIThreat(this.uiBox);
        this.threat.right = this.threat.bottom = 20;
        if (LGBlockChain.realBlockChain) {
            this.addChild(this.warn);
            var _this = this;
            this.warn.setContent(LanguageManager.gameObj["initialization"]);
            this.warn.setFunBack(function () {
                _this.loading.visible = true;
                BlockChainDB.createPlayer(function () {
                    _this.init();
                    _this.loading.visible = false;
                });
            });
        }
        else {
            this.init();
        }
    }
    UIHall.prototype.init = function () {
        this.room.add_MOUSEOVER(this.addFilter, this);
        this.room.add_CLICK(this.onClick, this);
        this.vegetableGarden.add_MOUSEOVER(this.addFilter, this);
        this.vegetableGarden.add_CLICK(this.onClick, this);
        this.warehouse.add_MOUSEOVER(this.addFilter, this);
        this.warehouse.add_CLICK(this.onClick, this);
        this.waterStorageTank.add_MOUSEOVER(this.addFilter, this);
        this.waterStorageTank.add_CLICK(this.onClick, this);
        this.wall.add_MOUSEOVER(this.addFilter, this);
        this.wall.add_CLICK(this.onClick, this);
        this.passageway.add_MOUSEOVER(this.addFilter, this);
        this.passageway.add_CLICK(this.onClick, this);
        this.leftNull.add_MOUSEOVER(this.addFilter, this);
        this.leftNull.add_CLICK(this.onClick, this);
        this.leftMan.add_MOUSEOVER(this.addFilter, this);
        this.leftMan.add_CLICK(this.onClick, this);
        this.rightNull.add_MOUSEOVER(this.addFilter, this);
        this.rightNull.add_CLICK(this.onClick, this);
        this.rightMan.add_MOUSEOVER(this.addFilter, this);
        this.rightMan.add_CLICK(this.onClick, this);
        this.monster.add_MOUSEOVER(this.addFilter, this);
        this.monster.add_CLICK(this.onClick, this);
        this.eventBackBtn.add_CLICK(this.onClickEventBg, this);
        LGBlockChain.init();
        this.creatTimeout();
        this.menuInit();
        this.raining();
        timer.frameLoop(20, this, this.monsterAction);
        timer.frameLoop(100, this, this.standGuardAction);
        this.addChild(this.instructions);
    };
    UIHall.prototype.menuInit = function () {
        this.menu.C1.add_CLICK(this.onC1, this);
        this.menu.C1.add_MOUSEOVER(this.onMouseOver, this);
        this.menu.C1.add_MOUSEOUT(this.onMouseOut, this);
        this.menu.C3.add_CLICK(this.onC3, this);
        this.menu.C3.add_MOUSEOVER(this.onMouseOver, this);
        this.menu.C3.add_MOUSEOUT(this.onMouseOut, this);
        this.menu.C4.add_CLICK(this.onC4, this);
        this.menu.C4.add_MOUSEOVER(this.onMouseOver, this);
        this.menu.C4.add_MOUSEOUT(this.onMouseOut, this);
        this.menu.C5.add_CLICK(this.onC5, this);
        this.menu.C5.add_MOUSEOVER(this.onMouseOver, this);
        this.menu.C5.add_MOUSEOUT(this.onMouseOut, this);
        this.menu.C7.add_CLICK(this.onC7, this);
        this.menu.C7.add_MOUSEOVER(this.onMouseOver, this);
        this.menu.C7.add_MOUSEOUT(this.onMouseOut, this);
        this.menu.plusBtn.add_CLICK(this.onPlusBtn, this);
        this.menu.funBtn.add_CLICK(this.onFun, this);
        this.InstructionsBtn.add_CLICK(this.onOpenInstructions, this);
    };
    UIHall.prototype.raining = function () {
        for (var i = 0; i < 20; i++) {
            var img = new Rain();
            this.uiBox.addChild(img);
        }
    };
    UIHall.prototype.onOpenInstructions = function (e) {
        this.addChild(this.instructions);
    };
    UIHall.prototype.monsterAction = function () {
        if (this.monster.y < 675) {
            var random = Math.random() * 10;
            this.monster.y += random;
        }
        else {
            this.monster.y = 653;
        }
    };
    UIHall.prototype.standGuardAction = function () {
        if (LocalGameData.standGuard == 1) {
            var ani = Effect.play(0);
            ani.width = 75;
            ani.height = 75;
            ani.x = 100;
            ani.y = 75;
            this.standGuardBox.addChild(ani);
            Effect.flash(this.monster);
        }
        else if (LocalGameData.standGuard >= 2) {
            var ani = Effect.play(0);
            ani.width = 75;
            ani.height = 75;
            ani.x = 100;
            ani.y = 75;
            var ani2 = Effect.play(0);
            ani2.width = 75;
            ani2.height = 75;
            ani2.x = 855;
            ani2.y = 75;
            this.standGuardBox.addChild(ani);
            this.standGuardBox.addChild(ani2);
            Effect.flash(this.monster);
        }
    };
    UIHall.prototype.openPass = function () {
        Tween.to(this.pass, { alpha: 1 }, 1000, Ease.strongOut, Handler.create(this, function () {
            Tween.to(this.pass, { alpha: 0 }, 1000, Ease.strongIn, Handler.create(this, function () {
            }));
        }));
    };
    UIHall.prototype.updateStandGuard = function () {
        if (LocalGameData.standGuard == 0) {
            this.leftMan.visible = false;
            this.leftNull.visible = true;
            this.rightNull.visible = true;
            this.rightMan.visible = false;
        }
        else if (LocalGameData.standGuard == 1) {
            this.leftMan.visible = true;
            this.leftNull.visible = false;
            this.rightNull.visible = true;
            this.rightMan.visible = false;
        }
        else if (LocalGameData.standGuard >= 2) {
            this.leftMan.visible = true;
            this.leftNull.visible = false;
            this.rightNull.visible = false;
            this.rightMan.visible = true;
        }
    };
    UIHall.prototype.onC1 = function (e) {
        this.resident.onOpen();
    };
    UIHall.prototype.onC3 = function (e) {
        this.pray.onOpen();
    };
    UIHall.prototype.onC4 = function (e) {
        this.airdrop.onOpen();
    };
    UIHall.prototype.onC5 = function (e) {
        this.addChild(this.tips);
        this.tips.setStyle("搜救");
        this.tips.setContent(LanguageManager.gameObj["costAction"] + 2 + "点的行动力进行搜救？(有几率获得新的居民)");
    };
    UIHall.prototype.onC7 = function (e) {
        this.addChild(this.tips);
        this.tips.setStyle("下一天");
        this.tips.setContent("是否进入下一天？");
    };
    UIHall.prototype.onClickEventBg = function (e) {
        if (this.isBack) {
            this.isBack = false;
            this.eventBg.right = 0;
            this.eventBackText.text = ">>";
        }
        else {
            this.isBack = true;
            this.eventBg.right = -471;
            this.eventBackText.text = "<<";
        }
        e.stopPropagation();
    };
    UIHall.prototype.onMouseOver = function (e) {
        var clip = e.target;
        clip.index = 1;
    };
    UIHall.prototype.onMouseOut = function (e) {
        var clip = e.target;
        clip.index = 0;
    };
    UIHall.prototype.onClick = function (e) {
        if (e.target == this.vegetableGarden) {
            this.nowSeclect = 0;
        }
        else if (e.target == this.room) {
            this.nowSeclect = 1;
        }
        else if (e.target == this.waterStorageTank) {
            this.nowSeclect = 2;
        }
        else if (e.target == this.warehouse) {
            this.nowSeclect = 3;
        }
        else if (e.target == this.wall) {
            this.nowSeclect = 4;
        }
        else if (e.target == this.monster) {
            this.nowSeclect = 5;
        }
        else if (e.target == this.passageway) {
            this.nowSeclect = 6;
        }
        else if (e.target == this.leftNull || e.target == this.leftMan || e.target == this.rightNull || e.target == this.rightMan) {
            this.nowSeclect = 7;
        }
        if (this.nowSeclect != 5) {
            this.menu.buildingInfo.visible = true;
            this.menu.monsterInfo.visible = false;
        }
        else {
            this.menu.buildingInfo.visible = false;
            this.menu.monsterInfo.visible = true;
        }
        this.updateInfo();
    };
    UIHall.prototype.updateInfo = function () {
        if (this.nowSeclect == 0) {
            this.menu.buildingName.text = LanguageManager.gameObj["leekArea"];
            this.menu.buildingCondition.text = LanguageManager.gameObj["woodX"] + (2 + Math.floor(Number(LocalGameData.buildingGrade[this.nowSeclect]) / 2));
            this.menu.buildingExplain.text = LanguageManager.gameObj["leekTip"] + (1 + (Number(LocalGameData.buildingGrade[this.nowSeclect]))) + LanguageManager.gameObj["leekTip2"];
        }
        else if (this.nowSeclect == 1) {
            this.menu.buildingName.text = LanguageManager.gameObj["dorm"];
            this.menu.buildingCondition.text = LanguageManager.gameObj["woodX"] + (5 + Math.floor(Number(LocalGameData.buildingGrade[this.nowSeclect]) / 2));
            this.menu.buildingExplain.text = LanguageManager.gameObj["dormTip"];
        }
        else if (this.nowSeclect == 2) {
            this.menu.buildingName.text = LanguageManager.gameObj["waterPool"];
            this.menu.buildingCondition.text = LanguageManager.gameObj["woodX"] + (3 + Math.floor(Number(LocalGameData.buildingGrade[this.nowSeclect]) / 2));
            this.menu.buildingExplain.text = LanguageManager.gameObj["waterPoolTip"];
        }
        else if (this.nowSeclect == 3) {
            this.menu.buildingName.text = LanguageManager.gameObj["warehouse"];
            this.menu.buildingCondition.text = LanguageManager.gameObj["woodX"] + (5 + Math.floor(Number(LocalGameData.buildingGrade[this.nowSeclect]) / 2));
            this.menu.buildingExplain.text = LanguageManager.gameObj["warehouseTip"];
        }
        else if (this.nowSeclect == 4) {
            this.menu.funBtn.label = LanguageManager.gameObj["repair"];
            this.menu.buildingName.text = LanguageManager.gameObj["Gate"];
            this.menu.buildingCondition.text = LanguageManager.gameObj["woodX"] + (2 + Number(LocalGameData.buildingGrade[this.nowSeclect]));
            this.menu.buildingExplain.text = LanguageManager.gameObj["GateTip"];
        }
        else if (this.nowSeclect == 5) {
            this.menu.monsterExplain.text = LanguageManager.gameObj["monsterInfo"];
        }
        else if (this.nowSeclect == 6) {
            this.menu.buildingName.text = LanguageManager.gameObj["linkChannel"];
            this.menu.buildingCondition.text = LanguageManager.gameObj["notUpgrade"];
            ;
            this.menu.buildingExplain.text = LanguageManager.gameObj["channelTip"];
        }
        else if (this.nowSeclect == 7) {
            this.menu.buildingName.text = LanguageManager.gameObj["wallPost"];
            this.menu.buildingCondition.text = LanguageManager.gameObj["notUpgrade"];
            ;
            this.menu.buildingExplain.text = LanguageManager.gameObj["wallPostTip"];
        }
        var surplus = 0;
        if (this.nowSeclect == 6) {
            for (var i = 0; i < LocalGameData.residentList.length; i++) {
                if (LocalGameData.residentList[i].residentState == 0) {
                    surplus++;
                }
            }
            this.menu.buildingGrade.text = LanguageManager.gameObj["remainPeople"] + surplus + ")";
        }
        else if (this.nowSeclect == 7) {
            for (var i = 0; i < LocalGameData.residentList.length; i++) {
                if (LocalGameData.residentList[i].residentState == 2) {
                    surplus++;
                }
            }
            this.menu.buildingGrade.text = LanguageManager.gameObj["standingCount"] + surplus + ")";
        }
        else {
            this.menu.buildingGrade.text = "(LV." + LocalGameData.buildingGrade[this.nowSeclect] + LanguageManager.gameObj["level"];
        }
        this.waterStorageTankLV.text = "LV." + LocalGameData.buildingGrade[2];
        this.warehouseLV.text = "LV." + LocalGameData.buildingGrade[3];
        this.roomLV.text = "LV." + LocalGameData.buildingGrade[1];
        this.vegetableGardenLV.text = "LV." + LocalGameData.buildingGrade[0];
        this.wallLV.text = "LV." + LocalGameData.buildingGrade[4];
        this.updateBtn();
    };
    UIHall.prototype.updateBtn = function () {
        this.menu.funBtn.visible = false;
        switch (this.nowSeclect) {
            case 0:
                this.menu.plusBtn.label = LanguageManager.gameObj["levelUp"];
                if (Number(LocalGameData.wood[0]) >= (2 + Math.floor(Number(LocalGameData.buildingGrade[this.nowSeclect]) / 2))) {
                    this.menu.plusBtn.disabled = false;
                }
                else {
                    this.menu.plusBtn.disabled = true;
                }
                break;
            case 1:
                this.menu.plusBtn.label = LanguageManager.gameObj["levelUp"];
                if (Number(LocalGameData.wood[0]) >= (5 + Math.floor(Number(LocalGameData.buildingGrade[this.nowSeclect]) / 2))) {
                    this.menu.plusBtn.disabled = false;
                }
                else {
                    this.menu.plusBtn.disabled = true;
                }
                break;
            case 2:
                this.menu.plusBtn.label = LanguageManager.gameObj["levelUp"];
                if (Number(LocalGameData.wood[0]) >= (3 + Math.floor(Number(LocalGameData.buildingGrade[this.nowSeclect]) / 2))) {
                    this.menu.plusBtn.disabled = false;
                }
                else {
                    this.menu.plusBtn.disabled = true;
                }
                break;
            case 3:
                this.menu.plusBtn.label = LanguageManager.gameObj["levelUp"];
                if (Number(LocalGameData.wood[0]) >= (5 + Math.floor(Number(LocalGameData.buildingGrade[this.nowSeclect]) / 2))) {
                    this.menu.plusBtn.disabled = false;
                }
                else {
                    this.menu.plusBtn.disabled = true;
                }
                break;
            case 4:
                this.menu.plusBtn.label = LanguageManager.gameObj["levelUp"];
                this.menu.funBtn.label = LanguageManager.gameObj["repair"];
                this.menu.funBtn.visible = true;
                if (Number(LocalGameData.wood[0]) >= (2 + Number(LocalGameData.buildingGrade[this.nowSeclect]))) {
                    this.menu.plusBtn.disabled = false;
                }
                else {
                    this.menu.plusBtn.disabled = true;
                }
                if (Number(LocalGameData.wood[0]) >= Math.min((Number(LocalGameData.resistance[1]) - Math.floor(Number(LocalGameData.resistance[0]))) / 2, 10) && Math.min((Number(LocalGameData.resistance[1]) - Math.floor(Number(LocalGameData.resistance[0]))) / 2, 10) != 0) {
                    this.menu.funBtn.disabled = false;
                }
                else {
                    this.menu.funBtn.disabled = true;
                }
                break;
            case 6:
                this.menu.plusBtn.label = LanguageManager.gameObj["dispatch"];
                var surplus = 0;
                for (var i = 0; i < LocalGameData.residentList.length; i++) {
                    if (LocalGameData.residentList[i].residentState == 0) {
                        surplus++;
                    }
                }
                if (surplus == 0) {
                    this.menu.plusBtn.disabled = true;
                }
                else {
                    this.menu.plusBtn.disabled = false;
                }
                break;
            case 7:
                this.menu.plusBtn.label = LanguageManager.gameObj["stand"];
                ;
                this.menu.funBtn.label = LanguageManager.gameObj["recall"];
                this.menu.funBtn.visible = true;
                var surplus = 0;
                for (var i = 0; i < LocalGameData.residentList.length; i++) {
                    if (LocalGameData.residentList[i].residentState == 0) {
                        surplus++;
                    }
                }
                if (surplus == 0) {
                    this.menu.plusBtn.disabled = true;
                }
                else {
                    this.menu.plusBtn.disabled = false;
                }
                surplus = 0;
                for (var i = 0; i < LocalGameData.residentList.length; i++) {
                    if (LocalGameData.residentList[i].residentState == 2) {
                        surplus++;
                    }
                }
                if (surplus == 0) {
                    this.menu.funBtn.disabled = true;
                }
                else {
                    this.menu.funBtn.disabled = false;
                }
                break;
        }
    };
    UIHall.prototype.onPlusBtn = function (e) {
        switch (this.nowSeclect) {
            case -1:
                this.addChild(this.warn);
                this.warn.setContent(LanguageManager.gameObj["chooseBuilding"]);
                break;
            case 0:
                if (Number(LocalGameData.wood[0]) >= (2 + Math.floor(Number(LocalGameData.buildingGrade[this.nowSeclect]) / 2))) {
                    LGBlockChain.setData("upgrade", [0]);
                    var wood = Number(LocalGameData.wood[0]) - (2 + Math.floor(Number(LocalGameData.buildingGrade[this.nowSeclect]) / 2));
                    LocalGameData.wood[0] = String(wood);
                }
                else {
                    this.addChild(this.warn);
                    this.warn.setContent(LanguageManager.gameObj["upgradeWarn"]);
                }
                break;
            case 1:
                if (Number(LocalGameData.wood[0]) >= (5 + Math.floor(Number(LocalGameData.buildingGrade[this.nowSeclect]) / 2))) {
                    LGBlockChain.setData("upgrade", [1]);
                    var wood = Number(LocalGameData.wood[0]) - (5 + Math.floor(Number(LocalGameData.buildingGrade[this.nowSeclect]) / 2));
                    LocalGameData.wood[0] = String(wood);
                }
                else {
                    this.addChild(this.warn);
                    this.warn.setContent(LanguageManager.gameObj["upgradeWarn"]);
                }
                break;
            case 2:
                if (Number(LocalGameData.wood[0]) >= (3 + Math.floor(Number(LocalGameData.buildingGrade[this.nowSeclect]) / 2))) {
                    LGBlockChain.setData("upgrade", [2]);
                    var wood = Number(LocalGameData.wood[0]) - (3 + Math.floor(Number(LocalGameData.buildingGrade[this.nowSeclect]) / 2));
                    LocalGameData.wood[0] = String(wood);
                }
                else {
                    this.addChild(this.warn);
                    this.warn.setContent(LanguageManager.gameObj["upgradeWarn"]);
                }
                break;
            case 3:
                if (Number(LocalGameData.wood[0]) >= (5 + Math.floor(Number(LocalGameData.buildingGrade[this.nowSeclect]) / 2))) {
                    LGBlockChain.setData("upgrade", [3]);
                    var wood = Number(LocalGameData.wood[0]) - (5 + Math.floor(Number(LocalGameData.buildingGrade[this.nowSeclect]) / 2));
                    LocalGameData.wood[0] = String(wood);
                }
                else {
                    this.addChild(this.warn);
                    this.warn.setContent(LanguageManager.gameObj["upgradeWarn"]);
                }
                break;
            case 4:
                if (Number(LocalGameData.wood[0]) >= (2 + Number(LocalGameData.buildingGrade[this.nowSeclect]))) {
                    LGBlockChain.setData("upgrade", [4]);
                    var wood = Number(LocalGameData.wood[0]) - (2 + Number(LocalGameData.buildingGrade[this.nowSeclect]));
                    LocalGameData.wood[0] = String(wood);
                }
                else {
                    this.addChild(this.warn);
                    this.warn.setContent(LanguageManager.gameObj["upgradeWarn"]);
                }
                break;
            case 6:
                for (var i = 0; i < LocalGameData.residentList.length; i++) {
                    if (LocalGameData.residentList[i].residentState == 0) {
                        LGBlockChain.setData("dispatch", []);
                        break;
                    }
                }
                break;
            case 7:
                for (var i = 0; i < LocalGameData.residentList.length; i++) {
                    if (LocalGameData.residentList[i].residentState == 0) {
                        LGBlockChain.setData("standguarding", []);
                        break;
                    }
                }
                break;
        }
    };
    UIHall.prototype.onFun = function () {
        switch (this.nowSeclect) {
            case 4:
                this.addChild(this.tips);
                this.tips.setStyle(LanguageManager.gameObj["repair"]);
                this.tips.setContent(LanguageManager.gameObj["costAction"] + Math.min((Number(LocalGameData.resistance[1]) - Math.floor(Number(LocalGameData.resistance[0])) / 2, 10) + LanguageManager.gameObj["needWood"] + Math.min(Number(LocalGameData.resistance[1]) - Number(LocalGameData.resistance[0]), 20) + LanguageManager.gameObj["firmness"]));
                break;
            case 7:
                for (var i = 0; i < LocalGameData.residentList.length; i++) {
                    if (LocalGameData.residentList[i].residentState == 2) {
                        LGBlockChain.setData("withdraw", [LocalGameData.residentList[i].residentIndex - 1]);
                        break;
                    }
                }
                break;
        }
    };
    UIHall.prototype.creatTimeout = function () {
        var _this = this;
        var getIsGameOver;
        setTimeout(getIsGameOver = function () {
            LGBlockChain.getData("getIsGameOver", [], Handler.create(_this, function (isGameOver) {
                LocalGameData.isGameOver = isGameOver == 0 ? false : true;
                if (LocalGameData.isGameOver) {
                    _this.standGuardBox.removeChildren();
                    _this.addChild(_this.warn);
                    _this.warn.setContent(LanguageManager.gameObj["gameOver"]);
                    return;
                }
                setTimeout(getIsGameOver, 1000);
            }));
        }, 1000);
        getIsGameOver();
        var getMyDay;
        setTimeout(getMyDay = function () {
            LGBlockChain.getData("getMyDay", [], Handler.create(_this, function (myDay) {
                _this.myDay.text = myDay + LanguageManager.gameObj["day"];
                LocalGameData.myDay = myDay;
                setTimeout(getMyDay, 1000);
            }));
        }, 1000);
        getMyDay();
        var getActorAction;
        setTimeout(getActorAction = function () {
            LGBlockChain.getData("getActorAction", [], Handler.create(_this, function (actorData) {
                var residentArr = [];
                var actorActionArr = actorData.split(",");
                for (var i = 0; i < actorActionArr.length; i++) {
                    var residentData = new ResidentData();
                    residentData.residentIndex = i;
                    residentData.residentState = Number(actorActionArr[i]);
                    residentArr.push(residentData);
                }
                _this.resident.residentList.array = residentArr;
                LocalGameData.residentList = residentArr;
                if (LocalGameData.residentList.length <= 12) {
                    _this.resident.residentList.scrollBar.visible = false;
                }
                else {
                    _this.resident.residentList.scrollBar.visible = true;
                }
                setTimeout(getActorAction, 0);
            }));
        }, 0);
        getActorAction();
        var getActionPower;
        setTimeout(getActionPower = function () {
            LGBlockChain.getData("getActionPower", [], Handler.create(_this, function (actionPowerData) {
                var actionPowerArr = actionPowerData.split(",");
                _this.actionPower.text = actionPowerArr[0] + "/" + actionPowerArr[1];
                LocalGameData.actionPower = actionPowerArr;
                setTimeout(getActionPower, 1000);
            }));
        }, 1000);
        getActionPower();
        var getRain;
        setTimeout(getRain = function () {
            LGBlockChain.getData("getRain", [], Handler.create(_this, function (rainData) {
                _this.rain.text = Math.floor(rainData * 100) + "%";
                LocalGameData.Rain = rainData;
                setTimeout(getRain, 1000);
            }));
        }, 1000);
        getRain();
        var getIsRain;
        setTimeout(getIsRain = function () {
            LGBlockChain.getData("getIsRain", [], Handler.create(_this, function (isRainData) {
                if (LocalGameData.isGameOver) {
                    LocalGameData.isRain = false;
                    SoundManager.stopAllSound();
                    return;
                }
                LocalGameData.isRain = isRainData == 0 ? false : true;
                if (LocalGameData.isRain) {
                    SoundManager.playSound("asset/sound/rain.mp3");
                }
                else {
                    SoundManager.stopSound("asset/sound/rain.mp3");
                }
                setTimeout(getIsRain, 1000);
            }));
        }, 1000);
        getIsRain();
        var getPopulation;
        setTimeout(getPopulation = function () {
            LGBlockChain.getData("getPopulation", [], Handler.create(_this, function (populationData) {
                var populationArr = populationData.split(",");
                _this.population.text = populationArr[0] + "/" + populationArr[1];
                LocalGameData.population = populationArr;
                setTimeout(getPopulation, 1000);
            }));
        }, 1000);
        getPopulation();
        var getLeek;
        setTimeout(getLeek = function () {
            LGBlockChain.getData("getLeek", [], Handler.create(_this, function (leekData) {
                var leekArr = leekData.split(",");
                _this.leek.text = leekArr[0] + "/" + leekArr[1];
                LocalGameData.leek = leekArr;
                setTimeout(getLeek, 1000);
            }));
        }, 1000);
        getLeek();
        var getWater;
        setTimeout(getWater = function () {
            LGBlockChain.getData("getWater", [], Handler.create(_this, function (waterData) {
                var waterArr = waterData.split(",");
                _this.water.text = waterArr[0] + "/" + waterArr[1];
                LocalGameData.water = waterArr;
                setTimeout(getWater, 1000);
            }));
        }, 1000);
        getWater();
        var getWood;
        setTimeout(getWood = function () {
            LGBlockChain.getData("getWood", [], Handler.create(_this, function (woodData) {
                var woodArr = woodData.split(",");
                _this.wood.text = woodArr[0] + "/" + woodArr[1];
                LocalGameData.wood = woodArr;
                setTimeout(getWood, 1000);
            }));
        }, 1000);
        getWood();
        var getMonster;
        setTimeout(getMonster = function () {
            LGBlockChain.getData("getMonster", [], Handler.create(_this, function (monsterData) {
                _this.monsterHptext.text = monsterData + "/" + ((1 + LocalGameData.myDay) * (LocalGameData.myDay / 2));
                _this.monsterHP.value = monsterData / ((1 + LocalGameData.myDay) * (LocalGameData.myDay / 2));
                LocalGameData.monster = monsterData;
                setTimeout(getMonster, 1000);
            }));
        }, 1000);
        getMonster();
        var getStandGuard;
        setTimeout(getStandGuard = function () {
            LGBlockChain.getData("getStandGuard", [], Handler.create(_this, function (standGuardData) {
                LocalGameData.standGuard = standGuardData;
                _this.updateStandGuard();
                setTimeout(getStandGuard, 1000);
            }));
        }, 1000);
        getStandGuard();
        var getResistance;
        setTimeout(getResistance = function () {
            LGBlockChain.getData("getResistance", [], Handler.create(_this, function (resistanceData) {
                var resistanceArr = resistanceData.split(",");
                _this.wallHpText.text = resistanceArr[0] + "/" + resistanceArr[1];
                _this.wallHP.value = Number(resistanceArr[0]) / Number(resistanceArr[1]);
                LocalGameData.resistance = resistanceArr;
                setTimeout(getResistance, 1000);
            }));
        }, 1000);
        getResistance();
        var getBuildingGrade;
        setTimeout(getBuildingGrade = function () {
            LGBlockChain.getData("getBuildingGrade", [], Handler.create(_this, function (buildingGradeData) {
                var buildingGradeArr = buildingGradeData.split(",");
                LocalGameData.buildingGrade = buildingGradeArr;
                _this.updateInfo();
                setTimeout(getBuildingGrade, 1000);
            }));
        }, 1000);
        getBuildingGrade();
        var getEvents;
        setTimeout(getEvents = function () {
            LGBlockChain.getData("getEvents", [], Handler.create(_this, function (eventsData) {
                _this.show.text = "";
                var eventsArr = eventsData.split(",");
                for (var i = 1; i < 40; i++) {
                    if ((eventsArr.length - i) >= 0)
                        _this.show.text += eventsArr[eventsArr.length - i] + "\n";
                }
                setTimeout(getEvents, 1000);
            }));
        }, 1000);
        getEvents();
        var getIsDeathThreat;
        setTimeout(getIsDeathThreat = function () {
            if (LocalGameData.monster - LocalGameData.standGuard > Number(LocalGameData.resistance[0])) {
                _this.isDeathThreat = true;
                _this.addChild(_this.threat);
                _this.threat.setThreat(LanguageManager.gameObj["needRepair"]);
            }
            else if ((Number(LocalGameData.leek[0]) + (1 + (Number(LocalGameData.buildingGrade[0])))) < Number(LocalGameData.population[0])) {
                _this.isDeathThreat = true;
                _this.addChild(_this.threat);
                _this.threat.setThreat(LanguageManager.gameObj["attentionLeek"]);
            }
            else if ((Number(LocalGameData.water[0])) < Number(LocalGameData.population[0])) {
                _this.isDeathThreat = true;
                _this.addChild(_this.threat);
                _this.threat.setThreat(LanguageManager.gameObj["attentionWater"]);
            }
            else {
                _this.isDeathThreat = false;
                _this.removeChild(_this.threat);
            }
            _this.OpenWarning();
            setTimeout(getIsDeathThreat, 1000);
        }, 2000);
    };
    UIHall.prototype.OpenWarning = function () {
        if (LocalGameData.isGameOver) {
            this.warning.alpha = 0;
            return;
        }
        if (this.isDeathThreat) {
            var _this = this;
            Tween.to(this.warning, { alpha: 1 }, 500, Ease.strongOut, Handler.create(_this, function () {
                Tween.to(this.warning, { alpha: 0 }, 500, Ease.strongIn, Handler.create(_this, function () {
                }));
            }));
        }
    };
    UIHall.prototype.addFilter = function (e) {
        var box = e.target;
        var glowFilter = new GlowFilter("#ffffff", 5, 0, 0);
        box.filters = [glowFilter];
        box.add_MOUSEOUT(this.removeFilter, this);
    };
    UIHall.prototype.removeFilter = function (e) {
        var box = e.target;
        box.filters = [];
        box.remove_MOUSEOUT(this.removeFilter, this);
    };
    return UIHall;
}(SCUI.ui.Hall.hallUI));





var UIProcess = (function (_super) {
    __extends(UIProcess, _super);
    function UIProcess(manager) {
        _super.call(this);
        this.isLoading = false;
        this.manager = manager;
        this.initEvent();
    }
    UIProcess.prototype.initEvent = function () {
        this.cnBtn.add_CLICK(this.cnShow, this);
        this.enBtn.add_CLICK(this.enShow, this);
    };
    UIProcess.prototype.cnShow = function () {
        if (this.isLoading)
            return;
        this.isLoading = true;
        Config.curLanguageType = 0;
        LanguageManager.init(this.onloadLanguage, this);
    };
    UIProcess.prototype.enShow = function () {
        if (this.isLoading)
            return;
        this.isLoading = true;
        Config.curLanguageType = 1;
        LanguageManager.init(this.onloadLanguage, this);
    };
    UIProcess.prototype.onloadLanguage = function () {
        this.isLoading = false;
        LogicManager.isSelectedLanguage = true;
        Tween.to(this, { alpha: 0 }, 300, null, new Handler(this, function () {
            this.manager.addHall();
        }));
    };
    return UIProcess;
}(SCUI.ui.Hall.ProcessViewUI));





var UIAirdrop = (function (_super) {
    __extends(UIAirdrop, _super);
    function UIAirdrop(uiBox) {
        _super.call(this);
        this.parentBox = uiBox;
        this.init();
    }
    UIAirdrop.prototype.init = function () {
        this.tips = new UITips(this.parentBox, 3);
        this.resources.add_CLICK(this.onResources, this);
        this.support.add_CLICK(this.onSupport, this);
        this.closeBtn.add_CLICK(this.onClose, this);
    };
    UIAirdrop.prototype.onResources = function (e) {
        this.parentBox.addChild(this.tips);
        this.tips.setStyle(LanguageManager.gameObj["asset"]);
        this.tips.setContent(LanguageManager.gameObj["isGetAsset"]);
    };
    UIAirdrop.prototype.onSupport = function (e) {
        this.parentBox.addChild(this.tips);
        this.tips.setStyle(LanguageManager.gameObj["support"]);
        this.tips.setContent(LanguageManager.gameObj["isGetSupport"]);
    };
    UIAirdrop.prototype.onOpen = function () {
        this.parentBox.addChild(this);
    };
    UIAirdrop.prototype.onClose = function (e) {
        this.parentBox.removeChild(this);
    };
    return UIAirdrop;
}(SCUI.ui.Popup.airdropUI));





var UIWarning = (function (_super) {
    __extends(UIWarning, _super);
    function UIWarning(logic) {
        if (logic === void 0) { logic = null; }
        _super.call(this);
        if (logic != null) {
            this.logic = logic;
        }
        this.init();
    }
    UIWarning.prototype.init = function () {
        this.confirm.add_CLICK(this.onConfirm, this);
    };
    UIWarning.prototype.onConfirm = function (e) {
        this.removeThis();
        if (this.funBack != null) {
            this.funBack();
            this.funBack = null;
            return;
        }
        if (LanguageManager.gameObj) {
            if (this.warn.text == LanguageManager.gameObj["gameOver"]) {
                this.logic.addLogin();
            }
        }
    };
    UIWarning.prototype.setContent = function (str) {
        this.warn.text = str;
    };
    UIWarning.prototype.setFunBack = function (fun) {
        if (fun === void 0) { fun = null; }
        this.funBack = fun;
    };
    UIWarning.prototype.removeThis = function () {
        this.removeSelf();
    };
    return UIWarning;
}(SCUI.ui.Popup.warningUI));





var UITips = (function (_super) {
    __extends(UITips, _super);
    function UITips(uiBox, mode, hall) {
        if (hall === void 0) { hall = null; }
        _super.call(this);
        this.mode = mode;
        this.parentBox = uiBox;
        this.hall = hall;
        this.init();
    }
    UITips.prototype.init = function () {
        this.warn = new UIWarning();
        this.closeBtn.add_CLICK(this.onClose, this);
        this.confirm.add_CLICK(this.onConfirm, this);
        this.cancel.add_CLICK(this.onCancel, this);
    };
    UITips.prototype.onConfirm = function (e) {
        var num;
        if (this.mode == 0) {
            if (this.style == LanguageManager.gameObj["serach"]) {
                if (Number(LocalGameData.actionPower[0]) >= 2) {
                    num = Number(LocalGameData.actionPower[0]);
                    num -= 2;
                    LocalGameData.actionPower[0] = String(num);
                    LGBlockChain.setData("search", []);
                }
                else {
                    this.parentBox.addChild(this.warn);
                    this.warn.setContent(LanguageManager.gameObj["sureEnoughAction"]);
                }
            }
            else if (this.style == LanguageManager.gameObj["repair"]) {
                LGBlockChain.setData("repair", []);
            }
            else if (this.style == LanguageManager.gameObj["nextday"]) {
                this.hall.openPass();
                LGBlockChain.setData("nextDay", []);
            }
        }
        else if (this.mode == 1) {
            if (this.style == LanguageManager.gameObj["rain"]) {
                if (Number(LocalGameData.actionPower[0]) >= 1) {
                    num = Number(LocalGameData.actionPower[0]);
                    num -= 1;
                    LocalGameData.actionPower[0] = String(num);
                    LGBlockChain.setData("pray", []);
                }
                else {
                    this.parentBox.addChild(this.warn);
                    this.warn.setContent(LanguageManager.gameObj["sureEnoughAction"]);
                }
            }
        }
        else if (this.mode == 2) {
        }
        else if (this.mode == 3) {
            if (this.style == LanguageManager.gameObj["asset"]) {
                if (Number(LocalGameData.actionPower[0]) >= 1) {
                    num = Number(LocalGameData.actionPower[0]);
                    num -= 1;
                    LocalGameData.actionPower[0] = String(num);
                    LGBlockChain.setData("resources", []);
                }
                else {
                    this.parentBox.addChild(this.warn);
                    this.warn.setContent(LanguageManager.gameObj["sureEnoughAction"]);
                }
            }
            else if (this.style == LanguageManager.gameObj["support"]) {
                if (Number(LocalGameData.actionPower[0]) >= 1) {
                    num = Number(LocalGameData.actionPower[0]);
                    num -= 1;
                    LocalGameData.actionPower[0] = String(num);
                    LGBlockChain.setData("support", []);
                }
                else {
                    this.parentBox.addChild(this.warn);
                    this.warn.setContent(LanguageManager.gameObj["sureEnoughAction"]);
                }
            }
        }
        this.onClose(null);
    };
    UITips.prototype.onCancel = function (e) {
        this.parent.removeChild(this);
    };
    UITips.prototype.setStyle = function (style) {
        this.style = style;
    };
    UITips.prototype.setContent = function (str) {
        this.content.text = str;
    };
    UITips.prototype.onClose = function (e) {
        this.parent.removeChild(this);
    };
    return UITips;
}(SCUI.ui.Popup.tipsUI));





var UIEmergencies = (function (_super) {
    __extends(UIEmergencies, _super);
    function UIEmergencies(uiBox) {
        _super.call(this);
        this.parentBox = uiBox;
        this.init();
    }
    UIEmergencies.prototype.init = function () {
        this.tips = new UITips(this.parentBox, 2);
        this.slider.on("change", this, this.onChange);
        this.closeBtn.add_CLICK(this.onClose, this);
        this.good.add_CLICK(this.onGood, this);
        this.bad.add_CLICK(this.onBad, this);
    };
    UIEmergencies.prototype.onChange = function (e) {
        this.quota.text = String(this.slider.value);
        UIEmergencies.value = this.slider.value;
    };
    UIEmergencies.prototype.onGood = function (e) {
        this.parentBox.addChild(this.tips);
        this.tips.setStyle("利好");
        this.tips.setContent("是否支付" + this.slider.value + "个QTUM发出利好事件？");
    };
    UIEmergencies.prototype.onBad = function (e) {
        this.parentBox.addChild(this.tips);
        this.tips.setStyle("利空");
        this.tips.setContent("是否支付" + this.slider.value + "个QTUM发出利空事件？");
    };
    UIEmergencies.prototype.onOpen = function () {
        this.slider.value = 0.01;
        UIEmergencies.value = this.slider.value;
        this.parentBox.addChild(this);
    };
    UIEmergencies.prototype.onClose = function (e) {
        this.parentBox.removeChild(this);
    };
    return UIEmergencies;
}(SCUI.ui.Popup.emergenciesUI));





var ResidentData = (function (_super) {
    __extends(ResidentData, _super);
    function ResidentData() {
        _super.call(this);
    }
    return ResidentData;
}(ListItemData));
function main() {
    os.init(1400, 800);
    stage.scaleMode = "showall";
    stage.alignH = "center";
    stage.alignV = "middle";
    loader.load("asset/json/game/comp.json", Handler.create(this, onLoaded), null, Loader.ATLAS);
}
function onLoaded() {
    initEffect();
}
function initEffect() {
    Effect.init(Handler.create(this, function () {
        new LogicManager();
    }));
}
